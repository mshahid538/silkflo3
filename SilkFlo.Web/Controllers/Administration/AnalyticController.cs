/*********************************************************
       Code Generated By  .  .  .  .  Delaney's ScriptBot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Template Name.  .  .  .  .  .  Project Green 3.0
       Template Version.  .  .  .  .  20210407 014
       Author .  .  .  .  .  .  .  .  Delaney

                      ,        ,--,_
                       \ _ ___/ /\|
                       ( )__, )
                      |/_  '--,
                        \ `  / '

 *********************************************************/

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Linq;
using System;
using System.Threading.Tasks;
using SilkFlo.Data.Core;

namespace SilkFlo.Web.Controllers.Administration
{
    public partial class AnalyticController : Abstract
    {
        public AnalyticController(IUnitOfWork unitOfWork,
                                  Services.ViewToString viewToString,
                                  IAuthorizationService authorisation) : base(unitOfWork, viewToString, authorisation) { }


        [HttpPost("/api/analytic/post")]
        public async void Post([FromBody] Models.Analytic model)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(model.URL)
                 || string.IsNullOrWhiteSpace(model.UserTracker)
                 || string.IsNullOrWhiteSpace(model.SessionTracker))
                    return;

                model.UserId = GetUserId();
                model.Date = DateTime.Now;
                await _unitOfWork.AddAsync(model.GetCore());
            }
            catch
            {
                // ignored
            }
        }
        [HttpGet("/Administration/Analytic")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Index()
        {
            try
            {
                IEnumerable<Data.Core.Domain.Analytic> cores;

                cores = (await _unitOfWork.Analytics
                                         .GetAllAsync())
                                         .ToArray();

                await _unitOfWork.Users.GetUserForAsync(cores);

                var models = new List<Models.Analytic>();

                if(cores != null)
                {
                    cores = cores.OrderBy(m => m.Date)
                                 .ThenBy(m => m.User?.ToString());

                    foreach(var core in cores)
                    {
                        var model = new Models.Analytic(core);
                        ApplyColour(model);
                        models.Add(model);
                    }
                }

                var summary = new Models.Summary<Models.Analytic>
                {
                    Models = models,
                    Count = models.Count,
                };

                return View("/Views/Administration/Analytic/Index.cshtml", summary);
            }
            catch (Exception ex)
            {
                _unitOfWork.Log(ex);

                var summary = new Models.Summary<Models.Analytic>
                {
                    Models = null,
                    Count = 0,
                };

                ModelState.AddModelError(
                        "Error",
                        Models.Log.Message_DatabaseErrorFetchList);

                return View("/Views/Administration/Analytic/Index.cshtml", summary);
            }
        }
        [HttpGet("/Administration/Analytic/Delete/{id}")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Delete (string id)
        {
            if (id == null)
                return Redirect("/Administration/analytic");

            var analytic = await _unitOfWork.Analytics.GetAsync(id);

            if (analytic == null)
                return Redirect("/Administration/Analytic");
            else
            {
                await _unitOfWork.Users.GetUserForAsync(analytic);

                if (analytic.CreatedById != null)
                    analytic.CreatedBy = await _unitOfWork.Users.GetAsync(analytic.CreatedById);

                if (analytic.UpdatedById != null)
                    analytic.UpdatedBy = await _unitOfWork.Users.GetAsync(analytic.UpdatedById);

                var model = new Models.Analytic(analytic);

                return View("/Views/Administration/Analytic/delete.cshtml", model);
            }
        }
        [HttpPost("/Administration/Analytic/Delete")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Delete(Models.Analytic model)
        {
            if (model == null)
                return Redirect("/Administration/Analytic");


            var userId = GetUserId();

            if (userId == null)
            {
                ModelState.AddModelError("Error",
                                         "UserId is missing.");

                return View("/Views/Administration/Analytic/Delete.cshtml", model);
            }


            if (model.Id == null)
            {
                var message = "[POST] The primary key ID is missing.";

                ModelState.AddModelError("Error",
                                         message);

                _unitOfWork.Log(message,
                                Severity.Warning);

                await _unitOfWork.CompleteAsync();

                return View("/Views/Administration/Analytic/Delete.cshtml", model);
            }


            try
            {
                await _unitOfWork.Analytics
                                 .RemoveAsync(model.Id);

                await _unitOfWork.CompleteAsync();

                return Redirect(
                    "/Administration/Analytic");
            }
            catch (ChildDependencyException ex)
            {
                ModelState.AddModelError("Error",
                                         ex.Message);
                return View("/Views/Administration/Analytic/Delete.cshtml", model);
            }
            catch (NotFoundException ex)
            {
                ModelState.AddModelError("Error",
                                         ex.Message);
                return View("/Views/Administration/Analytic/Delete.cshtml", model);
            }
            catch (Exception ex)
            {
                ModelState.AddModelError("Error",
                                         "Cannot delete the Analytic.");

                _unitOfWork.Log(ex);
                await _unitOfWork.CompleteAsync();
                return View("/Views/Administration/Analytic/Delete.cshtml", model);
            }
        }

        [HttpGet("/Administration/Analytic/Edit/{id}")]
        [HttpGet("/Administration/Analytic/Edit")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Edit(string id)
        {
            Data.Core.Domain.Analytic analytic;

            if (string.IsNullOrWhiteSpace(id))
            {
                analytic = new Data.Core.Domain.Analytic
                {
                    Id = Guid.NewGuid().ToString(),
                    Date = DateTime.Now
                };
            }
            else
            {
                analytic = await _unitOfWork.Analytics.GetAsync(id);

                if (analytic == null)
                    return Redirect(
                        "/Administration/Analytic");
                await _unitOfWork.Users.GetUserForAsync(analytic);

            }

            var model = new Models.Analytic(analytic);
            await model.GetCreatedAndUpdated(_unitOfWork);

            var coreUsers = await _unitOfWork.Users.GetAllAsync();
            model.Users.Add(new Models.User{ DisplayText = "Select..." });
            model.Users.AddRange(Models.User.Create(coreUsers));

            return View("/Views/Administration/Analytic/Edit.cshtml", model);
        }


        [HttpPost("/Administration/Analytic/Edit")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Edit(Models.Analytic model)
        {
            try
            {
                // Get the userId
                var userId = GetUserId();


                // Is the userId present.
                // If not return to view.                
                if (userId == null)
                {
                    ModelState.AddModelError(
                            "Error",
                            "userId is missing.");

                    return View("/Views/Administration/Analytic/Edit.cshtml", model);
                }


                // Is the model valid?
                // If not return to view.
                bool isValid = Validate(_unitOfWork, model);
                if (!isValid)
                {
                    // Get parent: User -> User
                    await _unitOfWork.Users.GetUserForAsync(model.GetCore());
                    model.User =
                        model.GetCore().User == null ?
                            null :
                            new Models.User(model.GetCore().User);

                    // Get list of potential parents: User -> User
                    var coreUsers = await _unitOfWork.Users.GetAllAsync();
                    model.Users.Add(new Models.User{ DisplayText = "<Empty>" });
                    foreach (var core in coreUsers)
                        model.Users.Add(new Models.User(core));


                    return View("/Views/Administration/Analytic/Edit.cshtml", model);
                }


                // Process the forms content.
                await _unitOfWork.Analytics.AddAsync(model.GetCore());


                if(await _unitOfWork.CompleteAsync() == DataStoreResult.Success)
                    return Redirect(
                        "/Administration/Analytic");

                return View("/Views/Administration/Analytic/Edit.cshtml", model);
            }
            catch (Exception ex)
            {
                _unitOfWork.Log(ex);

                ModelState.AddModelError(
                    "Error",
                    Models.Log.Message_CouldNotSave);

                return View("/Views/Administration/Analytic/Edit.cshtml", model);
            }
        }

        [HttpPost("/Administration/Analytic/Cancel")]
        public IActionResult Cancel()
        {
            return Redirect(
                "/Administration/Analytic");
        }

        [HttpDelete("/api/analytic/clearAll")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> ClearAll()
        {
            try
            {
                var userId = GetUserId();

                if(userId == null)
                    return Redirect(
                        "/Administration/Analytic");

                var analytics = (await _unitOfWork.Analytics.GetAllAsync()).ToList();
                await _unitOfWork.Analytics.RemoveRangeAsync(analytics);
                await _unitOfWork.CompleteAsync();

                return new OkResult();
            }
            catch
            {
                return new BadRequestResult();
            }
        }

        private readonly Dictionary<string, string> _colours = new();

        private void ApplyColour(Models.Analytic model)
        {
            var colour = model.UserColour;

            if (string.IsNullOrWhiteSpace(colour))
            {
                try
                {
                    colour = _colours[model.UserTracker];
                }
                catch
                {
                    // ignored
                }

                if (string.IsNullOrWhiteSpace(colour))
                {
                    var random = new Random();
                    const int min = 1;
                    const int max = 30;
                    var hex1 = (random.Next(min, max) * 5 + 100).ToString("X");
                    var hex2 = (random.Next(min, max) * 5 + 100).ToString("X");
                    var hex3 = (random.Next(min, max) * 5 + 100).ToString("X");
                    colour = "color: #" + hex1 + hex2 + hex3 + ";";

                    _colours.Add(model.UserTracker, colour);
                }

                model.UserColour = colour;
            }
            else
            {
                // Is the colour in the short list
                var colourTest = "";
                try
                {
                    colourTest = _colours[model.UserTracker];
                }
                catch
                {
                    // ignored
                }

                if (string.IsNullOrWhiteSpace(colourTest))
                    _colours.Add(model.UserTracker, colour);
            }
        }
    }
}