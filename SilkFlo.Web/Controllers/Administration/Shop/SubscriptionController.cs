/*********************************************************
       Code Generated By  .  .  .  .  Delaney's ScriptBot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Template Name.  .  .  .  .  .  Project Green 3.0
       Template Version.  .  .  .  .  20210407 014
       Author .  .  .  .  .  .  .  .  Delaney

                      ,        ,--,_
                       \ _ ___/ /\|
                       ( )__, )
                      |/_  '--,
                        \ `  / '

 *********************************************************/

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Linq;
using System;
using System.Threading.Tasks;
using SilkFlo.Data.Core;

namespace SilkFlo.Web.Controllers.Administration.Shop
{
    public partial class SubscriptionController : Abstract
    {
        public SubscriptionController(IUnitOfWork unitOfWork,
                                  Services.ViewToString viewToString,
                                  IAuthorizationService authorisation) : base(unitOfWork, viewToString, authorisation) { }


        [HttpGet("/Administration/Shop/Subscription")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Index()
        {
            try
            {
                IEnumerable<Data.Core.Domain.Shop.Subscription> cores;

                cores = (await _unitOfWork.ShopSubscriptions
                                         .GetAllAsync())
                                         .ToArray();

                await _unitOfWork.ShopPrices.GetPriceForAsync(cores);
                await _unitOfWork.BusinessClients.GetTenantForAsync(cores);

                var models = new List<Models.Shop.Subscription>();

                if(cores != null)
                {
                    cores = cores.OrderBy(m => m.DateStart);

                    foreach(var core in cores)
                    {
                        var model = new Models.Shop.Subscription(core);
                        models.Add(model);
                    }
                }

                var summary = new Models.Summary<Models.Shop.Subscription>
                {
                    Models = models,
                    Count = models.Count,
                };

                return View("/Views/Administration/Shop/Subscription/Index.cshtml", summary);
            }
            catch (Exception ex)
            {
                _unitOfWork.Log(ex);

                var summary = new Models.Summary<Models.Shop.Subscription>
                {
                    Models = null,
                    Count = 0,
                };

                ModelState.AddModelError(
                        "Error",
                        Models.Log.Message_DatabaseErrorFetchList);

                return View("/Views/Administration/Shop/Subscription/Index.cshtml", summary);
            }
        }
        [HttpGet("/Administration/Shop/Subscription/Delete/{id}")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Delete (string id)
        {
            if (id == null)
                return Redirect("/Administration/shop/subscription");

            var subscription = await _unitOfWork.ShopSubscriptions.GetAsync(id);

            if (subscription == null)
                return Redirect("/Administration/Shop/Subscription");
            else
            {
                await _unitOfWork.ShopDiscounts.GetAgencyDiscountForAsync(subscription);
                await _unitOfWork.BusinessClients.GetAgencyForAsync(subscription);
                await _unitOfWork.SharedClientTypes.GetAgencyTypeForAsync(subscription);
                await _unitOfWork.ShopCoupons.GetCouponForAsync(subscription);
                await _unitOfWork.ShopPrices.GetPriceForAsync(subscription);
                await _unitOfWork.BusinessClients.GetTenantForAsync(subscription);

                if (subscription.CreatedById != null)
                    subscription.CreatedBy = await _unitOfWork.Users.GetAsync(subscription.CreatedById);

                if (subscription.UpdatedById != null)
                    subscription.UpdatedBy = await _unitOfWork.Users.GetAsync(subscription.UpdatedById);

                var model = new Models.Shop.Subscription(subscription);

                return View("/Views/Administration/Shop/Subscription/delete.cshtml", model);
            }
        }
        [HttpPost("/Administration/Shop/Subscription/Delete")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Delete(Models.Shop.Subscription model)
        {
            if (model == null)
                return Redirect("/Administration/Shop/Subscription");


            var userId = GetUserId();

            if (userId == null)
            {
                ModelState.AddModelError("Error",
                                         "UserId is missing.");

                return View("/Views/Administration/Shop/Subscription/Delete.cshtml", model);
            }


            if (model.Id == null)
            {
                var message = "[POST] The primary key ID is missing.";

                ModelState.AddModelError("Error",
                                         message);

                _unitOfWork.Log(message,
                                Severity.Warning);

                await _unitOfWork.CompleteAsync();

                return View("/Views/Administration/Shop/Subscription/Delete.cshtml", model);
            }


            try
            {
                await _unitOfWork.ShopSubscriptions
                                 .RemoveAsync(model.Id);

                await _unitOfWork.CompleteAsync();

                return Redirect(
                    "/Administration/Shop/Subscription");
            }
            catch (ChildDependencyException ex)
            {
                ModelState.AddModelError("Error",
                                         ex.Message);
                return View("/Views/Administration/Shop/Subscription/Delete.cshtml", model);
            }
            catch (NotFoundException ex)
            {
                ModelState.AddModelError("Error",
                                         ex.Message);
                return View("/Views/Administration/Shop/Subscription/Delete.cshtml", model);
            }
            catch (Exception ex)
            {
                ModelState.AddModelError("Error",
                                         "Cannot delete the Subscription.");

                _unitOfWork.Log(ex);
                await _unitOfWork.CompleteAsync();
                return View("/Views/Administration/Shop/Subscription/Delete.cshtml", model);
            }
        }

        [HttpGet("/Administration/Shop/Subscription/Edit/{id}")]
        [HttpGet("/Administration/Shop/Subscription/Edit")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Edit(string id)
        {
            Data.Core.Domain.Shop.Subscription subscription;

            if (string.IsNullOrWhiteSpace(id))
            {
                subscription = new Data.Core.Domain.Shop.Subscription
                {
                    Id = Guid.NewGuid().ToString(),
                    DateStart = DateTime.Now
                };
            }
            else
            {
                subscription = await _unitOfWork.ShopSubscriptions.GetAsync(id);

                if (subscription == null)
                    return Redirect(
                        "/Administration/Shop/Subscription");
                await _unitOfWork.ShopDiscounts.GetAgencyDiscountForAsync(subscription);
                await _unitOfWork.BusinessClients.GetAgencyForAsync(subscription);
                await _unitOfWork.SharedClientTypes.GetAgencyTypeForAsync(subscription);
                await _unitOfWork.ShopCoupons.GetCouponForAsync(subscription);
                await _unitOfWork.ShopPrices.GetPriceForAsync(subscription);
                await _unitOfWork.BusinessClients.GetTenantForAsync(subscription);

            }

            var model = new Models.Shop.Subscription(subscription);
            await model.GetCreatedAndUpdated(_unitOfWork);

            var coreAgencyDiscounts = await _unitOfWork.ShopDiscounts.GetAllAsync();
            model.AgencyDiscounts.Add(new Models.Shop.Discount{ DisplayText = "Select..." });
            model.AgencyDiscounts.AddRange(Models.Shop.Discount.Create(coreAgencyDiscounts));
            var coreAgencies = await _unitOfWork.BusinessClients.GetAllAsync();
            model.Agencies.Add(new Models.Business.Client{ DisplayText = "Select..." });
            model.Agencies.AddRange(Models.Business.Client.Create(coreAgencies));
            var coreAgencyTypes = await _unitOfWork.SharedClientTypes.GetAllAsync();
            model.AgencyTypes.Add(new Models.Shared.ClientType{ DisplayText = "Select..." });
            model.AgencyTypes.AddRange(Models.Shared.ClientType.Create(coreAgencyTypes));
            var coreCoupons = await _unitOfWork.ShopCoupons.GetAllAsync();
            model.Coupons.Add(new Models.Shop.Coupon{ DisplayText = "Select..." });
            model.Coupons.AddRange(Models.Shop.Coupon.Create(coreCoupons));
            var corePrices = await _unitOfWork.ShopPrices.GetAllAsync();
            model.Prices.Add(new Models.Shop.Price{ DisplayText = "Select..." });
            model.Prices.AddRange(Models.Shop.Price.Create(corePrices));
            var coreTenants = await _unitOfWork.BusinessClients.GetAllAsync();
            model.Tenants.AddRange(Models.Business.Client.Create(coreTenants));

            return View("/Views/Administration/Shop/Subscription/Edit.cshtml", model);
        }


        [HttpPost("/Administration/Shop/Subscription/Edit")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Edit(Models.Shop.Subscription model)
        {
            try
            {
                // Get the userId
                var userId = GetUserId();


                // Is the userId present.
                // If not return to view.                
                if (userId == null)
                {
                    ModelState.AddModelError(
                            "Error",
                            "userId is missing.");

                    return View("/Views/Administration/Shop/Subscription/Edit.cshtml", model);
                }


                // Is the model valid?
                // If not return to view.
                bool isValid = Validate(_unitOfWork, model);
                if (!isValid)
                {
                    // Get parent: Shop.Discount -> AgencyDiscount
                    await _unitOfWork.ShopDiscounts.GetAgencyDiscountForAsync(model.GetCore());
                    model.AgencyDiscount =
                        model.GetCore().AgencyDiscount == null ?
                            null :
                            new Models.Shop.Discount(model.GetCore().AgencyDiscount);


                    // Get parent: Business.Client -> Agency
                    await _unitOfWork.BusinessClients.GetAgencyForAsync(model.GetCore());
                    model.Agency =
                        model.GetCore().Agency == null ?
                            null :
                            new Models.Business.Client(model.GetCore().Agency);


                    // Get parent: Shared.ClientType -> AgencyType
                    await _unitOfWork.SharedClientTypes.GetAgencyTypeForAsync(model.GetCore());
                    model.AgencyType =
                        model.GetCore().AgencyType == null ?
                            null :
                            new Models.Shared.ClientType(model.GetCore().AgencyType);


                    // Get parent: Shop.Coupon -> Coupon
                    await _unitOfWork.ShopCoupons.GetCouponForAsync(model.GetCore());
                    model.Coupon =
                        model.GetCore().Coupon == null ?
                            null :
                            new Models.Shop.Coupon(model.GetCore().Coupon);


                    // Get parent: Shop.Price -> Price
                    await _unitOfWork.ShopPrices.GetPriceForAsync(model.GetCore());
                    model.Price =
                        model.GetCore().Price == null ?
                            null :
                            new Models.Shop.Price(model.GetCore().Price);


                    // Get parent: Business.Client -> Tenant
                    await _unitOfWork.BusinessClients.GetTenantForAsync(model.GetCore());
                    model.Tenant =
                        model.GetCore().Tenant == null ?
                            null :
                            new Models.Business.Client(model.GetCore().Tenant);

                    // Get list of potential parents: Shop.Discount -> AgencyDiscount
                    var coreAgencyDiscounts = await _unitOfWork.ShopDiscounts.GetAllAsync();
                    model.AgencyDiscounts.Add(new Models.Shop.Discount{ DisplayText = "<Empty>" });
                    foreach (var core in coreAgencyDiscounts)
                        model.AgencyDiscounts.Add(new Models.Shop.Discount(core));

                    // Get list of potential parents: Business.Client -> Agency
                    var coreAgencies = await _unitOfWork.BusinessClients.GetAllAsync();
                    model.Agencies.Add(new Models.Business.Client{ DisplayText = "<Empty>" });
                    foreach (var core in coreAgencies)
                        model.Agencies.Add(new Models.Business.Client(core));

                    // Get list of potential parents: Shared.ClientType -> AgencyType
                    var coreAgencyTypes = await _unitOfWork.SharedClientTypes.GetAllAsync();
                    model.AgencyTypes.Add(new Models.Shared.ClientType{ DisplayText = "<Empty>" });
                    foreach (var core in coreAgencyTypes)
                        model.AgencyTypes.Add(new Models.Shared.ClientType(core));

                    // Get list of potential parents: Shop.Coupon -> Coupon
                    var coreCoupons = await _unitOfWork.ShopCoupons.GetAllAsync();
                    model.Coupons.Add(new Models.Shop.Coupon{ DisplayText = "<Empty>" });
                    foreach (var core in coreCoupons)
                        model.Coupons.Add(new Models.Shop.Coupon(core));

                    // Get list of potential parents: Shop.Price -> Price
                    var corePrices = await _unitOfWork.ShopPrices.GetAllAsync();
                    model.Prices.Add(new Models.Shop.Price{ DisplayText = "<Empty>" });
                    foreach (var core in corePrices)
                        model.Prices.Add(new Models.Shop.Price(core));

                    // Get list of potential parents: Business.Client -> Tenant
                    var coreTenants = await _unitOfWork.BusinessClients.GetAllAsync();
                    foreach (var core in coreTenants)
                        model.Tenants.Add(new Models.Business.Client(core));


                    return View("/Views/Administration/Shop/Subscription/Edit.cshtml", model);
                }


                // Process the forms content.
                await _unitOfWork.ShopSubscriptions.AddAsync(model.GetCore());


                if(await _unitOfWork.CompleteAsync() == DataStoreResult.Success)
                    return Redirect(
                        "/Administration/Shop/Subscription");

                return View("/Views/Administration/Shop/Subscription/Edit.cshtml", model);
            }
            catch (Exception ex)
            {
                _unitOfWork.Log(ex);

                ModelState.AddModelError(
                    "Error",
                    Models.Log.Message_CouldNotSave);

                return View("/Views/Administration/Shop/Subscription/Edit.cshtml", model);
            }
        }

        [HttpPost("/Administration/Shop/Subscription/Cancel")]
        public IActionResult Cancel()
        {
            return Redirect(
                "/Administration/Shop/Subscription");
        }
    }
}