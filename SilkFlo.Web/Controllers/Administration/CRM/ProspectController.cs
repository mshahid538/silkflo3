/*********************************************************
       Code Generated By  .  .  .  .  Delaney's ScriptBot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Template Name.  .  .  .  .  .  Project Green 3.0
       Template Version.  .  .  .  .  20210407 014
       Author .  .  .  .  .  .  .  .  Delaney

                      ,        ,--,_
                       \ _ ___/ /\|
                       ( )__, )
                      |/_  '--,
                        \ `  / '

 *********************************************************/

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Linq;
using System;
using System.Threading.Tasks;
using SilkFlo.Data.Core;

namespace SilkFlo.Web.Controllers.Administration.CRM
{
    public partial class ProspectController : Abstract
    {
        public ProspectController(IUnitOfWork unitOfWork,
                                  Services.ViewToString viewToString,
                                  IAuthorizationService authorisation) : base(unitOfWork, viewToString, authorisation) { }


        [HttpGet("/Administration/CRM/Prospect")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Index()
        {
            try
            {
                IEnumerable<Data.Core.Domain.CRM.Prospect> cores;

                cores = (await _unitOfWork.CRMProspects
                                         .GetAllAsync())
                                         .ToArray();

                var models = new List<Models.CRM.Prospect>();

                if(cores != null)
                {
                    cores = cores.OrderBy(m => m.CompanyName)
                                 .ThenBy(m => m.FirstName)
                                 .ThenBy(m => m.LastName);

                    foreach(var core in cores)
                    {
                        var model = new Models.CRM.Prospect(core);
                        models.Add(model);
                    }
                }

                var summary = new Models.Summary<Models.CRM.Prospect>
                {
                    Models = models,
                    Count = models.Count,
                };

                return View("/Views/Administration/CRM/Prospect/Index.cshtml", summary);
            }
            catch (Exception ex)
            {
                _unitOfWork.Log(ex);

                var summary = new Models.Summary<Models.CRM.Prospect>
                {
                    Models = null,
                    Count = 0,
                };

                ModelState.AddModelError(
                        "Error",
                        Models.Log.Message_DatabaseErrorFetchList);

                return View("/Views/Administration/CRM/Prospect/Index.cshtml", summary);
            }
        }
        [HttpGet("/Administration/CRM/Prospect/Delete/{id}")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Delete (string id)
        {
            if (id == null)
                return Redirect("/Administration/cRM/prospect");

            var prospect = await _unitOfWork.CRMProspects.GetAsync(id);

            if (prospect == null)
                return Redirect("/Administration/CRM/Prospect");
            else
            {
                await _unitOfWork.SharedClientTypes.GetClientTypeForAsync(prospect);
                await _unitOfWork.CRMCompanySizes.GetCompanySizeForAsync(prospect);
                await _unitOfWork.SharedCountries.GetCountryForAsync(prospect);
                await _unitOfWork.CRMJobLevels.GetJobLevelForAsync(prospect);

                if (prospect.CreatedById != null)
                    prospect.CreatedBy = await _unitOfWork.Users.GetAsync(prospect.CreatedById);

                if (prospect.UpdatedById != null)
                    prospect.UpdatedBy = await _unitOfWork.Users.GetAsync(prospect.UpdatedById);

                var model = new Models.CRM.Prospect(prospect);

                return View("/Views/Administration/CRM/Prospect/delete.cshtml", model);
            }
        }
        [HttpPost("/Administration/CRM/Prospect/Delete")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Delete(Models.CRM.Prospect model)
        {
            if (model == null)
                return Redirect("/Administration/CRM/Prospect");


            var userId = GetUserId();

            if (userId == null)
            {
                ModelState.AddModelError("Error",
                                         "UserId is missing.");

                return View("/Views/Administration/CRM/Prospect/Delete.cshtml", model);
            }


            if (model.Id == null)
            {
                var message = "[POST] The primary key ID is missing.";

                ModelState.AddModelError("Error",
                                         message);

                _unitOfWork.Log(message,
                                Severity.Warning);

                await _unitOfWork.CompleteAsync();

                return View("/Views/Administration/CRM/Prospect/Delete.cshtml", model);
            }


            try
            {
                await _unitOfWork.CRMProspects
                                 .RemoveAsync(model.Id);

                await _unitOfWork.CompleteAsync();

                return Redirect(
                    "/Administration/CRM/Prospect");
            }
            catch (ChildDependencyException ex)
            {
                ModelState.AddModelError("Error",
                                         ex.Message);
                return View("/Views/Administration/CRM/Prospect/Delete.cshtml", model);
            }
            catch (NotFoundException ex)
            {
                ModelState.AddModelError("Error",
                                         ex.Message);
                return View("/Views/Administration/CRM/Prospect/Delete.cshtml", model);
            }
            catch (Exception ex)
            {
                ModelState.AddModelError("Error",
                                         "Cannot delete the Prospect.");

                _unitOfWork.Log(ex);
                await _unitOfWork.CompleteAsync();
                return View("/Views/Administration/CRM/Prospect/Delete.cshtml", model);
            }
        }

        [HttpGet("/Administration/CRM/Prospect/Edit/{id}")]
        [HttpGet("/Administration/CRM/Prospect/Edit")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Edit(string id)
        {
            Data.Core.Domain.CRM.Prospect prospect;

            if (string.IsNullOrWhiteSpace(id))
            {
                prospect = new Data.Core.Domain.CRM.Prospect
                {
                    Id = Guid.NewGuid().ToString(),
                };
            }
            else
            {
                prospect = await _unitOfWork.CRMProspects.GetAsync(id);

                if (prospect == null)
                    return Redirect(
                        "/Administration/CRM/Prospect");
                await _unitOfWork.SharedClientTypes.GetClientTypeForAsync(prospect);
                await _unitOfWork.CRMCompanySizes.GetCompanySizeForAsync(prospect);
                await _unitOfWork.SharedCountries.GetCountryForAsync(prospect);
                await _unitOfWork.CRMJobLevels.GetJobLevelForAsync(prospect);

            }

            var model = new Models.CRM.Prospect(prospect);
            await model.GetCreatedAndUpdated(_unitOfWork);

            var coreClientTypes = await _unitOfWork.SharedClientTypes.GetAllAsync();
            model.ClientTypes.AddRange(Models.Shared.ClientType.Create(coreClientTypes));
            var coreCompanySizes = await _unitOfWork.CRMCompanySizes.GetAllAsync();
            model.CompanySizes.AddRange(Models.CRM.CompanySize.Create(coreCompanySizes));
            var coreCountries = await _unitOfWork.SharedCountries.GetAllAsync();
            model.Countries.AddRange(Models.Shared.Country.Create(coreCountries));
            var coreJobLevels = await _unitOfWork.CRMJobLevels.GetAllAsync();
            model.JobLevels.AddRange(Models.CRM.JobLevel.Create(coreJobLevels));

            return View("/Views/Administration/CRM/Prospect/Edit.cshtml", model);
        }


        [HttpPost("/Administration/CRM/Prospect/Edit")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Edit(Models.CRM.Prospect model)
        {
            try
            {
                // Get the userId
                var userId = GetUserId();


                // Is the userId present.
                // If not return to view.                
                if (userId == null)
                {
                    ModelState.AddModelError(
                            "Error",
                            "userId is missing.");

                    return View("/Views/Administration/CRM/Prospect/Edit.cshtml", model);
                }


                // Is the model valid?
                // If not return to view.
                bool isValid = Validate(_unitOfWork, model);
                if (!isValid)
                {
                    // Get parent: Shared.ClientType -> ClientType
                    await _unitOfWork.SharedClientTypes.GetClientTypeForAsync(model.GetCore());
                    model.ClientType =
                        model.GetCore().ClientType == null ?
                            null :
                            new Models.Shared.ClientType(model.GetCore().ClientType);


                    // Get parent: CRM.CompanySize -> CompanySize
                    await _unitOfWork.CRMCompanySizes.GetCompanySizeForAsync(model.GetCore());
                    model.CompanySize =
                        model.GetCore().CompanySize == null ?
                            null :
                            new Models.CRM.CompanySize(model.GetCore().CompanySize);


                    // Get parent: Shared.Country -> Country
                    await _unitOfWork.SharedCountries.GetCountryForAsync(model.GetCore());
                    model.Country =
                        model.GetCore().Country == null ?
                            null :
                            new Models.Shared.Country(model.GetCore().Country);


                    // Get parent: CRM.JobLevel -> JobLevel
                    await _unitOfWork.CRMJobLevels.GetJobLevelForAsync(model.GetCore());
                    model.JobLevel =
                        model.GetCore().JobLevel == null ?
                            null :
                            new Models.CRM.JobLevel(model.GetCore().JobLevel);

                    // Get list of potential parents: Shared.ClientType -> ClientType
                    var coreClientTypes = await _unitOfWork.SharedClientTypes.GetAllAsync();
                    foreach (var core in coreClientTypes)
                        model.ClientTypes.Add(new Models.Shared.ClientType(core));

                    // Get list of potential parents: CRM.CompanySize -> CompanySize
                    var coreCompanySizes = await _unitOfWork.CRMCompanySizes.GetAllAsync();
                    foreach (var core in coreCompanySizes)
                        model.CompanySizes.Add(new Models.CRM.CompanySize(core));

                    // Get list of potential parents: Shared.Country -> Country
                    var coreCountries = await _unitOfWork.SharedCountries.GetAllAsync();
                    foreach (var core in coreCountries)
                        model.Countries.Add(new Models.Shared.Country(core));

                    // Get list of potential parents: CRM.JobLevel -> JobLevel
                    var coreJobLevels = await _unitOfWork.CRMJobLevels.GetAllAsync();
                    foreach (var core in coreJobLevels)
                        model.JobLevels.Add(new Models.CRM.JobLevel(core));


                    return View("/Views/Administration/CRM/Prospect/Edit.cshtml", model);
                }


                // Process the forms content.
                await _unitOfWork.CRMProspects.AddAsync(model.GetCore());


                if(await _unitOfWork.CompleteAsync() == DataStoreResult.Success)
                    return Redirect(
                        "/Administration/CRM/Prospect");

                return View("/Views/Administration/CRM/Prospect/Edit.cshtml", model);
            }
            catch (Exception ex)
            {
                _unitOfWork.Log(ex);

                ModelState.AddModelError(
                    "Error",
                    Models.Log.Message_CouldNotSave);

                return View("/Views/Administration/CRM/Prospect/Edit.cshtml", model);
            }
        }

        [HttpPost("/Administration/CRM/Prospect/Cancel")]
        public IActionResult Cancel()
        {
            return Redirect(
                "/Administration/CRM/Prospect");
        }
    }
}