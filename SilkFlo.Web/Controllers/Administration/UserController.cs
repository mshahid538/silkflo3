/*********************************************************
       Code Generated By  .  .  .  .  Delaney's ScriptBot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Template Name.  .  .  .  .  .  Project Green 3.0
       Template Version.  .  .  .  .  20210407 014
       Author .  .  .  .  .  .  .  .  Delaney

                      ,        ,--,_
                       \ _ ___/ /\|
                       ( )__, )
                      |/_  '--,
                        \ `  / '

 *********************************************************/

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Linq;
using System;
using System.Threading.Tasks;
using SilkFlo.Data.Core;

namespace SilkFlo.Web.Controllers.Administration
{
    public partial class UserController : Abstract
    {
        public UserController(IUnitOfWork unitOfWork,
                                  Services.ViewToString viewToString,
                                  IAuthorizationService authorisation) : base(unitOfWork, viewToString, authorisation) { }


        [HttpGet("/Administration/User")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Index()
        {
            try
            {
                IEnumerable<Data.Core.Domain.User> cores;

                cores = (await _unitOfWork.Users
                                         .GetAllAsync())
                                         .ToArray();

                await _unitOfWork.BusinessClients.GetClientForAsync(cores);

                var models = new List<Models.User>();

                if(cores != null)
                {
                    cores = cores.OrderBy(m => m.FirstName)
                                 .ThenBy(m => m.LastName);

                    foreach(var core in cores)
                    {
                        var model = new Models.User(core);
                        models.Add(model);
                    }
                }

                var summary = new Models.Summary<Models.User>
                {
                    Models = models,
                    Count = models.Count,
                };

                return View("/Views/Administration/User/Index.cshtml", summary);
            }
            catch (Exception ex)
            {
                _unitOfWork.Log(ex);

                var summary = new Models.Summary<Models.User>
                {
                    Models = null,
                    Count = 0,
                };

                ModelState.AddModelError(
                        "Error",
                        Models.Log.Message_DatabaseErrorFetchList);

                return View("/Views/Administration/User/Index.cshtml", summary);
            }
        }
        [HttpGet("/Administration/User/Delete/{id}")]
        [Authorize(Policy = Policy.Administrator)]
        [Authorize(Policy = Policy.DifferentUser)]
        public async Task<IActionResult> Delete (string id)
        {
            if (id == null)
                return Redirect("/Administration/user");

            var user = await _unitOfWork.Users.GetAsync(id);

            if (user == null)
                return Redirect("/Administration/User");
            else
            {
                await _unitOfWork.BusinessClients.GetClientForAsync(user);
                await _unitOfWork.BusinessDepartments.GetDepartmentForAsync(user);
                await _unitOfWork.BusinessLocations.GetLocationForAsync(user);
                await _unitOfWork.Users.GetManagerForAsync(user);

                if (user.CreatedById != null)
                    user.CreatedBy = await _unitOfWork.Users.GetAsync(user.CreatedById);

                if (user.UpdatedById != null)
                    user.UpdatedBy = await _unitOfWork.Users.GetAsync(user.UpdatedById);

                var model = new Models.User(user);

                return View("/Views/Administration/User/delete.cshtml", model);
            }
        }
        [HttpPost("/Administration/User/Delete")]
        [Authorize(Policy = Policy.Administrator)]
        [Authorize(Policy = Policy.DifferentUser)]
        public async Task<IActionResult> Delete(Models.User model)
        {
            if (model == null)
                return Redirect("/Administration/User");


            var userId = GetUserId();

            if (userId == null)
            {
                ModelState.AddModelError("Error",
                                         "UserId is missing.");

                return View("/Views/Administration/User/Delete.cshtml", model);
            }


            if (model.Id == null)
            {
                var message = "[POST] The primary key ID is missing.";

                ModelState.AddModelError("Error",
                                         message);

                _unitOfWork.Log(message,
                                Severity.Warning);

                await _unitOfWork.CompleteAsync();

                return View("/Views/Administration/User/Delete.cshtml", model);
            }


            try
            {
                await _unitOfWork.Users
                                 .RemoveAsync(model.Id);

                await _unitOfWork.CompleteAsync();

                return Redirect(
                    "/Administration/User");
            }
            catch (ChildDependencyException ex)
            {
                ModelState.AddModelError("Error",
                                         ex.Message);
                return View("/Views/Administration/User/Delete.cshtml", model);
            }
            catch (NotFoundException ex)
            {
                ModelState.AddModelError("Error",
                                         ex.Message);
                return View("/Views/Administration/User/Delete.cshtml", model);
            }
            catch (Exception ex)
            {
                ModelState.AddModelError("Error",
                                         "Cannot delete the User.");

                _unitOfWork.Log(ex);
                await _unitOfWork.CompleteAsync();
                return View("/Views/Administration/User/Delete.cshtml", model);
            }
        }

        [HttpGet("/Administration/User/Edit/{id}")]
        [HttpGet("/Administration/User/Edit")]
        [Authorize(Policy = Policy.Administrator)]
        [Authorize(Policy = Policy.DifferentUser)]
        public async Task<IActionResult> Edit(string id)
        {
            Data.Core.Domain.User user;

            if (string.IsNullOrWhiteSpace(id))
            {
                user = new Data.Core.Domain.User
                {
                    Id = Guid.NewGuid().ToString(),
                };
            }
            else
            {
                user = await _unitOfWork.Users.GetAsync(id);

                if (user == null)
                    return Redirect(
                        "/Administration/User");
                await _unitOfWork.BusinessClients.GetClientForAsync(user);
                await _unitOfWork.BusinessDepartments.GetDepartmentForAsync(user);
                await _unitOfWork.BusinessLocations.GetLocationForAsync(user);
                await _unitOfWork.Users.GetManagerForAsync(user);

            }

            var model = new Models.User(user);
            await model.GetCreatedAndUpdated(_unitOfWork);

            // Core parents and children for selector lists
            await GetAchievements_For_UserAchievementsAsync(model);

            await GetBadges_For_UserBadgesAsync(model);

            await GetRoles_For_UserRolesAsync(model);

            await GetClients_For_ManageTenantsAsync(model);

            await GetIdeas_For_FollowsAsync(model);

            await GetIdeas_For_VotesAsync(model);



            var coreClients = await _unitOfWork.BusinessClients.GetAllAsync();
            model.Clients.Add(new Models.Business.Client{ DisplayText = "Select..." });
            model.Clients.AddRange(Models.Business.Client.Create(coreClients));
            var coreDepartments = await _unitOfWork.BusinessDepartments.GetAllAsync();
            model.Departments.Add(new Models.Business.Department{ DisplayText = "Select..." });
            model.Departments.AddRange(Models.Business.Department.Create(coreDepartments));
            var coreLocations = await _unitOfWork.BusinessLocations.GetAllAsync();
            model.Locations.Add(new Models.Business.Location{ DisplayText = "Select..." });
            model.Locations.AddRange(Models.Business.Location.Create(coreLocations));
            var coreManagers = await _unitOfWork.Users.GetAllAsync();
            model.Managers.Add(new Models.User{ DisplayText = "Select..." });
            model.Managers.AddRange(Models.User.Create(coreManagers));

            return View("/Views/Administration/User/Edit.cshtml", model);
        }

        // Core parents and children for selector lists
        private async Task GetAchievements_For_UserAchievementsAsync(Models.User model)
        {
            var core = model.GetCore();

            await _unitOfWork.UserAchievements.GetForUserAsync(core);
            await _unitOfWork.SharedAchievements.GetAchievementForAsync(core.UserAchievements);

            var achievements = await _unitOfWork.SharedAchievements.GetAllAsync();

            foreach (var achievement in achievements)
            {
                var selector = new Models.Selector
                {
                    Id = achievement.Id,
                    Name = achievement.ToString()
                };
                
                model.AllAchievements_For_UserAchievements.Add(selector);

                foreach (var userAchievement in model.UserAchievements)
                    if (selector.Id == userAchievement.AchievementId)
                    {
                        selector.IsSelected = true;
                        break;
                    }
            }
        }

        private async Task GetBadges_For_UserBadgesAsync(Models.User model)
        {
            var core = model.GetCore();

            await _unitOfWork.UserBadges.GetForUserAsync(core);
            await _unitOfWork.SharedBadges.GetBadgeForAsync(core.UserBadges);

            var badges = await _unitOfWork.SharedBadges.GetAllAsync();

            foreach (var badge in badges)
            {
                var selector = new Models.Selector
                {
                    Id = badge.Id,
                    Name = badge.ToString()
                };
                
                model.AllBadges_For_UserBadges.Add(selector);

                foreach (var userBadge in model.UserBadges)
                    if (selector.Id == userBadge.BadgeId)
                    {
                        selector.IsSelected = true;
                        break;
                    }
            }
        }

        private async Task GetClients_For_ManageTenantsAsync(Models.User model)
        {
            var core = model.GetCore();

            await _unitOfWork.AgencyManageTenants.GetForUserAsync(core);
            await _unitOfWork.BusinessClients.GetTenantForAsync(core.ManageTenants);

            var clients = await _unitOfWork.BusinessClients.GetAllAsync();

            foreach (var client in clients)
            {
                var selector = new Models.Selector
                {
                    Id = client.Id,
                    Name = client.ToString()
                };
                
                model.AllClients_For_ManageTenants.Add(selector);

                foreach (var manageTenant in model.ManageTenants)
                    if (selector.Id == manageTenant.TenantId)
                    {
                        selector.IsSelected = true;
                        break;
                    }
            }
        }

        private async Task GetIdeas_For_FollowsAsync(Models.User model)
        {
            var core = model.GetCore();

            await _unitOfWork.BusinessFollows.GetForUserAsync(core);
            await _unitOfWork.BusinessIdeas.GetIdeaForAsync(core.Follows);

            var ideas = await _unitOfWork.BusinessIdeas.GetAllAsync();

            foreach (var idea in ideas)
            {
                var selector = new Models.Selector
                {
                    Id = idea.Id,
                    Name = idea.ToString()
                };
                
                model.AllIdeas_For_Follows.Add(selector);

                foreach (var follow in model.Follows)
                    if (selector.Id == follow.IdeaId)
                    {
                        selector.IsSelected = true;
                        break;
                    }
            }
        }

        private async Task GetIdeas_For_VotesAsync(Models.User model)
        {
            var core = model.GetCore();

            await _unitOfWork.BusinessVotes.GetForUserAsync(core);
            await _unitOfWork.BusinessIdeas.GetIdeaForAsync(core.Votes);

            var ideas = await _unitOfWork.BusinessIdeas.GetAllAsync();

            foreach (var idea in ideas)
            {
                var selector = new Models.Selector
                {
                    Id = idea.Id,
                    Name = idea.ToString()
                };
                
                model.AllIdeas_For_Votes.Add(selector);

                foreach (var vote in model.Votes)
                    if (selector.Id == vote.IdeaId)
                    {
                        selector.IsSelected = true;
                        break;
                    }
            }
        }



    // Core parents and children for selector lists
        private async Task GetRoles_For_UserRolesAsync(Models.User model)
        {
            var core = model.GetCore();

            await _unitOfWork.UserRoles.GetForUserAsync(core);
            await _unitOfWork.Roles.GetRoleForAsync(core.UserRoles);

            var roles = await _unitOfWork.Roles.GetAllAsync();

            foreach (var role in roles)
            {
                var selector = new Models.Selector
                {
                    Id = role.Id,
                    Name = role.ToString(),
                    Description = role.Description,
                };

                model.AllRoles_For_UserRoles.Add(selector);

                foreach (var userRole in model.UserRoles)
                    if (selector.Id == userRole.RoleId)
                    {
                        selector.IsSelected = true;
                        break;
                    }
            }
        }




        [HttpPost("/Administration/User/Edit")]
        [Authorize(Policy = Policy.Administrator)]
        [Authorize(Policy = Policy.DifferentUser)]
        public async Task<IActionResult> Edit(Models.User model)
        {
            try
            {
                // Get the userId
                var userId = GetUserId();


                // Is the userId present.
                // If not return to view.                
                if (userId == null)
                {
                    ModelState.AddModelError(
                            "Error",
                            "userId is missing.");

                    return View("/Views/Administration/User/Edit.cshtml", model);
                }


                // Is the model valid?
                // If not return to view.
                bool isValid = Validate(_unitOfWork, model);

                var feedback = new ViewModels.Feedback();
                feedback = await model.CheckUniqueAsync(_unitOfWork, feedback);
                if (!feedback.IsValid)
                {
                    isValid = false;
                    foreach (var feedbackElement in feedback.Elements)
                        model.Errors.Add(feedbackElement.Value);
                }

                if (!isValid)
                {
                    // Get parent: Business.Client -> Client
                    await _unitOfWork.BusinessClients.GetClientForAsync(model.GetCore());
                    model.Client =
                        model.GetCore().Client == null ?
                            null :
                            new Models.Business.Client(model.GetCore().Client);


                    // Get parent: Business.Department -> Department
                    await _unitOfWork.BusinessDepartments.GetDepartmentForAsync(model.GetCore());
                    model.Department =
                        model.GetCore().Department == null ?
                            null :
                            new Models.Business.Department(model.GetCore().Department);


                    // Get parent: Business.Location -> Location
                    await _unitOfWork.BusinessLocations.GetLocationForAsync(model.GetCore());
                    model.Location =
                        model.GetCore().Location == null ?
                            null :
                            new Models.Business.Location(model.GetCore().Location);


                    // Get parent: User -> Manager
                    await _unitOfWork.Users.GetManagerForAsync(model.GetCore());
                    model.Manager =
                        model.GetCore().Manager == null ?
                            null :
                            new Models.User(model.GetCore().Manager);

                    // Get list of potential parents: Business.Client -> Client
                    var coreClients = await _unitOfWork.BusinessClients.GetAllAsync();
                    model.Clients.Add(new Models.Business.Client{ DisplayText = "<Empty>" });
                    foreach (var core in coreClients)
                        model.Clients.Add(new Models.Business.Client(core));

                    // Get list of potential parents: Business.Department -> Department
                    var coreDepartments = await _unitOfWork.BusinessDepartments.GetAllAsync();
                    model.Departments.Add(new Models.Business.Department{ DisplayText = "<Empty>" });
                    foreach (var core in coreDepartments)
                        model.Departments.Add(new Models.Business.Department(core));

                    // Get list of potential parents: Business.Location -> Location
                    var coreLocations = await _unitOfWork.BusinessLocations.GetAllAsync();
                    model.Locations.Add(new Models.Business.Location{ DisplayText = "<Empty>" });
                    foreach (var core in coreLocations)
                        model.Locations.Add(new Models.Business.Location(core));

                    // Get list of potential parents: User -> Manager
                    var coreManagers = await _unitOfWork.Users.GetAllAsync();
                    model.Managers.Add(new Models.User{ DisplayText = "<Empty>" });
                    foreach (var core in coreManagers)
                        model.Managers.Add(new Models.User(core));


                    return View("/Views/Administration/User/Edit.cshtml", model);
                }
                   
                // Do the passwords match?
                // If not return to view.
                if(!string.IsNullOrEmpty(model.Password)
                || !string.IsNullOrEmpty(model.ConfirmPassword))
                {
                    if(model.IsMatched())
                        model.PasswordHash = _unitOfWork.GeneratePasswordHash(model.Password);
                    else
                    {
                        ModelState.AddModelError("Error",
                                                 "The password and confirmation password do not match.");
                        return View("/Views/Administration/User/Edit.cshtml", model);
                    }
                }



                // Process the forms content.
                await _unitOfWork.Users.AddAsync(model.GetCore());


               await ProcessManyToMany_Achievements_For_UserAchievements(model);

               await ProcessManyToMany_Badges_For_UserBadges(model);

               await ProcessManyToMany_Roles_For_UserRoles(model);

               await ProcessManyToMany_Clients_For_ManageTenants(model);

               await ProcessManyToMany_Ideas_For_Follows(model);

               await ProcessManyToMany_Ideas_For_Votes(model);


                if(await _unitOfWork.CompleteAsync() == DataStoreResult.Success)
                    return Redirect(
                        "/Administration/User");

                return View("/Views/Administration/User/Edit.cshtml", model);
            }
            catch (Exception ex)
            {
                _unitOfWork.Log(ex);

                ModelState.AddModelError(
                    "Error",
                    Models.Log.Message_CouldNotSave);

                return View("/Views/Administration/User/Edit.cshtml", model);
            }
        }

        private async Task ProcessManyToMany_Achievements_For_UserAchievements(Models.User model)
        {
            try
            {
                // Get the selected achievements for Achievements
                var selectedAchievements_For_UserAchievements = model.AllAchievements_For_UserAchievements.Where(x => x.IsSelected);

                // Un-assign achievements_For_UserAchievements from user
                await _unitOfWork.UserAchievements.GetForUserAsync(model.GetCore());


                var userAchievementsLength = model.GetCore().UserAchievements.Count();
                for (var i = userAchievementsLength - 1; i >= 0; i--)
                {
                    var userAchievement = model.GetCore().UserAchievements[i];

                    await _unitOfWork.UserAchievements
                                     .RemoveAsync(userAchievement);

                    model.GetCore()
                         .UserAchievements
                         .Remove(userAchievement);
                }

                // Assign achievements_For_UserAchievements to user
                var achievements = await _unitOfWork.SharedAchievements.GetAllAsync();
                int index = 0;
                foreach (var achievement in achievements)
                {
                    var userAchievement = model.AllAchievements_For_UserAchievements[index];
                    if(userAchievement.IsSelected)
                    {
                        await _unitOfWork.UserAchievements
                                         .AddAsync(new Data.Core.Domain.UserAchievement
                                            {
                                                User = model.GetCore(),
                                                AchievementId = achievement.Id
                                            });
                    }

                    index++;
                }
            }
            catch
            {
                throw;
            }
        }

        private async Task ProcessManyToMany_Badges_For_UserBadges(Models.User model)
        {
            try
            {
                // Get the selected badges for Badges
                var selectedBadges_For_UserBadges = model.AllBadges_For_UserBadges.Where(x => x.IsSelected);

                // Un-assign badges_For_UserBadges from user
                await _unitOfWork.UserBadges.GetForUserAsync(model.GetCore());


                var userBadgesLength = model.GetCore().UserBadges.Count();
                for (var i = userBadgesLength - 1; i >= 0; i--)
                {
                    var userBadge = model.GetCore().UserBadges[i];

                    await _unitOfWork.UserBadges
                                     .RemoveAsync(userBadge);

                    model.GetCore()
                         .UserBadges
                         .Remove(userBadge);
                }

                // Assign badges_For_UserBadges to user
                var badges = await _unitOfWork.SharedBadges.GetAllAsync();
                int index = 0;
                foreach (var badge in badges)
                {
                    var userBadge = model.AllBadges_For_UserBadges[index];
                    if(userBadge.IsSelected)
                    {
                        await _unitOfWork.UserBadges
                                         .AddAsync(new Data.Core.Domain.UserBadge
                                            {
                                                User = model.GetCore(),
                                                BadgeId = badge.Id
                                            });
                    }

                    index++;
                }
            }
            catch
            {
                throw;
            }
        }

        private async Task ProcessManyToMany_Roles_For_UserRoles(Models.User model)
        {
            try
            {
                // Get the selected roles for Roles
                var selectedRoles_For_UserRoles = model.AllRoles_For_UserRoles.Where(x => x.IsSelected);

                // Un-assign roles_For_UserRoles from user
                await _unitOfWork.UserRoles.GetForUserAsync(model.GetCore());


                var userRolesLength = model.GetCore().UserRoles.Count();
                for (var i = userRolesLength - 1; i >= 0; i--)
                {
                    var userRole = model.GetCore().UserRoles[i];

                    await _unitOfWork.UserRoles
                                     .RemoveAsync(userRole);

                    model.GetCore()
                         .UserRoles
                         .Remove(userRole);
                }

                // Assign roles_For_UserRoles to user
                var roles = await _unitOfWork.Roles.GetAllAsync();
                int index = 0;
                foreach (var role in roles)
                {
                    var userRole = model.AllRoles_For_UserRoles[index];
                    if(userRole.IsSelected)
                    {
                        await _unitOfWork.UserRoles
                                         .AddAsync(new Data.Core.Domain.UserRole
                                            {
                                                User = model.GetCore(),
                                                RoleId = role.Id
                                            });
                    }

                    index++;
                }
            }
            catch
            {
                throw;
            }
        }

        private async Task ProcessManyToMany_Clients_For_ManageTenants(Models.User model)
        {
            try
            {
                // Get the selected clients for Roles
                var selectedClients_For_ManageTenants = model.AllClients_For_ManageTenants.Where(x => x.IsSelected);

                // Un-assign clients_For_ManageTenants from user
                await _unitOfWork.AgencyManageTenants.GetForUserAsync(model.GetCore());


                var manageTenantsLength = model.GetCore().ManageTenants.Count();
                for (var i = manageTenantsLength - 1; i >= 0; i--)
                {
                    var manageTenant = model.GetCore().ManageTenants[i];

                    await _unitOfWork.AgencyManageTenants
                                     .RemoveAsync(manageTenant);

                    model.GetCore()
                         .ManageTenants
                         .Remove(manageTenant);
                }

                // Assign clients_For_ManageTenants to user
                var clients = await _unitOfWork.BusinessClients.GetAllAsync();
                int index = 0;
                foreach (var client in clients)
                {
                    var manageTenant = model.AllClients_For_ManageTenants[index];
                    if(manageTenant.IsSelected)
                    {
                        await _unitOfWork.AgencyManageTenants
                                         .AddAsync(new Data.Core.Domain.Agency.ManageTenant
                                            {
                                                User = model.GetCore(),
                                                TenantId = client.Id
                                            });
                    }

                    index++;
                }
            }
            catch
            {
                throw;
            }
        }

        private async Task ProcessManyToMany_Ideas_For_Follows(Models.User model)
        {
            try
            {
                // Get the selected ideas for Followed Ideas
                var selectedIdeas_For_Follows = model.AllIdeas_For_Follows.Where(x => x.IsSelected);

                // Un-assign ideas_For_Follows from user
                await _unitOfWork.BusinessFollows.GetForUserAsync(model.GetCore());


                var followsLength = model.GetCore().Follows.Count();
                for (var i = followsLength - 1; i >= 0; i--)
                {
                    var follow = model.GetCore().Follows[i];

                    await _unitOfWork.BusinessFollows
                                     .RemoveAsync(follow);

                    model.GetCore()
                         .Follows
                         .Remove(follow);
                }

                // Assign ideas_For_Follows to user
                var ideas = await _unitOfWork.BusinessIdeas.GetAllAsync();
                int index = 0;
                foreach (var idea in ideas)
                {
                    var follow = model.AllIdeas_For_Follows[index];
                    if(follow.IsSelected)
                    {
                        await _unitOfWork.BusinessFollows
                                         .AddAsync(new Data.Core.Domain.Business.Follow
                                            {
                                                User = model.GetCore(),
                                                IdeaId = idea.Id
                                            });
                    }

                    index++;
                }
            }
            catch
            {
                throw;
            }
        }

        private async Task ProcessManyToMany_Ideas_For_Votes(Models.User model)
        {
            try
            {
                // Get the selected ideas for Ideas Voted Fors
                var selectedIdeas_For_Votes = model.AllIdeas_For_Votes.Where(x => x.IsSelected);

                // Un-assign ideas_For_Votes from user
                await _unitOfWork.BusinessVotes.GetForUserAsync(model.GetCore());


                var votesLength = model.GetCore().Votes.Count();
                for (var i = votesLength - 1; i >= 0; i--)
                {
                    var vote = model.GetCore().Votes[i];

                    await _unitOfWork.BusinessVotes
                                     .RemoveAsync(vote);

                    model.GetCore()
                         .Votes
                         .Remove(vote);
                }

                // Assign ideas_For_Votes to user
                var ideas = await _unitOfWork.BusinessIdeas.GetAllAsync();
                int index = 0;
                foreach (var idea in ideas)
                {
                    var vote = model.AllIdeas_For_Votes[index];
                    if(vote.IsSelected)
                    {
                        await _unitOfWork.BusinessVotes
                                         .AddAsync(new Data.Core.Domain.Business.Vote
                                            {
                                                User = model.GetCore(),
                                                IdeaId = idea.Id
                                            });
                    }

                    index++;
                }
            }
            catch
            {
                throw;
            }
        }


        [HttpPost("/Administration/User/Cancel")]
        public IActionResult Cancel()
        {
            return Redirect(
                "/Administration/User");
        }
    }
}