/*********************************************************
       Code Generated By  .  .  .  .  Delaney's ScriptBot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Template Name.  .  .  .  .  .  Project Green 3.0
       Template Version.  .  .  .  .  20210407 014
       Author .  .  .  .  .  .  .  .  Delaney

                      ,        ,--,_
                       \ _ ___/ /\|
                       ( )__, )
                      |/_  '--,
                        \ `  / '

 *********************************************************/

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Linq;
using System;
using System.Threading.Tasks;
using SilkFlo.Data.Core;

namespace SilkFlo.Web.Controllers.Administration
{
    public partial class RoleController : Abstract
    {
        public RoleController(IUnitOfWork unitOfWork,
                                  Services.ViewToString viewToString,
                                  IAuthorizationService authorisation) : base(unitOfWork, viewToString, authorisation) { }


        [HttpGet("/Administration/Role")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Index()
        {
            try
            {
                IEnumerable<Data.Core.Domain.Role> cores;

                cores = (await _unitOfWork.Roles
                                         .GetAllAsync())
                                         .ToArray();

                var models = new List<Models.Role>();

                if(cores != null)
                {
                    cores = cores.OrderByDescending(m => m.Sort)
                                 .ThenBy(m => m.Name);

                    foreach(var core in cores)
                    {
                        var model = new Models.Role(core);
                        models.Add(model);
                    }
                }

                var summary = new Models.Summary<Models.Role>
                {
                    Models = models,
                    Count = models.Count,
                };

                return View("/Views/Administration/Role/Index.cshtml", summary);
            }
            catch (Exception ex)
            {
                _unitOfWork.Log(ex);

                var summary = new Models.Summary<Models.Role>
                {
                    Models = null,
                    Count = 0,
                };

                ModelState.AddModelError(
                        "Error",
                        Models.Log.Message_DatabaseErrorFetchList);

                return View("/Views/Administration/Role/Index.cshtml", summary);
            }
        }
        [HttpPost("/Administration/Role/Cancel")]
        public IActionResult Cancel()
        {
            return Redirect(
                "/Administration/Role");
        }
    }
}