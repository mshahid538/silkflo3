/*********************************************************
       Code Generated By  .  .  .  .  Delaney's ScriptBot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Template Name.  .  .  .  .  .  Project Green 3.0
       Template Version.  .  .  .  .  20210407 014
       Author .  .  .  .  .  .  .  .  Delaney

                      ,        ,--,_
                       \ _ ___/ /\|
                       ( )__, )
                      |/_  '--,
                        \ `  / '

 *********************************************************/

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Linq;
using System;
using System.Threading.Tasks;
using SilkFlo.Data.Core;

namespace SilkFlo.Web.Controllers.Administration.Business
{
    public partial class IdeaController : Abstract
    {
        public IdeaController(IUnitOfWork unitOfWork,
                                  Services.ViewToString viewToString,
                                  IAuthorizationService authorisation) : base(unitOfWork, viewToString, authorisation) { }


        [HttpGet("/Administration/Business/Idea")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Index()
        {
            try
            {
                IEnumerable<Data.Core.Domain.Business.Idea> cores;

                cores = (await _unitOfWork.BusinessIdeas
                                         .GetAllAsync())
                                         .ToArray();

                await _unitOfWork.BusinessClients.GetClientForAsync(cores);

                var models = new List<Models.Business.Idea>();

                if(cores != null)
                {
                    cores = cores.OrderBy(m => m.Name)
                                 .ThenBy(m => m.SubTitle)
                                 .ThenBy(m => m.Summary);

                    foreach(var core in cores)
                    {
                        var model = new Models.Business.Idea(core);
                        models.Add(model);
                    }
                }

                var summary = new Models.Summary<Models.Business.Idea>
                {
                    Models = models,
                    Count = models.Count,
                };

                return View("/Views/Administration/Business/Idea/Index.cshtml", summary);
            }
            catch (Exception ex)
            {
                _unitOfWork.Log(ex);

                var summary = new Models.Summary<Models.Business.Idea>
                {
                    Models = null,
                    Count = 0,
                };

                ModelState.AddModelError(
                        "Error",
                        Models.Log.Message_DatabaseErrorFetchList);

                return View("/Views/Administration/Business/Idea/Index.cshtml", summary);
            }
        }
        [HttpGet("/Administration/Business/Idea/Delete/{id}")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Delete (string id)
        {
            if (id == null)
                return Redirect("/Administration/business/idea");

            var idea = await _unitOfWork.BusinessIdeas.GetAsync(id);

            if (idea == null)
                return Redirect("/Administration/Business/Idea");
            else
            {
                await _unitOfWork.SharedApplicationStabilities.GetApplicationStabilityForAsync(idea);
                await _unitOfWork.SharedAutomationGoals.GetAutomationGoalForAsync(idea);
                await _unitOfWork.SharedAverageNumberOfSteps.GetAverageNumberOfStepForAsync(idea);
                await _unitOfWork.BusinessClients.GetClientForAsync(idea);
                await _unitOfWork.SharedDataInputPercentOfStructureds.GetDataInputPercentOfStructuredForAsync(idea);
                await _unitOfWork.SharedDecisionCounts.GetDecisionCountForAsync(idea);
                await _unitOfWork.SharedDecisionDifficulties.GetDecisionDifficultyForAsync(idea);
                await _unitOfWork.BusinessDepartments.GetDepartmentForAsync(idea);
                await _unitOfWork.SharedDocumentationPresents.GetDocumentationPresentForAsync(idea);
                await _unitOfWork.SharedInputDataStructures.GetInputDataStructureForAsync(idea);
                await _unitOfWork.SharedInputs.GetInputForAsync(idea);
                await _unitOfWork.SharedNumberOfWaysToCompleteProcesses.GetNumberOfWaysToCompleteProcessForAsync(idea);
                await _unitOfWork.BusinessProcesses.GetProcessForAsync(idea);
                await _unitOfWork.Users.GetProcessOwnerForAsync(idea);
                await _unitOfWork.SharedProcessPeaks.GetProcessPeakForAsync(idea);
                await _unitOfWork.SharedProcessStabilities.GetProcessStabilityForAsync(idea);
                await _unitOfWork.SharedRules.GetRuleForAsync(idea);
                await _unitOfWork.BusinessRunningCosts.GetRunningCostForAsync(idea);
                await _unitOfWork.SharedSubmissionPaths.GetSubmissionPathForAsync(idea);
                await _unitOfWork.SharedTaskFrequencies.GetTaskFrequencyForAsync(idea);
                await _unitOfWork.BusinessTeams.GetTeamForAsync(idea);

                if (idea.CreatedById != null)
                    idea.CreatedBy = await _unitOfWork.Users.GetAsync(idea.CreatedById);

                if (idea.UpdatedById != null)
                    idea.UpdatedBy = await _unitOfWork.Users.GetAsync(idea.UpdatedById);

                var model = new Models.Business.Idea(idea);

                return View("/Views/Administration/Business/Idea/delete.cshtml", model);
            }
        }
        [HttpPost("/Administration/Business/Idea/Delete")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Delete(Models.Business.Idea model)
        {
            if (model == null)
                return Redirect("/Administration/Business/Idea");


            var userId = GetUserId();

            if (userId == null)
            {
                ModelState.AddModelError("Error",
                                         "UserId is missing.");

                return View("/Views/Administration/Business/Idea/Delete.cshtml", model);
            }


            if (model.Id == null)
            {
                var message = "[POST] The primary key ID is missing.";

                ModelState.AddModelError("Error",
                                         message);

                _unitOfWork.Log(message,
                                Severity.Warning);

                await _unitOfWork.CompleteAsync();

                return View("/Views/Administration/Business/Idea/Delete.cshtml", model);
            }


            try
            {
                await _unitOfWork.BusinessIdeas
                                 .RemoveAsync(model.Id);

                await _unitOfWork.CompleteAsync();

                return Redirect(
                    "/Administration/Business/Idea");
            }
            catch (ChildDependencyException ex)
            {
                ModelState.AddModelError("Error",
                                         ex.Message);
                return View("/Views/Administration/Business/Idea/Delete.cshtml", model);
            }
            catch (NotFoundException ex)
            {
                ModelState.AddModelError("Error",
                                         ex.Message);
                return View("/Views/Administration/Business/Idea/Delete.cshtml", model);
            }
            catch (Exception ex)
            {
                ModelState.AddModelError("Error",
                                         "Cannot delete the Idea.");

                _unitOfWork.Log(ex);
                await _unitOfWork.CompleteAsync();
                return View("/Views/Administration/Business/Idea/Delete.cshtml", model);
            }
        }

        [HttpGet("/Administration/Business/Idea/Edit/{id}")]
        [HttpGet("/Administration/Business/Idea/Edit")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Edit(string id)
        {
            Data.Core.Domain.Business.Idea idea;

            if (string.IsNullOrWhiteSpace(id))
            {
                idea = new Data.Core.Domain.Business.Idea
                {
                    Id = Guid.NewGuid().ToString(),
                };
            }
            else
            {
                idea = await _unitOfWork.BusinessIdeas.GetAsync(id);

                if (idea == null)
                    return Redirect(
                        "/Administration/Business/Idea");
                await _unitOfWork.SharedApplicationStabilities.GetApplicationStabilityForAsync(idea);
                await _unitOfWork.SharedAutomationGoals.GetAutomationGoalForAsync(idea);
                await _unitOfWork.SharedAverageNumberOfSteps.GetAverageNumberOfStepForAsync(idea);
                await _unitOfWork.BusinessClients.GetClientForAsync(idea);
                await _unitOfWork.SharedDataInputPercentOfStructureds.GetDataInputPercentOfStructuredForAsync(idea);
                await _unitOfWork.SharedDecisionCounts.GetDecisionCountForAsync(idea);
                await _unitOfWork.SharedDecisionDifficulties.GetDecisionDifficultyForAsync(idea);
                await _unitOfWork.BusinessDepartments.GetDepartmentForAsync(idea);
                await _unitOfWork.SharedDocumentationPresents.GetDocumentationPresentForAsync(idea);
                await _unitOfWork.SharedInputDataStructures.GetInputDataStructureForAsync(idea);
                await _unitOfWork.SharedInputs.GetInputForAsync(idea);
                await _unitOfWork.SharedNumberOfWaysToCompleteProcesses.GetNumberOfWaysToCompleteProcessForAsync(idea);
                await _unitOfWork.BusinessProcesses.GetProcessForAsync(idea);
                await _unitOfWork.Users.GetProcessOwnerForAsync(idea);
                await _unitOfWork.SharedProcessPeaks.GetProcessPeakForAsync(idea);
                await _unitOfWork.SharedProcessStabilities.GetProcessStabilityForAsync(idea);
                await _unitOfWork.SharedRules.GetRuleForAsync(idea);
                await _unitOfWork.BusinessRunningCosts.GetRunningCostForAsync(idea);
                await _unitOfWork.SharedSubmissionPaths.GetSubmissionPathForAsync(idea);
                await _unitOfWork.SharedTaskFrequencies.GetTaskFrequencyForAsync(idea);
                await _unitOfWork.BusinessTeams.GetTeamForAsync(idea);

            }

            var model = new Models.Business.Idea(idea);
            await model.GetCreatedAndUpdated(_unitOfWork);

            var coreApplicationStabilities = await _unitOfWork.SharedApplicationStabilities.GetAllAsync();
            model.ApplicationStabilities.Add(new Models.Shared.ApplicationStability{ DisplayText = "Select..." });
            model.ApplicationStabilities.AddRange(Models.Shared.ApplicationStability.Create(coreApplicationStabilities));
            var coreAutomationGoals = await _unitOfWork.SharedAutomationGoals.GetAllAsync();
            model.AutomationGoals.Add(new Models.Shared.AutomationGoal{ DisplayText = "Select..." });
            model.AutomationGoals.AddRange(Models.Shared.AutomationGoal.Create(coreAutomationGoals));
            var coreAverageNumberOfSteps = await _unitOfWork.SharedAverageNumberOfSteps.GetAllAsync();
            model.AverageNumberOfSteps.Add(new Models.Shared.AverageNumberOfStep{ DisplayText = "Select..." });
            model.AverageNumberOfSteps.AddRange(Models.Shared.AverageNumberOfStep.Create(coreAverageNumberOfSteps));
            var coreClients = await _unitOfWork.BusinessClients.GetAllAsync();
            model.Clients.Add(new Models.Business.Client{ DisplayText = "Select..." });
            model.Clients.AddRange(Models.Business.Client.Create(coreClients));
            var coreDataInputPercentOfStructureds = await _unitOfWork.SharedDataInputPercentOfStructureds.GetAllAsync();
            model.DataInputPercentOfStructureds.Add(new Models.Shared.DataInputPercentOfStructured{ DisplayText = "Select..." });
            model.DataInputPercentOfStructureds.AddRange(Models.Shared.DataInputPercentOfStructured.Create(coreDataInputPercentOfStructureds));
            var coreDecisionCounts = await _unitOfWork.SharedDecisionCounts.GetAllAsync();
            model.DecisionCounts.Add(new Models.Shared.DecisionCount{ DisplayText = "Select..." });
            model.DecisionCounts.AddRange(Models.Shared.DecisionCount.Create(coreDecisionCounts));
            var coreDecisionDifficulties = await _unitOfWork.SharedDecisionDifficulties.GetAllAsync();
            model.DecisionDifficulties.Add(new Models.Shared.DecisionDifficulty{ DisplayText = "Select..." });
            model.DecisionDifficulties.AddRange(Models.Shared.DecisionDifficulty.Create(coreDecisionDifficulties));
            var coreDepartments = await _unitOfWork.BusinessDepartments.GetAllAsync();
            model.Departments.Add(new Models.Business.Department{ DisplayText = "Select..." });
            model.Departments.AddRange(Models.Business.Department.Create(coreDepartments));
            var coreDocumentationPresents = await _unitOfWork.SharedDocumentationPresents.GetAllAsync();
            model.DocumentationPresents.Add(new Models.Shared.DocumentationPresent{ DisplayText = "Select..." });
            model.DocumentationPresents.AddRange(Models.Shared.DocumentationPresent.Create(coreDocumentationPresents));
            var coreInputDataStructures = await _unitOfWork.SharedInputDataStructures.GetAllAsync();
            model.InputDataStructures.Add(new Models.Shared.InputDataStructure{ DisplayText = "Select..." });
            model.InputDataStructures.AddRange(Models.Shared.InputDataStructure.Create(coreInputDataStructures));
            var coreInputs = await _unitOfWork.SharedInputs.GetAllAsync();
            model.Inputs.Add(new Models.Shared.Input{ DisplayText = "Select..." });
            model.Inputs.AddRange(Models.Shared.Input.Create(coreInputs));
            var coreNumberOfWaysToCompleteProcesses = await _unitOfWork.SharedNumberOfWaysToCompleteProcesses.GetAllAsync();
            model.NumberOfWaysToCompleteProcesses.Add(new Models.Shared.NumberOfWaysToCompleteProcess{ DisplayText = "Select..." });
            model.NumberOfWaysToCompleteProcesses.AddRange(Models.Shared.NumberOfWaysToCompleteProcess.Create(coreNumberOfWaysToCompleteProcesses));
            var coreProcesses = await _unitOfWork.BusinessProcesses.GetAllAsync();
            model.Processes.Add(new Models.Business.Process{ DisplayText = "Select..." });
            model.Processes.AddRange(Models.Business.Process.Create(coreProcesses));
            var coreProcessOwners = await _unitOfWork.Users.GetAllAsync();
            model.ProcessOwners.Add(new Models.User{ DisplayText = "Select..." });
            model.ProcessOwners.AddRange(Models.User.Create(coreProcessOwners));
            var coreProcessPeaks = await _unitOfWork.SharedProcessPeaks.GetAllAsync();
            model.ProcessPeaks.Add(new Models.Shared.ProcessPeak{ DisplayText = "Select..." });
            model.ProcessPeaks.AddRange(Models.Shared.ProcessPeak.Create(coreProcessPeaks));
            var coreProcessStabilities = await _unitOfWork.SharedProcessStabilities.GetAllAsync();
            model.ProcessStabilities.Add(new Models.Shared.ProcessStability{ DisplayText = "Select..." });
            model.ProcessStabilities.AddRange(Models.Shared.ProcessStability.Create(coreProcessStabilities));
            var coreRules = await _unitOfWork.SharedRules.GetAllAsync();
            model.Rules.Add(new Models.Shared.Rule{ DisplayText = "Select..." });
            model.Rules.AddRange(Models.Shared.Rule.Create(coreRules));
            var coreSubmissionPaths = await _unitOfWork.SharedSubmissionPaths.GetAllAsync();
            model.SubmissionPaths.AddRange(Models.Shared.SubmissionPath.Create(coreSubmissionPaths));
            var coreTaskFrequencies = await _unitOfWork.SharedTaskFrequencies.GetAllAsync();
            model.TaskFrequencies.Add(new Models.Shared.TaskFrequency{ DisplayText = "Select..." });
            model.TaskFrequencies.AddRange(Models.Shared.TaskFrequency.Create(coreTaskFrequencies));
            var coreTeams = await _unitOfWork.BusinessTeams.GetAllAsync();
            model.Teams.Add(new Models.Business.Team{ DisplayText = "Select..." });
            model.Teams.AddRange(Models.Business.Team.Create(coreTeams));

            return View("/Views/Administration/Business/Idea/Edit.cshtml", model);
        }


        [HttpPost("/Administration/Business/Idea/Edit")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Edit(Models.Business.Idea model)
        {
            try
            {
                // Get the userId
                var userId = GetUserId();


                // Is the userId present.
                // If not return to view.                
                if (userId == null)
                {
                    ModelState.AddModelError(
                            "Error",
                            "userId is missing.");

                    return View("/Views/Administration/Business/Idea/Edit.cshtml", model);
                }


                // Is the model valid?
                // If not return to view.
                bool isValid = Validate(_unitOfWork, model);

                var feedback = new ViewModels.Feedback();
                feedback = await model.CheckUniqueAsync(_unitOfWork, feedback);
                if (!feedback.IsValid)
                {
                    isValid = false;
                    foreach (var feedbackElement in feedback.Elements)
                        model.Errors.Add(feedbackElement.Value);
                }

                if (!isValid)
                {
                    // Get parent: Shared.ApplicationStability -> ApplicationStability
                    await _unitOfWork.SharedApplicationStabilities.GetApplicationStabilityForAsync(model.GetCore());
                    model.ApplicationStability =
                        model.GetCore().ApplicationStability == null ?
                            null :
                            new Models.Shared.ApplicationStability(model.GetCore().ApplicationStability);


                    // Get parent: Shared.AutomationGoal -> AutomationGoal
                    await _unitOfWork.SharedAutomationGoals.GetAutomationGoalForAsync(model.GetCore());
                    model.AutomationGoal =
                        model.GetCore().AutomationGoal == null ?
                            null :
                            new Models.Shared.AutomationGoal(model.GetCore().AutomationGoal);


                    // Get parent: Shared.AverageNumberOfStep -> AverageNumberOfStep
                    await _unitOfWork.SharedAverageNumberOfSteps.GetAverageNumberOfStepForAsync(model.GetCore());
                    model.AverageNumberOfStep =
                        model.GetCore().AverageNumberOfStep == null ?
                            null :
                            new Models.Shared.AverageNumberOfStep(model.GetCore().AverageNumberOfStep);


                    // Get parent: Business.Client -> Client
                    await _unitOfWork.BusinessClients.GetClientForAsync(model.GetCore());
                    model.Client =
                        model.GetCore().Client == null ?
                            null :
                            new Models.Business.Client(model.GetCore().Client);


                    // Get parent: Shared.DataInputPercentOfStructured -> DataInputPercentOfStructured
                    await _unitOfWork.SharedDataInputPercentOfStructureds.GetDataInputPercentOfStructuredForAsync(model.GetCore());
                    model.DataInputPercentOfStructured =
                        model.GetCore().DataInputPercentOfStructured == null ?
                            null :
                            new Models.Shared.DataInputPercentOfStructured(model.GetCore().DataInputPercentOfStructured);


                    // Get parent: Shared.DecisionCount -> DecisionCount
                    await _unitOfWork.SharedDecisionCounts.GetDecisionCountForAsync(model.GetCore());
                    model.DecisionCount =
                        model.GetCore().DecisionCount == null ?
                            null :
                            new Models.Shared.DecisionCount(model.GetCore().DecisionCount);


                    // Get parent: Shared.DecisionDifficulty -> DecisionDifficulty
                    await _unitOfWork.SharedDecisionDifficulties.GetDecisionDifficultyForAsync(model.GetCore());
                    model.DecisionDifficulty =
                        model.GetCore().DecisionDifficulty == null ?
                            null :
                            new Models.Shared.DecisionDifficulty(model.GetCore().DecisionDifficulty);


                    // Get parent: Business.Department -> Department
                    await _unitOfWork.BusinessDepartments.GetDepartmentForAsync(model.GetCore());
                    model.Department =
                        model.GetCore().Department == null ?
                            null :
                            new Models.Business.Department(model.GetCore().Department);


                    // Get parent: Shared.DocumentationPresent -> DocumentationPresent
                    await _unitOfWork.SharedDocumentationPresents.GetDocumentationPresentForAsync(model.GetCore());
                    model.DocumentationPresent =
                        model.GetCore().DocumentationPresent == null ?
                            null :
                            new Models.Shared.DocumentationPresent(model.GetCore().DocumentationPresent);


                    // Get parent: Shared.InputDataStructure -> InputDataStructure
                    await _unitOfWork.SharedInputDataStructures.GetInputDataStructureForAsync(model.GetCore());
                    model.InputDataStructure =
                        model.GetCore().InputDataStructure == null ?
                            null :
                            new Models.Shared.InputDataStructure(model.GetCore().InputDataStructure);


                    // Get parent: Shared.Input -> Input
                    await _unitOfWork.SharedInputs.GetInputForAsync(model.GetCore());
                    model.Input =
                        model.GetCore().Input == null ?
                            null :
                            new Models.Shared.Input(model.GetCore().Input);


                    // Get parent: Shared.NumberOfWaysToCompleteProcess -> NumberOfWaysToCompleteProcess
                    await _unitOfWork.SharedNumberOfWaysToCompleteProcesses.GetNumberOfWaysToCompleteProcessForAsync(model.GetCore());
                    model.NumberOfWaysToCompleteProcess =
                        model.GetCore().NumberOfWaysToCompleteProcess == null ?
                            null :
                            new Models.Shared.NumberOfWaysToCompleteProcess(model.GetCore().NumberOfWaysToCompleteProcess);


                    // Get parent: Business.Process -> Process
                    await _unitOfWork.BusinessProcesses.GetProcessForAsync(model.GetCore());
                    model.Process =
                        model.GetCore().Process == null ?
                            null :
                            new Models.Business.Process(model.GetCore().Process);


                    // Get parent: User -> ProcessOwner
                    await _unitOfWork.Users.GetProcessOwnerForAsync(model.GetCore());
                    model.ProcessOwner =
                        model.GetCore().ProcessOwner == null ?
                            null :
                            new Models.User(model.GetCore().ProcessOwner);


                    // Get parent: Shared.ProcessPeak -> ProcessPeak
                    await _unitOfWork.SharedProcessPeaks.GetProcessPeakForAsync(model.GetCore());
                    model.ProcessPeak =
                        model.GetCore().ProcessPeak == null ?
                            null :
                            new Models.Shared.ProcessPeak(model.GetCore().ProcessPeak);


                    // Get parent: Shared.ProcessStability -> ProcessStability
                    await _unitOfWork.SharedProcessStabilities.GetProcessStabilityForAsync(model.GetCore());
                    model.ProcessStability =
                        model.GetCore().ProcessStability == null ?
                            null :
                            new Models.Shared.ProcessStability(model.GetCore().ProcessStability);


                    // Get parent: Shared.Rule -> Rule
                    await _unitOfWork.SharedRules.GetRuleForAsync(model.GetCore());
                    model.Rule =
                        model.GetCore().Rule == null ?
                            null :
                            new Models.Shared.Rule(model.GetCore().Rule);


                    // Get parent: Shared.SubmissionPath -> SubmissionPath
                    await _unitOfWork.SharedSubmissionPaths.GetSubmissionPathForAsync(model.GetCore());
                    model.SubmissionPath =
                        model.GetCore().SubmissionPath == null ?
                            null :
                            new Models.Shared.SubmissionPath(model.GetCore().SubmissionPath);


                    // Get parent: Shared.TaskFrequency -> TaskFrequency
                    await _unitOfWork.SharedTaskFrequencies.GetTaskFrequencyForAsync(model.GetCore());
                    model.TaskFrequency =
                        model.GetCore().TaskFrequency == null ?
                            null :
                            new Models.Shared.TaskFrequency(model.GetCore().TaskFrequency);


                    // Get parent: Business.Team -> Team
                    await _unitOfWork.BusinessTeams.GetTeamForAsync(model.GetCore());
                    model.Team =
                        model.GetCore().Team == null ?
                            null :
                            new Models.Business.Team(model.GetCore().Team);

                    // Get list of potential parents: Shared.ApplicationStability -> ApplicationStability
                    var coreApplicationStabilities = await _unitOfWork.SharedApplicationStabilities.GetAllAsync();
                    model.ApplicationStabilities.Add(new Models.Shared.ApplicationStability{ DisplayText = "<Empty>" });
                    foreach (var core in coreApplicationStabilities)
                        model.ApplicationStabilities.Add(new Models.Shared.ApplicationStability(core));

                    // Get list of potential parents: Shared.AutomationGoal -> AutomationGoal
                    var coreAutomationGoals = await _unitOfWork.SharedAutomationGoals.GetAllAsync();
                    model.AutomationGoals.Add(new Models.Shared.AutomationGoal{ DisplayText = "<Empty>" });
                    foreach (var core in coreAutomationGoals)
                        model.AutomationGoals.Add(new Models.Shared.AutomationGoal(core));

                    // Get list of potential parents: Shared.AverageNumberOfStep -> AverageNumberOfStep
                    var coreAverageNumberOfSteps = await _unitOfWork.SharedAverageNumberOfSteps.GetAllAsync();
                    model.AverageNumberOfSteps.Add(new Models.Shared.AverageNumberOfStep{ DisplayText = "<Empty>" });
                    foreach (var core in coreAverageNumberOfSteps)
                        model.AverageNumberOfSteps.Add(new Models.Shared.AverageNumberOfStep(core));

                    // Get list of potential parents: Business.Client -> Client
                    var coreClients = await _unitOfWork.BusinessClients.GetAllAsync();
                    model.Clients.Add(new Models.Business.Client{ DisplayText = "<Empty>" });
                    foreach (var core in coreClients)
                        model.Clients.Add(new Models.Business.Client(core));

                    // Get list of potential parents: Shared.DataInputPercentOfStructured -> DataInputPercentOfStructured
                    var coreDataInputPercentOfStructureds = await _unitOfWork.SharedDataInputPercentOfStructureds.GetAllAsync();
                    model.DataInputPercentOfStructureds.Add(new Models.Shared.DataInputPercentOfStructured{ DisplayText = "<Empty>" });
                    foreach (var core in coreDataInputPercentOfStructureds)
                        model.DataInputPercentOfStructureds.Add(new Models.Shared.DataInputPercentOfStructured(core));

                    // Get list of potential parents: Shared.DecisionCount -> DecisionCount
                    var coreDecisionCounts = await _unitOfWork.SharedDecisionCounts.GetAllAsync();
                    model.DecisionCounts.Add(new Models.Shared.DecisionCount{ DisplayText = "<Empty>" });
                    foreach (var core in coreDecisionCounts)
                        model.DecisionCounts.Add(new Models.Shared.DecisionCount(core));

                    // Get list of potential parents: Shared.DecisionDifficulty -> DecisionDifficulty
                    var coreDecisionDifficulties = await _unitOfWork.SharedDecisionDifficulties.GetAllAsync();
                    model.DecisionDifficulties.Add(new Models.Shared.DecisionDifficulty{ DisplayText = "<Empty>" });
                    foreach (var core in coreDecisionDifficulties)
                        model.DecisionDifficulties.Add(new Models.Shared.DecisionDifficulty(core));

                    // Get list of potential parents: Business.Department -> Department
                    var coreDepartments = await _unitOfWork.BusinessDepartments.GetAllAsync();
                    model.Departments.Add(new Models.Business.Department{ DisplayText = "<Empty>" });
                    foreach (var core in coreDepartments)
                        model.Departments.Add(new Models.Business.Department(core));

                    // Get list of potential parents: Shared.DocumentationPresent -> DocumentationPresent
                    var coreDocumentationPresents = await _unitOfWork.SharedDocumentationPresents.GetAllAsync();
                    model.DocumentationPresents.Add(new Models.Shared.DocumentationPresent{ DisplayText = "<Empty>" });
                    foreach (var core in coreDocumentationPresents)
                        model.DocumentationPresents.Add(new Models.Shared.DocumentationPresent(core));

                    // Get list of potential parents: Shared.InputDataStructure -> InputDataStructure
                    var coreInputDataStructures = await _unitOfWork.SharedInputDataStructures.GetAllAsync();
                    model.InputDataStructures.Add(new Models.Shared.InputDataStructure{ DisplayText = "<Empty>" });
                    foreach (var core in coreInputDataStructures)
                        model.InputDataStructures.Add(new Models.Shared.InputDataStructure(core));

                    // Get list of potential parents: Shared.Input -> Input
                    var coreInputs = await _unitOfWork.SharedInputs.GetAllAsync();
                    model.Inputs.Add(new Models.Shared.Input{ DisplayText = "<Empty>" });
                    foreach (var core in coreInputs)
                        model.Inputs.Add(new Models.Shared.Input(core));

                    // Get list of potential parents: Shared.NumberOfWaysToCompleteProcess -> NumberOfWaysToCompleteProcess
                    var coreNumberOfWaysToCompleteProcesses = await _unitOfWork.SharedNumberOfWaysToCompleteProcesses.GetAllAsync();
                    model.NumberOfWaysToCompleteProcesses.Add(new Models.Shared.NumberOfWaysToCompleteProcess{ DisplayText = "<Empty>" });
                    foreach (var core in coreNumberOfWaysToCompleteProcesses)
                        model.NumberOfWaysToCompleteProcesses.Add(new Models.Shared.NumberOfWaysToCompleteProcess(core));

                    // Get list of potential parents: Business.Process -> Process
                    var coreProcesses = await _unitOfWork.BusinessProcesses.GetAllAsync();
                    model.Processes.Add(new Models.Business.Process{ DisplayText = "<Empty>" });
                    foreach (var core in coreProcesses)
                        model.Processes.Add(new Models.Business.Process(core));

                    // Get list of potential parents: User -> ProcessOwner
                    var coreProcessOwners = await _unitOfWork.Users.GetAllAsync();
                    model.ProcessOwners.Add(new Models.User{ DisplayText = "<Empty>" });
                    foreach (var core in coreProcessOwners)
                        model.ProcessOwners.Add(new Models.User(core));

                    // Get list of potential parents: Shared.ProcessPeak -> ProcessPeak
                    var coreProcessPeaks = await _unitOfWork.SharedProcessPeaks.GetAllAsync();
                    model.ProcessPeaks.Add(new Models.Shared.ProcessPeak{ DisplayText = "<Empty>" });
                    foreach (var core in coreProcessPeaks)
                        model.ProcessPeaks.Add(new Models.Shared.ProcessPeak(core));

                    // Get list of potential parents: Shared.ProcessStability -> ProcessStability
                    var coreProcessStabilities = await _unitOfWork.SharedProcessStabilities.GetAllAsync();
                    model.ProcessStabilities.Add(new Models.Shared.ProcessStability{ DisplayText = "<Empty>" });
                    foreach (var core in coreProcessStabilities)
                        model.ProcessStabilities.Add(new Models.Shared.ProcessStability(core));

                    // Get list of potential parents: Shared.Rule -> Rule
                    var coreRules = await _unitOfWork.SharedRules.GetAllAsync();
                    model.Rules.Add(new Models.Shared.Rule{ DisplayText = "<Empty>" });
                    foreach (var core in coreRules)
                        model.Rules.Add(new Models.Shared.Rule(core));

                    // Get list of potential parents: Shared.SubmissionPath -> SubmissionPath
                    var coreSubmissionPaths = await _unitOfWork.SharedSubmissionPaths.GetAllAsync();
                    foreach (var core in coreSubmissionPaths)
                        model.SubmissionPaths.Add(new Models.Shared.SubmissionPath(core));

                    // Get list of potential parents: Shared.TaskFrequency -> TaskFrequency
                    var coreTaskFrequencies = await _unitOfWork.SharedTaskFrequencies.GetAllAsync();
                    model.TaskFrequencies.Add(new Models.Shared.TaskFrequency{ DisplayText = "<Empty>" });
                    foreach (var core in coreTaskFrequencies)
                        model.TaskFrequencies.Add(new Models.Shared.TaskFrequency(core));

                    // Get list of potential parents: Business.Team -> Team
                    var coreTeams = await _unitOfWork.BusinessTeams.GetAllAsync();
                    model.Teams.Add(new Models.Business.Team{ DisplayText = "<Empty>" });
                    foreach (var core in coreTeams)
                        model.Teams.Add(new Models.Business.Team(core));


                    return View("/Views/Administration/Business/Idea/Edit.cshtml", model);
                }


                // Process the forms content.
                await _unitOfWork.BusinessIdeas.AddAsync(model.GetCore());


                if(await _unitOfWork.CompleteAsync() == DataStoreResult.Success)
                    return Redirect(
                        "/Administration/Business/Idea");

                return View("/Views/Administration/Business/Idea/Edit.cshtml", model);
            }
            catch (Exception ex)
            {
                _unitOfWork.Log(ex);

                ModelState.AddModelError(
                    "Error",
                    Models.Log.Message_CouldNotSave);

                return View("/Views/Administration/Business/Idea/Edit.cshtml", model);
            }
        }

        [HttpPost("/Administration/Business/Idea/Cancel")]
        public IActionResult Cancel()
        {
            return Redirect(
                "/Administration/Business/Idea");
        }
    }
}