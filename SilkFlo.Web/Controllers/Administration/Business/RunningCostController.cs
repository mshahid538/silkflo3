/*********************************************************
       Code Generated By  .  .  .  .  Delaney's ScriptBot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Template Name.  .  .  .  .  .  Project Green 3.0
       Template Version.  .  .  .  .  20210407 014
       Author .  .  .  .  .  .  .  .  Delaney

                      ,        ,--,_
                       \ _ ___/ /\|
                       ( )__, )
                      |/_  '--,
                        \ `  / '

 *********************************************************/

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Linq;
using System;
using System.Threading.Tasks;
using SilkFlo.Data.Core;

namespace SilkFlo.Web.Controllers.Administration.Business
{
    public partial class RunningCostController : Abstract
    {
        public RunningCostController(IUnitOfWork unitOfWork,
                                  Services.ViewToString viewToString,
                                  IAuthorizationService authorisation) : base(unitOfWork, viewToString, authorisation) { }


        [HttpGet("/Administration/Business/RunningCost")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Index()
        {
            try
            {
                IEnumerable<Data.Core.Domain.Business.RunningCost> cores;

                cores = (await _unitOfWork.BusinessRunningCosts
                                         .GetAllAsync())
                                         .ToArray();

                await _unitOfWork.SharedAutomationTypes.GetAutomationTypeForAsync(cores);
                await _unitOfWork.BusinessClients.GetClientForAsync(cores);
                await _unitOfWork.SharedPeriods.GetFrequencyForAsync(cores);
                await _unitOfWork.BusinessSoftwareVenders.GetVenderForAsync(cores);

                var models = new List<Models.Business.RunningCost>();

                if(cores != null)
                {
                    foreach(var core in cores)
                    {
                        var model = new Models.Business.RunningCost(core);
                        models.Add(model);
                    }
                }

                var summary = new Models.Summary<Models.Business.RunningCost>
                {
                    Models = models,
                    Count = models.Count,
                };

                return View("/Views/Administration/Business/RunningCost/Index.cshtml", summary);
            }
            catch (Exception ex)
            {
                _unitOfWork.Log(ex);

                var summary = new Models.Summary<Models.Business.RunningCost>
                {
                    Models = null,
                    Count = 0,
                };

                ModelState.AddModelError(
                        "Error",
                        Models.Log.Message_DatabaseErrorFetchList);

                return View("/Views/Administration/Business/RunningCost/Index.cshtml", summary);
            }
        }
        [HttpGet("/Administration/Business/RunningCost/Delete/{id}")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Delete (string id)
        {
            if (id == null)
                return Redirect("/Administration/business/runningCost");

            var runningCost = await _unitOfWork.BusinessRunningCosts.GetAsync(id);

            if (runningCost == null)
                return Redirect("/Administration/Business/RunningCost");
            else
            {
                await _unitOfWork.SharedAutomationTypes.GetAutomationTypeForAsync(runningCost);
                await _unitOfWork.BusinessClients.GetClientForAsync(runningCost);
                await _unitOfWork.SharedPeriods.GetFrequencyForAsync(runningCost);
                await _unitOfWork.BusinessSoftwareVenders.GetVenderForAsync(runningCost);

                if (runningCost.CreatedById != null)
                    runningCost.CreatedBy = await _unitOfWork.Users.GetAsync(runningCost.CreatedById);

                if (runningCost.UpdatedById != null)
                    runningCost.UpdatedBy = await _unitOfWork.Users.GetAsync(runningCost.UpdatedById);

                var model = new Models.Business.RunningCost(runningCost);

                return View("/Views/Administration/Business/RunningCost/delete.cshtml", model);
            }
        }
        [HttpPost("/Administration/Business/RunningCost/Delete")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Delete(Models.Business.RunningCost model)
        {
            if (model == null)
                return Redirect("/Administration/Business/RunningCost");


            var userId = GetUserId();

            if (userId == null)
            {
                ModelState.AddModelError("Error",
                                         "UserId is missing.");

                return View("/Views/Administration/Business/RunningCost/Delete.cshtml", model);
            }


            if (model.Id == null)
            {
                var message = "[POST] The primary key ID is missing.";

                ModelState.AddModelError("Error",
                                         message);

                _unitOfWork.Log(message,
                                Severity.Warning);

                await _unitOfWork.CompleteAsync();

                return View("/Views/Administration/Business/RunningCost/Delete.cshtml", model);
            }


            try
            {
                await _unitOfWork.BusinessRunningCosts
                                 .RemoveAsync(model.Id);

                await _unitOfWork.CompleteAsync();

                return Redirect(
                    "/Administration/Business/RunningCost");
            }
            catch (ChildDependencyException ex)
            {
                ModelState.AddModelError("Error",
                                         ex.Message);
                return View("/Views/Administration/Business/RunningCost/Delete.cshtml", model);
            }
            catch (NotFoundException ex)
            {
                ModelState.AddModelError("Error",
                                         ex.Message);
                return View("/Views/Administration/Business/RunningCost/Delete.cshtml", model);
            }
            catch (Exception ex)
            {
                ModelState.AddModelError("Error",
                                         "Cannot delete the RunningCost.");

                _unitOfWork.Log(ex);
                await _unitOfWork.CompleteAsync();
                return View("/Views/Administration/Business/RunningCost/Delete.cshtml", model);
            }
        }

        [HttpGet("/Administration/Business/RunningCost/Edit/{id}")]
        [HttpGet("/Administration/Business/RunningCost/Edit")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Edit(string id)
        {
            Data.Core.Domain.Business.RunningCost runningCost;

            if (string.IsNullOrWhiteSpace(id))
            {
                runningCost = new Data.Core.Domain.Business.RunningCost
                {
                    Id = Guid.NewGuid().ToString(),
                };
            }
            else
            {
                runningCost = await _unitOfWork.BusinessRunningCosts.GetAsync(id);

                if (runningCost == null)
                    return Redirect(
                        "/Administration/Business/RunningCost");
                await _unitOfWork.SharedAutomationTypes.GetAutomationTypeForAsync(runningCost);
                await _unitOfWork.BusinessClients.GetClientForAsync(runningCost);
                await _unitOfWork.SharedPeriods.GetFrequencyForAsync(runningCost);
                await _unitOfWork.BusinessSoftwareVenders.GetVenderForAsync(runningCost);

            }

            var model = new Models.Business.RunningCost(runningCost);
            await model.GetCreatedAndUpdated(_unitOfWork);

            var coreAutomationTypes = await _unitOfWork.SharedAutomationTypes.GetAllAsync();
            model.AutomationTypes.AddRange(Models.Shared.AutomationType.Create(coreAutomationTypes));
            var coreClients = await _unitOfWork.BusinessClients.GetAllAsync();
            model.Clients.AddRange(Models.Business.Client.Create(coreClients));

            return View("/Views/Administration/Business/RunningCost/Edit.cshtml", model);
        }


        [HttpPost("/Administration/Business/RunningCost/Edit")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Edit(Models.Business.RunningCost model)
        {
            try
            {
                // Get the userId
                var userId = GetUserId();


                // Is the userId present.
                // If not return to view.                
                if (userId == null)
                {
                    ModelState.AddModelError(
                            "Error",
                            "userId is missing.");

                    return View("/Views/Administration/Business/RunningCost/Edit.cshtml", model);
                }


                // Is the model valid?
                // If not return to view.
                bool isValid = Validate(_unitOfWork, model);

                var feedback = new ViewModels.Feedback();
                feedback = await model.CheckUniqueAsync(_unitOfWork, feedback);
                if (!feedback.IsValid)
                {
                    isValid = false;
                    foreach (var feedbackElement in feedback.Elements)
                        model.Errors.Add(feedbackElement.Value);
                }

                if (!isValid)
                {
                    // Get parent: Shared.AutomationType -> AutomationType
                    await _unitOfWork.SharedAutomationTypes.GetAutomationTypeForAsync(model.GetCore());
                    model.AutomationType =
                        model.GetCore().AutomationType == null ?
                            null :
                            new Models.Shared.AutomationType(model.GetCore().AutomationType);


                    // Get parent: Business.Client -> Client
                    await _unitOfWork.BusinessClients.GetClientForAsync(model.GetCore());
                    model.Client =
                        model.GetCore().Client == null ?
                            null :
                            new Models.Business.Client(model.GetCore().Client);

                    // Get list of potential parents: Shared.AutomationType -> AutomationType
                    var coreAutomationTypes = await _unitOfWork.SharedAutomationTypes.GetAllAsync();
                    foreach (var core in coreAutomationTypes)
                        model.AutomationTypes.Add(new Models.Shared.AutomationType(core));

                    // Get list of potential parents: Business.Client -> Client
                    var coreClients = await _unitOfWork.BusinessClients.GetAllAsync();
                    foreach (var core in coreClients)
                        model.Clients.Add(new Models.Business.Client(core));


                    return View("/Views/Administration/Business/RunningCost/Edit.cshtml", model);
                }


                // Process the forms content.
                await _unitOfWork.BusinessRunningCosts.AddAsync(model.GetCore());


                if(await _unitOfWork.CompleteAsync() == DataStoreResult.Success)
                    return Redirect(
                        "/Administration/Business/RunningCost");

                return View("/Views/Administration/Business/RunningCost/Edit.cshtml", model);
            }
            catch (Exception ex)
            {
                _unitOfWork.Log(ex);

                ModelState.AddModelError(
                    "Error",
                    Models.Log.Message_CouldNotSave);

                return View("/Views/Administration/Business/RunningCost/Edit.cshtml", model);
            }
        }

        [HttpPost("/Administration/Business/RunningCost/Cancel")]
        public IActionResult Cancel()
        {
            return Redirect(
                "/Administration/Business/RunningCost");
        }
    }
}