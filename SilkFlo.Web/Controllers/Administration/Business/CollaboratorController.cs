/*********************************************************
       Code Generated By  .  .  .  .  Delaney's ScriptBot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Template Name.  .  .  .  .  .  Project Green 3.0
       Template Version.  .  .  .  .  20210407 014
       Author .  .  .  .  .  .  .  .  Delaney

                      ,        ,--,_
                       \ _ ___/ /\|
                       ( )__, )
                      |/_  '--,
                        \ `  / '

 *********************************************************/

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Linq;
using System;
using System.Threading.Tasks;
using SilkFlo.Data.Core;

namespace SilkFlo.Web.Controllers.Administration.Business
{
    public partial class CollaboratorController : Abstract
    {
        public CollaboratorController(IUnitOfWork unitOfWork,
                                  Services.ViewToString viewToString,
                                  IAuthorizationService authorisation) : base(unitOfWork, viewToString, authorisation) { }


        [HttpGet("/Administration/Business/Collaborator")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Index()
        {
            try
            {
                IEnumerable<Data.Core.Domain.Business.Collaborator> cores;

                cores = (await _unitOfWork.BusinessCollaborators
                                         .GetAllAsync())
                                         .ToArray();

                await _unitOfWork.BusinessIdeas.GetIdeaForAsync(cores);
                await _unitOfWork.Users.GetInvitedByForAsync(cores);
                await _unitOfWork.Users.GetUserForAsync(cores);

                var models = new List<Models.Business.Collaborator>();

                if(cores != null)
                {
                    foreach(var core in cores)
                    {
                        var model = new Models.Business.Collaborator(core);
                        models.Add(model);
                    }
                }

                var summary = new Models.Summary<Models.Business.Collaborator>
                {
                    Models = models,
                    Count = models.Count,
                };

                return View("/Views/Administration/Business/Collaborator/Index.cshtml", summary);
            }
            catch (Exception ex)
            {
                _unitOfWork.Log(ex);

                var summary = new Models.Summary<Models.Business.Collaborator>
                {
                    Models = null,
                    Count = 0,
                };

                ModelState.AddModelError(
                        "Error",
                        Models.Log.Message_DatabaseErrorFetchList);

                return View("/Views/Administration/Business/Collaborator/Index.cshtml", summary);
            }
        }
        [HttpGet("/Administration/Business/Collaborator/Delete/{id}")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Delete (string id)
        {
            if (id == null)
                return Redirect("/Administration/business/collaborator");

            var collaborator = await _unitOfWork.BusinessCollaborators.GetAsync(id);

            if (collaborator == null)
                return Redirect("/Administration/Business/Collaborator");
            else
            {
                await _unitOfWork.BusinessIdeas.GetIdeaForAsync(collaborator);
                await _unitOfWork.Users.GetInvitedByForAsync(collaborator);
                await _unitOfWork.Users.GetUserForAsync(collaborator);

                if (collaborator.CreatedById != null)
                    collaborator.CreatedBy = await _unitOfWork.Users.GetAsync(collaborator.CreatedById);

                if (collaborator.UpdatedById != null)
                    collaborator.UpdatedBy = await _unitOfWork.Users.GetAsync(collaborator.UpdatedById);

                var model = new Models.Business.Collaborator(collaborator);

                return View("/Views/Administration/Business/Collaborator/delete.cshtml", model);
            }
        }
        [HttpPost("/Administration/Business/Collaborator/Delete")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Delete(Models.Business.Collaborator model)
        {
            if (model == null)
                return Redirect("/Administration/Business/Collaborator");


            var userId = GetUserId();

            if (userId == null)
            {
                ModelState.AddModelError("Error",
                                         "UserId is missing.");

                return View("/Views/Administration/Business/Collaborator/Delete.cshtml", model);
            }


            if (model.Id == null)
            {
                var message = "[POST] The primary key ID is missing.";

                ModelState.AddModelError("Error",
                                         message);

                _unitOfWork.Log(message,
                                Severity.Warning);

                await _unitOfWork.CompleteAsync();

                return View("/Views/Administration/Business/Collaborator/Delete.cshtml", model);
            }


            try
            {
                await _unitOfWork.BusinessCollaborators
                                 .RemoveAsync(model.Id);

                await _unitOfWork.CompleteAsync();

                return Redirect(
                    "/Administration/Business/Collaborator");
            }
            catch (ChildDependencyException ex)
            {
                ModelState.AddModelError("Error",
                                         ex.Message);
                return View("/Views/Administration/Business/Collaborator/Delete.cshtml", model);
            }
            catch (NotFoundException ex)
            {
                ModelState.AddModelError("Error",
                                         ex.Message);
                return View("/Views/Administration/Business/Collaborator/Delete.cshtml", model);
            }
            catch (Exception ex)
            {
                ModelState.AddModelError("Error",
                                         "Cannot delete the Collaborator.");

                _unitOfWork.Log(ex);
                await _unitOfWork.CompleteAsync();
                return View("/Views/Administration/Business/Collaborator/Delete.cshtml", model);
            }
        }

        [HttpGet("/Administration/Business/Collaborator/Edit/{id}")]
        [HttpGet("/Administration/Business/Collaborator/Edit")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Edit(string id)
        {
            Data.Core.Domain.Business.Collaborator collaborator;

            if (string.IsNullOrWhiteSpace(id))
            {
                collaborator = new Data.Core.Domain.Business.Collaborator
                {
                    Id = Guid.NewGuid().ToString(),
                };
            }
            else
            {
                collaborator = await _unitOfWork.BusinessCollaborators.GetAsync(id);

                if (collaborator == null)
                    return Redirect(
                        "/Administration/Business/Collaborator");
                await _unitOfWork.BusinessIdeas.GetIdeaForAsync(collaborator);
                await _unitOfWork.Users.GetInvitedByForAsync(collaborator);
                await _unitOfWork.Users.GetUserForAsync(collaborator);

            }

            var model = new Models.Business.Collaborator(collaborator);
            await model.GetCreatedAndUpdated(_unitOfWork);

            // Core parents and children for selector lists
            await GetRoles_For_CollaboratorRolesAsync(model);



            var coreInvitedBies = await _unitOfWork.Users.GetAllAsync();
            model.InvitedBies.Add(new Models.User{ DisplayText = "Select..." });
            model.InvitedBies.AddRange(Models.User.Create(coreInvitedBies));
            var coreUsers = await _unitOfWork.Users.GetAllAsync();
            model.Users.AddRange(Models.User.Create(coreUsers));

            return View("/Views/Administration/Business/Collaborator/Edit.cshtml", model);
        }

    // Core parents and children for selector lists
        private async Task GetRoles_For_CollaboratorRolesAsync(Models.Business.Collaborator model)
        {
            var core = model.GetCore();

            await _unitOfWork.BusinessCollaboratorRoles.GetForCollaboratorAsync(core);
            await _unitOfWork.BusinessRoles.GetRoleForAsync(core.CollaboratorRoles);

            var roles = await _unitOfWork.BusinessRoles.GetAllAsync();

            foreach (var role in roles)
            {
                var selector = new Models.Selector
                {
                    Id = role.Id,
                    Name = role.ToString(),
                    Description = role.Description,
                };

                model.AllRoles_For_CollaboratorRoles.Add(selector);

                foreach (var collaboratorRole in model.CollaboratorRoles)
                    if (selector.Id == collaboratorRole.RoleId)
                    {
                        selector.IsSelected = true;
                        break;
                    }
            }
        }




        [HttpPost("/Administration/Business/Collaborator/Edit")]
        [Authorize(Policy = Policy.Administrator)]
        public async Task<IActionResult> Edit(Models.Business.Collaborator model)
        {
            try
            {
                // Get the userId
                var userId = GetUserId();


                // Is the userId present.
                // If not return to view.                
                if (userId == null)
                {
                    ModelState.AddModelError(
                            "Error",
                            "userId is missing.");

                    return View("/Views/Administration/Business/Collaborator/Edit.cshtml", model);
                }


                // Is the model valid?
                // If not return to view.
                bool isValid = Validate(_unitOfWork, model);

                var feedback = new ViewModels.Feedback();
                feedback = await model.CheckUniqueAsync(_unitOfWork, feedback);
                if (!feedback.IsValid)
                {
                    isValid = false;
                    foreach (var feedbackElement in feedback.Elements)
                        model.Errors.Add(feedbackElement.Value);
                }

                if (!isValid)
                {
                    // Get parent: User -> InvitedBy
                    await _unitOfWork.Users.GetInvitedByForAsync(model.GetCore());
                    model.InvitedBy =
                        model.GetCore().InvitedBy == null ?
                            null :
                            new Models.User(model.GetCore().InvitedBy);


                    // Get parent: User -> User
                    await _unitOfWork.Users.GetUserForAsync(model.GetCore());
                    model.User =
                        model.GetCore().User == null ?
                            null :
                            new Models.User(model.GetCore().User);

                    // Get list of potential parents: User -> InvitedBy
                    var coreInvitedBies = await _unitOfWork.Users.GetAllAsync();
                    model.InvitedBies.Add(new Models.User{ DisplayText = "<Empty>" });
                    foreach (var core in coreInvitedBies)
                        model.InvitedBies.Add(new Models.User(core));

                    // Get list of potential parents: User -> User
                    var coreUsers = await _unitOfWork.Users.GetAllAsync();
                    foreach (var core in coreUsers)
                        model.Users.Add(new Models.User(core));


                    return View("/Views/Administration/Business/Collaborator/Edit.cshtml", model);
                }


                // Process the forms content.
                await _unitOfWork.BusinessCollaborators.AddAsync(model.GetCore());


               await ProcessManyToMany_Roles_For_CollaboratorRoles(model);


                if(await _unitOfWork.CompleteAsync() == DataStoreResult.Success)
                    return Redirect(
                        "/Administration/Business/Collaborator");

                return View("/Views/Administration/Business/Collaborator/Edit.cshtml", model);
            }
            catch (Exception ex)
            {
                _unitOfWork.Log(ex);

                ModelState.AddModelError(
                    "Error",
                    Models.Log.Message_CouldNotSave);

                return View("/Views/Administration/Business/Collaborator/Edit.cshtml", model);
            }
        }

        private async Task ProcessManyToMany_Roles_For_CollaboratorRoles(Models.Business.Collaborator model)
        {
            try
            {
                // Get the selected roles for Collaborator Roles
                var selectedRoles_For_CollaboratorRoles = model.AllRoles_For_CollaboratorRoles.Where(x => x.IsSelected);

                // Un-assign roles_For_CollaboratorRoles from collaborator
                await _unitOfWork.BusinessCollaboratorRoles.GetForCollaboratorAsync(model.GetCore());


                var collaboratorRolesLength = model.GetCore().CollaboratorRoles.Count();
                for (var i = collaboratorRolesLength - 1; i >= 0; i--)
                {
                    var collaboratorRole = model.GetCore().CollaboratorRoles[i];

                    await _unitOfWork.BusinessCollaboratorRoles
                                     .RemoveAsync(collaboratorRole);

                    model.GetCore()
                         .CollaboratorRoles
                         .Remove(collaboratorRole);
                }

                // Assign roles_For_CollaboratorRoles to collaborator
                var roles = await _unitOfWork.BusinessRoles.GetAllAsync();
                int index = 0;
                foreach (var role in roles)
                {
                    var collaboratorRole = model.AllRoles_For_CollaboratorRoles[index];
                    if(collaboratorRole.IsSelected)
                    {
                        await _unitOfWork.BusinessCollaboratorRoles
                                         .AddAsync(new Data.Core.Domain.Business.CollaboratorRole
                                            {
                                                Collaborator = model.GetCore(),
                                                RoleId = role.Id
                                            });
                    }

                    index++;
                }
            }
            catch
            {
                throw;
            }
        }


        [HttpPost("/Administration/Business/Collaborator/Cancel")]
        public IActionResult Cancel()
        {
            return Redirect(
                "/Administration/Business/Collaborator");
        }
    }
}