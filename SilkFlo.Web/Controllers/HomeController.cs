/*********************************************************
       Code Generated By  .  .  .  .  Delaney's ScriptBot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Template Name.  .  .  .  .  .  Project Green 3.0
       Template Version.  .  .  .  .  20210213 006
       Author .  .  .  .  .  .  .  .  Delaney

                          .___,
                       ___('v')___
                       `"-\._./-"'
                           ^ ^

 *********************************************************/

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using SVGChartTools.DataSet;
using System;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;

namespace SilkFlo.Web.Controllers
{
    public partial class HomeController : AbstractResubscribe
    {
        private readonly Data.Core.IUnitOfWork _unitOfWork;

        public HomeController(Data.Core.IUnitOfWork unitOfWork,
                              Services.ViewToString viewToString,
                              IAuthorizationService authorization) : base(unitOfWork, viewToString, authorization) 
        {
            _unitOfWork = unitOfWork;
        }

        [Route("")]
        public async Task<IActionResult> Index()
        {
            // Get the select tenantId
            var userId = GetUserId();
            int? difference = 0;
            // Guard Clause
            if (userId != null)
            {
                var user = await _unitOfWork.Users.GetAsync(userId);
                if(user != null)
                    difference = user.CreatedDate?.Subtract(DateTime.Now).Days;
            }

            if (_unitOfWork is null) // (!Data.Persistence.UnitOfWork.IsLoaded)
                return View("/Views/Home/maintenance.cshtml"); //return Redirect("maintenance");

            if ((await AuthorizeAsync(Policy.Subscriber)).Succeeded)
                return IndexView(false, difference == 0 ? "new" : "");


            if (!(await _authorization.AuthorizeAsync(User, Policy.Subscriber)).Succeeded)
                return Redirect("Account/SignIn");


            return Redirect("Pricing");
        }


        [Route("maintenance")]
        public IActionResult Maintenance()
        {
            return View("maintenance");
        }



        [Route("administration")]
        [Authorize(Policy.CanViewAdministrationArea)]
        public async Task<IActionResult> Administration()
        {
            ViewBag.InformationLogs = 0;
            ViewBag.WarningLogs = 0;
            ViewBag.CriticalLogs = 0;


            if (!(await _unitOfWork.Logs.GetAllAsync()).Any())
                return View();

            ViewBag.InformationLogs = (await _unitOfWork.Logs
                                                        .FindAsync(x => x.Severity == 0))
                                                        .Count();

            ViewBag.WarningLogs = (await _unitOfWork.Logs
                                                    .FindAsync(x => x.Severity == 1))
                                                    .Count();

            ViewBag.CriticalLogs = (await _unitOfWork.Logs
                                                     .FindAsync(x => x.Severity == 2))
                                                     .Count();


            return View();
        }

        //[Route("Backup")]
        //[Authorize(Policy.CanBackupDataSet)]
        //public IActionResult BackupData()
        //{
        //    _unitOfWork.Complete();

        //    var (zipArchive, memoryStream) = _unitOfWork.Backup();

        //    zipArchive.Dispose();
        //    memoryStream.Dispose();


        //    // Send to client
        //    return File(memoryStream.ToArray(),
        //                "application/zip",
        //                DateTime.Now.ToString("yyyyMMdd HHmmss") + " SilkFlo - Data File.zip");
        //}


        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new Models.Log 
                            { 
                                RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier
                            });
        }
    }
}