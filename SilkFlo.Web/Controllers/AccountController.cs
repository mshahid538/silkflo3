/*********************************************************
       Code Generated By  .  .  .  .  Delaney's ScriptBot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Template Name.  .  .  .  .  .  Project Green 3.0
       Template Version.  .  .  .  .  20210403 004
       Author .  .  .  .  .  .  .  .  Delaney

                          .___,
                       ___('v')___
                       `"-\._./-"'
                           ^ ^

 *********************************************************/

using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using System;
using System.IO;
using System.Linq;
using System.Text;
using SilkFlo.Data.Core;
using SilkFlo.Email;
using SilkFlo.Web.Services;
using SilkFlo.Web.Services.Models.Account;
using SignInResult = SilkFlo.Data.Core.SignInResult;
using Microsoft.Identity.Client;
using SilkFlo.Web.Models;
using System.Collections.Generic;
using System.Net.Http;
using Microsoft.Extensions.Configuration;
using Microsoft.AspNetCore.Http;
using System.IdentityModel.Tokens.Jwt;
using System.Web;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;

namespace SilkFlo.Web.Controllers;

[Route("[controller]/[action]")]
public partial class AccountController : AbstractAPI
{
    private readonly IConfiguration _configuration;
    private readonly SaasFullfilmentManager _manager;
    private readonly ILogger<AccountController> _logger;
    public AccountController(IUnitOfWork unitOfWork,
        ViewToString viewToString,
        IAuthorizationService authorization, IConfiguration configuration, ILogger<AccountController> logger) : base(unitOfWork, viewToString, authorization)
    {
        _configuration = configuration;
        _manager = new SaasFullfilmentManager(_configuration);
        _logger = logger;
    }


    #region Access denied

    [HttpGet]
    public IActionResult AccessDenied()
    {
        if (Request.QueryString.Value != null
            && Request.QueryString.HasValue
            && Request.QueryString.Value.IndexOf("%2Fapi%2F", StringComparison.Ordinal) > -1)
            return Content("");

        ViewBag.HideNavigation = true;
        return View(
            "/Views/MessagePage.cshtml",
            new ViewModels.MessagePage
            {
                Title = "Access Denied",
                Message = "<span class=\"silkflo-text-danger\">You do not have access to this resource.<span>",
                ShowContinueButton = false
            });
    }

    #endregion

    #region ConfirmEmail

    [HttpGet]
    [AllowAnonymous]
    public async Task<IActionResult> ConfirmEmail(string userId,
        string confirmationToken = null)
    {
        if (string.IsNullOrEmpty(confirmationToken))
            return RedirectToAction(
                "Index",
                "Home");

        var user = await _unitOfWork.Users.GetAsync(userId);

        if (user != null)
            if (user.EmailConfirmationToken == confirmationToken)
            {
                if (!string.IsNullOrWhiteSpace(user.EmailNew))
                {
                    user.Email = user.EmailNew.ToLower();
                    user.EmailNew = "";
                }

                user.IsEmailConfirmed = true;
                await _unitOfWork.CompleteAsync();

                ViewBag.HideNavigation = true;
                return View(
                    "/Views/MessagePage.cshtml",
                    new ViewModels.MessagePage
                    {
                        Title = "Email Confirmed",
                        Message = "Thank you for confirming your email."
                    });
            }

        return Redirect("/account/EmailNotSent");
    }

    #endregion

    [HttpGet("/account/ResendConfirmEmail/userId/{userId}")]
    [AllowAnonymous]
    public async Task<IActionResult> ResendConfirmEmail(string userId)
    {
        try
        {
            var user = await _unitOfWork.Users.GetAsync(userId);

            // Guard Clause
            if (user == null)
                return BadRequest("User not found");

            if (user.IsEmailConfirmed)
                return NoContent();

            user.EmailNew = user.Email;


            await SendEmailConfirmationMessageAsync(user);
            await _unitOfWork.AddAsync(user);
            await _unitOfWork.CompleteAsync();

            ViewBag.HideNavigation = true;
            return View(
                "/Views/MessagePage.cshtml", 
                new ViewModels.MessagePage
                {
                    Title = "Email Confirmation Sent",
                    Message = "Open the email and click on the link to confirm the change."
                });
        }
        catch (Exception e)
        {
            _unitOfWork.Log(e);
            return BadRequest();
        }
    }



    #region ForgotPassword

    [HttpGet]
    [AllowAnonymous]
    public IActionResult ForgotPassword()
    {
        return View();
    }

    [HttpPost]
    [AllowAnonymous]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> ForgotPassword(
        ForgotPassword model)
    {
        if (!ModelState.IsValid)
            return View(model);


        var user = await _unitOfWork.Users.GetUsingEmailAsync(model.Email);

        if (user is not {IsEmailConfirmed: true})
            return RedirectToAction(
                nameof(ForgotPasswordConfirmation));


        // Create the email
        var token =
            await _unitOfWork.GeneratePasswordResetTokenAsync(user);

        var resetUrl =
            $"Account/ResetPassword?userId={user.Id}&resetToken={token}";


        BookMark[] bookmarks =
        {
            new("FIRSTNAME", user.FirstName),
            new("EMAIL", user.Email),
            new BookmarkLink("PATH", resetUrl, "reset your password here")
        };

        await Service.SendAsync(
            "Account Recovery - " + Data.Core.Settings.ApplicationName,
            Template.PasswordReset,
            new MailBox(Data.Core.Settings.ApplicationName, "hello@silkflo.com"),
            new MailBox(user.Fullname, user.Email),
            bookmarks);

        return RedirectToAction(
            nameof(ForgotPasswordConfirmation));
    }

    #endregion

    #region ForgotPasswordConfirmation

    [HttpGet]
    [AllowAnonymous]
    public IActionResult ForgotPasswordConfirmation()
    {
        return View();
    }

    #endregion

    #region Change Password

    // /account/ChangePassword
    [Authorize]
    public IActionResult ChangePassword(
        string returnUrl,
        string userId)
    {
        return View(
            new ChangePassword
            {
                Id = userId,
                ReturnUrl = returnUrl
            });
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> ChangePassword(
        ChangePassword changePassword)
    {
        if (ModelState.IsValid)
        {
            var message = changePassword.IsPasswordValid();
            if (!string.IsNullOrWhiteSpace(message))
            {
                ModelState.AddModelError(
                    "Error",
                    message);
            }

            if (changePassword.IsMatched())
            {
                var user = await _unitOfWork.Users.GetAsync(changePassword.Id);

                if (user == null)
                {
                    ModelState.AddModelError("Error",
                        "Could not find User");
                    return View(changePassword);
                }

                if (_unitOfWork.VerifyPassword(changePassword.OldPassword, user.PasswordHash))
                {
                    user.PasswordHash = _unitOfWork.GeneratePasswordHash(changePassword.Password);

                    if (await _unitOfWork.CompleteAsync() == DataStoreResult.Success)
                    {
                        if (changePassword.ReturnUrl == null) return View();

                        changePassword.ReturnUrl = changePassword.ReturnUrl.Replace("{and}", "&");

                        // Get the parameters
                        var parts = changePassword.ReturnUrl.Split('?');
                        var routeValues = parts[1].Split('&');
                        var userId = routeValues[0].Split('=');
                        var returnUrl = routeValues[1].Split('=');

                        return RedirectToAction(
                            "UserProfile", "account", new {userId = userId[1], returnUrl = returnUrl[1]});
                    }

                    ModelState.AddModelError("Error",
                        "Could not change the password");
                }
                else
                {
                    ModelState.AddModelError(
                        "Error",
                        "The current password is not correct");
                }
            }
            else
            {
                ModelState.AddModelError(
                    "Error",
                    "The passwords do not match");
            }
        }

        return View(changePassword);
    }

    #endregion

    #region Lockout

    [HttpGet]
    [AllowAnonymous]
    public IActionResult Lockout()
    {
        ViewBag.HideNavigation = true;
        return View(
            "/Views/MessagePage.cshtml",
            new ViewModels.MessagePage
            {
                Title = "Locked Out",
                Message = "This account has been locked out, please try again later."
            });
    }

    #endregion


    #region ResetPassword

    // Example: https://localhost:5001/Account/ResetPassword?userId=TEST&resetToken=TEST
    [HttpGet]
    [AllowAnonymous]
    public IActionResult ResetPassword(
        string resetToken = null)
    {
        if (string.IsNullOrEmpty(resetToken))
            return Redirect("/");

        var model = new ResetPassword {ResetToken = resetToken};

        return View(model);
    }

    [HttpPost]
    [AllowAnonymous]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> ResetPassword(
        ResetPassword model)
    {
        if (!ModelState.IsValid)
            return View(model);

        var user = await _unitOfWork.Users.GetUsingEmailAsync(model.Email);

        if (user == null)
            // Don't reveal that the user does not exist
            return RedirectToAction(
                nameof(ResetPasswordConfirmation));


        if (model.Email.IndexOf("practiceaccount.xyz", StringComparison.OrdinalIgnoreCase) > -1)
        {
            ModelState.AddModelError(
                string.Empty,
                "It is not possible to change the password of practice accounts.");
            return View();
        }


        var message = model.IsPasswordValid(true);
        if (!string.IsNullOrWhiteSpace(message))
        {
          
            ModelState.AddModelError(
                string.Empty,
                message);
            return View();
        }

        // Do the passwords match?
        if (!model.IsMatched())
        {
            ModelState.AddModelError(
                string.Empty,
                "The passwords provided do not match.");
            return View();
        }


        // Reset the password
        try
        {
            if (await _unitOfWork.ResetPasswordAsync(user,
                    model.ResetToken,
                    model.Password) == SignInResult.Succeeded)
                return RedirectToAction(
                    nameof(ResetPasswordConfirmation));
        }
        catch
        {
            ModelState.AddModelError(
                string.Empty,
                "There was an unknown error while trying to reset your password. Please try again later.");
        }

        ModelState.AddModelError(
            string.Empty,
            "Could not reset the password");

        return View();
    }

    #endregion

    #region ResetPasswordConfirmation

    [HttpGet]
    [AllowAnonymous]
    public IActionResult ResetPasswordConfirmation()
    {
        return View();
    }

    #endregion


    private async Task<DateTime> GetExpiratoryDate(Data.Core.Domain.User user)
    {
        var expiratoryDate = DateTime.MaxValue;

        // Client is null?
        if (user.Client == null)
        {
            expiratoryDate = DateTime.Now;
            return expiratoryDate;
        }


        // Client is not tenant
        if (user.Client.TypeId != Enumerators.ClientType.Client39.ToString()
            || user.Client.IsPractice)
            return expiratoryDate;


        // subscription valid? 
        var subscription =
            await new SilkFlo.Web.Models.Business.Client(user.Client)
                .GetLastSubscriptionAsync(_unitOfWork);


        // subscription valid?
        if (subscription != null)
            return subscription.DateEnd ?? DateTime.MaxValue;


        expiratoryDate = DateTime.Now;
        return expiratoryDate;
    }

    #region Sign In

    // /account/signin
    [HttpGet]
    public async Task<IActionResult> SignIn()
    {
        if ((await AuthorizeAsync(Policy.Subscriber)).Succeeded)
            return Redirect("/Dashboard");

        try
        {
            var signIn = new SignIn();

            if (Request.Cookies[Cookie.RememberMe.ToString()] != null)
                signIn.RememberMe = bool.Parse(Request.Cookies[Cookie.RememberMe.ToString()] ?? string.Empty);

            if (Request.Cookies[Cookie.StaySignedIn.ToString()] != null)
                signIn.StaySignedIn = bool.Parse(Request.Cookies[Cookie.StaySignedIn.ToString()] ?? string.Empty);


            if (signIn.StaySignedIn)
            {
                var email = Request.Cookies[Cookie.Email.ToString()];
                var passwordHash = Request.Cookies[Cookie.PasswordHash.ToString()];

                var signInResult = _unitOfWork.ValidatePasswordHash(email,
                    passwordHash,
                    out var user);


                if (signInResult != SignInResult.Succeeded)
                    return View(signIn);


                // Is Valid
                await _unitOfWork.UserRoles.GetForUserAsync(user);
                await _unitOfWork.Roles.GetRoleForAsync(user.UserRoles);
                await _unitOfWork.BusinessClients.GetClientForAsync(user);


                var expiratoryDate = await GetExpiratoryDate(user);
                Services.Models.Cookie.Save(
                    user,
                    signIn.StaySignedIn,
                    expiratoryDate,
                    this);

                if (expiratoryDate < DateTime.Now)
                {
                    SignOutProcess();
                    return View(signIn);
                }

                return RedirectToAction(
                    "Index",
                    "Home");
            }

            if (signIn.RememberMe)
                signIn.Email = Request.Cookies[Cookie.Email.ToString()];

            return View(signIn);
        }
        catch
        {
            return View();
        }
    }


    // /account/signin
    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> SignIn(SignIn model, [FromQuery(Name = "returnUrl")] string returnUrl = "")
    {
        // Guard Clause
        if (model == null)
        {
            ModelState.AddModelError(
                string.Empty,
                "The object is missing");

            model = new SignIn();
            return View(model);
        }


        if (!string.IsNullOrWhiteSpace(returnUrl))
            returnUrl = returnUrl.Trim();


        if (!string.IsNullOrWhiteSpace(returnUrl))
        {
            if (returnUrl.IndexOf("?returnUrl", StringComparison.OrdinalIgnoreCase) == 0)
                returnUrl = returnUrl.Substring(10);

            if (returnUrl.IndexOf("=", StringComparison.OrdinalIgnoreCase) == 0)
                returnUrl = returnUrl.Substring(1);
        }

        // Guard Clause
        if (!ModelState.IsValid)
            return View(model);


        Data.Core.Domain.User user = null;

        var isPracticeUser = false;
        var signInResult = SignInResult.Failed;
        if (model.Email.IndexOf(Settings.PracticeAccountEmailSuffix, StringComparison.OrdinalIgnoreCase) == -1)
        {
            // This is NOT a practice account
            signInResult = _unitOfWork.ValidateCredentials(
                model.Email,
                model.Password,
                out user);
        }
        else
        {
            // We have a practice account
            isPracticeUser = true;
            var settings = await GetApplicationSettingsAsync();

            // Are we allowing practice account to sign in?
            // (Head over to Settings in the UI to change practice account sign in.
            if (settings.PracticeAccountCanSignIn
                && settings.PracticeAccountPassword == model.Password)
            {
                user = await _unitOfWork.Users.GetByEmailAsync(model.Email);

                if (user != null)
                {
                    signInResult = SignInResult.Succeeded;

                    if (user.IsLockedOut)
                        signInResult = SignInResult.IsLockedOut;

                    if (!user.IsEmailConfirmed)
                        signInResult = SignInResult.EmailNotConfirmed;
                }
            }
        }


        // Guard Clause
        if (user == null)
        {
            ModelState.AddModelError(
                string.Empty,
                "Invalid sign in attempt");

            return View(model);
        }


        switch (signInResult)
        {
            // Is Valid and email is NOT confirmed
            case SignInResult.Succeeded when !user.IsEmailConfirmed:
            {
                // Redirect to Sign Up Confirmation
                var callbackUrl =
                    Url.EmailConfirmationLink(
                        user.Id,
                        user.EmailConfirmationToken, Request.Scheme);


                BookMark[] bookmarks =
                {
                    new("FIRSTNAME", user.FirstName),
                    new BookmarkLink("PATH", callbackUrl, "")
                };

                await Service.SendAsync(
                    "Confirm Your Email - " + Data.Core.Settings.ApplicationName,
                    Template.EmailConfirmation,
                    new MailBox(Data.Core.Settings.ApplicationName, "hello@silkflo.com"),
                    new MailBox(user.Fullname, user.Email),
                    bookmarks);

                var signUpConfirmation =
                    new SignUpConfirmation(
                        user.Email,
                        returnUrl);

                return View(
                    "SignUpConfirmation",
                    signUpConfirmation);
            }


            // Is Valid
            case SignInResult.Succeeded:
                {
                    await _unitOfWork.UserRoles.GetForUserAsync(user);
                    await _unitOfWork.Roles.GetRoleForAsync(user.UserRoles);

                    returnUrl = await SignInAsync(
                        user,
                        model,
                        returnUrl,
                        isPracticeUser);

                    if(returnUrl == "/account/signin")
                        return View(model);

                    if (returnUrl == "/Account/SubscriptionExpired")
                        return Redirect("/Account/SubscriptionExpired");


                    // Exit
                    if (returnUrl == null
                    || !Url.IsLocalUrl(returnUrl))
                    return RedirectToAction("Index",
                        "Home");


                    if (Url.IsLocalUrl(returnUrl))
                        return Redirect(returnUrl);


                    return RedirectToAction("Index",
                        "Home");
                }


            case SignInResult.IsLockedOut:
                return RedirectToAction(nameof(Lockout));


            case SignInResult.EmailNotConfirmed:

                //var url = "https://" + GetDomainName() + "/account/ResendConfirmEmail/userId/" + user.Id;
                var url = "/account/ResendConfirmEmail/userId/" + user.Id;

                ModelState.AddModelError(
                    string.Empty,
                    "Please confirm your email address before attempting to sign in. <a style=\"color: var(--bs-dark);\" href=\"" + url + "\">Resend email confirmation message</a>.");

                return View(model);


            case SignInResult.Failed:
            case SignInResult.Expired:
            case SignInResult.IsNotAllowed:
            default:
                ModelState.AddModelError(
                    string.Empty,
                    "Invalid sign in attempt");

                return View(model);
        }
    }

    public async Task<IActionResult> SignInMicrosoft()
    {
        // Retrieve the Azure AD app settings from configuration
        var azureAdOptions = _configuration.GetSection("AzureAd").Get<SilkFlo.Web.Models.AzureAdOptions>();

        // Construct the sign-in URL
        var signInUrl = $"{azureAdOptions.Instance}organizations/oauth2/v2.0/authorize?" +
            $"client_id={azureAdOptions.ClientId}&response_type=code%20id_token&" +
            $"response_mode=form_post&nonce={Guid.NewGuid()}" +
            $"redirect_uri={azureAdOptions.CallbackPath.TrimStart('/')}&state=silkflo_user&scope={azureAdOptions.Scopes}";
        //var signInUrl = $"{azureAdOptions.Instance}{azureAdOptions.TenantId}/oauth2/v2.0/authorize?" +
        //    $"client_id={azureAdOptions.ClientId}&response_type=code%20id_token&" +
        //    $"response_mode=form_post&nonce={Guid.NewGuid()}" +
        //    $"redirect_uri={azureAdOptions.CallbackPath.TrimStart('/')}&state=silkflo_user&scope={azureAdOptions.Scopes}";

        // Redirect the user to the sign-in URL

        _logger.LogInformation($"MS-LoginRedirectCall | {signInUrl}");
        return Redirect(signInUrl);
    }

    public async Task<IActionResult> SignUpMicrosoft(string priceId)
    {
        // Retrieve the Azure AD app settings from configuration
        var azureAdOptions = _configuration.GetSection("AzureAd").Get<SilkFlo.Web.Models.AzureAdOptions>();

        // Construct the sign-in URL
        var signInUrl = $"{azureAdOptions.Instance}{azureAdOptions.TenantId}/oauth2/v2.0/authorize?" +
            $"client_id={azureAdOptions.ClientId}&response_type=code%20id_token&" +
            $"response_mode=form_post&nonce={Guid.NewGuid()}" +
            $"redirect_uri={azureAdOptions.CallbackPath.TrimStart('/')}&state={priceId}&scope={azureAdOptions.Scopes}";

        // Redirect the user to the sign-in URL
        return Redirect(signInUrl);
    }

    public async Task<IActionResult> SignInMicrosoftCallback(string code, string id_token, string state, string session_state)
    {
        _logger.LogInformation($"MS-LoginRedirectCallback | CODE: {code} | id_token: {id_token} | state: {state}");
        // Retrieve the Azure AD app settings from configuration
        //var azureAdOptions = _configuration.GetSection("AzureAd").Get<SilkFlo.Web.Models.AzureAdOptions>();

        try
        {
            if (!String.IsNullOrEmpty(id_token))
            {
                #region Token claims
                var handler = new JwtSecurityTokenHandler();
                var jwtToken = handler.ReadJwtToken(id_token); // tokenResponse.AccessToken);
                System.Security.Claims.Claim openidSubClaim = null, firstName = null, lastName = null, emailClaim = null, 
                    tenantClaim = null, preferredEmailClaim = null;

                if (jwtToken is not null)
                {
                    // Retrieve specific claims based on the scopes
                    var claims = jwtToken.Claims ?? Enumerable.Empty<System.Security.Claims.Claim>();
                    if (claims is not null && claims.Count() > 0)
                    {
                        _logger.LogInformation($"MS-LoginRedirectCallback | Claims: {JsonConvert.SerializeObject(claims)}");

                        if (claims.Any(x => x.Type.ToLower().Equals("sub") && !String.IsNullOrEmpty(x.Value)))
                        {
                            openidSubClaim = claims.FirstOrDefault(c => c.Type == "sub");
                            _logger.LogInformation($"MS-LoginRedirectCallback | OpenId Claim: {JsonConvert.SerializeObject(openidSubClaim)}");
                        }

                        if (claims.Any(x => x.Type.ToLower().Equals("given_name") && !String.IsNullOrEmpty(x.Value)))
                        {
                            firstName = claims.FirstOrDefault(c => c.Type == "given_name");
                            _logger.LogInformation($"MS-LoginRedirectCallback | FirstName Claim: {JsonConvert.SerializeObject(firstName)}");
                        }

                        if (claims.Any(x => x.Type.ToLower().Equals("family_name") && !String.IsNullOrEmpty(x.Value)))
                        {
                            lastName = claims.FirstOrDefault(c => c.Type == "family_name");
                            _logger.LogInformation($"MS-LoginRedirectCallback | LastName Claim: {JsonConvert.SerializeObject(lastName)}");
                        }

                        if (claims.Any(x => x.Type.ToLower().Equals("email") && !String.IsNullOrEmpty(x.Value)))
                        {
                            emailClaim = claims.FirstOrDefault(c => c.Type == "email");
                            _logger.LogInformation($"MS-LoginRedirectCallback | Email Claim: {JsonConvert.SerializeObject(emailClaim)}");
                        }

                        if (claims.Any(x => x.Type.ToLower().Equals("preferred_username") && !String.IsNullOrEmpty(x.Value)))
                        {
                            preferredEmailClaim = claims.FirstOrDefault(c => c.Type == "preferred_username");
                            _logger.LogInformation($"MS-LoginRedirectCallback | Preferred Username Claim: {JsonConvert.SerializeObject(preferredEmailClaim)}");
                        }

                        if (claims.Any(x => x.Type.ToLower().Equals("tid") && !String.IsNullOrEmpty(x.Value)))
                        {
                            tenantClaim = claims.FirstOrDefault(c => c.Type == "tid");
                            _logger.LogInformation($"MS-LoginRedirectCallback | Tenant Claim: {JsonConvert.SerializeObject(tenantClaim)}");
                        }
                    }
                }
                #endregion

                if (!String.IsNullOrEmpty(state))
                {
                    _logger.LogInformation($"MS-LoginRedirectCallback | Begin SSO processing ...");
                    if (state == "silkflo_user")
                    {
                        _logger.LogInformation($"MS-LoginRedirectCallback | System redirection/state verified.");
                        try
                        {
                            if (emailClaim is not null && !String.IsNullOrEmpty(emailClaim.Value))
                            {
                                var user = await _unitOfWork.GetUserByEmail(emailClaim.Value);
                                if (user is not null && !String.IsNullOrEmpty(user.Email))
                                {
                                    _logger.LogInformation($"MS-LoginRedirectCallback | Begin SignIn flow");
                                    await _unitOfWork.UserRoles.GetForUserAsync(user);
                                    await _unitOfWork.Roles.GetRoleForAsync(user.UserRoles);

                                    var returnUrl = await SignInAsync(
                                        user,
                                        new Services.Models.Account.SignIn() { RememberMe = false, StaySignedIn = false },
                                        "",
                                        true,
                                        true);
                                    _logger.LogInformation($"MS-LoginRedirectCallback | SignInAsync returnUrl: {returnUrl}");

                                    if (returnUrl.ToLower() == "/account/signin".ToLower())
                                        return Redirect("/account/signin");

                                    if (returnUrl.ToLower() == "/Account/SubscriptionExpired".ToLower())
                                        return Redirect("/Account/SubscriptionExpired");

                                    // Exit
                                    if (returnUrl == null || !Url.IsLocalUrl(returnUrl))
                                    {
                                        Add(Services.Cookie.LoginType, true, DateTime.Now.AddDays(30), true);
                                        return RedirectToAction("Index", "Home");
                                    }

                                    if (Url.IsLocalUrl(returnUrl))
                                        return Redirect(returnUrl);

                                    return RedirectToAction("Index", "Home");
                                }
                                else
                                {
                                    _logger.LogInformation($"MS-LoginRedirectCallback | Begin SignUp flow");
                                    if (tenantClaim is not null && !String.IsNullOrEmpty(tenantClaim.Value))
                                    {
                                        var client = await _unitOfWork.GetClientByTenantId(tenantClaim.Value);
                                        _logger.LogInformation($"MS-LoginRedirectCallback | Client: {JsonConvert.SerializeObject(client)}");

                                        if (client is not null)
                                        {
                                            var password = $"@sq4-{Guid.NewGuid()}098a";
                                            var tenantUserToCreate = new Models.User()
                                            {
                                                FirstName = firstName != null ? firstName.Value : "",
                                                LastName = lastName != null ? lastName.Value : "",
                                                Email = emailClaim.Value,
                                                EmailNew = emailClaim.Value,
                                                IsEmailConfirmed = true,
                                                ClientId = client.Id,
                                                Client = new Models.Business.Client(client),
                                                AllRoles_For_UserRoles = new List<Selector>
                                            {
                                                new Selector() { },
                                                new Selector() { },
                                                new Selector() { IsSelected = true },
                                            },
                                                Password = password,
                                                ConfirmPassword = password,
                                                PasswordHash = _unitOfWork.GeneratePasswordHash(password)
                                            };

                                            // Process the forms content.
                                            await _unitOfWork.Users.AddAsync(tenantUserToCreate.GetCore());
                                            await _unitOfWork.UserRoles
                                             .AddAsync(new Data.Core.Domain.UserRole
                                             {
                                                 User = tenantUserToCreate.GetCore(),
                                                 RoleId = "-126"
                                             });

                                            //sign in the new user
                                            var userToLogin = await _unitOfWork.GetUserByEmail(tenantUserToCreate.Email);
                                            await _unitOfWork.UserRoles.GetForUserAsync(userToLogin);
                                            await _unitOfWork.Roles.GetRoleForAsync(userToLogin.UserRoles);

                                            var returnUrl = await SignInAsync(
                                                userToLogin,
                                                new Services.Models.Account.SignIn() { RememberMe = true, StaySignedIn = true },
                                                "",
                                                true,
                                                true);

                                            if (returnUrl == "/account/signin")
                                                return Redirect("/account/signin");

                                            if (returnUrl == "/Account/SubscriptionExpired")
                                                return Redirect("/Account/SubscriptionExpired");

                                            // Exit
                                            if (returnUrl == null || !Url.IsLocalUrl(returnUrl))
                                            {
                                                Add(Services.Cookie.LoginType,
                                                    true,
                                                    DateTime.Now.AddDays(30),
                                                    true);
                                                return RedirectToAction("Index", "Home");
                                            }

                                            if (Url.IsLocalUrl(returnUrl))
                                                return Redirect(returnUrl);

                                            return RedirectToAction("Index", "Home");
                                        }
                                        else
                                        {
                                            _logger.LogInformation($"MS-LoginRedirectCallback | Client is missing!! for {tenantClaim.Value}");
                                            return View("/Views/MessagePage.cshtml", new ViewModels.MessagePage
                                            {
                                                Title = "Access Denied",
                                                Message = "<span class=\"silkflo-text-danger\">Login failed. You do not have access to this resource. Please create an account or use a different login method.<span>",
                                                ShowContinueButton = false
                                            });
                                        }
                                    }

                                }
                            }
                            else
                            {
                                _logger.LogInformation($"MS-LoginRedirectCallback | Preferred Email flow");
                                if (preferredEmailClaim is not null && !String.IsNullOrEmpty(preferredEmailClaim.Value))
                                {
                                    var user = await _unitOfWork.GetUserByEmail(preferredEmailClaim.Value);
                                    if (user is not null && !String.IsNullOrEmpty(user.Email))
                                    {
                                        _logger.LogInformation($"MS-LoginRedirectCallback | Begin SignIn flow");
                                        await _unitOfWork.UserRoles.GetForUserAsync(user);
                                        await _unitOfWork.Roles.GetRoleForAsync(user.UserRoles);

                                        var returnUrl = await SignInAsync(
                                            user,
                                            new Services.Models.Account.SignIn() { RememberMe = false, StaySignedIn = false },
                                            "",
                                            true,
                                            true);
                                        _logger.LogInformation($"MS-LoginRedirectCallback | SignInAsync returnUrl: {returnUrl}");

                                        if (returnUrl.ToLower() == "/account/signin".ToLower())
                                            return Redirect("/account/signin");

                                        if (returnUrl.ToLower() == "/Account/SubscriptionExpired".ToLower())
                                            return Redirect("/Account/SubscriptionExpired");

                                        // Exit
                                        if (returnUrl == null || !Url.IsLocalUrl(returnUrl))
                                        {
                                            Add(Services.Cookie.LoginType, true, DateTime.Now.AddDays(30), true);
                                            return RedirectToAction("Index", "Home");
                                        }

                                        if (Url.IsLocalUrl(returnUrl))
                                            return Redirect(returnUrl);

                                        return RedirectToAction("Index", "Home");
                                    }
                                    else
                                    {
                                        _logger.LogInformation($"MS-LoginRedirectCallback | Begin SignUp flow");
                                        if (tenantClaim is not null && !String.IsNullOrEmpty(tenantClaim.Value))
                                        {
                                            var client = await _unitOfWork.GetClientByTenantId(tenantClaim.Value);
                                            _logger.LogInformation($"MS-LoginRedirectCallback | Client: {JsonConvert.SerializeObject(client)}");

                                            if (client is not null)
                                            {
                                                var password = $"@sq4-{Guid.NewGuid()}098a";
                                                var tenantUserToCreate = new Models.User()
                                                {
                                                    FirstName = firstName != null ? firstName.Value : "",
                                                    LastName = lastName != null ? lastName.Value : "",
                                                    Email = preferredEmailClaim.Value,
                                                    EmailNew = preferredEmailClaim.Value,
                                                    IsEmailConfirmed = true,
                                                    ClientId = client.Id,
                                                    Client = new Models.Business.Client(client),
                                                    AllRoles_For_UserRoles = new List<Selector>
                                                    {
                                                        new Selector() { },
                                                        new Selector() { },
                                                        new Selector() { IsSelected = true },
                                                    },
                                                    Password = password,
                                                    ConfirmPassword = password,
                                                    PasswordHash = _unitOfWork.GeneratePasswordHash(password)
                                                };

                                                // Process the forms content.
                                                await _unitOfWork.Users.AddAsync(tenantUserToCreate.GetCore());
                                                await _unitOfWork.UserRoles
                                                 .AddAsync(new Data.Core.Domain.UserRole
                                                 {
                                                     User = tenantUserToCreate.GetCore(),
                                                     RoleId = "-126"
                                                 });

                                                //sign in the new user
                                                var userToLogin = await _unitOfWork.GetUserByEmail(tenantUserToCreate.Email);
                                                await _unitOfWork.UserRoles.GetForUserAsync(userToLogin);
                                                await _unitOfWork.Roles.GetRoleForAsync(userToLogin.UserRoles);

                                                var returnUrl = await SignInAsync(
                                                    userToLogin,
                                                    new Services.Models.Account.SignIn() { RememberMe = true, StaySignedIn = true },
                                                    "",
                                                    true,
                                                    true);

                                                if (returnUrl == "/account/signin")
                                                    return Redirect("/account/signin");

                                                if (returnUrl == "/Account/SubscriptionExpired")
                                                    return Redirect("/Account/SubscriptionExpired");

                                                // Exit
                                                if (returnUrl == null || !Url.IsLocalUrl(returnUrl))
                                                {
                                                    Add(Services.Cookie.LoginType,
                                                        true,
                                                        DateTime.Now.AddDays(30),
                                                        true);
                                                    return RedirectToAction("Index", "Home");
                                                }

                                                if (Url.IsLocalUrl(returnUrl))
                                                    return Redirect(returnUrl);

                                                return RedirectToAction("Index", "Home");
                                            }
                                            else
                                            {
                                                _logger.LogInformation($"MS-LoginRedirectCallback | Client is missing!! for {tenantClaim.Value}");
                                                return View("/Views/MessagePage.cshtml", new ViewModels.MessagePage
                                                {
                                                    Title = "Access Denied",
                                                    Message = "<span class=\"silkflo-text-danger\">Login failed. You do not have access to this resource. Please create an account or use a different login method.<span>",
                                                    ShowContinueButton = false
                                                });
                                            }
                                        }

                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            _logger.LogError(ex, $"MS-LoginRedirectCallback | ERROR");
                            return View("/Views/MessagePage.cshtml", new ViewModels.MessagePage
                            {
                                Title = "Customer Support",
                                Message = "<span class=\"silkflo-text-danger\">Login failed. Try login again or contact customer support for resolution.<span>",
                                ShowContinueButton = false
                            });
                        }
                    }
                    else
                    {
                        return Redirect($"/shop/subscribe/priceId/{state}?entity={System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(emailClaim.Value))}");
                    }
                }
            }
            return Redirect("/Account/SignIn");
        }
        catch (MsalException ex)
        {
            _logger.LogError(ex, $"MS-LoginRedirectCallback | Msal ERROR");
            return Redirect("/Account/SignIn");
        }
    }


    public async Task<IActionResult> SamlAuth()
    {
        var test = Request;
        return Ok();
    }
    
    public async Task<IActionResult> SignInSaml()
    {
        var test = Request;
        return Ok();
    }
    
    public async Task<IActionResult> SignoutSaml()
    {
        var test = Request;
        return Ok();
    }


    #endregion

    #region Sign Out

    public new IActionResult SignOut()
    {
        var loginType = Request.Cookies[Services.Cookie.LoginType.ToString()];
        SignOutProcess();

        if (loginType != null)
        {
            if (loginType.Equals("true") || loginType.Equals("True"))
            {
                // Initiate Azure AD SSO logout
                string logoutUrl = $"https://login.microsoftonline.com/common/oauth2/v2.0/logout?post_logout_redirect_uri={HttpUtility.UrlEncode("https://app.silkflo.com/Account/SignIn")}";
                return Redirect(logoutUrl);
            }
        }

        return Redirect("/");
    }

    #endregion


    #region User Profile

    [HttpGet]
    [Authorize]
    public async Task<IActionResult> UserProfile
    (string userId,
        string returnUrl,
        string newEmail = "")
    {
        var signedInUserId = GetUserId();

        if (signedInUserId != userId)
            return Redirect(
                "/account/accessDenied");

        var core = await _unitOfWork.Users.GetAsync(userId);

        if (core == null)
            return Redirect(
                "/Index");

        var model = new Models.User();

        // We have to clone the core as the user my have changed the email address
        // and clicked cancel on the EmailChanged view.
        model.GetCore().Update(core);
        model.GetCore().Id = core.Id;

        if (!string.IsNullOrEmpty(newEmail))
            // New email address from the returnURL from EmailChanged.
            model.Email = newEmail;

        ViewBag.ReturnUrl = returnUrl;

        return View(model);
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> UserProfile(
        Models.User user,
        string returnUrl = null)
    {
        if (!ModelState.IsValid)
            return View(user);

        var isError = false;
        if (string.IsNullOrEmpty(user.Email))
        {
            ModelState.AddModelError(
                "Error",
                "The email address is not present");

            isError = true;
        }

        if (string.IsNullOrEmpty(user.FirstName)
            && string.IsNullOrEmpty(user.LastName))
        {
            ModelState.AddModelError(
                "Error",
                "Both the first and last names are not present.");

            isError = true;
        }

        var userId = GetUserId();

        if (await _unitOfWork.Users
                .SingleOrDefaultAsync(x => x.Email == user.Email
                                           && x.Id != userId) != null)
        {
            ModelState.AddModelError(
                "Error",
                "Another user is using this email address.");

            isError = true;
        }

        if (isError)
            return View(user);

        var coreInDataStore = await _unitOfWork.Users.GetAsync(userId);

        if (coreInDataStore.Email != user.Email)
        {
            if (!string.IsNullOrEmpty(returnUrl))
                returnUrl = returnUrl.Replace("&", "{and}");

            var url = string.Concat("/account/EmailChanged?returnUrlIsSent=",
                returnUrl,
                "&userId=",
                user.Id,
                "&email=",
                user.Email,
                "&oldEmail=",
                coreInDataStore.Email);

            return Redirect(url);
        }

        await _unitOfWork.Users.AddAsync(user.GetCore());

        if (await _unitOfWork.CompleteAsync() != DataStoreResult.Success)
            return View(user);


        await _unitOfWork.UserRoles.GetForUserAsync(user.GetCore());
        await _unitOfWork.Roles.GetRoleForAsync(user.GetCore().UserRoles);


        Services.Models.Cookie.Save(
            user.GetCore(),
            false,
            await GetExpiratoryDate(user.GetCore()),
            this);

        if (returnUrl == null)
            return RedirectToAction(
                "Index",
                "Home");


        returnUrl = returnUrl.Replace("{and}", "&");

        if (Url.IsLocalUrl(returnUrl))
            return Redirect(returnUrl);


        return RedirectToAction(
            "Index",
            "Home");
    }

    #endregion

    #region Email Changed
    [HttpGet]
    [AllowAnonymous]
    public async Task<IActionResult> ConfirmEmailChanged(string userId,
        string confirmationToken = null)
    {
        if (string.IsNullOrEmpty(confirmationToken))
            return RedirectToAction(
                "Index",
                "Home");

        var user =
            await
                _unitOfWork.Users
                    .SingleOrDefaultAsync(x => x.Id == userId
                                               && x.EmailConfirmationToken == confirmationToken);

        if (user != null)
        {
            user.IsEmailConfirmed = true;
            user.Email = user.EmailNew;
            user.EmailNew = "";

            await _unitOfWork.CompleteAsync();
            ViewBag.HideNavigation = true;
            return View(
                "/Views/MessagePage.cshtml",
                new ViewModels.MessagePage
                {
                    Title = "Email Change Confirmed",
                    Message = "Thank you for confirming your new email address."
                });
        }
        
        return Redirect("/account/EmailNotSent");
    }

    [HttpGet("/account/EmailNotSent")]
    public IActionResult EmailNotSent()
    {
        ViewBag.HideNavigation = true;
        return View(
            "/Views/MessagePage.cshtml",
            new ViewModels.MessagePage
            {
                Title = "Email not Confirmed",
                Message = "The confirmation message is out of date."
            });
    }

    public IActionResult CancelEmailChanged(
        string returnUrlIsSent = null,
        string userId = "",
        string newEmail = "")
    {
        var url = $"/account/UserProfile?userId={userId}&returnUrl={returnUrlIsSent}&newEmail={newEmail}";
        return Redirect(url);
    }

    #endregion

    [HttpGet("/account/MuteEmail/{id}")]
    public async Task<IActionResult> MuteEmail(string id)
    {
        var core =
            await _unitOfWork.Users
                .SingleOrDefaultAsync(x => x.Id == id);

        if (core == null)
            return View(null);

        core.IsMuted = true;

        await _unitOfWork.CompleteAsync();

        return View(new Models.User(core));
    }

    public IActionResult Cancel(
        string returnUrl = null)
    {
        if (returnUrl == null)
            return RedirectToAction(
                "Index",
                "Home");


        returnUrl = returnUrl.Replace("{and}", "&");

        if (Url.IsLocalUrl(returnUrl))
            return Redirect(returnUrl);

        return RedirectToAction(
            "Index",
            "Home");
    }


    [HttpPost("/api/account/IsEmailAlreadyUsed")]
    public async Task<IActionResult> IsEmailAlreadyUsed()
    {
        try
        {
            using var reader
                = new StreamReader(
                    Request.Body,
                    Encoding.UTF8,
                    true,
                    1024,
                    true);

            var email = await reader.ReadToEndAsync();

            var user = await _unitOfWork.Users.GetByEmailAsync(email);

            if (user == null)
                return Ok(false);
        }
        catch
        {
            // ignored
        }

        return Ok(true);
    }

    [Route("/Account/SubscriptionExpired")]
    public IActionResult SubscriptionExpired()
    {
        ViewBag.HideNavigation = true;
        Delete(Cookie.IsPractice);
        return View(
            "/Views/MessagePage.cshtml",
            new ViewModels.MessagePage
            {
                Title = "Subscription Out of Date",
                Message = "<span class=\"silkflo-text-danger\">Your subscription has expired.<br/>Not to worry, your data is safe.<br/>You can re-subscribe at anytime by clicking <a href=\"/Pricing\">subscribe</a>.</span>",
                ShowContinueButton = false
            });
    }

	#region new Login & sign Up

	[HttpGet]
	public ActionResult Login()
	{
		return View("Login_1");
	}
	[HttpGet]
	public ActionResult SignUp_1()
	{
		return View("SignUp_1");
	}

	[HttpGet]
	public ActionResult OTP()
	{
		return View("SignUpOTP");
	}

	[HttpGet]
	public ActionResult RegisterCompany()
	{
		return View("RegCompany");
	}

    [HttpGet]
    public async Task<IActionResult> AzureMarketplace([FromQuery] string token)
    {
        try
        {
            var feedback = new ViewModels.Feedback
            {
                NamePrefix = "Account.SignUp."
            };

            if (String.IsNullOrWhiteSpace(token))
            {
                feedback.Elements.Add("InvalidToken", "Couldn't identify this purchase. Reopen this SaaS subscription in the Azure portal or in Microsoft 365 Admin Center and select \"Configure Account\" or \"Manage Account\" again.");
                feedback.IsValid = false;
            }

            if (!feedback.IsValid)
                return BadRequest(feedback);

            //var resolveApiResponse = Newtonsoft.Json.JsonConvert.DeserializeObject<Services.Models.ResolveSubscriptionResponse>("{\"id\":\"12345678-9012-3456-7890-123456789012\",\"subscriptionName\":\"Contoso Cloud Solution\",\"offerId\":\"offer1\",\"planId\":\"team-standard-v1\",\"quantity\":20,\"subscription\":{\"id\":\"12345678-9012-3456-7890-123456789012\",\"publisherId\":\"contoso\",\"offerId\":\"offer1\",\"name\":\"Contoso Cloud Solution\",\"saasSubscriptionStatus\":\"PendingFulfillmentStart\",\"beneficiary\":{\"emailId\":\"test@test.com\",\"objectId\":\"12345678-9012-3456-7890-123456789012\",\"tenantId\":\"12345678-9012-3456-7890-123456789012\",\"puid\":\"1234567890\"},\"purchaser\":{\"emailId\":\"test@test.com\",\"objectId\":\"12345678-9012-3456-7890-123456789012\",\"tenantId\":\"12345678-9012-3456-7890-123456789012\",\"puid\":\"1234567890\"},\"planId\":\"silver\",\"term\":{\"termUnit\":\"P1M\",\"startDate\":\"2023-06-01T00:00:00Z\",\"endDate\":\"2023-06-30T00:00:00Z\"},\"autoRenew\":true,\"isTest\":false,\"isFreeTrial\":false,\"allowedCustomerOperations\":[\"Delete\",\"Update\",\"Read\"],\"sandboxType\":\"None\",\"lastModified\":\"2023-06-01T00:00:00Z\",\"quantity\":5,\"sessionMode\":\"None\"}}");
            var resolveApiResponse = await _manager.ResolveSubscription(token);
            //ViewBag.ResolveApiResponse = Newtonsoft.Json.JsonConvert.SerializeObject(resolveApiResponse);
            //TempData["ResolveApiResponse"] = Newtonsoft.Json.JsonConvert.SerializeObject(resolveApiResponse);
            //TempData.Keep("ResolveApiResponse");
            return View("AzureMarketplace", resolveApiResponse);
        }
        catch(InvalidOperationException ex)
        {
            return View("", ex.Message);
        }
    }

    [HttpPost]
    public async Task<IActionResult> CreateMSUserAccount([FromBody] Services.Models.ResolveSubscriptionResponse response)
    {
        var feedback = new ViewModels.Feedback
        {
            NamePrefix = "Account.SignUp."
        };

        var resolveApiResponse = response; // Newtonsoft.Json.JsonConvert.DeserializeObject<SilkFlo.Web.Services.Models.ResolveSubscriptionResponse>(TempData["ResolveApiResponse"] as string);

        #region User-Creation
        var signUpModel = new Services.Models.Account.SignUp()
        {
            Name = resolveApiResponse.subscription.purchaser.emailId.TrimEnd('@'),
            Email = resolveApiResponse.subscription.purchaser.emailId,
            Password = $"{Guid.NewGuid()}@",
            Website = resolveApiResponse.subscription.purchaser.emailId.Split("@")[1],
            FirstName = resolveApiResponse.subscription.purchaser.emailId.Split("@")[0],
            LastName = resolveApiResponse.subscription.purchaser.emailId.Split("@")[0],
            
            //optional for Marketplace users
            Address1 = "",
            Address2 = "",
            City = "",
            State = "",
            PostCode = "",
        };


        var client = await _unitOfWork.BusinessClients.GetByNameAsync(signUpModel.Name);
        if (client != null)
        {
            feedback.Elements.Add("Name", "This company name is already in use.");
            feedback.IsValid = false;
        }

        if (!feedback.IsValid)
            return BadRequest(feedback);

        var user = await _unitOfWork.Users.GetByEmailAsync(signUpModel.Email);
        if (user != null)
        {
            feedback.Elements.Add("USer", "This User is already in use.");
            feedback.IsValid = false;
        }

        if (!feedback.IsValid)
            return BadRequest(feedback);

        //Save the content
        var clientSilkFlo = await _unitOfWork.BusinessClients.GetByNameAsync(Data.Core.Settings.ApplicationName);

        var tenant = await Models.Business.Client.CreateAsync(
            _unitOfWork,
            "",
            signUpModel.Name,
            signUpModel.FirstName,
            signUpModel.LastName,
            signUpModel.Email,
            signUpModel.Password,
            signUpModel.Address1,
            signUpModel.Address2,
            signUpModel.City,
            signUpModel.State,
            signUpModel.PostCode,
            0,
            new Models.Business.Client(clientSilkFlo),
            false);

        //if (tenant == null) throw new ArgumentNullException(nameof(tenant));

        //if (tenant.AccountOwner == null) throw new ArgumentNullException(nameof(tenant.AccountOwner));

        //// Send confirm email message
        tenant.AccountOwner.EmailNew = tenant.AccountOwner.Email;
        var prices = await _unitOfWork.ShopPrices.GetAllAsync();
        var subs = new Models.Shop.Subscription
        {
            TenantId = tenant.Id,
            //Id = resolveApiResponse.subscription.id,
            DateStart = resolveApiResponse.subscription.term.startDate, // stripeSubscription.StartDate,
            DateEnd = resolveApiResponse.subscription.term.endDate, // stripeSubscription.CurrentPeriodEnd.AddDays(1),
            Price = new Models.Shop.Price(prices.FirstOrDefault(x => x.Id == resolveApiResponse.planId))
        };
        tenant.Subscription = subs;
        //await SendEmailConfirmationMessageAsync(tenant.AccountOwner.GetCore());

        //// Send welcome email
        //var callbackUrl = Url.CompleteSignUp(tenant.Id, Request.Scheme);
        //await SendWelcomeEmailAsync(tenant.GetCore());

        //// should not entertain Stripe

        //const string message = "Cannot create a Stripe customer.";
        //Log(message);

        tenant.SubscriptionStatus = SubscriptionStatus.Subscribed;
        ////.StripeId = customer.Id;

        await _unitOfWork.CompleteAsync();
        #endregion

        #region Subscribe-User
        //var clientModels = new Models.Business.Client(client);
        //clientModels.Subscription = await clientModels.GetLastSubscriptionAsync(_unitOfWork);

        //var prices = await _unitOfWork.ShopPrices.GetAllAsync();

        var subscriptions = new Data.Core.Domain.Shop.Subscription
        {
            TenantId = tenant.Id,
            //Id = resolveApiResponse.subscription.id,
            DateStart = resolveApiResponse.subscription.term.startDate, // stripeSubscription.StartDate,
            DateEnd = resolveApiResponse.subscription.term.endDate, // stripeSubscription.CurrentPeriodEnd.AddDays(1),
            Price = prices.FirstOrDefault(x => x.Id == resolveApiResponse.planId)
            //Coupon = coupon,
            //Discount = discount
        };

        await _unitOfWork.AddAsync(subscriptions);
        await _unitOfWork.CompleteAsync();

        #endregion

        await _manager.ActivateSubscription(resolveApiResponse.subscription.id, resolveApiResponse.subscription.planId, resolveApiResponse.subscription.quantity);

        return Ok(); // Redirect("Account/AMActivatedLoading"); //View("AzureMarketplaceActivatedLoading");
    }

    [HttpGet]
	public ActionResult AMActivatedLoading()
	{
		return View("AzureMarketplaceActivatedLoading");
	}
    #endregion

    #region private-funcs
    private async Task ProcessManyToMany_Achievements_For_UserAchievements(Models.User model)
    {
        try
        {
            // Get the selected achievements for Achievements
            var selectedAchievements_For_UserAchievements = model.AllAchievements_For_UserAchievements.Where(x => x.IsSelected);

            // Un-assign achievements_For_UserAchievements from user
            await _unitOfWork.UserAchievements.GetForUserAsync(model.GetCore());


            var userAchievementsLength = model.GetCore().UserAchievements.Count();
            for (var i = userAchievementsLength - 1; i >= 0; i--)
            {
                var userAchievement = model.GetCore().UserAchievements[i];

                await _unitOfWork.UserAchievements
                                 .RemoveAsync(userAchievement);

                model.GetCore()
                     .UserAchievements
                     .Remove(userAchievement);
            }

            // Assign achievements_For_UserAchievements to user
            var achievements = await _unitOfWork.SharedAchievements.GetAllAsync();
            int index = 0;
            foreach (var achievement in achievements)
            {
                var userAchievement = model.AllAchievements_For_UserAchievements[index];
                if (userAchievement.IsSelected)
                {
                    await _unitOfWork.UserAchievements
                                     .AddAsync(new Data.Core.Domain.UserAchievement
                                     {
                                         User = model.GetCore(),
                                         AchievementId = achievement.Id
                                     });
                }

                index++;
            }
        }
        catch
        {
            throw;
        }
    }

    private async Task ProcessManyToMany_Badges_For_UserBadges(Models.User model)
    {
        try
        {
            // Get the selected badges for Badges
            var selectedBadges_For_UserBadges = model.AllBadges_For_UserBadges.Where(x => x.IsSelected);

            // Un-assign badges_For_UserBadges from user
            await _unitOfWork.UserBadges.GetForUserAsync(model.GetCore());


            var userBadgesLength = model.GetCore().UserBadges.Count();
            for (var i = userBadgesLength - 1; i >= 0; i--)
            {
                var userBadge = model.GetCore().UserBadges[i];

                await _unitOfWork.UserBadges
                                 .RemoveAsync(userBadge);

                model.GetCore()
                     .UserBadges
                     .Remove(userBadge);
            }

            // Assign badges_For_UserBadges to user
            var badges = await _unitOfWork.SharedBadges.GetAllAsync();
            int index = 0;
            foreach (var badge in badges)
            {
                var userBadge = model.AllBadges_For_UserBadges[index];
                if (userBadge.IsSelected)
                {
                    await _unitOfWork.UserBadges
                                     .AddAsync(new Data.Core.Domain.UserBadge
                                     {
                                         User = model.GetCore(),
                                         BadgeId = badge.Id
                                     });
                }

                index++;
            }
        }
        catch
        {
            throw;
        }
    }

    private async Task ProcessManyToMany_Roles_For_UserRoles(Models.User model)
    {
        try
        {
            // Get the selected roles for Roles
            var selectedRoles_For_UserRoles = model.AllRoles_For_UserRoles.Where(x => x.IsSelected);

            // Un-assign roles_For_UserRoles from user
            await _unitOfWork.UserRoles.GetForUserAsync(model.GetCore());


            var userRolesLength = model.GetCore().UserRoles.Count();
            for (var i = userRolesLength - 1; i >= 0; i--)
            {
                var userRole = model.GetCore().UserRoles[i];

                await _unitOfWork.UserRoles
                                 .RemoveAsync(userRole);

                model.GetCore()
                     .UserRoles
                     .Remove(userRole);
            }

            // Assign roles_For_UserRoles to user
            var roles = await _unitOfWork.Roles.GetAllAsync();
            int index = 0;
            foreach (var role in roles)
            {
                var userRole = model.AllRoles_For_UserRoles[index];
                if (userRole.IsSelected)
                {
                    await _unitOfWork.UserRoles
                                     .AddAsync(new Data.Core.Domain.UserRole
                                     {
                                         User = model.GetCore(),
                                         RoleId = role.Id
                                     });
                }

                index++;
            }
        }
        catch
        {
            throw;
        }
    }

    private async Task ProcessManyToMany_Clients_For_ManageTenants(Models.User model)
    {
        try
        {
            // Get the selected clients for Roles
            var selectedClients_For_ManageTenants = model.AllClients_For_ManageTenants.Where(x => x.IsSelected);

            // Un-assign clients_For_ManageTenants from user
            await _unitOfWork.AgencyManageTenants.GetForUserAsync(model.GetCore());


            var manageTenantsLength = model.GetCore().ManageTenants.Count();
            for (var i = manageTenantsLength - 1; i >= 0; i--)
            {
                var manageTenant = model.GetCore().ManageTenants[i];

                await _unitOfWork.AgencyManageTenants
                                 .RemoveAsync(manageTenant);

                model.GetCore()
                     .ManageTenants
                     .Remove(manageTenant);
            }

            // Assign clients_For_ManageTenants to user
            var clients = await _unitOfWork.BusinessClients.GetAllAsync();
            int index = 0;
            foreach (var client in clients)
            {
                var manageTenant = model.AllClients_For_ManageTenants[index];
                if (manageTenant.IsSelected)
                {
                    await _unitOfWork.AgencyManageTenants
                                     .AddAsync(new Data.Core.Domain.Agency.ManageTenant
                                     {
                                         User = model.GetCore(),
                                         TenantId = client.Id
                                     });
                }

                index++;
            }
        }
        catch
        {
            throw;
        }
    }

    private async Task ProcessManyToMany_Ideas_For_Follows(Models.User model)
    {
        try
        {
            // Get the selected ideas for Followed Ideas
            var selectedIdeas_For_Follows = model.AllIdeas_For_Follows.Where(x => x.IsSelected);

            // Un-assign ideas_For_Follows from user
            await _unitOfWork.BusinessFollows.GetForUserAsync(model.GetCore());


            var followsLength = model.GetCore().Follows.Count();
            for (var i = followsLength - 1; i >= 0; i--)
            {
                var follow = model.GetCore().Follows[i];

                await _unitOfWork.BusinessFollows
                                 .RemoveAsync(follow);

                model.GetCore()
                     .Follows
                     .Remove(follow);
            }

            // Assign ideas_For_Follows to user
            var ideas = await _unitOfWork.BusinessIdeas.GetAllAsync();
            int index = 0;
            foreach (var idea in ideas)
            {
                var follow = model.AllIdeas_For_Follows[index];
                if (follow.IsSelected)
                {
                    await _unitOfWork.BusinessFollows
                                     .AddAsync(new Data.Core.Domain.Business.Follow
                                     {
                                         User = model.GetCore(),
                                         IdeaId = idea.Id
                                     });
                }

                index++;
            }
        }
        catch
        {
            throw;
        }
    }

    private async Task ProcessManyToMany_Ideas_For_Votes(Models.User model)
    {
        try
        {
            // Get the selected ideas for Ideas Voted Fors
            var selectedIdeas_For_Votes = model.AllIdeas_For_Votes.Where(x => x.IsSelected);

            // Un-assign ideas_For_Votes from user
            await _unitOfWork.BusinessVotes.GetForUserAsync(model.GetCore());


            var votesLength = model.GetCore().Votes.Count();
            for (var i = votesLength - 1; i >= 0; i--)
            {
                var vote = model.GetCore().Votes[i];

                await _unitOfWork.BusinessVotes
                                 .RemoveAsync(vote);

                model.GetCore()
                     .Votes
                     .Remove(vote);
            }

            // Assign ideas_For_Votes to user
            var ideas = await _unitOfWork.BusinessIdeas.GetAllAsync();
            int index = 0;
            foreach (var idea in ideas)
            {
                var vote = model.AllIdeas_For_Votes[index];
                if (vote.IsSelected)
                {
                    await _unitOfWork.BusinessVotes
                                     .AddAsync(new Data.Core.Domain.Business.Vote
                                     {
                                         User = model.GetCore(),
                                         IdeaId = idea.Id
                                     });
                }

                index++;
            }
        }
        catch
        {
            throw;
        }
    }
    #endregion

}