/*********************************************************
       Code Generated By  .  .  .  .  Delaney's ScriptBot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Template Name.  .  .  .  .  .  Project Green 3.0
       Template Version.  .  .  .  .  20220410 014
       Author .  .  .  .  .  .  .  .  Delaney

                      ,        ,--,_
                       \ _ ___/ /\|
                       ( )__, )
                      |/_  '--,
                        \ `  / '

 *********************************************************/

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using Microsoft.AspNetCore.Mvc;
using System.Runtime.CompilerServices;
using Microsoft.AspNetCore.Mvc.Filters;
using Microsoft.AspNetCore.Authorization;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.AspNetCore.Mvc.ViewEngines;
using Microsoft.AspNetCore.Mvc.ViewFeatures;
using SilkFlo.Email;
using SilkFlo.Extensions;
using static System.DateTime;
using SilkFlo.Web.Controllers2.FileUpload;

namespace SilkFlo.Web.Controllers
{
    public abstract partial class Abstract : Controller
    {
        protected readonly Data.Core.IUnitOfWork _unitOfWork;
        protected readonly Services.ViewToString _viewToString;
        protected readonly IAuthorizationService _authorization;
        protected readonly IAzureStorage _storage;
        protected Abstract(Data.Core.IUnitOfWork unitOfWork,
                        Services.ViewToString viewToString,
                        IAuthorizationService authorization)
        {
            _unitOfWork = unitOfWork;
            _viewToString = viewToString;
            _authorization = authorization;
        }

        protected Abstract(Data.Core.IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }
        protected async Task<string> SignInAsync(
            Data.Core.Domain.User user,
            Services.Models.Account.SignIn signIn,
            string returnUrl,
            bool isPracticeUser,
            bool isMSFlow = false)
        {
            // Guard Clause
            if (user.UserRoles.Count == 0)
            {
                ModelState.AddModelError(
                    string.Empty,
                    "Unauthorised sign in attempt.");

                return "/account/signin";
            }


            await _unitOfWork.BusinessClients.GetClientForAsync(user);

            // Assign SilkFlo Client if user is admin and no client assigned.
            if (user.Client == null)
            {
                var userRole = user.UserRoles.SingleOrDefault(x =>
                    x.RoleId == ((int)Data.Core.Enumerators.Role.Administrator).ToString());

                if (userRole != null)
                {
                    var silkfloClient =
                        await _unitOfWork.BusinessClients.GetByNameAsync(Data.Core.Settings.ApplicationName);
                    user.Client = silkfloClient;
                }
            }


            // Guard Clause
            if (user.Client == null)
            {
                ModelState.AddModelError(
                    string.Empty,
                    "User is not assigned to a client.");

                return "/account/signin";
            }


            var client = user.Client;

            // Is practice account? If so use production for the rest of this method.
            if (client.IsPractice)
            {
                await _unitOfWork.BusinessClients.GetForPracticeAccountAsync(client);
                if (client.ProductionAccounts.Any())
                    client = client.ProductionAccounts[0];
            }


            if (client.TypeId == Data.Core.Enumerators.ClientType.Client39.ToString())
            {
                var clientModel = new Models.Business.Client(client);
                var agency = await _unitOfWork.BusinessClients.GetByNameAsync(Data.Core.Settings.ApplicationName);

                if (agency == null)
                    throw new ArgumentNullException("SilkFlo client could not be found with name " +
                                                    Data.Core.Settings.ApplicationName);


                var subscription = await clientModel.GetLastSubscriptionAsync(_unitOfWork);

                if (clientModel.FreeTrialDay != null
                && clientModel.FreeTrialDay > 0)
                {
                    if (subscription == null)
                    {
                        var now = DateTime.Now.Date;
                        subscription = new Models.Shop.Subscription
                        {
                            Tenant = clientModel,
                            Agency = new Models.Business.Client(agency),
                            DateStart = now,
                            DateEnd = now.AddDays((int)clientModel.FreeTrialDay),
                        };


                        await _unitOfWork.AddAsync(subscription.GetCore());

                        await Insert.PracticeData.CreatePracticeAccountAsync(
                            client,
                            _unitOfWork,
                            false,
                            user);

                        clientModel.FreeTrialDay = null;
                        await _unitOfWork.CompleteAsync();
                    }
                }


                // Is subscription? then direct to SubscriptionExpired
                if (subscription is { IsActive: false })
                {
                    if (string.IsNullOrWhiteSpace(returnUrl))
                        return "/Account/SubscriptionExpired";


                    if (returnUrl.IndexOf(
                            "/shop/subscribe/priceId/",
                            StringComparison.OrdinalIgnoreCase) == -1)
                        return "/Account/SubscriptionExpired";


                    return Url.IsLocalUrl(returnUrl)
                        ? returnUrl
                        : "/Account/SubscriptionExpired";
                }
            }


            // Save product cookie
            await SaveProductCookieAsync(client);


            var expiratoryDate = await GetExpiratoryDate(user);
            Services.Models.Cookie.Save(user,
                isMSFlow ? false : signIn.StaySignedIn,
                expiratoryDate,
                this);


            // Is the user an admin user?
            if (user.UserRoles.Any(userRole =>
                    userRole.RoleId == ((int)Data.Core.Enumerators.Role.Administrator).ToString()))
                Add(Services.Cookie.NoLogging,
                    "True",
                    DateTime.Now.AddDays(30),
                    false);
            else
                Delete(Services.Cookie.NoLogging);


            Add(Services.Cookie.IsPractice,
                user.Client.IsPractice,
                DateTime.Now.AddDays(30),
                false);


            Add(Services.Cookie.RememberMe,
                isMSFlow ? false : signIn.RememberMe,
                DateTime.Now.AddDays(30),
                true);


            Add(Services.Cookie.StaySignedIn,
                isMSFlow ? false : signIn.StaySignedIn,
                DateTime.Now.AddDays(30),
                true);


            if (signIn.StaySignedIn || signIn.RememberMe || isMSFlow)
                Add(Services.Cookie.Email,
                    user.Email,
                    DateTime.Now.AddDays(30),
                    true);
            else
                Delete(Services.Cookie.Email);


            if (signIn.StaySignedIn
                && !isPracticeUser)
                Add(Services.Cookie.PasswordHash,
                    user.PasswordHash,
                    DateTime.Now.AddDays(30),
                    true);
            else
                Delete(Services.Cookie.PasswordHash);


            // The ClientId cookie.
            // This must be the account assigned to the user.
            Add(Services.Cookie.ClientId,
                user.ClientId,
                DateTime.Now.AddDays(30),
                false);

            return returnUrl;
        }

        private async Task<DateTime> GetExpiratoryDate(Data.Core.Domain.User user)
        {
            var expiratoryDate = DateTime.MaxValue;

            // Client is null?
            if (user.Client == null)
            {
                expiratoryDate = DateTime.Now;
                return expiratoryDate;
            }


            // Client is not tenant
            if (user.Client.TypeId != Data.Core.Enumerators.ClientType.Client39.ToString()
                || user.Client.IsPractice)
                return expiratoryDate;


            // subscription valid?
            var subscription =
                await new Models.Business.Client(user.Client)
                    .GetLastSubscriptionAsync(_unitOfWork);


            // subscription valid?
            if (subscription != null)
                return subscription.DateEnd ?? DateTime.MaxValue;


            expiratoryDate = DateTime.Now;
            return expiratoryDate;
        }

        protected void Delete(Services.Cookie name)
        {
            Response.Cookies.Delete(
                name.ToString(),
                new CookieOptions { Secure = true });
        }

        protected void Add(
            Services.Cookie key,
            bool value,
            DateTime expireDate,
            bool httpOnly)
        {
            Add(key,
                value.ToString(),
                expireDate,
                httpOnly);
        }

        protected void Add(
            Services.Cookie key,
            string value,
            DateTime expireDate,
            bool httpOnly)
        {
            var options =
                new CookieOptions
                {
                    Path = "/",
                    HttpOnly = httpOnly,
                    IsEssential = true,
                    Secure = true,
                    Expires = DateTime.Now.AddDays(1000),
                    SameSite = SameSiteMode.Strict,
                };

            Response.Cookies.Append(
                key.ToString(),
                value,
                options);
        }


        protected void SignOutProcess()
        {
            HttpContext.SignOutAsync(
                CookieAuthenticationDefaults.AuthenticationScheme);


            var rememberMe = false;
            if (Request.Cookies[Services.Cookie.RememberMe.ToString()] != null)
                rememberMe = bool.Parse(Request.Cookies[Services.Cookie.RememberMe.ToString()] ?? string.Empty);

            if (!rememberMe)
            {
                Delete(Services.Cookie.RememberMe);
                Delete(Services.Cookie.Email);
            }

            Delete(Services.Cookie.StaySignedIn);
            Delete(Services.Cookie.PasswordHash);
            Delete(Services.Cookie.ClientId);
            Delete(Services.Cookie.SilkFloData);
            Delete(Services.Cookie.LoginType);
        }



        public async Task<AuthorizationResult> AuthorizeAsync(
            string name,
            bool checkSubscription = true)
        {
            if (Policy.Administrator == name)
                return await _authorization.AuthorizeAsync(User, name);

            var isExpired = true;


            var sDate = User.GetClaimValue(Settings.ExpiratoryDate);
            if (!string.IsNullOrWhiteSpace(sDate))
            {
                TryParse(sDate, out var date);
                isExpired = date < Now;
            }




            if (isExpired)
            {
                var userId = GetUserId();
                var user = await _unitOfWork.Users.GetAsync(userId);
                if (user != null)
                {
                    await _unitOfWork.BusinessClients.GetClientForAsync(user);
                    if (user.Client != null)
                    {
                        var client = user.Client;
                        if (client.IsPractice)
                        {
                            await _unitOfWork.BusinessClients.GetForPracticeAccountAsync(client);
                            if (client.ProductionAccounts.Any())
                                client = client.ProductionAccounts[0];
                        }

                        if (checkSubscription)
                        {
                            var subscription =
                                await (new Models.Business.Client(client)).GetLastSubscriptionAsync(_unitOfWork);

                            if (subscription != null)
                            {
                                var date = subscription.DateEnd ?? MaxValue;
                                User.SaveClaim(
                                    Settings.ExpiratoryDate,
                                    date.ToString(CultureInfo.InvariantCulture),
                                    "DateTime");

                                isExpired = date < Now;
                            }
                        }
                        else
                            isExpired = false;
                    }
                }
            }


            if (isExpired)
                return AuthorizationResult.Failed();

            var result = await _authorization.AuthorizeAsync(User, name);
            return result;
        }


        public override void OnActionExecuting(ActionExecutingContext context)
        {
            base.OnActionExecuting(context);
            _unitOfWork.UserId = GetUserId();
        }

        public string Domain => Request.Scheme + Uri.SchemeDelimiter + Request.Host;

        protected string GetEmail()
        {
            try
            {
                var s = User.Claims.FirstOrDefault(x => x.Type == "Email")?.Value;
                return s;
            }
            catch (Exception)
            {
                return "";
            }
        }

        protected string GetFullname()
        {
            try
            {
                var s = User.Claims.FirstOrDefault(x => x.Type == "Fullname")?.Value;
                return s;
            }
            catch (Exception)
            {
                return "";
            }
        }

        protected string GetFirstName()
        {
            try
            {
                var s = User.Claims.FirstOrDefault(x => x.Type == "FirstName")?.Value;
                return s;
            }
            catch (Exception)
            {
                return "";
            }
        }

        protected string GetLastName()
        {
            try
            {
                var s = User.Claims.FirstOrDefault(x => x.Type == "LastName")?.Value;
                return s;
            }
            catch (Exception)
            {
                return "";
            }
        }

        protected string GetUserId()
        {
            try
            {
                var s = User.Claims.FirstOrDefault(x => x.Type == "UserId")?.Value;
                return s;
            }
            catch (Exception)
            {
                return "";
            }
        }

        protected bool GetShowDeleted()
        {
            var s = Request.Cookies["ShowDeleted"];
            bool.TryParse(s, out var b);
            return b;
        }

        private void ExpireAllCookies()
        {
            foreach (var cookieKey in HttpContext.Request.Cookies.Keys)
                HttpContext.Response.Cookies.Delete(cookieKey, new CookieOptions { Secure = true });
        }

        protected bool IsRoleMember(Data.Core.Enumerators.Role value)
        {
            return ((System.Security.Claims.ClaimsIdentity)User.Identity)!.HasClaim("RoleId", ((int)value).ToString());
        }

        /// <summary>
        /// Log and return ModelState in a BadRequest
        /// </summary>
        /// <param name="text"></param>
        /// <param name="methodName"></param>
        /// <param name="sourceFile"></param>
        /// <param name="lineNumber"></param>
        /// <returns></returns>
        protected BadRequestObjectResult BadRequest(string text,
                                                     bool addToLog = false,
                                                     [CallerMemberName] string methodName = "",
                                                     [CallerFilePath] string sourceFile = "",
                                                     [CallerLineNumber] int lineNumber = 0)
        {
            if (addToLog)
                _unitOfWork.Log( text,
                                 Data.Core.Severity.Critical,
                                 methodName,
                                 sourceFile,
                                 lineNumber,
                                 GetUserId());

            ModelState.AddModelError("Error",
                                     text);

            return BadRequest(ModelState);
        }

        /// <summary>
        /// Log errors and return ModelState in a BadRequest
        /// </summary>
        /// <param name="messages"></param>
        /// <param name="addToLog"></param>
        /// <param name="methodName"></param>
        /// <param name="sourceFile"></param>
        /// <param name="lineNumber"></param>
        /// <returns></returns>
        protected BadRequestObjectResult BadRequest(List<string> messages,
                                                    bool addToLog = false,
                                                    [CallerMemberName] string methodName = null,
                                                    [CallerFilePath] string sourceFile = null,
                                                    [CallerLineNumber] int lineNumber = 0)
        {
            foreach (var message in messages)
            {
                if (addToLog)
                    _unitOfWork.Log(message,
                                    Data.Core.Severity.Critical,
                                    methodName,
                                    sourceFile,
                                    lineNumber);

                ModelState.AddModelError("Error",
                                         message);
            }

            return BadRequest(ModelState);
        }

        /// <summary>
        /// Log and return ModelState in a BadRequest
        /// </summary>
        /// <param name="ex"></param>
        /// <param name="text"></param>
        /// <param name="methodName"></param>
        /// <param name="sourceFile"></param>
        /// <param name="lineNumber"></param>
        /// <returns></returns>
        protected BadRequestObjectResult BadRequest(Exception ex,
                                                     string text,
                                                     bool addToLog = false,
                                                     [CallerMemberName] string methodName = "",
                                                     [CallerFilePath] string sourceFile = "",
                                                     [CallerLineNumber] int lineNumber = 0)
        {
            if (addToLog)
                _unitOfWork.Log(ex,
                                 Data.Core.Severity.Critical,
                                 methodName,
                                 sourceFile,
                                 lineNumber);

            ModelState.AddModelError("Error",
                                       text);

            return BadRequest(ModelState);
        }

        public void Log(Exception exception,
                         Data.Core.Severity severity = Data.Core.Severity.Critical,
                         [CallerMemberName] string methodName = null,
                         [CallerFilePath] string sourceFile = null,
                         [CallerLineNumber] int lineNumber = 0)
        {
            _unitOfWork.Log(exception,
                             severity,
                             methodName,
                             sourceFile,
                             lineNumber);
        }

        public void Log(Exception exception,
                         string text,
                         Data.Core.Severity severity = Data.Core.Severity.Critical,
                         [CallerMemberName] string methodName = null,
                         [CallerFilePath] string sourceFile = null,
                         [CallerLineNumber] int lineNumber = 0)
        {
            _unitOfWork.Log(exception,
                             text,
                             severity,
                             methodName,
                             sourceFile,
                             lineNumber);
        }

        public void Log(string text,
                         Data.Core.Severity severity = Data.Core.Severity.Critical,
                         [CallerMemberName] string methodName = null,
                         [CallerFilePath] string sourceFile = null,
                         [CallerLineNumber] int lineNumber = 0)
        {
            _unitOfWork.Log(text,
                             severity,
                             methodName,
                             sourceFile,
                             lineNumber);
        }

        public void Log(string text,
            string userId,
            Data.Core.Severity severity = Data.Core.Severity.Critical,
            [CallerMemberName] string methodName = null,
            [CallerFilePath] string sourceFile = null,
            [CallerLineNumber] int lineNumber = 0)
        {
            _unitOfWork.Log(text,
                severity,
                methodName,
                sourceFile,
                lineNumber);
        }

        /// <summary>
        /// Based on the url prefix this method will return a view of content
        /// </summary>
        /// <param name="url"></param>
        /// <param name="model">The model used by the view or content</param>
        /// <param name="httpStatus">HTTP Status. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Status</param>
        /// <param name="contentType">Content Type. see https://www.iana.org/assignments/media-types/media-types.xhtml</param>
        /// <returns></returns>
        protected async Task<IActionResult> ViewOrContent(string url,
                                              object model,
                                              int? httpStatus = 200,
                                              string contentType = "text/html")
        {
            if (Request.Path.ToString().IndexOf("/api", StringComparison.InvariantCultureIgnoreCase) == 0)
            {
                var html = await _viewToString.PartialAsync(url, model);

                var content = Content(html);
                content.StatusCode = httpStatus;
                content.ContentType = contentType;
                return content;
            }

            if (url.IndexOf("views/", StringComparison.OrdinalIgnoreCase) == -1)
                url = "views/" + url;

            return View(url, model);

        }

        protected async Task<IActionResult> PageApiAsync(string html, int statusCodeResult = 200)
        {
            var page = await _viewToString.PartialAsync("Shared/_Page.cshtml", html);
            var content = Content(page);
            content.StatusCode = statusCodeResult;
            content.ContentType = "text/html";
            return content;
        }

        protected IActionResult PageView(string html)
        {
            return View("Views/Home/Page.cshtml", html);
        }

        protected IActionResult ViewDanger(string message = "Unauthorised")
        {
            return View("Views/Home/Page.cshtml", $"<span class=\"text-danger\" >{message}<span>");
        }

        /// <summary>
        /// Usage: html = await this.RenderViewAsync("Shared/...
        /// </summary>
        /// <param name="viewName"></param>
        /// <param name="partial"></param>
        /// <returns></returns>
        public async Task<string> PartialAsync(string viewName,
                                                      bool partial = true)
        {
            if (string.IsNullOrEmpty(viewName))
            {
                viewName = ControllerContext.ActionDescriptor.ActionName;
            }


            viewName = viewName.ToLower();

            if (viewName.IndexOf('~') == 0)
                viewName = viewName.Substring(1);

            if (viewName.IndexOf('/') == 0)
                viewName = viewName.Substring(1);

            if (viewName.IndexOf("views/", StringComparison.OrdinalIgnoreCase) == 0)
                viewName = viewName.Substring(6);

            if (viewName.IndexOf("shared/", StringComparison.OrdinalIgnoreCase) == 0)
                viewName = viewName.Substring(7);



            string path = PrefixViewName(viewName, "/Views/");


            using (var writer = new StringWriter())
            {
                IViewEngine viewEngine = HttpContext.RequestServices.GetService(typeof(ICompositeViewEngine)) as ICompositeViewEngine;

                if (viewEngine == null)
                    return "";

                var viewResult = viewEngine.GetView(path, path, !partial);


                if (viewResult.Success == false)
                {
                    path = PrefixViewName(viewName);
                    viewResult = viewEngine.GetView(path, path, !partial);
                }


                if (viewResult.Success == false)
                    return $"A view with the name {viewName} could not be found";

                if (viewResult.View == null)
                    return writer.GetStringBuilder().ToString();

                var viewContext = new ViewContext(
                    ControllerContext,
                    viewResult.View,
                    ViewData,
                    TempData,
                    writer,
                    new HtmlHelperOptions()
                );

                await viewResult.View.RenderAsync(viewContext);

                return writer.GetStringBuilder().ToString();
            }
        }

        private string PrefixViewName(
            string viewName,
            string prefix = "/Views/Shared/")
        {

            if (viewName.IndexOf(prefix, StringComparison.InvariantCultureIgnoreCase) == 0)
                return viewName;

            return prefix + viewName;
        }


        public bool Validate(
            Data.Core.IUnitOfWork unitOfWork,
            Models.Abstract model)
        {
            if (ModelState.IsValid)
                return true;

            var isValid = true;

            foreach (var modelStateKey in ViewData.ModelState.Keys)
            {
                var value = ViewData.ModelState[modelStateKey];

                if (value == null)
                    continue;

                foreach (var error in value.Errors)
                {
                    var property = model.GetType().GetProperty(modelStateKey + "_ErrorMessage");
                    if (property != null)
                        property.SetValue(model, error.ErrorMessage);

                    var propertyIsInValid = model.GetType().GetProperty(modelStateKey + "_IsInValid");
                    if (propertyIsInValid != null)
                        propertyIsInValid.SetValue(model, true);


                    model.Errors.Add($"{error.ErrorMessage}");

                    isValid = false;
                }
            }

            return isValid;
        }





        /// <summary>
        /// Get the tenant based on the user
        /// </summary>
        /// <returns></returns>
        protected async Task<Data.Core.Domain.Business.Client> GetClientAsync(bool checkSubscription = true)
        {
            #region  Get the isPractice value
            var sIsPractice = Request.Cookies[Services.Cookie.IsPractice.ToString()];
            var isPractice = false;


            if (!string.IsNullOrWhiteSpace(sIsPractice))
                bool.TryParse(sIsPractice, out isPractice);
            #endregion

            #region Get the clientId and thus the client from the URL
            var indexDashboard = Request.Path.ToString().IndexOf("/clientid/", StringComparison.OrdinalIgnoreCase);

            if (indexDashboard != -1)
            {
                var indexParameterDelimiter = Request.Path.ToString().IndexOf('?');

                if (indexParameterDelimiter == -1
                    || indexDashboard < indexParameterDelimiter)
                {
                    // Get the id
                    var url = Request.Path.ToString();
                    var last = url.Split('/').Last();

                    var parts = last.Split('?');

                    var tenantIdUrl = parts[0];

                    if (!string.IsNullOrWhiteSpace(tenantIdUrl))
                    {
                        if ((await AuthorizeAsync(Policy.Administrator)).Succeeded)
                        {
                            var client = await _unitOfWork.BusinessClients.GetAsync(tenantIdUrl);

                            if (client != null)
                            {
                                if (isPractice
                                    && client is { IsPractice: false })
                                {
                                    client =
                                        await _unitOfWork.BusinessClients.SingleOrDefaultAsync(x =>
                                            x.Id == client.PracticeId);
                                }

                                Response.Cookies.Append(
                                    "ClientId",
                                    client.Id);

                                Response.Cookies.Append(
                                    "IsPractice",
                                    client.IsPractice.ToString());

                                return client;
                            }
                        }
                        else
                        {
                            var userId = GetUserId();
                            var user = await _unitOfWork.Users.GetAsync(userId);


                            var client = await GetSingleOrDefaultValidatedAsync(
                                user,
                                tenantIdUrl);

                            if (client != null)
                            {
                                if (isPractice
                                    && client is { IsPractice: false })
                                {
                                    client =
                                        await _unitOfWork.BusinessClients.SingleOrDefaultAsync(x =>
                                            x.Id == client.PracticeId);
                                }

                                Response.Cookies.Append(
                                    "ClientId",
                                    client.Id);

                                Response.Cookies.Append(
                                    "IsPractice",
                                    client.IsPractice.ToString());

                                return client;
                            }
                        }
                    }
                }
            }
            #endregion





            // Get the selected tenantId from the cookies
            var clientId = Request.Cookies[Services.Cookie.ClientId.ToString()];


            if (string.IsNullOrWhiteSpace(clientId))
            {
                // Cookies is missing therefore we must use the user.ClientId
                var userId = GetUserId();
                var user = await _unitOfWork.Users.GetAsync(userId);


                // Guard Clause
                if (user == null)
                    return null;


                var client = await GetSingleOrDefaultValidatedAsync(
                    user,
                    clientId);

                if (isPractice
                    && client is { IsPractice: false })
                    client = await _unitOfWork.BusinessClients.SingleOrDefaultAsync(x => x.Id == client.PracticeId);

                if (client is not null)
                {
                    Response.Cookies.Append(
                        "ClientId",
                        client.Id);

                    Response.Cookies.Append(
                        "IsPractice",
                        client.IsPractice.ToString());
                }

                return client;

            }
            else
            {
                var userId = GetUserId();

                // Guard Clause
                if (string.IsNullOrWhiteSpace(userId))
                    return null;

                var user = await _unitOfWork.Users.GetAsync(userId);

                // Guard Clause
                if (user == null)
                    return null;

                var client = await GetSingleOrDefaultValidatedAsync(
                    user,
                    clientId,
                    checkSubscription);

                if (isPractice
                    && client is { IsPractice: false })
                    client = await _unitOfWork.BusinessClients
                        .SingleOrDefaultAsync(x => x.Id == client.PracticeId);

                return client;
            }
        }



        public async Task<Data.Core.Domain.Business.Client> GetSingleOrDefaultValidatedAsync(
            Data.Core.Domain.User user)
        {
            return await GetSingleOrDefaultValidatedAsync(user, user.ClientId);
        }

        /// <summary>
        /// Remember >>>>  Controller.Abstract.GetTenant(user);
        /// This method gets a valid tenant. User by Controller.Abstract.GetTenant(user);
        /// </summary>
        /// <param name="user"></param>
        /// <param name="tenantId"></param>
        /// <returns></returns>
        public async Task<Data.Core.Domain.Business.Client> GetSingleOrDefaultValidatedAsync(
            Data.Core.Domain.User user,
            string tenantId,
            bool checkSubscription = true)
        {
            // Find client
            Data.Core.Domain.Business.Client client;

            if (string.IsNullOrWhiteSpace(tenantId))
            {
                await _unitOfWork.BusinessClients.GetClientForAsync(user);
                client = user.Client;

                if (await ValidateSubscription(client, user))
                    return client;

                return null;
            }

            // Get client using tenantId
            client = await _unitOfWork.BusinessClients
                .SingleOrDefaultAsync(x => x.Id == tenantId);

            if (!checkSubscription)
                return client;

            if (await ValidateSubscription(client, user))
                return client;

            return null;
        }


        public async Task<bool> ValidateSubscription(
            Data.Core.Domain.Business.Client client,
            Data.Core.Domain.User user)
        {
            if (client == null)
                return false;

            if (IsRoleMember(Data.Core.Enumerators.Role.Administrator))
                return true;




            var now = DateTime.Now.Date;


            // Get valid subscription
            Data.Core.Domain.Business.Client clientProduction;
            if (client.IsPractice)
            {
                await _unitOfWork.BusinessClients.GetForPracticeAccountAsync(client);

                if (!client.ProductionAccounts.Any())
                    return false;

                clientProduction = client.ProductionAccounts[0];
            }
            else
                clientProduction = client;


            // Is SilkFlo?
            var isSilkFlo = clientProduction.Name == Data.Core.Settings.ApplicationName;

            if (isSilkFlo)
                return true;

            if (IsRoleMember(Data.Core.Enumerators.Role.AgencyUser)
                && clientProduction.Id != user.ClientId)
            {
                var userClient = await _unitOfWork.BusinessClients.GetAsync(user.ClientId);
                if (userClient.Name == Data.Core.Settings.ApplicationName)
                    return true;
            }


            if (!clientProduction.IsActive)
                return false;


            Data.Core.Domain.Shop.Subscription subscription = null;
            if (clientProduction.TypeId == Data.Core.Enumerators.ClientType.Client39.ToString())
            {
                subscription = await _unitOfWork.ShopSubscriptions
                    .SingleOrDefaultAsync(x => x.TenantId == clientProduction.Id
                                               && x.DateCancelled == null
                                               && x.DateStart.Date <= now
                                               && (x.DateEnd ?? now).Date >= now);

                //await _unitOfWork.BusinessClients.GetTenantForAsync(subscription);

                if (subscription == null)
                    return false;
            }


            // Is the user a member of the client?
            if (user.ClientId == clientProduction.Id
             || user.ClientId == client.Id)
                return true;



            // Agency/SilkFlo supplied subscription

            // Is Agency Administrator and supplied subscription.
            if (client.TypeId == Data.Core.Enumerators.ClientType.Client39.ToString()
                && IsRoleMember(Data.Core.Enumerators.Role.AgencyAdministrator)
                && subscription?.AgencyId == user.ClientId)
                return true;


            // Is Agency Administrator, supplied subscription and is managing the client.
            if (client.TypeId == Data.Core.Enumerators.ClientType.Client39.ToString()
                && IsRoleMember(Data.Core.Enumerators.Role.AgencyUser)
                && subscription?.AgencyId == user.ClientId)
            {
                var agencyManageTenant = _unitOfWork.AgencyManageTenants
                    .SingleOrDefaultAsync(x => x.UserId == user.Id
                                               && x.TenantId == client.Id);
                if (agencyManageTenant == null)
                    return false;

                return true;
            }

            return false;
        }


        /// <summary>
        /// Email sent when the user changes there email address.
        /// </summary>
        /// <param name="core">User</param>
        protected async Task SendEmailChangedConfirmationMessageAsync(Data.Core.Domain.User core)
        {
            var callbackUrl =
                Url.EmailConfirmationLink(
                    core.Id,
                    core.EmailConfirmationToken,
                    Request.Scheme);

            BookMark[] bookmarks =
            {
                new ("FIRSTNAME", core.FirstName),
                new BookmarkLink ("PATH", callbackUrl, "Confirm Email Changed")
            };

            await Service.SendAsync(
                "Confirm Your Email Change - " + Data.Core.Settings.ApplicationName,
                Template.EmailChangedConfirmation,
                new MailBox(Data.Core.Settings.ApplicationName, "hello@silkflo.com"),
                new MailBox(core.Fullname, core.EmailNew),
                bookmarks);
        }


        /// <summary>
        /// The is sent when a user creates a new user account.
        /// NOTE: Do not forget to SAVE the user.
        /// </summary>
        /// <param name="core"></param>
        /// <returns></returns>
        protected async Task SendEmailConfirmationMessageAsync(Data.Core.Domain.User core)
        {
            if (string.IsNullOrWhiteSpace(core.EmailConfirmationToken))
                core.EmailConfirmationToken = Guid.NewGuid().ToString();


            var callbackUrl =
                Url.EmailConfirmationLink(
                    core.Id,
                    core.EmailConfirmationToken,
                    Request.Scheme);

            BookMark[] bookmarks =
            {
                new ("FIRSTNAME", core.FirstName),
                new BookmarkLink ("PATH", callbackUrl, "Confirm Email Address")
            };

            await Service.SendAsync(
                "Confirm Your Email - " + Data.Core.Settings.ApplicationName,
                Template.EmailConfirmation,
                new MailBox(Data.Core.Settings.ApplicationName, "hello@silkflo.com"),
                new MailBox(core.Fullname, core.EmailNew),
                bookmarks);
        }


        /// <summary>
        /// Send email once an account has been created on the subscribe screen.
        /// Not the Free Trial screen
        /// The email will contain a link that enables the use to continue the sign up process.
        /// </summary>
        /// <param name="user">Account Owner</param>
        /// <param name="tenant">The new tenant client</param>
        /// <exception cref="ArgumentNullException"></exception>
        public async Task SendWelcomeEmailAsync(
            Data.Core.Domain.Business.Client tenant)
        {
            if (tenant == null)
                throw new ArgumentNullException(nameof(tenant));

            if (tenant.AccountOwner == null)
                throw new ArgumentNullException(nameof(tenant.AccountOwner));


            var callbackUrl =
                Url.CompleteSignUp(
                    tenant.Id,
                    Request.Scheme);

            BookMark[] bookmarks2 =
            {
                new("FIRSTNAME", tenant.AccountOwner.FirstName),
                new BookmarkLink("PATH", callbackUrl, "")
            };

            await Service.SendAsync(
                "Welcome To " + Data.Core.Settings.ApplicationName,
                Template.WelcomeEmail1,
                new MailBox(Data.Core.Settings.ApplicationName, "hello@silkflo.com"),
                new MailBox(tenant.AccountOwner.Fullname, tenant.AccountOwner.Email),
                bookmarks2);
        }
    }
}