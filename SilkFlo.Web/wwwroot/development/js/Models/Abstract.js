/*********************************************************
       Code Generated By  .  .  .  .  Delaney's ScriptBot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Template Name.  .  .  .  .  .  Project Green 3.0
       Template Version.  .  .  .  .  20220413 003
       Author .  .  .  .  .  .  .  .  Delaney

                      ,        ,--,_
                       \ _ ___/ /\|
                       ( )__, )
                      |/_  '--,
                        \ `  / '

 *********************************************************/
    
/* This 'abstract' contains methods that should be used from methods inside the other model files.
 * Because of this there are no guard clauses to validate the method parameters.
 * Look for the equivalent methods in the other model classes.
 
 */

if (!SilkFlo.Models)
    SilkFlo.Models = {};

SilkFlo.Models.Abstract = {
  

    /* SilkFlo.Models.Abstract.GetModelFromParent() Overview
     * -----------------------------------------------------
     * This function will return a model of the {namespace pascal}{namespace delimiter}{class pascal}
     * based on the value attributes of named elements in in a parent element.
     * Parameters
     * ----------
     * parentElement   - The element containing the elements representing the model.
     * names           - A string collection of field/property names that we want to collect from the UI.
     * fieldNamePrefix - This is defaulted to '{namespace pascal}{namespace delimiter}{class pascal}.',
     *                   but can be overridden.
     *                   All fields assigned to the model must have its name attribute prefixed.
     *   For example:
     *      {namespace pascal}{namespace delimiter}{class pascal}.Id
     *      {namespace pascal}{namespace delimiter}{class pascal}.Name
     *
     * This function will also:
     *  - Attach the model object to the parent element using the name Model.
     *        i.e. parentElement.Model.
     *  - Attach a collection called ModelElements to the parent element. This will contain a list of element holding the field data.
     *        i.e. parentElement.ModelElements
     *
     * Return Value
     * ------------
     * The function will return a JavaScript object consisting of fields that match the names in the names parameter collection.
     */
    GetModelFromParent: function (
        parentElement,
        names,
        fieldNamePrefix = '',
        logErrors = true)
    {
        const logPrefix = 'SilkFlo.Models.Abstract.GetModelFromParent: ';

        // Guard Clause
        if (!parentElement)
        {
            console.log(`${logPrefix}parentElement parameter missing`);
            return null;
        }


        const model = {};
        parentElement.ModelElements = {};
        parentElement.ModelElementsList = [];

        const length = names.length;
        for (let i = 0; i < length; i++)
        {
            const name = names[i];

            // Get Element
            const element = parentElement.querySelector
                ( `[name="${fieldNamePrefix}${name}"]` );

            if (element)
            {
                // Store the element in the ModelElements
                Object.defineProperty
                    (
                        parentElement.ModelElements,
                        name,
                        {
                            value: element,
                            writable: true,
                            enumerable: true
                        }
                    );

                parentElement.ModelElementsList[parentElement.ModelElementsList.length] = element;

                // Get the value
                let value;
                if (element.nodeName === 'DIV')
                {
                    if (element.hasAttribute ( 'value' ))
                    {
                        value = element.getAttribute ( 'value' );
                    }
                    else
                    {
                        value = element.innerHTML;
                    }
                }
                else
                {
                    value = SilkFlo.Models.Abstract.GetValue ( element );

                    if (element.localName === 'select' && element.selectedIndex > -1)
                    {
                        if (element.options[element.selectedIndex].value)
                        {
                            // Store the value on the model object
                            Object.defineProperty (
                                model,
                                name + 'DisplayText',
                                {
                                    value: element.options[element.selectedIndex].text,
                                    writable: true,
                                    enumerable: true
                                }
                            );
                        }
                    }
                }

                if (value
                    && value.trim)
                    value = value.trim ();

                // Store the value on the model object
                Object.defineProperty
                    (
                        model,
                        name,
                        {
                            value: value,
                            writable: true,
                            enumerable: true
                        }
                    );
            }
            else
            {
                if (logErrors)
                {
                    console.log
                        ( `${logPrefix}element with name "${fieldNamePrefix}${name}" was not found` );
                }
            }
        }

        parentElement.Model = model;
        
        return model;
    },


    // SilkFlo.Models.Abstract.GetValue
    GetValue: function (element)
    {
        // Guard Clause
        if (!element)
        {
            const logPrefix = 'SilkFlo.Models.Abstract.GetValue: ';
            console.log(`${logPrefix}element parameter missing`);
            return null;
        }

        const type = element.getAttribute
            ('type');

        let value = null;
        if (type === 'checkbox')
        {
            value = false;
            if (element.checked)
            {
                value = true;
            }
        }
        else if (element.localName === 'div')
        {
            value = element.getAttribute
                ( 'value' );

            if(value)
                value = value.trim();
        }
        else if (element.localName === 'span')
        {
            value = element.innerHTML.trim();
        }
        else if (element.localName === 'td')
        {
            value = element.innerHTML.trim();
        }
        else
        {
            if (element.value)
            {
                value = element.value.trim();
            }
        }

        return value;
    },


    /* SilkFlo.Models.Abstract.GetModelCollectionFromParentById() Overview
     * -------------------------------------------------------------------
     * Get a collection of models from within a supplied parent element with the supplied id.
     *
     *
     * Parameters
     * ----------
     * parentElementId   - Id for the parent element.
     * modelName         - The name of the element containing the models field elements. Default = '{namespace pascal}{namespace delimiter}{class pascal}'.
     *                     This value appears in the name attribute of the element containing the models field elements.
     * names             - A string collection of field/property names that we want to collect from the UI.
     * fieldNamePrefix   - The prefix of the fully field name for each field element in the model element. 
     *                     Default = '{namespace pascal}{namespace delimiter}{class pascal}.'
     *                     Example: {namespace pascal}{namespace delimiter}{class pascal}.Id.
     *
     *
     * Return Value
     * ------------
     * A collection of the {namespace pascal}{namespace delimiter}{class pascal}.
     */
    GetModelCollectionFromParentById: function (parentElementId,
                                                modelName,
                                                names,
                                                fieldNamePrefix)
    {
        const logPrefix = 'SilkFlo.Models.Abstract.GetModelCollectionFromParentById: ';


        const parentElement = document.getElementById(parentElementId);

        // Guard Clause
        if (!parentElement)
        {
            console.log(`${logPrefix}parentElementId with value "${parentElementId}" does not produce an element.`);
            return null;
        }

        return SilkFlo.Models.Abstract.GetModelCollectionFromParent
                    (parentElement,
                     modelName,
                     names,
                     fieldNamePrefix);
    },


    /* SilkFlo.Models.Abstract.GetModelCollectionFromParent() Overview
     * ---------------------------------------------------------------
     * Get a collection of models from within a supplied parent element.
     *
     *
     * Parameters
     * ----------
     * parentElement   - The parent element.
     * modelName       - The name of the element containing the models field elements.
     *                   This value appears in the name attribute of the element containing the models field elements.
     * names           - A string collection of field/property names that we want to collect from the UI.
     * fieldNamePrefix - The prefix of the fully field name for each field element in the model element. 
     *
     *
     * Return Value
     * ------------
     * A collection of the models of the same type.
     */
    GetModelCollectionFromParent: function (parentElement,
                                            modelName,
                                            names,
                                            fieldNamePrefix)
    {
        const modelElements = Array.from(parentElement.querySelectorAll(`*[name="${modelName}"]`));
        parentElement.ModelElements = modelElements;

        const models = modelElements.map(modelElement =>
            SilkFlo.Models.Abstract.GetModelFromParent(modelElement, names, fieldNamePrefix));

        parentElement.Models = models;

        return models;
    },

    Verb: {
        POST: 'POST',
        PUT: 'PUT'
    },

    /* SilkFlo.Models.Abstract.Save() Overview
     * ---------------------------------------
     * Save the supplied model back to the server.
     *
     *
     * Parameters
     * ----------
     * model               - The {namespace pascal}{namespace slash delimiter}{class pascal} model.
     * callbackStatus200   - [optional] This function is ran if the response is Ok.
     * callbackStatusOther - [optional] This function is ran if the response is not Ok.
     * targetElementId     - [optional] Supply an id for the element that will be updated 
     * url                 - The URL
     * verb                - POST or PUT
     */
    Save: function (
        model,
        callbackStatus200,
        callbackStatusOther,
        targetElementId,
        url,
        verb = SilkFlo.Models.Abstract.Verb.POST)
    {
        // 1. Covert mode to JSON;
        const json = JSON.stringify(model);


        // 3. Create XMLHttpRequest and POST.
        const http = new XMLHttpRequest();
        http.open(verb, url, true);
        http.setRequestHeader('Content-type', 'application/json');
        http.onreadystatechange = function ()
        {
            return function ()
            {
                // 4. Receive response from sender
                if (http.readyState === XMLHttpRequest.DONE)
                {
                    const feedback = http.responseText;
                    if (http.status === 200)
                    {
                        if (callbackStatus200)
                        {
                            callbackStatus200(feedback, targetElementId);
                        }
                    }
                    else
                    {
                        if (callbackStatusOther)
                        {
                            callbackStatusOther(feedback, targetElementId);
                        }
                    }
                }
            };
        }(this);


        // 2. Send
        http.send(json);
    },


    /* SilkFlo.Models.Abstract.Delete() Overview
     * -----------------------------------------
     * Delete item by supplying a URL.
     * A confirmation message box will be displayed prior to deletion request.
     *
     *
     * Parameters
     * ----------
     * url                 - The URL. For example ... delete/id/{id}
     * name                - Name of the item to be deleted. This will appear in the confirmation message
     * additionalMessage   - [optional] Any additional message to appear in the confirmation dialogue
     * callbackStatus200   - [optional] This function is ran if the response is Ok
     * callbackStatusOther - [optional] This function is ran if the response is not Ok
     * parentId            - Id passed to the callback function
     *
     *
     * Example Server C# Method
     * -------------------
     * [HttpDelete("/api/Models/.../Delete/Id/{id}")]
     * public async Task<IActionResult> Delete(string id)
     * {
     *     // Stay awesome!
     * }
     */
    Delete: function (
        url,
        name,
        additionalMessage,
        callbackStatus200,
        callbackStatusOther,
        parentId)
    {
        const logPrefix = 'SilkFlo.Models.Abstract.Delete';

        // Guard Clause
        if (!url) {
            console.log(`${logPrefix}url parameter missing`);
            return;
        }

        // Guard Clause
        if (!name) {
            console.log(`${logPrefix}name parameter missing`);
            return;
        }


        let message = `Are you sure that you want to delete <b>${name}</b>?`;

        if (additionalMessage)
        {
            message += `<br>${additionalMessage}`;
        }

        SilkFlo.Models.Abstract.Url = url;
        SilkFlo.Models.Abstract.CallbackStatus200 = callbackStatus200;
        SilkFlo.Models.Abstract.CallbackStatusOther = callbackStatusOther;
        SilkFlo.Models.Abstract.ParentId = parentId;

        bootbox.dialog({
            title: `Delete ${name}`,
            message: message,
            onEscape: true,
            backdrop: true,
            buttons: {
                cancel: {
                    label: 'Cancel',
                    className: 'btn-secondary bootbox-accept'
                },
                delete: {
                    label: 'Delete',
                    className: 'btn-danger',
                    callback: SilkFlo.Models.Abstract.DeleteConfirmation

                }
            }
        });

    },


    DeleteConfirmation: function()
    {
        const logPrefix = 'SilkFlo.Models.Abstract.DeleteConfirmation';

        // Guard Clause
        if (!SilkFlo.Models.Abstract.Url) {
            console.log(`${logPrefix}SilkFlo.Models.Abstract.Url missing`);
            return;
        }


        // 2. Create XMLHttpRequest and POST.
        const http = new XMLHttpRequest();
        http.open('DELETE', SilkFlo.Models.Abstract.Url, true);
        http.onreadystatechange = function()
        {
            return function()
            {
                // 3. Receive response from sender
                if (http.readyState === XMLHttpRequest.DONE)
                {
                    const feedback = http.responseText;
                    const parentId = SilkFlo.Models.Abstract.ParentId;
                    if (http.status === 200)
                    {
                        if (SilkFlo.Models.Abstract.CallbackStatus200)
                        {
                            SilkFlo.Models.Abstract.CallbackStatus200(feedback, parentId);
                        }
                    } else
                    {
                        if (SilkFlo.Models.Abstract.CallbackStatusOther)
                        {
                            SilkFlo.Models.Abstract.CallbackStatusOther(feedback, parentId);
                        }
                    }
                }
            };
        }(this);


        // 1. Send
        http.send();
    },




    /*
     * Parameters
     * innerHTML - Pass inner HTML for the message element of name supplied (use a <DIV name="Message"></div>).
     * parent    - The parent element that contains the message element.
     *             This function will also look in the parents sibling is message not found.
     *             This is useful for modal forms.
     * name      - Name of the element. Default 'Message'.
     */
    Message: function (
        innerHtml,
        parent,
        name = 'Message') {

        const logPrefix = 'SilkFlo.Models.Abstract.Message: ';

        if (!parent) {
            console.log(`${logPrefix}parent parameter missing`);
            return;
        }


        let element = parent.querySelector(`[name="${name}"]`);
        if (element) {
            element.innerHTML = innerHtml;
            return;
        }


        if (!parent.nextElementSibling) {
            console.log(`${logPrefix}No sibling element`);
            return;
        }



        const sibling = parent.nextElementSibling;


        element = sibling.querySelector(`[name="${name}"]`);

        if (!element) {
            console.log(`${logPrefix}Element with name ${name} missing`);
            return;
        }

        element.innerHTML = innerHtml;
    }
};