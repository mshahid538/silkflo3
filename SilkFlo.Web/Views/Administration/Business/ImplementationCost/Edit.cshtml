@using System.Globalization
@model SilkFlo.Web.Models.Business.ImplementationCost

<div class="container">

    <form asp-action="Edit"
          method="post">
        <div class="TitleBar">
            <h1>Edit Implementation Cost</h1>

        @Html.HiddenFor(x => x.CreatedById)
        @Html.HiddenFor(x => x.UpdatedById)

        @Html.HiddenFor(x => x.ClientString)
        @Html.HiddenFor(x => x.IdeaStageString)
        @Html.HiddenFor(x => x.RoleString)

            <div class="grid_1fr_auto">
                <div class="toolbar">
                    <!-- Buttons -->
                    <button formaction="/Administration/Business/ImplementationCost/Edit"
                            formmethod="post"
                            type="submit"
                            class="btn btn-secondary">Save</button>
                    <button formaction="/Administration/Business/ImplementationCost/Cancel"
                            formmethod="post"
                            type="submit"
                            class="btn btn-secondary">Cancel</button>
                </div>

                <div class="toolbar">
                    <a href="/Administration/Business/ImplementationCost">Back to List</a>
                </div>
            </div>
        </div>
    @if (!ViewContext.ModelState.IsValid)
    {
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
    }

        <!-- Form ImplementationCost -->
        <!-- Date -->
        @await Html.PartialAsync("Elements/_LabeledInput",
            new SilkFlo.Web.ViewModels.Element
            {
                Title = "Date Modified",
                Id = "DateTimeDisplayed",
                Value = Model.DateTimeDisplayed,
                ElementType = "text",
                IsReadOnly = true,
                InvalidFeedback = ""
            })

            <!-- Id Input -->
            @await Html.PartialAsync("Elements/_LabeledInput",
                new SilkFlo.Web.ViewModels.Element
                {
                    Title = "Id",
                    Id = "Id",
                    Name = "Id",
                    Value = Model.Id,
                    ElementType = "text",
                    InvalidFeedback = Model.Id_ErrorMessage,
                    IsInvalid = Model.Id_IsInValid
                })

            <!-- Allocation Input -->
            @await Html.PartialAsync("Elements/_LabeledInput",
                new SilkFlo.Web.ViewModels.Element
                {
                    Title = "Allocation",
                    Id = "Allocation",
                    Name = "Allocation",
                    Value = Model.Allocation.ToString(CultureInfo.InvariantCulture),
                    ElementType = "number",
                    InvalidFeedback = Model.Allocation_ErrorMessage,
                    IsInvalid = Model.Allocation_IsInValid
                })

            <!-- Day Input -->
            @await Html.PartialAsync("Elements/_LabeledInput",
                new SilkFlo.Web.ViewModels.Element
                {
                    Title = "Day",
                    Id = "Day",
                    Name = "Day",
                    Value = Model.Day.ToString(CultureInfo.InvariantCulture),
                    ElementType = "number",
                    InvalidFeedback = Model.Day_ErrorMessage,
                    IsInvalid = Model.Day_IsInValid
                })

                   
        @await Html.PartialAsync("Elements/_LabeledSelect",
            new SilkFlo.Web.ViewModels.Element
        {
            Title = "Client",
            Id = "ClientId",
            Name = "ClientId",
            Value = Model.ClientId,
            SelectList = new SelectList(Model.Clients,
                                                 "Id",
                                                 "Name")
        })

                   
        @await Html.PartialAsync("Elements/_LabeledSelect",
            new SilkFlo.Web.ViewModels.Element
        {
            Title = "Role",
            Id = "RoleId",
            Name = "RoleId",
            Value = Model.RoleId,
            SelectList = new SelectList(Model.Roles,
                                                 "Id",
                                                 "Name")
        })
            <!-- IdeaStageId Input -->
            @await Html.PartialAsync("Elements/_LabeledInput",
                new SilkFlo.Web.ViewModels.Element
                {
                    Title = "Idea Stage",
                    Id = "IdeaStageId",
                    Name = "IdeaStageId",
                    Value = Model.IdeaStageId,
                    IsReadOnly = true,
                    ElementType = "text",
                })
            <!-- CreatedBy Input -->
            @await Html.PartialAsync("Elements/_LabeledInput",
                new SilkFlo.Web.ViewModels.Element
                {
                    Title = "Created By",
                    Id = "CreatedBy",
                    Value = Model.CreatedBy,
                    ElementType = "text",
                    IsReadOnly = true,
                    InvalidFeedback = ""
                })


            <!-- CreatedDate Input -->
            @await Html.PartialAsync("Elements/_LabeledInput",
                new SilkFlo.Web.ViewModels.Element
                {
                    Title = "Created Date",
                    Id = "CreatedDateString",
                    Value = Model.CreatedDateString,
                    ElementType = "text",
                    IsReadOnly = true,
                    InvalidFeedback = ""
                })



            <!-- UpdatedBy Input -->
            @await Html.PartialAsync("Elements/_LabeledInput",
                new SilkFlo.Web.ViewModels.Element
                {
                    Title = "Updated By",
                    Id = "UpdatedBy",
                    Value = Model.UpdatedBy,
                    ElementType = "text",
                    IsReadOnly = true,
                    InvalidFeedback = ""
                })

            <!-- UpdateDate Input -->
            @await Html.PartialAsync("Elements/_LabeledInput",
                new SilkFlo.Web.ViewModels.Element
                {
                    Title = "Updated Date",
                    Id = "UpdatedDateString",
                    Value = Model.UpdatedDateString,
                    ElementType = "text",
                    IsReadOnly = true,
                    InvalidFeedback = ""
                })


            @if (@Model.IsDeleted)
            {
                <!-- Is Deleted Input -->
                <div class="flex_grid">
                    <label>
                        @Html.CheckBoxFor(m => m.IsDeleted)
                        Is Deleted
                    </label>
                </div>
            }
    </form>
</div>