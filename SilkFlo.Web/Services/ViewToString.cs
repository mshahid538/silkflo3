/*********************************************************
       Code Generated By  .  .  .  .  Delaney's ScriptBot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Template Name.  .  .  .  .  .  Project Green 3.0
       Template Version.  .  .  .  .  20220508 006
       Author .  .  .  .  .  .  .  .  Delaney

                      ,        ,--,_
                       \ _ ___/ /\|
                       ( )__, )
                      |/_  '--,
                        \ `  / '

**********************************************************/
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Web;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Infrastructure;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.AspNetCore.Mvc.ViewEngines;
using Microsoft.AspNetCore.Mvc.ViewFeatures;
using Microsoft.Extensions.Options;

namespace SilkFlo.Web.Services
{
    public class ViewToString : ViewExecutor
    {

        private readonly IActionContextAccessor _ActionContextAccessor;
        private ITempDataProvider _TempDataProvider;

        public ViewToString(
            IActionContextAccessor actionContextAccessor,
            IOptions<MvcViewOptions> viewOptions,
            IHttpResponseStreamWriterFactory writerFactory,
            ICompositeViewEngine viewEngine,
            ITempDataDictionaryFactory tempDataFactory,
            DiagnosticSource diagnosticSource,
            IModelMetadataProvider modelMetadataProvider,
            ITempDataProvider tempDataProvider)
            : base(viewOptions,
                    writerFactory,
                    viewEngine,
                    tempDataFactory, 
                    new DiagnosticListener("dummy"),
                    modelMetadataProvider)
        {
            _ActionContextAccessor = actionContextAccessor;
            _TempDataProvider = tempDataProvider;
        }



        public async Task<string> PartialAsync<TModel>(string viewName,
                                                       TModel model)
        {
            var context = GetActionContext();

            if (context == null) throw new ArgumentNullException(nameof(context));

            viewName = viewName.ToLower();

            if (viewName.IndexOf(".cshtml", StringComparison.OrdinalIgnoreCase) == -1)
                viewName += ".cshtml";

            if (viewName.IndexOf('/') != 0)
                viewName = "/" + viewName;

            if (viewName.IndexOf("/views", StringComparison.OrdinalIgnoreCase) != 0)
                viewName = "/views" + viewName;



            var viewDataDictionary = new ViewDataDictionary(metadataProvider: new EmptyModelMetadataProvider(),
                                                            modelState: new ModelStateDictionary())
                                                            {
                                                                Model = model,
                                                            };

            var tempDataDictionary = new TempDataDictionary(context.HttpContext,
                                                             _TempDataProvider);

            var result = new ViewResult()
            {
                ViewName = viewName,
                ViewData = viewDataDictionary,
                TempData = tempDataDictionary
            };


            var viewEngineResult = FindView(context,
                                            result);


            viewEngineResult.EnsureSuccessful(originalLocations: null);

            var view = viewEngineResult.View;

            using (var output = new StringWriter())
            {
                viewDataDictionary = new ViewDataDictionary(metadataProvider: new EmptyModelMetadataProvider(),
                                                            modelState: new ModelStateDictionary())
                                                            {
                                                                Model = model
                                                            };

                tempDataDictionary = new TempDataDictionary(context.HttpContext,
                                                             _TempDataProvider);


                var viewContext = new ViewContext(context,
                                                  view,
                                                  viewDataDictionary,
                                                  tempDataDictionary,
                                                  output,
                                                  new HtmlHelperOptions());

                await view.RenderAsync(viewContext);

                var html = HttpUtility.HtmlDecode(output.ToString());

                return html;
            }
        }
        private ActionContext GetActionContext()
        {
            return _ActionContextAccessor.ActionContext;
            //// Modified to get the global request context.
            //var httpContext = _httpContextAccessor.HttpContext;
            //if (httpContext == null)
            //{
            //    httpContext = new DefaultHttpContext();
            //    httpContext.RequestServices = _serviceProvider;
            //}
            //return new ActionContext(httpContext, new RouteData(), new ActionDescriptor());
        }

        /// 
        /// Attempts to find the  associated with .
        /// 
        /// The  associated with the current request.
        /// The .
        /// A .
        ViewEngineResult FindView(ActionContext actionContext,
                                  ViewResult viewResult)
        {
            if (actionContext == null)
                throw new ArgumentNullException(nameof(actionContext));


            if (viewResult == null)
                throw new ArgumentNullException(nameof(viewResult));

            var viewEngine = viewResult.ViewEngine ?? ViewEngine;

            var viewName = viewResult.ViewName ?? GetActionName(actionContext);


            var result = viewEngine.GetView(executingFilePath: null,
                                            viewPath: viewName,
                                            isMainPage: false);
            var originalResult = result;
            if (!result.Success)
                result = viewEngine.FindView(actionContext,
                                             viewName,
                                             isMainPage: true);

            if (!result.Success)
            {
                if (originalResult.SearchedLocations.Any())
                {
                    if (result.SearchedLocations.Any())
                    {
                        // Return a new ViewEngineResult listing all searched locations.
                        var locations = new List<string>(originalResult.SearchedLocations);
                        locations.AddRange(result.SearchedLocations);
                        result = ViewEngineResult.NotFound(viewName, locations);
                    }
                    else
                    {
                        // GetView() searched locations but FindView() did not. Use first ViewEngineResult.
                        result = originalResult;
                    }
                }
            }

            if (!result.Success)
                throw new InvalidOperationException($"Couldn't find view '{viewName}'");

            return result;
        }


        private const string ActionNameKey = "action";
        private static string GetActionName(ActionContext context)
        {
            if (context == null)
                throw new ArgumentNullException(nameof(context));


            if (!context.RouteData.Values.TryGetValue(ActionNameKey, out var routeValue))
                return null;

            var actionDescriptor = context.ActionDescriptor;
            string normalizedValue = null;
            if (actionDescriptor.RouteValues.TryGetValue(ActionNameKey, out var value)
            && !string.IsNullOrEmpty(value))
                normalizedValue = value;


            var stringRouteValue = routeValue?.ToString();

            if (string.Equals(normalizedValue,
                              stringRouteValue,
                              StringComparison.OrdinalIgnoreCase))
                return normalizedValue;


            return stringRouteValue;
        }
    }
}