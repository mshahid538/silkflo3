/*********************************************************
       Code Generated By  .  .  .  .  Delaney's ScriptBot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Template Name.  .  .  .  .  .  Project Green 3.0
       Template Version.  .  .  .  .  20210619 003
       Author .  .  .  .  .  .  .  .  Delaney

                      ,        ,--,_
                       \ _ ___/ /\|
                       ( )__, )
                      |/_  '--,
                        \ `  / '

 https://www.delaneys.space/wiki/ref/Authentication%20and%20Authorisation%20Claims

 *********************************************************/

using System;
using System.Collections.Generic;
using System.Security.Claims;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Mvc;

namespace SilkFlo.Web.Services.Models
{
    public partial class Cookie
    {
        /// <summary>
        /// This method wraps Save(string email, 
        ///                        string firstName,
        ///                        string lastName,
        ///                        Services.Core.Domain.User user)
        /// </summary>
        /// <param name="user"></param>
        /// <param name="staySignedIn"></param>
        /// <param name="expiratoryDate"></param>
        /// <param name="controller"></param>
        /// <param name="additionalClaims"></param>
        /// <returns></returns>
        internal static void Save(Data.Core.Domain.User user,
                                  bool staySignedIn,
                                  DateTime expiratoryDate,
                                  ControllerBase controller,
                                  IReadOnlyCollection<Claim> additionalClaims = null)
        {
            Save(user.Email,
                 user.FirstName,
                 user.LastName,
                 user,
                 expiratoryDate,
                 staySignedIn,
                 controller,
                 additionalClaims);
        }

        /// <summary>
        /// This method wraps SaveCookie(string email, string firstName, string lastName, Data.Core.Domain.User user)
        /// </summary>
        /// <param name="signUp"></param>
        /// <param name="user"></param>
        /// <param name="expiratoryDate"></param>
        /// <param name="controller"></param>
        /// <param name="additionalClaims"></param>
        /// <returns></returns>
        internal static void Save(
            Account.SignUp signUp,
            Data.Core.Domain.User user,
            DateTime expiratoryDate,
            ControllerBase controller,
            IReadOnlyCollection<Claim> additionalClaims = null)
        {
            Save(signUp.Email,
                 signUp.FirstName,
                 signUp.LastName,
                 user,
                 expiratoryDate,
                 false,
                 controller,
                 additionalClaims);
        }


        private static void Save(string email,
                                 string firstName,
                                 string lastName,
                                 Data.Core.Domain.User user,
                                 DateTime expiratoryDate,
                                 bool staySignedIn,
                                 ControllerBase controller,
                                 IReadOnlyCollection<Claim> additionalClaims = null)
        {
            if(!string.IsNullOrWhiteSpace(email)) email = email.Trim();
            if(!string.IsNullOrWhiteSpace(firstName)) firstName = firstName.Trim();
            if(!string.IsNullOrWhiteSpace(lastName)) lastName = lastName.Trim();

            if(string.IsNullOrEmpty(email))
                return;

            var name = firstName ?? "";

            if (!string.IsNullOrEmpty(name))
                name += " ";

            name += lastName;

            if (string.IsNullOrEmpty(name))
                name = email;

            var claims = new List<Claim>
            {
                new(ClaimTypes.NameIdentifier, email),
                new("Email", email),
                new("FirstName", firstName??""),
                new("LastName", lastName??""),
                new("Fullname", user.Fullname),
                new("name", name),
                new("UserId", user.Id),
                new(Settings.ExpiratoryDate, expiratoryDate.ToString())
            };

            if (additionalClaims != null)
                claims.AddRange(additionalClaims);

            controller.Response.Cookies.Append(
                "ClientId",
                user.ClientId);

            #region Apply Roles
            foreach (var userRole in user.UserRoles)
                claims.Add(new Claim("Role",
		                   userRole.Role.Name));

            foreach (var userRole in user.UserRoles)
                claims.Add(new Claim("RoleId",
                    userRole.Role.Id));
            #endregion



            var identity =
                new ClaimsIdentity(claims,
                                   CookieAuthenticationDefaults.AuthenticationScheme,
                                   "name",
                                   null);

            var principal = new ClaimsPrincipal(identity);

            controller.HttpContext.SignInAsync(principal,
                                               new AuthenticationProperties
                                               {
                                                   IsPersistent = staySignedIn,
                                                   ExpiresUtc = DateTime.UtcNow.AddDays(30)
                                               });
        }
    }
}