/*********************************************************
       Code Generated By  .  .  .  .  Delaney's ScriptBot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Template Name.  .  .  .  .  .  Project Green 3.0
       Template Version.  .  .  .  .  20220508 002
       Author .  .  .  .  .  .  .  .  Delaney

                          .___,
                       ___('v')___
                       `"-\._./-"'
                           ^ ^

 *********************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace SilkFlo.Web.DataServices
{
    public class User
    {
        public static async Task<bool> CheckIfAdministrator(Data.Core.IUnitOfWork unitOfWork,
                                                Data.Core.Domain.User user)
        {
            // Guard Clause
            if (user == null)
                return false;

            // Pass the buck
            return await CheckIfAdministrator(unitOfWork, user.Id);
        }


        public static async Task<bool> CheckIfAdministrator(Data.Core.IUnitOfWork unitOfWork,
                                                            string userId)
        {
            // Guard Clause
            if (unitOfWork == null)
                return false;


            // Guard Clause
            if (userId == null)
                return false;


            // Do the business
            var allowedRoles = new[]
                {
                    ((int)Data.Core.Enumerators.Role.Administrator).ToString(),
                };

            var roles = await unitOfWork.UserRoles.FindAsync(x => x.UserId == userId
                                                             && allowedRoles.Contains(x.RoleId));


            // Pass back results
            if (roles.Count() == 0)
                return false;
            else
                return true;
        }


        public static async Task<bool> CheckIfAgencyUserAsync(Data.Core.IUnitOfWork unitOfWork,
                                                              Data.Core.Domain.User user)
        {
            // Guard Clause
            if (user == null)
                return false;

            // Pass the buck
            return await CheckIfAgencyUserAsync(unitOfWork, user.Id);
        }

        public static async Task<bool> CheckIfAgencyUserAsync(Data.Core.IUnitOfWork unitOfWork,
                                                              string userId)
        {
            // Guard Clause
            if (unitOfWork == null)
                return false;


            // Guard Clause
            if (userId == null)
                return false;


            // Do the business
            var allowedRoles = new[]
                {
                    ((int)Data.Core.Enumerators.Role.AgencyUser).ToString(),
                };

            var roles = await unitOfWork.UserRoles.FindAsync(x => x.UserId == userId
                                                             && allowedRoles.Contains(x.RoleId));


            // Pass back results
            if (roles.Count() == 0)
                return false;
            else
                return true;
        }
    }
}
