/*********************************************************
       Code Generated By  .  .  .  .  Delaney's ScriptBot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Template Name.  .  .  .  .  .  Project Green 3.0
       Template Version.  .  .  .  .  20220411 004
       Author .  .  .  .  .  .  .  .  Delaney

                      ,        ,--,_
                       \ _ ___/ /\|
                       ( )__, )
                      |/_  '--,
                        \ `  / '
 
 Note: Create this object,
       populate from properties from the Core.Domain classes
       and send to a view.

Object Models
-------------
What can this object do.

* GetClient()
  Two overrides to get the parent client for the object.
  This is used to display parent in a summary table.

* GetClients()
  Two overrides to get a list of alternative parent clients.

* GetDepartment()
  Two overrides to get the parent department for the object.
  This is used to display parent in a summary table.

* GetDepartments()
  Two overrides to get a list of alternative parent departments.

* GetLocation()
  Two overrides to get the parent location for the object.
  This is used to display parent in a summary table.

* GetLocations()
  Two overrides to get a list of alternative parent locations.

* GetManager()
  Two overrides to get the parent manager for the object.
  This is used to display parent in a summary table.

* GetManagers()
  Two overrides to get a list of alternative parent managers.* GetAccountOwners()
  Two overrides to get AccountOwners children for this object.
* GetTeamMembers()
  Two overrides to get TeamMembers children for this object.

* GetModels()
  Return a model containing properties populated with the objects values

* GetCreatedAndUpdated()
  Two overrides to get Users who created updated this object
  and assign them to CreatedBy and UpdatedBy properties.
 
 *********************************************************/

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace SilkFlo.Web.Models
{
    public partial class User : Abstract
    {
        private SilkFlo.Data.Core.Domain.User _core;
        #region Constructors
        
        // This constructor is used by HTTP posts 
        public User ()
        {
            _core = new SilkFlo.Data.Core.Domain.User();
        }
        public User(SilkFlo.Data.Core.Domain.User core)
        {
            _core = core ??   
	        throw new NullReferenceException("The SilkFlo.Data.Core.Domain.User cannot be null");
        }
        #endregion

        #region Properties
        public string DisplayText { get; set; }
        public SilkFlo.Data.Core.Domain.User GetCore()
        {
            return _core;
        }
        public void SetCore(SilkFlo.Data.Core.Domain.User core)
        {
            _core = core;
        }

        public bool IsNew => string.IsNullOrWhiteSpace(Id);

        /// <summary>
        /// Primary Key
        /// </summary>
        #region Id
        [StringLength(255,
                      MinimumLength = 0,
                      ErrorMessage = "Id cannot be greater than 255 characters in length.")]
        [DisplayName("Id")]
        public string Id
        {
            get => _core.Id;
            set
            {
                if (_core.Id == value)
                    return;

                _core.Id = value;
            }
        }

        public string Id_Error { get; set; }
        public string Id_ErrorMessage { get; set; } = "Required";
        public bool Id_IsInValid { get; set; }
        #endregion

        #region About Me
        [StringLength(2147483647,
                      MinimumLength = 0,
                      ErrorMessage = "About Me cannot be greater than 2147483647 characters in length.")]
        [DisplayName("About Me")]
        public string About
        {
            get => _core.About;
            set
            {
                if (_core.About == value)
                    return;

                _core.About = value;
            }
        }

        public string About_ErrorMessage { get; set; }
        public bool About_IsInValid { get; set; }
        #endregion

        #region Email Address
        [Required]
        [StringLength(256,
                      ErrorMessage = "Email Address must be between 1 and 256 characters in length.")]
        [DisplayName("Email Address")]
        public string Email
        {
            get => _core.Email;
            set
            {
                if (_core.Email == value)
                    return;

                _core.Email = value;
            }
        }

        public string Email_ErrorMessage { get; set; } = "Required";
        public bool Email_IsInValid { get; set; }
        #endregion

        #region EmailConfirmationToken
        [StringLength(256,
                      MinimumLength = 0,
                      ErrorMessage = "EmailConfirmationToken cannot be greater than 256 characters in length.")]
        [DisplayName("EmailConfirmationToken")]
        public string EmailConfirmationToken
        {
            get => _core.EmailConfirmationToken;
            set
            {
                if (_core.EmailConfirmationToken == value)
                    return;

                _core.EmailConfirmationToken = value;
            }
        }

        public string EmailConfirmationToken_ErrorMessage { get; set; }
        public bool EmailConfirmationToken_IsInValid { get; set; }
        #endregion

        #region Email New
        [StringLength(256,
                      MinimumLength = 0,
                      ErrorMessage = "Email New cannot be greater than 256 characters in length.")]
        [DisplayName("Email New")]
        public string EmailNew
        {
            get => _core.EmailNew;
            set
            {
                if (_core.EmailNew == value)
                    return;

                _core.EmailNew = value;
            }
        }

        public string EmailNew_ErrorMessage { get; set; }
        public bool EmailNew_IsInValid { get; set; }
        #endregion

        #region First Name
        [Required]
        [StringLength(100,
                      ErrorMessage = "First Name must be between 1 and 100 characters in length.")]
        [DisplayName("First Name")]
        public string FirstName
        {
            get => _core.FirstName;
            set
            {
                if (_core.FirstName == value)
                    return;

                _core.FirstName = value;
            }
        }

        public string FirstName_ErrorMessage { get; set; } = "Required";
        public bool FirstName_IsInValid { get; set; }
        #endregion

        #region Is Email Confirmed
        [Required]
        [DisplayName("Is Email Confirmed")]
        public bool IsEmailConfirmed
        {
            get => _core.IsEmailConfirmed;
            set
            {
                if (_core.IsEmailConfirmed == value)
                    return;

                _core.IsEmailConfirmed = value;
            }
        }

        public string IsEmailConfirmed_ErrorMessage { get; set; } = "Required";
        public bool IsEmailConfirmed_IsInValid { get; set; }
        #endregion

        #region Is Locked Out
        [Required]
        [DisplayName("Is Locked Out")]
        public bool IsLockedOut
        {
            get => _core.IsLockedOut;
            set
            {
                if (_core.IsLockedOut == value)
                    return;

                _core.IsLockedOut = value;
            }
        }

        public string IsLockedOut_ErrorMessage { get; set; } = "Required";
        public bool IsLockedOut_IsInValid { get; set; }
        #endregion

        #region Is Muted
        [Required]
        [DisplayName("Is Muted")]
        public bool IsMuted
        {
            get => _core.IsMuted;
            set
            {
                if (_core.IsMuted == value)
                    return;

                _core.IsMuted = value;
            }
        }

        public string IsMuted_ErrorMessage { get; set; } = "Required";
        public bool IsMuted_IsInValid { get; set; }
        #endregion

        #region Job Title
        [StringLength(100,
                      MinimumLength = 0,
                      ErrorMessage = "Job Title cannot be greater than 100 characters in length.")]
        [DisplayName("Job Title")]
        public string JobTitle
        {
            get => _core.JobTitle;
            set
            {
                if (_core.JobTitle == value)
                    return;

                _core.JobTitle = value;
            }
        }

        public string JobTitle_ErrorMessage { get; set; }
        public bool JobTitle_IsInValid { get; set; }
        #endregion

        #region Last Name
        [Required]
        [StringLength(100,
                      ErrorMessage = "Last Name must be between 1 and 100 characters in length.")]
        [DisplayName("Last Name")]
        public string LastName
        {
            get => _core.LastName;
            set
            {
                if (_core.LastName == value)
                    return;

                _core.LastName = value;
            }
        }

        public string LastName_ErrorMessage { get; set; } = "Required";
        public bool LastName_IsInValid { get; set; }
        #endregion

        #region More Information
        [StringLength(2147483647,
                      MinimumLength = 0,
                      ErrorMessage = "More Information cannot be greater than 2147483647 characters in length.")]
        [DisplayName("More Information")]
        public string Note
        {
            get => _core.Note;
            set
            {
                if (_core.Note == value)
                    return;

                _core.Note = value;
            }
        }

        public string Note_ErrorMessage { get; set; }
        public bool Note_IsInValid { get; set; }
        #endregion

        #region PasswordHash
        [StringLength(256,
                      MinimumLength = 0,
                      ErrorMessage = "PasswordHash cannot be greater than 256 characters in length.")]
        [DisplayName("PasswordHash")]
        public string PasswordHash
        {
            get => _core.PasswordHash;
            set
            {
                if (_core.PasswordHash == value)
                    return;

                _core.PasswordHash = value;
            }
        }

        public string PasswordHash_ErrorMessage { get; set; }
        public bool PasswordHash_IsInValid { get; set; }
        #endregion

        #region PasswordResetToken
        [StringLength(256,
                      MinimumLength = 0,
                      ErrorMessage = "PasswordResetToken cannot be greater than 256 characters in length.")]
        [DisplayName("PasswordResetToken")]
        public string PasswordResetToken
        {
            get => _core.PasswordResetToken;
            set
            {
                if (_core.PasswordResetToken == value)
                    return;

                _core.PasswordResetToken = value;
            }
        }

        public string PasswordResetToken_ErrorMessage { get; set; }
        public bool PasswordResetToken_IsInValid { get; set; }
        #endregion

        [DisplayName("Client")]
        public string ClientId
        {
            get => _core.ClientId;
            set
            {
                if (_core.ClientId == value)
                    return;

                _core.ClientId = value;
                _client = null;
            }
        }
        private Models.Business.Client _client;
        public Models.Business.Client Client
        {
            get
            {
                if (_client != null)
                    return _client;

                if (_core.Client != null)
                    _client = new Models.Business.Client(_core.Client);

                return _client;
            }
            set
            {
                if (_client == value)
                    return;

                _client = value;

                if (_client == null)
                    _core.Client = null;
                else
                {
                    if (_core.ClientId != _client.Id)
                        _core.Client = null;

                    _core.ClientId = _client.Id;
                }
            }
        }

        [DisplayName("Client")]
        public string ClientString => Client?.ToString();

        public string ClientId_ErrorMessage { get; set; }
        public bool ClientId_IsInValid { get; set; }

        [DisplayName("Business Unit")]
        public string DepartmentId
        {
            get => _core.DepartmentId;
            set
            {
                if (_core.DepartmentId == value)
                    return;

                _core.DepartmentId = value;
                _department = null;
            }
        }
        private Models.Business.Department _department;
        public Models.Business.Department Department
        {
            get
            {
                if (_department != null)
                    return _department;

                if (_core.Department != null)
                    _department = new Models.Business.Department(_core.Department);

                return _department;
            }
            set
            {
                if (_department == value)
                    return;

                _department = value;

                if (_department == null)
                    _core.Department = null;
                else
                {
                    if (_core.DepartmentId != _department.Id)
                        _core.Department = null;

                    _core.DepartmentId = _department.Id;
                }
            }
        }

        [DisplayName("Business Unit")]
        public string DepartmentString => Department?.ToString();

        public string DepartmentId_ErrorMessage { get; set; }
        public bool DepartmentId_IsInValid { get; set; }

        [DisplayName("Location")]
        public string LocationId
        {
            get => _core.LocationId;
            set
            {
                if (_core.LocationId == value)
                    return;

                _core.LocationId = value;
                _location = null;
            }
        }
        private Models.Business.Location _location;
        public Models.Business.Location Location
        {
            get
            {
                if (_location != null)
                    return _location;

                if (_core.Location != null)
                    _location = new Models.Business.Location(_core.Location);

                return _location;
            }
            set
            {
                if (_location == value)
                    return;

                _location = value;

                if (_location == null)
                    _core.Location = null;
                else
                {
                    if (_core.LocationId != _location.Id)
                        _core.Location = null;

                    _core.LocationId = _location.Id;
                }
            }
        }

        [DisplayName("Location")]
        public string LocationString => Location?.ToString();

        public string LocationId_ErrorMessage { get; set; }
        public bool LocationId_IsInValid { get; set; }

        [DisplayName("Manager")]
        public string ManagerId
        {
            get => _core.ManagerId;
            set
            {
                if (_core.ManagerId == value)
                    return;

                _core.ManagerId = value;
                _manager = null;
            }
        }
        private Models.User _manager;
        public Models.User Manager
        {
            get
            {
                if (_manager != null)
                    return _manager;

                if (_core.Manager != null)
                    _manager = new Models.User(_core.Manager);

                return _manager;
            }
            set
            {
                if (_manager == value)
                    return;

                _manager = value;

                if (_manager == null)
                    _core.Manager = null;
                else
                {
                    if (_core.ManagerId != _manager.Id)
                        _core.Manager = null;

                    _core.ManagerId = _manager.Id;
                }
            }
        }

        [DisplayName("Manager")]
        public string ManagerString => Manager?.ToString();

        public string ManagerId_ErrorMessage { get; set; }
        public bool ManagerId_IsInValid { get; set; }

        private List<Models.Business.Client> _clients;
        public List<Models.Business.Client> Clients
        {
            get => _clients ??= new List<Models.Business.Client>();
            set => _clients = value;
        }

        private List<Models.Business.Department> _departments;
        public List<Models.Business.Department> Departments
        {
            get => _departments ??= new List<Models.Business.Department>();
            set => _departments = value;
        }

        private List<Models.Business.Location> _locations;
        public List<Models.Business.Location> Locations
        {
            get => _locations ??= new List<Models.Business.Location>();
            set => _locations = value;
        }

        private List<Models.User> _managers;
        public List<Models.User> Managers
        {
            get => _managers ??= new List<Models.User>();
            set => _managers = value;
        }

        private List<Models.Analytic> _analytics; 
        public List<Models.Analytic> Analytics 
        {
            get
            {
                if (_analytics != null)
                    return _analytics;

                _analytics = new List<Analytic>();

                if (_core.Analytics == null)
                    return _analytics;

                foreach (var core in _core.Analytics)
                    _analytics.Add(new Models.Analytic(core));

                return _analytics;
            }
            set => _analytics = value;
        }

        private List<Models.Business.Client> _accountOwners; 
        public List<Models.Business.Client> AccountOwners 
        {
            get
            {
                if (_accountOwners != null)
                    return _accountOwners;

                _accountOwners = new List<Business.Client>();

                if (_core.AccountOwners == null)
                    return _accountOwners;

                foreach (var core in _core.AccountOwners)
                    _accountOwners.Add(new Models.Business.Client(core));

                return _accountOwners;
            }
            set => _accountOwners = value;
        }

        private List<Models.Business.Collaborator> _collaborators; 
        public List<Models.Business.Collaborator> Collaborators 
        {
            get
            {
                if (_collaborators != null)
                    return _collaborators;

                _collaborators = new List<Business.Collaborator>();

                if (_core.Collaborators == null)
                    return _collaborators;

                foreach (var core in _core.Collaborators)
                    _collaborators.Add(new Models.Business.Collaborator(core));

                return _collaborators;
            }
            set => _collaborators = value;
        }

        private List<Models.Business.Collaborator> _invitedCollaborators; 
        public List<Models.Business.Collaborator> InvitedCollaborators 
        {
            get
            {
                if (_invitedCollaborators != null)
                    return _invitedCollaborators;

                _invitedCollaborators = new List<Business.Collaborator>();

                if (_core.InvitedCollaborators == null)
                    return _invitedCollaborators;

                foreach (var core in _core.InvitedCollaborators)
                    _invitedCollaborators.Add(new Models.Business.Collaborator(core));

                return _invitedCollaborators;
            }
            set => _invitedCollaborators = value;
        }

        private List<Models.Business.Comment> _commentsSend; 
        public List<Models.Business.Comment> CommentsSend 
        {
            get
            {
                if (_commentsSend != null)
                    return _commentsSend;

                _commentsSend = new List<Business.Comment>();

                if (_core.CommentsSend == null)
                    return _commentsSend;

                foreach (var core in _core.CommentsSend)
                    _commentsSend.Add(new Models.Business.Comment(core));

                return _commentsSend;
            }
            set => _commentsSend = value;
        }

        private List<Models.Business.Follow> _follows; 
        public List<Models.Business.Follow> Follows 
        {
            get
            {
                if (_follows != null)
                    return _follows;

                _follows = new List<Business.Follow>();

                if (_core.Follows == null)
                    return _follows;

                foreach (var core in _core.Follows)
                    _follows.Add(new Models.Business.Follow(core));

                return _follows;
            }
            set => _follows = value;
        }

        private List<Models.Business.Idea> _ideas; 
        public List<Models.Business.Idea> Ideas 
        {
            get
            {
                if (_ideas != null)
                    return _ideas;

                _ideas = new List<Business.Idea>();

                if (_core.Ideas == null)
                    return _ideas;

                foreach (var core in _core.Ideas)
                    _ideas.Add(new Models.Business.Idea(core));

                return _ideas;
            }
            set => _ideas = value;
        }

        private List<Models.Agency.ManageTenant> _manageTenants; 
        public List<Models.Agency.ManageTenant> ManageTenants 
        {
            get
            {
                if (_manageTenants != null)
                    return _manageTenants;

                _manageTenants = new List<Agency.ManageTenant>();

                if (_core.ManageTenants == null)
                    return _manageTenants;

                foreach (var core in _core.ManageTenants)
                    _manageTenants.Add(new Models.Agency.ManageTenant(core));

                return _manageTenants;
            }
            set => _manageTenants = value;
        }

        private List<Models.Message> _messages; 
        public List<Models.Message> Messages 
        {
            get
            {
                if (_messages != null)
                    return _messages;

                _messages = new List<Message>();

                if (_core.Messages == null)
                    return _messages;

                foreach (var core in _core.Messages)
                    _messages.Add(new Models.Message(core));

                return _messages;
            }
            set => _messages = value;
        }

        private List<Models.Business.Recipient> _recipients; 
        public List<Models.Business.Recipient> Recipients 
        {
            get
            {
                if (_recipients != null)
                    return _recipients;

                _recipients = new List<Business.Recipient>();

                if (_core.Recipients == null)
                    return _recipients;

                foreach (var core in _core.Recipients)
                    _recipients.Add(new Models.Business.Recipient(core));

                return _recipients;
            }
            set => _recipients = value;
        }

        private List<Models.User> _teamMembers; 
        public List<Models.User> TeamMembers 
        {
            get
            {
                if (_teamMembers != null)
                    return _teamMembers;

                _teamMembers = new List<User>();

                if (_core.TeamMembers == null)
                    return _teamMembers;

                foreach (var core in _core.TeamMembers)
                    _teamMembers.Add(new Models.User(core));

                return _teamMembers;
            }
            set => _teamMembers = value;
        }

        private List<Models.UserAchievement> _userAchievements; 
        public List<Models.UserAchievement> UserAchievements 
        {
            get
            {
                if (_userAchievements != null)
                    return _userAchievements;

                _userAchievements = new List<UserAchievement>();

                if (_core.UserAchievements == null)
                    return _userAchievements;

                foreach (var core in _core.UserAchievements)
                    _userAchievements.Add(new Models.UserAchievement(core));

                return _userAchievements;
            }
            set => _userAchievements = value;
        }

        private List<Models.Business.UserAuthorisation> _userAuthorisations; 
        public List<Models.Business.UserAuthorisation> UserAuthorisations 
        {
            get
            {
                if (_userAuthorisations != null)
                    return _userAuthorisations;

                _userAuthorisations = new List<Business.UserAuthorisation>();

                if (_core.UserAuthorisations == null)
                    return _userAuthorisations;

                foreach (var core in _core.UserAuthorisations)
                    _userAuthorisations.Add(new Models.Business.UserAuthorisation(core));

                return _userAuthorisations;
            }
            set => _userAuthorisations = value;
        }

        private List<Models.UserBadge> _userBadges; 
        public List<Models.UserBadge> UserBadges 
        {
            get
            {
                if (_userBadges != null)
                    return _userBadges;

                _userBadges = new List<UserBadge>();

                if (_core.UserBadges == null)
                    return _userBadges;

                foreach (var core in _core.UserBadges)
                    _userBadges.Add(new Models.UserBadge(core));

                return _userBadges;
            }
            set => _userBadges = value;
        }

        private List<Models.UserRole> _userRoles; 
        public List<Models.UserRole> UserRoles 
        {
            get
            {
                if (_userRoles != null)
                    return _userRoles;

                _userRoles = new List<UserRole>();

                if (_core.UserRoles == null)
                    return _userRoles;

                foreach (var core in _core.UserRoles)
                    _userRoles.Add(new Models.UserRole(core));

                return _userRoles;
            }
            set => _userRoles = value;
        }

        private List<Models.Business.Vote> _votes; 
        public List<Models.Business.Vote> Votes 
        {
            get
            {
                if (_votes != null)
                    return _votes;

                _votes = new List<Business.Vote>();

                if (_core.Votes == null)
                    return _votes;

                foreach (var core in _core.Votes)
                    _votes.Add(new Models.Business.Vote(core));

                return _votes;
            }
            set => _votes = value;
        }

        private string _password;
        [StringLength(100,
                      ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.",
                      MinimumLength = 8)]
        [DataType(System.ComponentModel.DataAnnotations.DataType.Password)]
        public string Password
        { 
            get => _password;
            set
            {
            
                if (value != null)
                    value = value.Trim();

                if (_password == value)
                    return;

                _password = value;
            }
        }

        private string _confirmPassword;
        [DataType(System.ComponentModel.DataAnnotations.DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password",
                 ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword
        { 
            get => _confirmPassword;
            set
            {
                if (value != null)
                    value = value.Trim();

                if (_confirmPassword == value)
                    return;

                _confirmPassword = value;
            }
        }

        public bool IsMatched()
        {
            return Password == ConfirmPassword;
        }

        #region Fullname Property
        public string Fullname
        {
            get
            {
                string s = FirstName;
                if (!string.IsNullOrEmpty(s)
                && !string.IsNullOrEmpty(LastName))
                    s += " ";

                s += LastName ?? "";

                return s;
            }
        }
        #endregion
        #region OwnerId
        public string OwnerId => UpdatedById ?? CreatedById;
        #endregion

        #region Owner  
        public string Owner => UpdatedBy ?? CreatedBy;
        #endregion
        

        #region CreatedBy
        [DisplayName("Created By")]
        public string CreatedBy => _core.CreatedBy == null ? "" : _core.CreatedBy.ToString();
        #endregion

        #region CreatedDate
        [DisplayName("Created Date")]
        public DateTime? CreatedDate
        {
            get => _core.CreatedDate;
            set
            {
                if (_core.CreatedDate == value)
                    return;

                _core.CreatedDate = value;
            }
        }
        #endregion

        [DisplayName("Created Date")]
        public string CreatedDateString => CreatedDate?.ToString(Data.Core.Settings.DateFormatShort);

        #region CreatedById
        [DisplayName("Created By Id")]
        public string CreatedById
        {
            get => _core.CreatedById;
            set => _core.CreatedById = value;
        }
        #endregion

        #region UpdatedById
        [DisplayName("Updated By Id")]
        public string UpdatedById
        {
            get => _core.UpdatedById;
            set => _core.UpdatedById = value;
        }
        #endregion

        #region UpdatedBy
        [DisplayName("Updated By")]
        public string UpdatedBy => _core.UpdatedBy == null ? "" : _core.UpdatedBy.ToString();
        #endregion

        #region UpdatedDate
        [DisplayName("Updated Date")]
        public DateTime? UpdatedDate
        {
            get => _core.UpdatedDate;
            set
            {
                if (_core.UpdatedDate == value)
                    return;

                _core.UpdatedDate = value;
            }
        }
        #endregion

        [DisplayName("Updated Date")]
        public string UpdatedDateString => UpdatedDate?.ToString(Data.Core.Settings.DateTimeFormatShort);


        [DisplayName("Date")]
        public string DateDisplayed => UpdatedDate == null ? CreatedDate?.ToString("yyyy-MM-dd") : UpdatedDate?.ToString("yyyy-MM-dd");

        [DisplayName("Date Time")]
        public string DateTimeDisplayed => UpdatedDate == null ? CreatedDate?.ToString("yyyy-MM-dd HH:mm:ss") : UpdatedDate?.ToString("yyyy-MM-dd HH:mm:ss");
        #endregion

        #region IsDeleted
        [DisplayName("Is Deleted")]
        public bool IsDeleted
        {
            get => _core.IsDeleted;
            set
            {
                if (_core.IsDeleted == value)
                    return;

                _core.IsDeleted = value;
            }
        }
        #endregion

        #region IsSaved
        [DisplayName("Is Saved")]
        public bool IsSaved => _core.IsSaved;
        #endregion

        public List<Models.Selector> AllAchievements_For_UserAchievements { get; set; } = new List<Models.Selector>();
        public List<Models.Selector> AllBadges_For_UserBadges { get; set; } = new List<Models.Selector>();
        public List<Models.Selector> AllRoles_For_UserRoles { get; set; } = new List<Models.Selector>();
        public List<Models.Selector> AllClients_For_ManageTenants { get; set; } = new List<Models.Selector>();
        public List<Models.Selector> AllIdeas_For_Follows { get; set; } = new List<Models.Selector>();
        public List<Models.Selector> AllIdeas_For_Votes { get; set; } = new List<Models.Selector>();

        public List<Models.Selector> AllComments_For_Recipients { get; set; } = new List<Models.Selector>();

        public async Task GetCreatedAndUpdated(Data.Core.IUnitOfWork unitOfWork)
        {
            _core.CreatedBy = await unitOfWork.Users.GetAsync(_core.CreatedById);
            _core.UpdatedBy = await unitOfWork.Users.GetAsync(_core.UpdatedById);
        }

        /// <summary>
        /// Check unique key constraints.
        /// </summary>
        /// <returns>ViewModels.Feedback</returns>
        public async Task<ViewModels.Feedback> CheckUniqueAsync(
        Data.Core.IUnitOfWork unitOfWork,
        ViewModels.Feedback feedback)
        {
            if (unitOfWork == null)
                throw new NullReferenceException("Data.Core.IUnitOfWork cannot be null");

            // Check unique
            var message = await Data.Persistence.UnitOfWork.IsUniqueAsync(GetCore());// Data.Persistence.UnitOfWork.IsUniqueAsync(GetCore());

            if (string.IsNullOrWhiteSpace(message)) 
                return feedback;


             // We have a conflict, give feedback.
            if (feedback.Elements.ContainsKey("Email"))
                feedback.Elements["Email"] = message;
            else
                feedback.Elements.Add("Email", message);


            feedback.IsValid = false;

            return feedback;
        }

        public override string ToString()
        {
            if(!string.IsNullOrWhiteSpace(DisplayText))
                return DisplayText;

            return Fullname;
        }
        #region Name Property
        private string _name;
        public string Name
        {
            get
            {
                if(string.IsNullOrEmpty(_name))
                {
                    _name = FirstName;
                    if (!string.IsNullOrEmpty(_name)
                    && !string.IsNullOrEmpty(LastName))
                        _name += " ";

                    _name += LastName ?? "";
                }

                return _name;
            }
            set
            {
                _name = value;
            }
        }
        #endregion
        public static List<Models.User> Create(IEnumerable<Data.Core.Domain.User> cores)
        {
            return cores.Select(core => new Models.User(core)).ToList();
        }
        
        public static Models.User[] Create(Data.Core.Domain.User[] cores)
        {
            return cores.Select(core => new Models.User(core)).ToArray();
        }
    }
}