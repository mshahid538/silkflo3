/*********************************************************
       Code Generated By  .  .  .  .  Delaney's ScriptBot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Template Name.  .  .  .  .  .  Project Green 3.0
       Template Version.  .  .  .  .  20220411 004
       Author .  .  .  .  .  .  .  .  Delaney

                      ,        ,--,_
                       \ _ ___/ /\|
                       ( )__, )
                      |/_  '--,
                        \ `  / '
 
 Note: Create this object,
       populate from properties from the Core.Domain classes
       and send to a view.

Object Models
-------------
What can this object do.

* GetCurrency()
  Two overrides to get the parent currency for the object.
  This is used to display parent in a summary table.

* GetCurrencies()
  Two overrides to get a list of alternative parent currencies.

* GetPeriod()
  Two overrides to get the parent period for the object.
  This is used to display parent in a summary table.



* GetProduct()
  Two overrides to get the parent product for the object.
  This is used to display parent in a summary table.

* GetProducts()
  Two overrides to get a list of alternative parent products.* GetModels()
  Return a model containing properties populated with the objects values

* GetCreatedAndUpdated()
  Two overrides to get Users who created updated this object
  and assign them to CreatedBy and UpdatedBy properties.
 
 *********************************************************/

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace SilkFlo.Web.Models.Shop
{
    public partial class Price : Abstract
    {
        private SilkFlo.Data.Core.Domain.Shop.Price _core;
        #region Constructors
        
        // This constructor is used by HTTP posts 
        public Price ()
        {
            _core = new SilkFlo.Data.Core.Domain.Shop.Price();
        }
        public Price(SilkFlo.Data.Core.Domain.Shop.Price core)
        {
            _core = core ??   
	        throw new NullReferenceException("The SilkFlo.Data.Core.Domain.Shop.Price cannot be null");
        }
        #endregion

        #region Properties
        public string DisplayText { get; set; }
        public SilkFlo.Data.Core.Domain.Shop.Price GetCore()
        {
            return _core;
        }
        public void SetCore(SilkFlo.Data.Core.Domain.Shop.Price core)
        {
            _core = core;
        }

        public bool IsNew => string.IsNullOrWhiteSpace(Id);

        /// <summary>
        /// Primary Key
        /// </summary>
        #region Id
        [StringLength(30,
                      MinimumLength = 0,
                      ErrorMessage = "Id cannot be greater than 30 characters in length.")]
        [DisplayName("Id")]
        public string Id
        {
            get => _core.Id;
            set
            {
                if (_core.Id == value)
                    return;

                _core.Id = value;
            }
        }

        public string Id_Error { get; set; }
        public string Id_ErrorMessage { get; set; } = "Required";
        public bool Id_IsInValid { get; set; }
        #endregion

        #region Amount
        [DisplayName("Amount")]
        public Decimal? Amount
        {
            get => _core.Amount;
            set
            {
                if (_core.Amount == value)
                    return;

                _core.Amount = value;
            }
        }

        public string Amount_ErrorMessage { get; set; }
        public bool Amount_IsInValid { get; set; }
        #endregion

        #region Is Active
        [Required]
        [DisplayName("Is Active")]
        public bool IsActive
        {
            get => _core.IsActive;
            set
            {
                if (_core.IsActive == value)
                    return;

                _core.IsActive = value;
            }
        }

        public string IsActive_ErrorMessage { get; set; } = "Required";
        public bool IsActive_IsInValid { get; set; }
        #endregion

        #region Is Live
        [Required]
        [DisplayName("Is Live")]
        public bool IsLive
        {
            get => _core.IsLive;
            set
            {
                if (_core.IsLive == value)
                    return;

                _core.IsLive = value;
            }
        }

        public string IsLive_ErrorMessage { get; set; } = "Required";
        public bool IsLive_IsInValid { get; set; }
        #endregion

        [DisplayName("Currency")]
        public string CurrencyId
        {
            get => _core.CurrencyId;
            set
            {
                if (_core.CurrencyId == value)
                    return;

                _core.CurrencyId = value;
                _currency = null;
            }
        }
        private Models.Shop.Currency _currency;
        public Models.Shop.Currency Currency
        {
            get
            {
                if (_currency != null)
                    return _currency;

                if (_core.Currency != null)
                    _currency = new Models.Shop.Currency(_core.Currency);

                return _currency;
            }
            set
            {
                if (_currency == value)
                    return;

                _currency = value;

                if (_currency == null)
                    _core.Currency = null;
                else
                {
                    if (_core.CurrencyId != _currency.Id)
                        _core.Currency = null;

                    _core.CurrencyId = _currency.Id;
                }
            }
        }

        [DisplayName("Currency")]
        public string CurrencyString => Currency?.ToString();

        public string CurrencyId_ErrorMessage { get; set; }
        public bool CurrencyId_IsInValid { get; set; }

        [DisplayName("Period")]
        public string PeriodId
        {
            get => _core.PeriodId;
            set
            {
                if (_core.PeriodId == value)
                    return;

                _core.PeriodId = value;
                _period = null;
            }
        }
        private Models.Shared.Period _period;
        public Models.Shared.Period Period
        {
            get
            {
                if (_period != null)
                    return _period;

                if (_core.Period != null)
                    _period = new Models.Shared.Period(_core.Period);

                return _period;
            }
            set
            {
                if (_period == value)
                    return;

                _period = value;

                if (_period == null)
                    _core.Period = null;
                else
                {
                    if (_core.PeriodId != _period.Id)
                        _core.Period = null;

                    _core.PeriodId = _period.Id;
                }
            }
        }

        [DisplayName("Period")]
        public string PeriodString => Period?.ToString();

        public string PeriodId_ErrorMessage { get; set; }
        public bool PeriodId_IsInValid { get; set; }

        [Required]
        [DisplayName("Product")]
        public string ProductId
        {
            get => _core.ProductId;
            set
            {
                if (_core.ProductId == value)
                    return;

                _core.ProductId = value;
                _product = null;
            }
        }
        private Models.Shop.Product _product;
        public Models.Shop.Product Product
        {
            get
            {
                if (_product != null)
                    return _product;

                if (_core.Product != null)
                    _product = new Models.Shop.Product(_core.Product);

                return _product;
            }
            set
            {
                if (_product == value)
                    return;

                _product = value;

                if (_product == null)
                    _core.Product = null;
                else
                {
                    if (_core.ProductId != _product.Id)
                        _core.Product = _product.GetCore();

                    _core.ProductId = _product.Id;
                }
            }
        }

        [DisplayName("Product")]
        public string ProductString => Product?.ToString();

        public string ProductId_ErrorMessage { get; set; } = "Required";
        public bool ProductId_IsInValid { get; set; }

        private List<Models.Shop.Currency> _currencies;
        public List<Models.Shop.Currency> Currencies
        {
            get => _currencies ??= new List<Models.Shop.Currency>();
            set => _currencies = value;
        }

        private List<Models.Shared.Period> _periods;
        public List<Models.Shared.Period> Periods
        {
            get => _periods ??= new List<Models.Shared.Period>();
            set => _periods = value;
        }

        private List<Models.Shop.Product> _products;
        public List<Models.Shop.Product> Products
        {
            get => _products ??= new List<Models.Shop.Product>();
            set => _products = value;
        }

        private List<Models.Shop.Subscription> _subscriptions; 
        public List<Models.Shop.Subscription> Subscriptions 
        {
            get
            {
                if (_subscriptions != null)
                    return _subscriptions;

                _subscriptions = new List<Shop.Subscription>();

                if (_core.Subscriptions == null)
                    return _subscriptions;

                foreach (var core in _core.Subscriptions)
                    _subscriptions.Add(new Models.Shop.Subscription(core));

                return _subscriptions;
            }
            set => _subscriptions = value;
        }

        #region OwnerId
        public string OwnerId => UpdatedById ?? CreatedById;
        #endregion

        #region Owner  
        public string Owner => UpdatedBy ?? CreatedBy;
        #endregion
        

        #region CreatedBy
        [DisplayName("Created By")]
        public string CreatedBy => _core.CreatedBy == null ? "" : _core.CreatedBy.ToString();
        #endregion

        #region CreatedDate
        [DisplayName("Created Date")]
        public DateTime? CreatedDate
        {
            get => _core.CreatedDate;
            set
            {
                if (_core.CreatedDate == value)
                    return;

                _core.CreatedDate = value;
            }
        }
        #endregion

        [DisplayName("Created Date")]
        public string CreatedDateString => CreatedDate?.ToString(Data.Core.Settings.DateFormatShort);

        #region CreatedById
        [DisplayName("Created By Id")]
        public string CreatedById
        {
            get => _core.CreatedById;
            set => _core.CreatedById = value;
        }
        #endregion

        #region UpdatedById
        [DisplayName("Updated By Id")]
        public string UpdatedById
        {
            get => _core.UpdatedById;
            set => _core.UpdatedById = value;
        }
        #endregion

        #region UpdatedBy
        [DisplayName("Updated By")]
        public string UpdatedBy => _core.UpdatedBy == null ? "" : _core.UpdatedBy.ToString();
        #endregion

        #region UpdatedDate
        [DisplayName("Updated Date")]
        public DateTime? UpdatedDate
        {
            get => _core.UpdatedDate;
            set
            {
                if (_core.UpdatedDate == value)
                    return;

                _core.UpdatedDate = value;
            }
        }
        #endregion

        [DisplayName("Updated Date")]
        public string UpdatedDateString => UpdatedDate?.ToString(Data.Core.Settings.DateTimeFormatShort);


        [DisplayName("Date")]
        public string DateDisplayed => UpdatedDate == null ? CreatedDate?.ToString("yyyy-MM-dd") : UpdatedDate?.ToString("yyyy-MM-dd");

        [DisplayName("Date Time")]
        public string DateTimeDisplayed => UpdatedDate == null ? CreatedDate?.ToString("yyyy-MM-dd HH:mm:ss") : UpdatedDate?.ToString("yyyy-MM-dd HH:mm:ss");
        #endregion

        #region IsDeleted
        [DisplayName("Is Deleted")]
        public bool IsDeleted
        {
            get => _core.IsDeleted;
            set
            {
                if (_core.IsDeleted == value)
                    return;

                _core.IsDeleted = value;
            }
        }
        #endregion

        #region IsSaved
        [DisplayName("Is Saved")]
        public bool IsSaved => _core.IsSaved;
        #endregion

        public async Task GetCreatedAndUpdated(Data.Core.IUnitOfWork unitOfWork)
        {
            _core.CreatedBy = await unitOfWork.Users.GetAsync(_core.CreatedById);
            _core.UpdatedBy = await unitOfWork.Users.GetAsync(_core.UpdatedById);
        }

        /// <summary>
        /// Check unique key constraints.
        /// </summary>
        /// <returns>ViewModels.Feedback</returns>
        public async Task<ViewModels.Feedback> CheckUniqueAsync(
        Data.Core.IUnitOfWork unitOfWork,
        ViewModels.Feedback feedback)
        {
            if (unitOfWork == null)
                throw new NullReferenceException("Data.Core.IUnitOfWork cannot be null");

            // Check unique
            var message = await Data.Persistence.UnitOfWork.IsUniqueAsync(GetCore());// Data.Persistence.UnitOfWork.IsUniqueAsync(GetCore());

            if (string.IsNullOrWhiteSpace(message)) 
                return feedback;


             // We have a conflict, give feedback.
            if (feedback.Elements.ContainsKey("IsLive"))
                feedback.Elements["IsLive"] = message;
            else
                feedback.Elements.Add("IsLive", message);

            if (feedback.Elements.ContainsKey("PeriodId"))
                feedback.Elements["PeriodId"] = message;
            else
                feedback.Elements.Add("PeriodId", message);

            if (feedback.Elements.ContainsKey("ProductId"))
                feedback.Elements["ProductId"] = message;
            else
                feedback.Elements.Add("ProductId", message);


            feedback.IsValid = false;

            return feedback;
        }

        #region Name Property
        public string Name => $"{PeriodId}, {Amount} {CurrencyId}, IsLive: {IsLive}, IsActive: {IsActive} ";
        #endregion

        public override string ToString()
        {
            return Name;
        }
        public static List<Models.Shop.Price> Create(IEnumerable<Data.Core.Domain.Shop.Price> cores)
        {
            return cores.Select(core => new Models.Shop.Price(core)).ToList();
        }
        
        public static Models.Shop.Price[] Create(Data.Core.Domain.Shop.Price[] cores)
        {
            return cores.Select(core => new Models.Shop.Price(core)).ToArray();
        }
    }
}