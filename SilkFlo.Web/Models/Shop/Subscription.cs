/*********************************************************
       Code Generated By  .  .  .  .  Delaney's ScriptBot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Template Name.  .  .  .  .  .  Project Green 3.0
       Template Version.  .  .  .  .  20220411 004
       Author .  .  .  .  .  .  .  .  Delaney

                      ,        ,--,_
                       \ _ ___/ /\|
                       ( )__, )
                      |/_  '--,
                        \ `  / '
 
 Note: Create this object,
       populate from properties from the Core.Domain classes
       and send to a view.

Object Models
-------------
What can this object do.

* GetAgencyDiscount()
  Two overrides to get the parent agencyDiscount for the object.
  This is used to display parent in a summary table.

* GetAgencyDiscounts()
  Two overrides to get a list of alternative parent agencyDiscounts.

* GetAgency()
  Two overrides to get the parent agency for the object.
  This is used to display parent in a summary table.

* GetAgencies()
  Two overrides to get a list of alternative parent agencies.

* GetAgencyType()
  Two overrides to get the parent agencyType for the object.
  This is used to display parent in a summary table.

* GetAgencyTypes()
  Two overrides to get a list of alternative parent agencyTypes.

* GetCoupon()
  Two overrides to get the parent coupon for the object.
  This is used to display parent in a summary table.

* GetCoupons()
  Two overrides to get a list of alternative parent coupons.

* GetPrice()
  Two overrides to get the parent price for the object.
  This is used to display parent in a summary table.

* GetPrices()
  Two overrides to get a list of alternative parent prices.

* GetTenant()
  Two overrides to get the parent tenant for the object.
  This is used to display parent in a summary table.

* GetTenants()
  Two overrides to get a list of alternative parent tenants.* GetModels()
  Return a model containing properties populated with the objects values

* GetCreatedAndUpdated()
  Two overrides to get Users who created updated this object
  and assign them to CreatedBy and UpdatedBy properties.
 
 *********************************************************/

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace SilkFlo.Web.Models.Shop
{
    public partial class Subscription : Abstract
    {
        private SilkFlo.Data.Core.Domain.Shop.Subscription _core;
        #region Constructors
        
        // This constructor is used by HTTP posts 
        public Subscription ()
        {
            _core = new SilkFlo.Data.Core.Domain.Shop.Subscription();
        }
        public Subscription(SilkFlo.Data.Core.Domain.Shop.Subscription core)
        {
            _core = core ??   
	        throw new NullReferenceException("The SilkFlo.Data.Core.Domain.Shop.Subscription cannot be null");
        }
        #endregion

        #region Properties
        public string DisplayText { get; set; }
        public SilkFlo.Data.Core.Domain.Shop.Subscription GetCore()
        {
            return _core;
        }
        public void SetCore(SilkFlo.Data.Core.Domain.Shop.Subscription core)
        {
            _core = core;
        }

        public bool IsNew => string.IsNullOrWhiteSpace(Id);

        /// <summary>
        /// Primary Key
        /// </summary>
        #region Id
        [StringLength(255,
                      MinimumLength = 0,
                      ErrorMessage = "Id cannot be greater than 255 characters in length.")]
        [DisplayName("Id")]
        public string Id
        {
            get => _core.Id;
            set
            {
                if (_core.Id == value)
                    return;

                _core.Id = value;
            }
        }

        public string Id_Error { get; set; }
        public string Id_ErrorMessage { get; set; } = "Required";
        public bool Id_IsInValid { get; set; }
        #endregion

        #region Amount
        [DisplayName("Amount")]
        public Decimal? Amount
        {
            get => _core.Amount;
            set
            {
                if (_core.Amount == value)
                    return;

                _core.Amount = value;
            }
        }

        public string Amount_ErrorMessage { get; set; }
        public bool Amount_IsInValid { get; set; }
        #endregion

        #region Cancel Token
        [StringLength(256,
                      MinimumLength = 0,
                      ErrorMessage = "Cancel Token cannot be greater than 256 characters in length.")]
        [DisplayName("Cancel Token")]
        public string CancelToken
        {
            get => _core.CancelToken;
            set
            {
                if (_core.CancelToken == value)
                    return;

                _core.CancelToken = value;
            }
        }

        public string CancelToken_ErrorMessage { get; set; }
        public bool CancelToken_IsInValid { get; set; }
        #endregion

        #region Cancelled Date
        [DisplayName("Cancelled Date")]
        public DateTime? DateCancelled
        {
            get => _core.DateCancelled;
            set
            {
                if (_core.DateCancelled == value)
                    return;

                _core.DateCancelled = value;
            }
        }

        public string DateCancelled_ErrorMessage { get; set; }
        public bool DateCancelled_IsInValid { get; set; }
        #endregion

        #region End Date
        [DisplayName("End Date")]
        public DateTime? DateEnd
        {
            get => _core.DateEnd;
            set
            {
                if (_core.DateEnd == value)
                    return;

                _core.DateEnd = value;
            }
        }

        public string DateEnd_ErrorMessage { get; set; }
        public bool DateEnd_IsInValid { get; set; }
        #endregion

        #region Start Date
        [Required]
        [DisplayName("Start Date")]
        public DateTime DateStart
        {
            get => _core.DateStart;
            set
            {
                if (_core.DateStart == value)
                    return;

                _core.DateStart = value;
            }
        }

        public string DateStart_ErrorMessage { get; set; } = "Required";
        public bool DateStart_IsInValid { get; set; }
        #endregion

        #region Discount
        [DisplayName("Discount")]
        public Decimal? Discount
        {
            get => _core.Discount;
            set
            {
                if (_core.Discount == value)
                    return;

                _core.Discount = value;
            }
        }

        public string Discount_ErrorMessage { get; set; }
        public bool Discount_IsInValid { get; set; }
        #endregion

        #region InvoiceId
        [StringLength(100,
                      MinimumLength = 0,
                      ErrorMessage = "InvoiceId cannot be greater than 100 characters in length.")]
        [DisplayName("InvoiceId")]
        public string InvoiceId
        {
            get => _core.InvoiceId;
            set
            {
                if (_core.InvoiceId == value)
                    return;

                _core.InvoiceId = value;
            }
        }

        public string InvoiceId_ErrorMessage { get; set; }
        public bool InvoiceId_IsInValid { get; set; }
        #endregion

        #region Invoice Number
        [StringLength(256,
                      MinimumLength = 0,
                      ErrorMessage = "Invoice Number cannot be greater than 256 characters in length.")]
        [DisplayName("Invoice Number")]
        public string InvoiceNumber
        {
            get => _core.InvoiceNumber;
            set
            {
                if (_core.InvoiceNumber == value)
                    return;

                _core.InvoiceNumber = value;
            }
        }

        public string InvoiceNumber_ErrorMessage { get; set; }
        public bool InvoiceNumber_IsInValid { get; set; }
        #endregion

        #region Invoice URL
        [StringLength(256,
                      MinimumLength = 0,
                      ErrorMessage = "Invoice URL cannot be greater than 256 characters in length.")]
        [DisplayName("Invoice URL")]
        public string InvoiceUrl
        {
            get => _core.InvoiceUrl;
            set
            {
                if (_core.InvoiceUrl == value)
                    return;

                _core.InvoiceUrl = value;
            }
        }

        public string InvoiceUrl_ErrorMessage { get; set; }
        public bool InvoiceUrl_IsInValid { get; set; }
        #endregion

        [DisplayName("Agency Discount")]
        public string AgencyDiscountId
        {
            get => _core.AgencyDiscountId;
            set
            {
                if (_core.AgencyDiscountId == value)
                    return;

                _core.AgencyDiscountId = value;
                _agencyDiscount = null;
            }
        }
        private Models.Shop.Discount _agencyDiscount;
        public Models.Shop.Discount AgencyDiscount
        {
            get
            {
                if (_agencyDiscount != null)
                    return _agencyDiscount;

                if (_core.AgencyDiscount != null)
                    _agencyDiscount = new Models.Shop.Discount(_core.AgencyDiscount);

                return _agencyDiscount;
            }
            set
            {
                if (_agencyDiscount == value)
                    return;

                _agencyDiscount = value;

                if (_agencyDiscount == null)
                    _core.AgencyDiscount = null;
                else
                {
                    if (_core.AgencyDiscountId != _agencyDiscount.Id)
                        _core.AgencyDiscount = null;

                    _core.AgencyDiscountId = _agencyDiscount.Id;
                }
            }
        }

        [DisplayName("Agency Discount")]
        public string AgencyDiscountString => AgencyDiscount?.ToString();

        public string AgencyDiscountId_ErrorMessage { get; set; }
        public bool AgencyDiscountId_IsInValid { get; set; }

        [DisplayName("Agency")]
        public string AgencyId
        {
            get => _core.AgencyId;
            set
            {
                if (_core.AgencyId == value)
                    return;

                _core.AgencyId = value;
                _agency = null;
            }
        }
        private Models.Business.Client _agency;
        public Models.Business.Client Agency
        {
            get
            {
                if (_agency != null)
                    return _agency;

                if (_core.Agency != null)
                    _agency = new Models.Business.Client(_core.Agency);

                return _agency;
            }
            set
            {
                if (_agency == value)
                    return;

                _agency = value;

                if (_agency == null)
                    _core.Agency = null;
                else
                {
                    if (_core.AgencyId != _agency.Id)
                        _core.Agency = null;

                    _core.AgencyId = _agency.Id;
                }
            }
        }

        [DisplayName("Agency")]
        public string AgencyString => Agency?.ToString();

        public string AgencyId_ErrorMessage { get; set; }
        public bool AgencyId_IsInValid { get; set; }

        [DisplayName("Agency Type")]
        public string AgencyTypeId
        {
            get => _core.AgencyTypeId;
            set
            {
                if (_core.AgencyTypeId == value)
                    return;

                _core.AgencyTypeId = value;
                _agencyType = null;
            }
        }
        private Models.Shared.ClientType _agencyType;
        public Models.Shared.ClientType AgencyType
        {
            get
            {
                if (_agencyType != null)
                    return _agencyType;

                if (_core.AgencyType != null)
                    _agencyType = new Models.Shared.ClientType(_core.AgencyType);

                return _agencyType;
            }
            set
            {
                if (_agencyType == value)
                    return;

                _agencyType = value;

                if (_agencyType == null)
                    _core.AgencyType = null;
                else
                {
                    if (_core.AgencyTypeId != _agencyType.Id)
                        _core.AgencyType = null;

                    _core.AgencyTypeId = _agencyType.Id;
                }
            }
        }

        [DisplayName("Agency Type")]
        public string AgencyTypeString => AgencyType?.ToString();

        public string AgencyTypeId_ErrorMessage { get; set; }
        public bool AgencyTypeId_IsInValid { get; set; }

        [DisplayName("Coupon")]
        public string CouponId
        {
            get => _core.CouponId;
            set
            {
                if (_core.CouponId == value)
                    return;

                _core.CouponId = value;
                _coupon = null;
            }
        }
        private Models.Shop.Coupon _coupon;
        public Models.Shop.Coupon Coupon
        {
            get
            {
                if (_coupon != null)
                    return _coupon;

                if (_core.Coupon != null)
                    _coupon = new Models.Shop.Coupon(_core.Coupon);

                return _coupon;
            }
            set
            {
                if (_coupon == value)
                    return;

                _coupon = value;

                if (_coupon == null)
                    _core.Coupon = null;
                else
                {
                    if (_core.CouponId != _coupon.Id)
                        _core.Coupon = null;

                    _core.CouponId = _coupon.Id;
                }
            }
        }

        [DisplayName("Coupon")]
        public string CouponString => Coupon?.ToString();

        public string CouponId_ErrorMessage { get; set; }
        public bool CouponId_IsInValid { get; set; }

        [DisplayName("Price")]
        public string PriceId
        {
            get => _core.PriceId;
            set
            {
                if (_core.PriceId == value)
                    return;

                _core.PriceId = value;
                _price = null;
            }
        }
        private Models.Shop.Price _price;
        public Models.Shop.Price Price
        {
            get
            {
                if (_price != null)
                    return _price;

                if (_core.Price != null)
                    _price = new Models.Shop.Price(_core.Price);

                return _price;
            }
            set
            {
                if (_price == value)
                    return;

                _price = value;

                if (_price == null)
                    _core.Price = null;
                else
                {
                    if (_core.PriceId != _price.Id)
                        _core.Price = null;

                    _core.PriceId = _price.Id;
                }
            }
        }

        [DisplayName("Price")]
        public string PriceString => Price?.ToString();

        public string PriceId_ErrorMessage { get; set; }
        public bool PriceId_IsInValid { get; set; }

        [Required]
        [DisplayName("Tenant")]
        public string TenantId
        {
            get => _core.TenantId;
            set
            {
                if (_core.TenantId == value)
                    return;

                _core.TenantId = value;
                _tenant = null;
            }
        }
        private Models.Business.Client _tenant;
        public Models.Business.Client Tenant
        {
            get
            {
                if (_tenant != null)
                    return _tenant;

                if (_core.Tenant != null)
                    _tenant = new Models.Business.Client(_core.Tenant);

                return _tenant;
            }
            set
            {
                if (_tenant == value)
                    return;

                _tenant = value;

                if (_tenant == null)
                    _core.Tenant = null;
                else
                {
                    if (_core.TenantId != _tenant.Id)
                        _core.Tenant = _tenant.GetCore();

                    _core.TenantId = _tenant.Id;
                }
            }
        }

        [DisplayName("Tenant")]
        public string TenantString => Tenant?.ToString();

        public string TenantId_ErrorMessage { get; set; } = "Required";
        public bool TenantId_IsInValid { get; set; }

        private List<Models.Shop.Discount> _agencyDiscounts;
        public List<Models.Shop.Discount> AgencyDiscounts
        {
            get => _agencyDiscounts ??= new List<Models.Shop.Discount>();
            set => _agencyDiscounts = value;
        }

        private List<Models.Business.Client> _agencies;
        public List<Models.Business.Client> Agencies
        {
            get => _agencies ??= new List<Models.Business.Client>();
            set => _agencies = value;
        }

        private List<Models.Shared.ClientType> _agencyTypes;
        public List<Models.Shared.ClientType> AgencyTypes
        {
            get => _agencyTypes ??= new List<Models.Shared.ClientType>();
            set => _agencyTypes = value;
        }

        private List<Models.Shop.Coupon> _coupons;
        public List<Models.Shop.Coupon> Coupons
        {
            get => _coupons ??= new List<Models.Shop.Coupon>();
            set => _coupons = value;
        }

        private List<Models.Shop.Price> _prices;
        public List<Models.Shop.Price> Prices
        {
            get => _prices ??= new List<Models.Shop.Price>();
            set => _prices = value;
        }

        private List<Models.Business.Client> _tenants;
        public List<Models.Business.Client> Tenants
        {
            get => _tenants ??= new List<Models.Business.Client>();
            set => _tenants = value;
        }

        #region OwnerId
        public string OwnerId => UpdatedById ?? CreatedById;
        #endregion

        #region Owner  
        public string Owner => UpdatedBy ?? CreatedBy;
        #endregion
        

        #region CreatedBy
        [DisplayName("Created By")]
        public string CreatedBy => _core.CreatedBy == null ? "" : _core.CreatedBy.ToString();
        #endregion

        #region CreatedDate
        [DisplayName("Created Date")]
        public DateTime? CreatedDate
        {
            get => _core.CreatedDate;
            set
            {
                if (_core.CreatedDate == value)
                    return;

                _core.CreatedDate = value;
            }
        }
        #endregion

        [DisplayName("Created Date")]
        public string CreatedDateString => CreatedDate?.ToString(Data.Core.Settings.DateFormatShort);

        #region CreatedById
        [DisplayName("Created By Id")]
        public string CreatedById
        {
            get => _core.CreatedById;
            set => _core.CreatedById = value;
        }
        #endregion

        #region UpdatedById
        [DisplayName("Updated By Id")]
        public string UpdatedById
        {
            get => _core.UpdatedById;
            set => _core.UpdatedById = value;
        }
        #endregion

        #region UpdatedBy
        [DisplayName("Updated By")]
        public string UpdatedBy => _core.UpdatedBy == null ? "" : _core.UpdatedBy.ToString();
        #endregion

        #region UpdatedDate
        [DisplayName("Updated Date")]
        public DateTime? UpdatedDate
        {
            get => _core.UpdatedDate;
            set
            {
                if (_core.UpdatedDate == value)
                    return;

                _core.UpdatedDate = value;
            }
        }
        #endregion

        [DisplayName("Updated Date")]
        public string UpdatedDateString => UpdatedDate?.ToString(Data.Core.Settings.DateTimeFormatShort);


        [DisplayName("Date")]
        public string DateDisplayed => UpdatedDate == null ? CreatedDate?.ToString("yyyy-MM-dd") : UpdatedDate?.ToString("yyyy-MM-dd");

        [DisplayName("Date Time")]
        public string DateTimeDisplayed => UpdatedDate == null ? CreatedDate?.ToString("yyyy-MM-dd HH:mm:ss") : UpdatedDate?.ToString("yyyy-MM-dd HH:mm:ss");
        #endregion

        #region IsDeleted
        [DisplayName("Is Deleted")]
        public bool IsDeleted
        {
            get => _core.IsDeleted;
            set
            {
                if (_core.IsDeleted == value)
                    return;

                _core.IsDeleted = value;
            }
        }
        #endregion

        #region IsSaved
        [DisplayName("Is Saved")]
        public bool IsSaved => _core.IsSaved;
        #endregion

        public async Task GetCreatedAndUpdated(Data.Core.IUnitOfWork unitOfWork)
        {
            _core.CreatedBy = await unitOfWork.Users.GetAsync(_core.CreatedById);
            _core.UpdatedBy = await unitOfWork.Users.GetAsync(_core.UpdatedById);
        }


        public static List<Models.Shop.Subscription> Create(IEnumerable<Data.Core.Domain.Shop.Subscription> cores)
        {
            return cores.Select(core => new Models.Shop.Subscription(core)).ToList();
        }
        
        public static Models.Shop.Subscription[] Create(Data.Core.Domain.Shop.Subscription[] cores)
        {
            return cores.Select(core => new Models.Shop.Subscription(core)).ToArray();
        }
    }
}