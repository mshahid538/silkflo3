/*********************************************************
       Code Generated By  .  .  .  .  Delaney's ScriptBot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Template Name.  .  .  .  .  .  Project Green 3.0
       Template Version.  .  .  .  .  20220411 004
       Author .  .  .  .  .  .  .  .  Delaney

                      ,        ,--,_
                       \ _ ___/ /\|
                       ( )__, )
                      |/_  '--,
                        \ `  / '
 
 Note: Create this object,
       populate from properties from the Core.Domain classes
       and send to a view.

Object Models
-------------
What can this object do.

* GetClientType()
  Two overrides to get the parent clientType for the object.
  This is used to display parent in a summary table.

* GetClientTypes()
  Two overrides to get a list of alternative parent clientTypes.

* GetCompanySize()
  Two overrides to get the parent companySize for the object.
  This is used to display parent in a summary table.

* GetCompanySizes()
  Two overrides to get a list of alternative parent companySizes.

* GetCountry()
  Two overrides to get the parent country for the object.
  This is used to display parent in a summary table.

* GetCountries()
  Two overrides to get a list of alternative parent countries.

* GetJobLevel()
  Two overrides to get the parent jobLevel for the object.
  This is used to display parent in a summary table.

* GetJobLevels()
  Two overrides to get a list of alternative parent jobLevels.* GetModels()
  Return a model containing properties populated with the objects values

* GetCreatedAndUpdated()
  Two overrides to get Users who created updated this object
  and assign them to CreatedBy and UpdatedBy properties.
 
 *********************************************************/

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace SilkFlo.Web.Models.CRM
{
    public partial class Prospect : Abstract
    {
        private SilkFlo.Data.Core.Domain.CRM.Prospect _core;
        #region Constructors
        
        // This constructor is used by HTTP posts 
        public Prospect ()
        {
            _core = new SilkFlo.Data.Core.Domain.CRM.Prospect();
        }
        public Prospect(SilkFlo.Data.Core.Domain.CRM.Prospect core)
        {
            _core = core ??   
	        throw new NullReferenceException("The SilkFlo.Data.Core.Domain.CRM.Prospect cannot be null");
        }
        #endregion

        #region Properties
        public string DisplayText { get; set; }
        public SilkFlo.Data.Core.Domain.CRM.Prospect GetCore()
        {
            return _core;
        }
        public void SetCore(SilkFlo.Data.Core.Domain.CRM.Prospect core)
        {
            _core = core;
        }

        public bool IsNew => string.IsNullOrWhiteSpace(Id);

        /// <summary>
        /// Primary Key
        /// </summary>
        #region Id
        [StringLength(255,
                      MinimumLength = 0,
                      ErrorMessage = "Id cannot be greater than 255 characters in length.")]
        [DisplayName("Id")]
        public string Id
        {
            get => _core.Id;
            set
            {
                if (_core.Id == value)
                    return;

                _core.Id = value;
            }
        }

        public string Id_Error { get; set; }
        public string Id_ErrorMessage { get; set; } = "Required";
        public bool Id_IsInValid { get; set; }
        #endregion

        #region Company Name
        [Required]
        [StringLength(100,
                      ErrorMessage = "Company Name must be between 1 and 100 characters in length.")]
        [DisplayName("Company Name")]
        public string CompanyName
        {
            get => _core.CompanyName;
            set
            {
                if (_core.CompanyName == value)
                    return;

                _core.CompanyName = value;
            }
        }

        public string CompanyName_ErrorMessage { get; set; } = "Required";
        public bool CompanyName_IsInValid { get; set; }
        #endregion

        #region Email Address
        [Required]
        [StringLength(256,
                      ErrorMessage = "Email Address must be between 1 and 256 characters in length.")]
        [DisplayName("Email Address")]
        public string Email
        {
            get => _core.Email;
            set
            {
                if (_core.Email == value)
                    return;

                _core.Email = value;
            }
        }

        public string Email_ErrorMessage { get; set; } = "Required";
        public bool Email_IsInValid { get; set; }
        #endregion

        #region First Name
        [Required]
        [StringLength(100,
                      ErrorMessage = "First Name must be between 1 and 100 characters in length.")]
        [DisplayName("First Name")]
        public string FirstName
        {
            get => _core.FirstName;
            set
            {
                if (_core.FirstName == value)
                    return;

                _core.FirstName = value;
            }
        }

        public string FirstName_ErrorMessage { get; set; } = "Required";
        public bool FirstName_IsInValid { get; set; }
        #endregion

        #region Last Name
        [Required]
        [StringLength(100,
                      ErrorMessage = "Last Name must be between 1 and 100 characters in length.")]
        [DisplayName("Last Name")]
        public string LastName
        {
            get => _core.LastName;
            set
            {
                if (_core.LastName == value)
                    return;

                _core.LastName = value;
            }
        }

        public string LastName_ErrorMessage { get; set; } = "Required";
        public bool LastName_IsInValid { get; set; }
        #endregion

        #region Phone Number
        [Required]
        [StringLength(50,
                      ErrorMessage = "Phone Number must be between 1 and 50 characters in length.")]
        [DisplayName("Phone Number")]
        public string PhoneNumber
        {
            get => _core.PhoneNumber;
            set
            {
                if (_core.PhoneNumber == value)
                    return;

                _core.PhoneNumber = value;
            }
        }

        public string PhoneNumber_ErrorMessage { get; set; } = "Required";
        public bool PhoneNumber_IsInValid { get; set; }
        #endregion

        #region Pipeline
        [StringLength(255,
                      MinimumLength = 0,
                      ErrorMessage = "Pipeline cannot be greater than 255 characters in length.")]
        [DisplayName("Pipeline")]
        public string Pipeline
        {
            get => _core.Pipeline;
            set
            {
                if (_core.Pipeline == value)
                    return;

                _core.Pipeline = value;
            }
        }

        public string Pipeline_ErrorMessage { get; set; }
        public bool Pipeline_IsInValid { get; set; }
        #endregion

        #region Terms Agreed
        [Required]
        [DisplayName("Terms Agreed")]
        public bool TermsAgreed
        {
            get => _core.TermsAgreed;
            set
            {
                if (_core.TermsAgreed == value)
                    return;

                _core.TermsAgreed = value;
            }
        }

        public string TermsAgreed_ErrorMessage { get; set; } = "Required";
        public bool TermsAgreed_IsInValid { get; set; }
        #endregion

        [Required]
        [DisplayName("ClientTypeId")]
        public string ClientTypeId
        {
            get => _core.ClientTypeId;
            set
            {
                if (_core.ClientTypeId == value)
                    return;

                _core.ClientTypeId = value;
                _clientType = null;
            }
        }
        private Models.Shared.ClientType _clientType;
        public Models.Shared.ClientType ClientType
        {
            get
            {
                if (_clientType != null)
                    return _clientType;

                if (_core.ClientType != null)
                    _clientType = new Models.Shared.ClientType(_core.ClientType);

                return _clientType;
            }
            set
            {
                if (_clientType == value)
                    return;

                _clientType = value;

                if (_clientType == null)
                    _core.ClientType = null;
                else
                {
                    if (_core.ClientTypeId != _clientType.Id)
                        _core.ClientType = _clientType.GetCore();

                    _core.ClientTypeId = _clientType.Id;
                }
            }
        }

        [DisplayName("ClientTypeId")]
        public string ClientTypeString => ClientType?.ToString();

        public string ClientTypeId_ErrorMessage { get; set; } = "Required";
        public bool ClientTypeId_IsInValid { get; set; }

        [Required]
        [DisplayName("Company Size")]
        public string CompanySizeId
        {
            get => _core.CompanySizeId;
            set
            {
                if (_core.CompanySizeId == value)
                    return;

                _core.CompanySizeId = value;
                _companySize = null;
            }
        }
        private Models.CRM.CompanySize _companySize;
        public Models.CRM.CompanySize CompanySize
        {
            get
            {
                if (_companySize != null)
                    return _companySize;

                if (_core.CompanySize != null)
                    _companySize = new Models.CRM.CompanySize(_core.CompanySize);

                return _companySize;
            }
            set
            {
                if (_companySize == value)
                    return;

                _companySize = value;

                if (_companySize == null)
                    _core.CompanySize = null;
                else
                {
                    if (_core.CompanySizeId != _companySize.Id)
                        _core.CompanySize = _companySize.GetCore();

                    _core.CompanySizeId = _companySize.Id;
                }
            }
        }

        [DisplayName("Company Size")]
        public string CompanySizeString => CompanySize?.ToString();

        public string CompanySizeId_ErrorMessage { get; set; } = "Required";
        public bool CompanySizeId_IsInValid { get; set; }

        [Required]
        [DisplayName("Country")]
        public string CountryId
        {
            get => _core.CountryId;
            set
            {
                if (_core.CountryId == value)
                    return;

                _core.CountryId = value;
                _country = null;
            }
        }
        private Models.Shared.Country _country;
        public Models.Shared.Country Country
        {
            get
            {
                if (_country != null)
                    return _country;

                if (_core.Country != null)
                    _country = new Models.Shared.Country(_core.Country);

                return _country;
            }
            set
            {
                if (_country == value)
                    return;

                _country = value;

                if (_country == null)
                    _core.Country = null;
                else
                {
                    if (_core.CountryId != _country.Id)
                        _core.Country = _country.GetCore();

                    _core.CountryId = _country.Id;
                }
            }
        }

        [DisplayName("Country")]
        public string CountryString => Country?.ToString();

        public string CountryId_ErrorMessage { get; set; } = "Required";
        public bool CountryId_IsInValid { get; set; }

        [Required]
        [DisplayName("Job Title")]
        public string JobLevelId
        {
            get => _core.JobLevelId;
            set
            {
                if (_core.JobLevelId == value)
                    return;

                _core.JobLevelId = value;
                _jobLevel = null;
            }
        }
        private Models.CRM.JobLevel _jobLevel;
        public Models.CRM.JobLevel JobLevel
        {
            get
            {
                if (_jobLevel != null)
                    return _jobLevel;

                if (_core.JobLevel != null)
                    _jobLevel = new Models.CRM.JobLevel(_core.JobLevel);

                return _jobLevel;
            }
            set
            {
                if (_jobLevel == value)
                    return;

                _jobLevel = value;

                if (_jobLevel == null)
                    _core.JobLevel = null;
                else
                {
                    if (_core.JobLevelId != _jobLevel.Id)
                        _core.JobLevel = _jobLevel.GetCore();

                    _core.JobLevelId = _jobLevel.Id;
                }
            }
        }

        [DisplayName("Job Title")]
        public string JobLevelString => JobLevel?.ToString();

        public string JobLevelId_ErrorMessage { get; set; } = "Required";
        public bool JobLevelId_IsInValid { get; set; }

        private List<Models.Shared.ClientType> _clientTypes;
        public List<Models.Shared.ClientType> ClientTypes
        {
            get => _clientTypes ??= new List<Models.Shared.ClientType>();
            set => _clientTypes = value;
        }

        private List<Models.CRM.CompanySize> _companySizes;
        public List<Models.CRM.CompanySize> CompanySizes
        {
            get => _companySizes ??= new List<Models.CRM.CompanySize>();
            set => _companySizes = value;
        }

        private List<Models.Shared.Country> _countries;
        public List<Models.Shared.Country> Countries
        {
            get => _countries ??= new List<Models.Shared.Country>();
            set => _countries = value;
        }

        private List<Models.CRM.JobLevel> _jobLevels;
        public List<Models.CRM.JobLevel> JobLevels
        {
            get => _jobLevels ??= new List<Models.CRM.JobLevel>();
            set => _jobLevels = value;
        }

        #region Fullname Property
        public string Fullname
        {
            get
            {
                string s = FirstName;
                if (!string.IsNullOrEmpty(s)
                && !string.IsNullOrEmpty(LastName))
                    s += " ";

                s += LastName ?? "";

                return s;
            }
        }
        #endregion
        #region OwnerId
        public string OwnerId => UpdatedById ?? CreatedById;
        #endregion

        #region Owner  
        public string Owner => UpdatedBy ?? CreatedBy;
        #endregion
        

        #region CreatedBy
        [DisplayName("Created By")]
        public string CreatedBy => _core.CreatedBy == null ? "" : _core.CreatedBy.ToString();
        #endregion

        #region CreatedDate
        [DisplayName("Created Date")]
        public DateTime? CreatedDate
        {
            get => _core.CreatedDate;
            set
            {
                if (_core.CreatedDate == value)
                    return;

                _core.CreatedDate = value;
            }
        }
        #endregion

        [DisplayName("Created Date")]
        public string CreatedDateString => CreatedDate?.ToString(Data.Core.Settings.DateFormatShort);

        #region CreatedById
        [DisplayName("Created By Id")]
        public string CreatedById
        {
            get => _core.CreatedById;
            set => _core.CreatedById = value;
        }
        #endregion

        #region UpdatedById
        [DisplayName("Updated By Id")]
        public string UpdatedById
        {
            get => _core.UpdatedById;
            set => _core.UpdatedById = value;
        }
        #endregion

        #region UpdatedBy
        [DisplayName("Updated By")]
        public string UpdatedBy => _core.UpdatedBy == null ? "" : _core.UpdatedBy.ToString();
        #endregion

        #region UpdatedDate
        [DisplayName("Updated Date")]
        public DateTime? UpdatedDate
        {
            get => _core.UpdatedDate;
            set
            {
                if (_core.UpdatedDate == value)
                    return;

                _core.UpdatedDate = value;
            }
        }
        #endregion

        [DisplayName("Updated Date")]
        public string UpdatedDateString => UpdatedDate?.ToString(Data.Core.Settings.DateTimeFormatShort);


        [DisplayName("Date")]
        public string DateDisplayed => UpdatedDate == null ? CreatedDate?.ToString("yyyy-MM-dd") : UpdatedDate?.ToString("yyyy-MM-dd");

        [DisplayName("Date Time")]
        public string DateTimeDisplayed => UpdatedDate == null ? CreatedDate?.ToString("yyyy-MM-dd HH:mm:ss") : UpdatedDate?.ToString("yyyy-MM-dd HH:mm:ss");
        #endregion

        #region IsDeleted
        [DisplayName("Is Deleted")]
        public bool IsDeleted
        {
            get => _core.IsDeleted;
            set
            {
                if (_core.IsDeleted == value)
                    return;

                _core.IsDeleted = value;
            }
        }
        #endregion

        #region IsSaved
        [DisplayName("Is Saved")]
        public bool IsSaved => _core.IsSaved;
        #endregion

        public async Task GetCreatedAndUpdated(Data.Core.IUnitOfWork unitOfWork)
        {
            _core.CreatedBy = await unitOfWork.Users.GetAsync(_core.CreatedById);
            _core.UpdatedBy = await unitOfWork.Users.GetAsync(_core.UpdatedById);
        }


        public override string ToString()
        {
            if(!string.IsNullOrWhiteSpace(DisplayText))
                return DisplayText;

            return Fullname;
        }
        #region Name Property
        private string _name;
        public string Name
        {
            get
            {
                if(string.IsNullOrEmpty(_name))
                {
                    _name = FirstName;
                    if (!string.IsNullOrEmpty(_name)
                    && !string.IsNullOrEmpty(LastName))
                        _name += " ";

                    _name += LastName ?? "";
                }

                return _name;
            }
            set
            {
                _name = value;
            }
        }
        #endregion
        public static List<Models.CRM.Prospect> Create(IEnumerable<Data.Core.Domain.CRM.Prospect> cores)
        {
            return cores.Select(core => new Models.CRM.Prospect(core)).ToList();
        }
        
        public static Models.CRM.Prospect[] Create(Data.Core.Domain.CRM.Prospect[] cores)
        {
            return cores.Select(core => new Models.CRM.Prospect(core)).ToArray();
        }
    }
}