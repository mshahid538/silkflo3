/*********************************************************
       Code Generated By  .  .  .  .  Delaney's ScriptBot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Template Name.  .  .  .  .  .  Project Green 3.0
       Template Version.  .  .  .  .  20220411 004
       Author .  .  .  .  .  .  .  .  Delaney

                      ,        ,--,_
                       \ _ ___/ /\|
                       ( )__, )
                      |/_  '--,
                        \ `  / '
 
 Note: Create this object,
       populate from properties from the Core.Domain classes
       and send to a view.

Object Models
-------------
What can this object do.

* GetIdeaStage()
  Two overrides to get the parent ideaStage for the object.
  This is used to display parent in a summary table.



* GetStatus()
  Two overrides to get the parent status for the object.
  This is used to display parent in a summary table.

* GetStatuses()
  Two overrides to get a list of alternative parent statuses.* GetModels()
  Return a model containing properties populated with the objects values

* GetCreatedAndUpdated()
  Two overrides to get Users who created updated this object
  and assign them to CreatedBy and UpdatedBy properties.
 
 *********************************************************/

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace SilkFlo.Web.Models.Business
{
    public partial class IdeaStageStatus : Abstract
    {
        private SilkFlo.Data.Core.Domain.Business.IdeaStageStatus _core;
        #region Constructors
        
        // This constructor is used by HTTP posts 
        public IdeaStageStatus ()
        {
            _core = new SilkFlo.Data.Core.Domain.Business.IdeaStageStatus();
        }
        public IdeaStageStatus(SilkFlo.Data.Core.Domain.Business.IdeaStageStatus core)
        {
            _core = core ??   
	        throw new NullReferenceException("The SilkFlo.Data.Core.Domain.Business.IdeaStageStatus cannot be null");
        }
        #endregion

        #region Properties
        public string DisplayText { get; set; }
        public SilkFlo.Data.Core.Domain.Business.IdeaStageStatus GetCore()
        {
            return _core;
        }
        public void SetCore(SilkFlo.Data.Core.Domain.Business.IdeaStageStatus core)
        {
            _core = core;
        }

        public bool IsNew => string.IsNullOrWhiteSpace(Id);

        /// <summary>
        /// Primary Key
        /// </summary>
        #region Id
        [StringLength(255,
                      MinimumLength = 0,
                      ErrorMessage = "Id cannot be greater than 255 characters in length.")]
        [DisplayName("Id")]
        public string Id
        {
            get => _core.Id;
            set
            {
                if (_core.Id == value)
                    return;

                _core.Id = value;
            }
        }

        public string Id_Error { get; set; }
        public string Id_ErrorMessage { get; set; } = "Required";
        public bool Id_IsInValid { get; set; }
        #endregion

        #region Date
        [Required]
        [DisplayName("Date")]
        public DateTime Date
        {
            get => _core.Date;
            set
            {
                if (_core.Date == value)
                    return;

                _core.Date = value;
            }
        }

        public string Date_ErrorMessage { get; set; } = "Required";
        public bool Date_IsInValid { get; set; }
        #endregion

        [Required]
        [DisplayName("Idea Stage")]
        public string IdeaStageId
        {
            get => _core.IdeaStageId;
            set
            {
                if (_core.IdeaStageId == value)
                    return;

                _core.IdeaStageId = value;
                _ideaStage = null;
            }
        }
        private Models.Business.IdeaStage _ideaStage;
        public Models.Business.IdeaStage IdeaStage
        {
            get
            {
                if (_ideaStage != null)
                    return _ideaStage;

                if (_core.IdeaStage != null)
                    _ideaStage = new Models.Business.IdeaStage(_core.IdeaStage);

                return _ideaStage;
            }
            set
            {
                if (_ideaStage == value)
                    return;

                _ideaStage = value;

                if (_ideaStage == null)
                    _core.IdeaStage = null;
                else
                {
                    if (_core.IdeaStageId != _ideaStage.Id)
                        _core.IdeaStage = _ideaStage.GetCore();

                    _core.IdeaStageId = _ideaStage.Id;
                }
            }
        }

        [DisplayName("Idea Stage")]
        public string IdeaStageString => IdeaStage?.ToString();

        public string IdeaStageId_ErrorMessage { get; set; } = "Required";
        public bool IdeaStageId_IsInValid { get; set; }

        [Required]
        [DisplayName("Status")]
        public string StatusId
        {
            get => _core.StatusId;
            set
            {
                if (_core.StatusId == value)
                    return;

                _core.StatusId = value;
                _status = null;
            }
        }
        private Models.Shared.IdeaStatus _status;
        public Models.Shared.IdeaStatus Status
        {
            get
            {
                if (_status != null)
                    return _status;

                if (_core.Status != null)
                    _status = new Models.Shared.IdeaStatus(_core.Status);

                return _status;
            }
            set
            {
                if (_status == value)
                    return;

                _status = value;

                if (_status == null)
                    _core.Status = null;
                else
                {
                    if (_core.StatusId != _status.Id)
                        _core.Status = _status.GetCore();

                    _core.StatusId = _status.Id;
                }
            }
        }

        [DisplayName("Status")]
        public string StatusString => Status?.ToString();

        public string StatusId_ErrorMessage { get; set; } = "Required";
        public bool StatusId_IsInValid { get; set; }

        private List<Models.Business.IdeaStage> _ideaStages;
        public List<Models.Business.IdeaStage> IdeaStages
        {
            get => _ideaStages ??= new List<Models.Business.IdeaStage>();
            set => _ideaStages = value;
        }

        private List<Models.Shared.IdeaStatus> _statuses;
        public List<Models.Shared.IdeaStatus> Statuses
        {
            get => _statuses ??= new List<Models.Shared.IdeaStatus>();
            set => _statuses = value;
        }

        #region OwnerId
        public string OwnerId => UpdatedById ?? CreatedById;
        #endregion

        #region Owner  
        public string Owner => UpdatedBy ?? CreatedBy;
        #endregion
        

        #region CreatedBy
        [DisplayName("Created By")]
        public string CreatedBy => _core.CreatedBy == null ? "" : _core.CreatedBy.ToString();
        #endregion

        #region CreatedDate
        [DisplayName("Created Date")]
        public DateTime? CreatedDate
        {
            get => _core.CreatedDate;
            set
            {
                if (_core.CreatedDate == value)
                    return;

                _core.CreatedDate = value;
            }
        }
        #endregion

        [DisplayName("Created Date")]
        public string CreatedDateString => CreatedDate?.ToString(Data.Core.Settings.DateFormatShort);

        #region CreatedById
        [DisplayName("Created By Id")]
        public string CreatedById
        {
            get => _core.CreatedById;
            set => _core.CreatedById = value;
        }
        #endregion

        #region UpdatedById
        [DisplayName("Updated By Id")]
        public string UpdatedById
        {
            get => _core.UpdatedById;
            set => _core.UpdatedById = value;
        }
        #endregion

        #region UpdatedBy
        [DisplayName("Updated By")]
        public string UpdatedBy => _core.UpdatedBy == null ? "" : _core.UpdatedBy.ToString();
        #endregion

        #region UpdatedDate
        [DisplayName("Updated Date")]
        public DateTime? UpdatedDate
        {
            get => _core.UpdatedDate;
            set
            {
                if (_core.UpdatedDate == value)
                    return;

                _core.UpdatedDate = value;
            }
        }
        #endregion

        [DisplayName("Updated Date")]
        public string UpdatedDateString => UpdatedDate?.ToString(Data.Core.Settings.DateTimeFormatShort);


        [DisplayName("Date")]
        public string DateDisplayed => UpdatedDate == null ? CreatedDate?.ToString("yyyy-MM-dd") : UpdatedDate?.ToString("yyyy-MM-dd");

        [DisplayName("Date Time")]
        public string DateTimeDisplayed => UpdatedDate == null ? CreatedDate?.ToString("yyyy-MM-dd HH:mm:ss") : UpdatedDate?.ToString("yyyy-MM-dd HH:mm:ss");
        #endregion

        #region IsDeleted
        [DisplayName("Is Deleted")]
        public bool IsDeleted
        {
            get => _core.IsDeleted;
            set
            {
                if (_core.IsDeleted == value)
                    return;

                _core.IsDeleted = value;
            }
        }
        #endregion

        #region IsSaved
        [DisplayName("Is Saved")]
        public bool IsSaved => _core.IsSaved;
        #endregion

        public async Task GetCreatedAndUpdated(Data.Core.IUnitOfWork unitOfWork)
        {
            _core.CreatedBy = await unitOfWork.Users.GetAsync(_core.CreatedById);
            _core.UpdatedBy = await unitOfWork.Users.GetAsync(_core.UpdatedById);
        }

        /// <summary>
        /// Check unique key constraints.
        /// </summary>
        /// <returns>ViewModels.Feedback</returns>
        public async Task<ViewModels.Feedback> CheckUniqueAsync(
        Data.Core.IUnitOfWork unitOfWork,
        ViewModels.Feedback feedback)
        {
            if (unitOfWork == null)
                throw new NullReferenceException("Data.Core.IUnitOfWork cannot be null");

            // Check unique
            var message = await Data.Persistence.UnitOfWork.IsUniqueAsync(GetCore());// Data.Persistence.UnitOfWork.IsUniqueAsync(GetCore());

            if (string.IsNullOrWhiteSpace(message)) 
                return feedback;


             // We have a conflict, give feedback.
            if (feedback.Elements.ContainsKey("Date"))
                feedback.Elements["Date"] = message;
            else
                feedback.Elements.Add("Date", message);

            if (feedback.Elements.ContainsKey("IdeaStageId"))
                feedback.Elements["IdeaStageId"] = message;
            else
                feedback.Elements.Add("IdeaStageId", message);


            feedback.IsValid = false;

            return feedback;
        }

        public static List<Models.Business.IdeaStageStatus> Create(IEnumerable<Data.Core.Domain.Business.IdeaStageStatus> cores)
        {
            return cores.Select(core => new Models.Business.IdeaStageStatus(core)).ToList();
        }
        
        public static Models.Business.IdeaStageStatus[] Create(Data.Core.Domain.Business.IdeaStageStatus[] cores)
        {
            return cores.Select(core => new Models.Business.IdeaStageStatus(core)).ToArray();
        }
    }
}