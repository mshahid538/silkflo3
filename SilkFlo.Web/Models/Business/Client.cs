/*********************************************************
       Code Generated By  .  .  .  .  Delaney's ScriptBot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Template Name.  .  .  .  .  .  Project Green 3.0
       Template Version.  .  .  .  .  20220411 004
       Author .  .  .  .  .  .  .  .  Delaney

                      ,        ,--,_
                       \ _ ___/ /\|
                       ( )__, )
                      |/_  '--,
                        \ `  / '
 
 Note: Create this object,
       populate from properties from the Core.Domain classes
       and send to a view.

Object Models
-------------
What can this object do.

* GetAccountOwner()
  Two overrides to get the parent accountOwner for the object.
  This is used to display parent in a summary table.

* GetAccountOwners()
  Two overrides to get a list of alternative parent accountOwners.

* GetAgencyDiscount()
  Two overrides to get the parent agencyDiscount for the object.
  This is used to display parent in a summary table.

* GetAgencyDiscounts()
  Two overrides to get a list of alternative parent agencyDiscounts.

* GetAgency()
  Two overrides to get the parent agency for the object.
  This is used to display parent in a summary table.

* GetAgencies()
  Two overrides to get a list of alternative parent agencies.

* GetCountry()
  Two overrides to get the parent country for the object.
  This is used to display parent in a summary table.

* GetCountries()
  Two overrides to get a list of alternative parent countries.

* GetCurrency()
  Two overrides to get the parent currency for the object.
  This is used to display parent in a summary table.

* GetCurrencies()
  Two overrides to get a list of alternative parent currencies.

* GetIndustry()
  Two overrides to get the parent industry for the object.
  This is used to display parent in a summary table.

* GetIndustries()
  Two overrides to get a list of alternative parent industries.

* GetLanguage()
  Two overrides to get the parent language for the object.
  This is used to display parent in a summary table.

* GetLanguages()
  Two overrides to get a list of alternative parent languages.

* GetPracticeAccount()
  Two overrides to get the parent practiceAccount for the object.
  This is used to display parent in a summary table.

* GetPracticeAccounts()
  Two overrides to get a list of alternative parent practiceAccounts.

* GetType()
  Two overrides to get the parent type for the object.
  This is used to display parent in a summary table.

* GetTypes()
  Two overrides to get a list of alternative parent types.* GetApplications()
  Two overrides to get Applications children for this object.
* GetCustomers()
  Two overrides to get Customers children for this object.
* GetProductionAccounts()
  Two overrides to get ProductionAccounts children for this object.
* GetDepartments()
  Two overrides to get Departments children for this object.
* GetLocations()
  Two overrides to get Locations children for this object.
* GetProcesses()
  Two overrides to get Processes children for this object.
* GetRoles()
  Two overrides to get Roles children for this object.
* GetTeams()
  Two overrides to get Teams children for this object.
* GetUsers()
  Two overrides to get Users children for this object.
* GetVersions()
  Two overrides to get Versions children for this object.

* GetModels()
  Return a model containing properties populated with the objects values

* GetCreatedAndUpdated()
  Two overrides to get Users who created updated this object
  and assign them to CreatedBy and UpdatedBy properties.
 
 *********************************************************/

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace SilkFlo.Web.Models.Business
{
    public partial class Client : Abstract
    {
        private SilkFlo.Data.Core.Domain.Business.Client _core;
        #region Constructors
        
        // This constructor is used by HTTP posts 
        public Client ()
        {
            _core = new SilkFlo.Data.Core.Domain.Business.Client();
        }
        public Client(SilkFlo.Data.Core.Domain.Business.Client core)
        {
            _core = core ??   
	        throw new NullReferenceException("The SilkFlo.Data.Core.Domain.Business.Client cannot be null");
        }
        #endregion

        #region Properties
        private string _displayText;
        public string DisplayText
        { 
            get => string.IsNullOrWhiteSpace(_displayText) ? Name : _displayText;
            set => _displayText = value;
        }
        public SilkFlo.Data.Core.Domain.Business.Client GetCore()
        {
            return _core;
        }
        public void SetCore(SilkFlo.Data.Core.Domain.Business.Client core)
        {
            _core = core;
        }

        public bool IsNew => string.IsNullOrWhiteSpace(Id);

        /// <summary>
        /// Primary Key
        /// </summary>
        #region Id
        [StringLength(255,
                      MinimumLength = 0,
                      ErrorMessage = "Id cannot be greater than 255 characters in length.")]
        [DisplayName("Id")]
        public string Id
        {
            get => _core.Id;
            set
            {
                if (_core.Id == value)
                    return;

                _core.Id = value;
            }
        }

        public string Id_Error { get; set; }
        public string Id_ErrorMessage { get; set; } = "Required";
        public bool Id_IsInValid { get; set; }
        #endregion

        #region Address 1
        [StringLength(100,
                      MinimumLength = 0,
                      ErrorMessage = "Address 1 cannot be greater than 100 characters in length.")]
        [DisplayName("Address 1")]
        public string Address1
        {
            get => _core.Address1;
            set
            {
                if (_core.Address1 == value)
                    return;

                _core.Address1 = value;
            }
        }

        public string Address1_ErrorMessage { get; set; }
        public bool Address1_IsInValid { get; set; }
        #endregion

        #region Address 2
        [StringLength(100,
                      MinimumLength = 0,
                      ErrorMessage = "Address 2 cannot be greater than 100 characters in length.")]
        [DisplayName("Address 2")]
        public string Address2
        {
            get => _core.Address2;
            set
            {
                if (_core.Address2 == value)
                    return;

                _core.Address2 = value;
            }
        }

        public string Address2_ErrorMessage { get; set; }
        public bool Address2_IsInValid { get; set; }
        #endregion

        #region Allow Guest Sign In
        [Required]
        [DisplayName("Allow Guest Sign In")]
        public bool AllowGuestSignIn
        {
            get => _core.AllowGuestSignIn;
            set
            {
                if (_core.AllowGuestSignIn == value)
                    return;

                _core.AllowGuestSignIn = value;
            }
        }

        public string AllowGuestSignIn_ErrorMessage { get; set; } = "Required";
        public bool AllowGuestSignIn_IsInValid { get; set; }
        #endregion

        #region Average Working Day
        [Required]
        [DisplayName("Average Working Day")]
        public int AverageWorkingDay
        {
            get => _core.AverageWorkingDay;
            set
            {
                if (_core.AverageWorkingDay == value)
                    return;

                _core.AverageWorkingDay = value;
            }
        }

        public string AverageWorkingDay_ErrorMessage { get; set; } = "Required";
        public bool AverageWorkingDay_IsInValid { get; set; }
        #endregion

        #region Average Working Hours per Day
        [Required]
        [DisplayName("Average Working Hours per Day")]
        public decimal AverageWorkingHour
        {
            get => _core.AverageWorkingHour;
            set
            {
                if (_core.AverageWorkingHour == value)
                    return;

                _core.AverageWorkingHour = value;
            }
        }

        public string AverageWorkingHour_ErrorMessage { get; set; } = "Required";
        public bool AverageWorkingHour_IsInValid { get; set; }
        #endregion

        #region City
        [StringLength(100,
                      MinimumLength = 0,
                      ErrorMessage = "City cannot be greater than 100 characters in length.")]
        [DisplayName("City")]
        public string City
        {
            get => _core.City;
            set
            {
                if (_core.City == value)
                    return;

                _core.City = value;
            }
        }

        public string City_ErrorMessage { get; set; }
        public bool City_IsInValid { get; set; }
        #endregion

        #region Free Trial Days
        [DisplayName("Free Trial Days")]
        public int? FreeTrialDay
        {
            get => _core.FreeTrialDay;
            set
            {
                if (_core.FreeTrialDay == value)
                    return;

                _core.FreeTrialDay = value;
            }
        }

        public string FreeTrialDay_ErrorMessage { get; set; }
        public bool FreeTrialDay_IsInValid { get; set; }
        #endregion

        #region Is Active
        [Required]
        [DisplayName("Is Active")]
        public bool IsActive
        {
            get => _core.IsActive;
            set
            {
                if (_core.IsActive == value)
                    return;

                _core.IsActive = value;
            }
        }

        public string IsActive_ErrorMessage { get; set; } = "Required";
        public bool IsActive_IsInValid { get; set; }
        #endregion

        #region Is Demo
        [Required]
        [DisplayName("Is Demo")]
        public bool IsDemo
        {
            get => _core.IsDemo;
            set
            {
                if (_core.IsDemo == value)
                    return;

                _core.IsDemo = value;
            }
        }

        public string IsDemo_ErrorMessage { get; set; } = "Required";
        public bool IsDemo_IsInValid { get; set; }
        #endregion

        #region Is Practice
        [Required]
        [DisplayName("Is Practice")]
        public bool IsPractice
        {
            get => _core.IsPractice;
            set
            {
                if (_core.IsPractice == value)
                    return;

                _core.IsPractice = value;
            }
        }

        public string IsPractice_ErrorMessage { get; set; } = "Required";
        public bool IsPractice_IsInValid { get; set; }
        #endregion

        #region Name
        [Required]
        [StringLength(100,
                      ErrorMessage = "Name must be between 1 and 100 characters in length.")]
        [DisplayName("Name")]
        public string Name
        {
            get => _core.Name;
            set
            {
                if (_core.Name == value)
                    return;

                _core.Name = value;
            }
        }

        public string Name_ErrorMessage { get; set; } = "Required";
        public bool Name_IsInValid { get; set; }
        #endregion

        #region Post Code
        [StringLength(100,
                      MinimumLength = 0,
                      ErrorMessage = "Post Code cannot be greater than 100 characters in length.")]
        [DisplayName("Post Code")]
        public string PostCode
        {
            get => _core.PostCode;
            set
            {
                if (_core.PostCode == value)
                    return;

                _core.PostCode = value;
            }
        }

        public string PostCode_ErrorMessage { get; set; }
        public bool PostCode_IsInValid { get; set; }
        #endregion

        #region Receive Marketing
        [Required]
        [DisplayName("Receive Marketing")]
        public bool ReceiveMarketing
        {
            get => _core.ReceiveMarketing;
            set
            {
                if (_core.ReceiveMarketing == value)
                    return;

                _core.ReceiveMarketing = value;
            }
        }

        public string ReceiveMarketing_ErrorMessage { get; set; } = "Required";
        public bool ReceiveMarketing_IsInValid { get; set; }
        #endregion

        #region State
        [StringLength(100,
                      MinimumLength = 0,
                      ErrorMessage = "State cannot be greater than 100 characters in length.")]
        [DisplayName("State")]
        public string State
        {
            get => _core.State;
            set
            {
                if (_core.State == value)
                    return;

                _core.State = value;
            }
        }

        public string State_ErrorMessage { get; set; }
        public bool State_IsInValid { get; set; }
        #endregion

        #region Stripe Primary Key
        [StringLength(100,
                      MinimumLength = 0,
                      ErrorMessage = "Stripe Primary Key cannot be greater than 100 characters in length.")]
        [DisplayName("Stripe Primary Key")]
        public string StripeId
        {
            get => _core.StripeId;
            set
            {
                if (_core.StripeId == value)
                    return;

                _core.StripeId = value;
            }
        }

        public string StripeId_ErrorMessage { get; set; }
        public bool StripeId_IsInValid { get; set; }
        #endregion

        #region Terms of Use
        [Required]
        [DisplayName("Terms of Use")]
        public bool TermsOfUse
        {
            get => _core.TermsOfUse;
            set
            {
                if (_core.TermsOfUse == value)
                    return;

                _core.TermsOfUse = value;
            }
        }

        public string TermsOfUse_ErrorMessage { get; set; } = "Required";
        public bool TermsOfUse_IsInValid { get; set; }
        #endregion

        #region Website
        [Required]
        [StringLength(100,
                      ErrorMessage = "Website must be between 1 and 100 characters in length.")]
        [DisplayName("Website")]
        public string Website
        {
            get => _core.Website;
            set
            {
                if (_core.Website == value)
                    return;

                _core.Website = value;
            }
        }

        public string Website_ErrorMessage { get; set; } = "Required";
        public bool Website_IsInValid { get; set; }
        #endregion

        #region TenantId
        [DisplayName("Azure Tenant Id")]
        public string TenantId
        {
            get => _core.TenantId;
            set
            {
                if (_core.TenantId == value)
                    return;

                _core.TenantId = value;
            }
        }
        #endregion

        #region OtherDomains
        [DisplayName("Domains")]
        public string OtherDomain
        {
            get => _core.OtherDomain;
            set
            {
                if (_core.OtherDomain == value)
                    return;

                _core.OtherDomain = value;
            }
        }
        #endregion

        [DisplayName("Account Owner")]
        public string AccountOwnerId
        {
            get => _core.AccountOwnerId;
            set
            {
                if (_core.AccountOwnerId == value)
                    return;

                _core.AccountOwnerId = value;
                _accountOwner = null;
            }
        }
        private Models.User _accountOwner;
        public Models.User AccountOwner
        {
            get
            {
                if (_accountOwner != null)
                    return _accountOwner;

                if (_core.AccountOwner != null)
                    _accountOwner = new Models.User(_core.AccountOwner);

                return _accountOwner;
            }
            set
            {
                if (_accountOwner == value)
                    return;

                _accountOwner = value;

                if (_accountOwner == null)
                    _core.AccountOwner = null;
                else
                {
                    if (_core.AccountOwnerId != _accountOwner.Id)
                        _core.AccountOwner = null;

                    _core.AccountOwnerId = _accountOwner.Id;
                }
            }
        }

        [DisplayName("Account Owner")]
        public string AccountOwnerString => AccountOwner?.ToString();

        public string AccountOwnerId_ErrorMessage { get; set; }
        public bool AccountOwnerId_IsInValid { get; set; }

        [DisplayName("Agency Discount")]
        public string AgencyDiscountId
        {
            get => _core.AgencyDiscountId;
            set
            {
                if (_core.AgencyDiscountId == value)
                    return;

                _core.AgencyDiscountId = value;
                _agencyDiscount = null;
            }
        }
        private Models.Shop.Discount _agencyDiscount;
        public Models.Shop.Discount AgencyDiscount
        {
            get
            {
                if (_agencyDiscount != null)
                    return _agencyDiscount;

                if (_core.AgencyDiscount != null)
                    _agencyDiscount = new Models.Shop.Discount(_core.AgencyDiscount);

                return _agencyDiscount;
            }
            set
            {
                if (_agencyDiscount == value)
                    return;

                _agencyDiscount = value;

                if (_agencyDiscount == null)
                    _core.AgencyDiscount = null;
                else
                {
                    if (_core.AgencyDiscountId != _agencyDiscount.Id)
                        _core.AgencyDiscount = null;

                    _core.AgencyDiscountId = _agencyDiscount.Id;
                }
            }
        }

        [DisplayName("Agency Discount")]
        public string AgencyDiscountString => AgencyDiscount?.ToString();

        public string AgencyDiscountId_ErrorMessage { get; set; }
        public bool AgencyDiscountId_IsInValid { get; set; }

        [DisplayName("Assigned Agency")]
        public string AgencyId
        {
            get => _core.AgencyId;
            set
            {
                if (_core.AgencyId == value)
                    return;

                _core.AgencyId = value;
                _agency = null;
            }
        }
        private Models.Business.Client _agency;
        public Models.Business.Client Agency
        {
            get
            {
                if (_agency != null)
                    return _agency;

                if (_core.Agency != null)
                    _agency = new Models.Business.Client(_core.Agency);

                return _agency;
            }
            set
            {
                if (_agency == value)
                    return;

                _agency = value;

                if (_agency == null)
                    _core.Agency = null;
                else
                {
                    if (_core.AgencyId != _agency.Id)
                        _core.Agency = null;

                    _core.AgencyId = _agency.Id;
                }
            }
        }

        [DisplayName("Assigned Agency")]
        public string AgencyString => Agency?.ToString();

        public string AgencyId_ErrorMessage { get; set; }
        public bool AgencyId_IsInValid { get; set; }

        [DisplayName("Country")]
        public string CountryId
        {
            get => _core.CountryId;
            set
            {
                if (_core.CountryId == value)
                    return;

                _core.CountryId = value;
                _country = null;
            }
        }
        private Models.Shared.Country _country;
        public Models.Shared.Country Country
        {
            get
            {
                if (_country != null)
                    return _country;

                if (_core.Country != null)
                    _country = new Models.Shared.Country(_core.Country);

                return _country;
            }
            set
            {
                if (_country == value)
                    return;

                _country = value;

                if (_country == null)
                    _core.Country = null;
                else
                {
                    if (_core.CountryId != _country.Id)
                        _core.Country = null;

                    _core.CountryId = _country.Id;
                }
            }
        }

        [DisplayName("Country")]
        public string CountryString => Country?.ToString();

        public string CountryId_ErrorMessage { get; set; }
        public bool CountryId_IsInValid { get; set; }

        [Required]
        [DisplayName("Currency")]
        public string CurrencyId
        {
            get => _core.CurrencyId;
            set
            {
                if (_core.CurrencyId == value)
                    return;

                _core.CurrencyId = value;
                _currency = null;
            }
        }
        private Models.Shop.Currency _currency;
        public Models.Shop.Currency Currency
        {
            get
            {
                if (_currency != null)
                    return _currency;

                if (_core.Currency != null)
                    _currency = new Models.Shop.Currency(_core.Currency);

                return _currency;
            }
            set
            {
                if (_currency == value)
                    return;

                _currency = value;

                if (_currency == null)
                    _core.Currency = null;
                else
                {
                    if (_core.CurrencyId != _currency.Id)
                        _core.Currency = _currency.GetCore();

                    _core.CurrencyId = _currency.Id;
                }
            }
        }

        [DisplayName("Currency")]
        public string CurrencyString => Currency?.ToString();

        public string CurrencyId_ErrorMessage { get; set; } = "Required";
        public bool CurrencyId_IsInValid { get; set; }

        [DisplayName("Industry")]
        public string IndustryId
        {
            get => _core.IndustryId;
            set
            {
                if (_core.IndustryId == value)
                    return;

                _core.IndustryId = value;
                _industry = null;
            }
        }
        private Models.Shared.Industry _industry;
        public Models.Shared.Industry Industry
        {
            get
            {
                if (_industry != null)
                    return _industry;

                if (_core.Industry != null)
                    _industry = new Models.Shared.Industry(_core.Industry);

                return _industry;
            }
            set
            {
                if (_industry == value)
                    return;

                _industry = value;

                if (_industry == null)
                    _core.Industry = null;
                else
                {
                    if (_core.IndustryId != _industry.Id)
                        _core.Industry = null;

                    _core.IndustryId = _industry.Id;
                }
            }
        }

        [DisplayName("Industry")]
        public string IndustryString => Industry?.ToString();

        public string IndustryId_ErrorMessage { get; set; }
        public bool IndustryId_IsInValid { get; set; }

        [Required]
        [DisplayName("Language")]
        public string LanguageId
        {
            get => _core.LanguageId;
            set
            {
                if (_core.LanguageId == value)
                    return;

                _core.LanguageId = value;
                _language = null;
            }
        }
        private Models.Shared.Language _language;
        public Models.Shared.Language Language
        {
            get
            {
                if (_language != null)
                    return _language;

                if (_core.Language != null)
                    _language = new Models.Shared.Language(_core.Language);

                return _language;
            }
            set
            {
                if (_language == value)
                    return;

                _language = value;

                if (_language == null)
                    _core.Language = null;
                else
                {
                    if (_core.LanguageId != _language.Id)
                        _core.Language = _language.GetCore();

                    _core.LanguageId = _language.Id;
                }
            }
        }

        [DisplayName("Language")]
        public string LanguageString => Language?.ToString();

        public string LanguageId_ErrorMessage { get; set; } = "Required";
        public bool LanguageId_IsInValid { get; set; }

        [DisplayName("Practice Account")]
        public string PracticeId
        {
            get => _core.PracticeId;
            set
            {
                if (_core.PracticeId == value)
                    return;

                _core.PracticeId = value;
                _practiceAccount = null;
            }
        }
        private Models.Business.Client _practiceAccount;
        public Models.Business.Client PracticeAccount
        {
            get
            {
                if (_practiceAccount != null)
                    return _practiceAccount;

                if (_core.PracticeAccount != null)
                    _practiceAccount = new Models.Business.Client(_core.PracticeAccount);

                return _practiceAccount;
            }
            set
            {
                if (_practiceAccount == value)
                    return;

                _practiceAccount = value;

                if (_practiceAccount == null)
                    _core.PracticeAccount = null;
                else
                {
                    if (_core.PracticeId != _practiceAccount.Id)
                        _core.PracticeAccount = null;

                    _core.PracticeId = _practiceAccount.Id;
                }
            }
        }

        [DisplayName("Practice Account")]
        public string PracticeAccountString => PracticeAccount?.ToString();

        public string PracticeId_ErrorMessage { get; set; }
        public bool PracticeId_IsInValid { get; set; }

        [Required]
        [DisplayName("Type")]
        public string TypeId
        {
            get => _core.TypeId;
            set
            {
                if (_core.TypeId == value)
                    return;

                _core.TypeId = value;
                _type = null;
            }
        }
        private Models.Shared.ClientType _type;
        public Models.Shared.ClientType Type
        {
            get
            {
                if (_type != null)
                    return _type;

                if (_core.Type != null)
                    _type = new Models.Shared.ClientType(_core.Type);

                return _type;
            }
            set
            {
                if (_type == value)
                    return;

                _type = value;

                if (_type == null)
                    _core.Type = null;
                else
                {
                    if (_core.TypeId != _type.Id)
                        _core.Type = _type.GetCore();

                    _core.TypeId = _type.Id;
                }
            }
        }

        [DisplayName("Type")]
        public string TypeString => Type?.ToString();

        public string TypeId_ErrorMessage { get; set; } = "Required";
        public bool TypeId_IsInValid { get; set; }

        private List<Models.User> _accountOwners;
        public List<Models.User> AccountOwners
        {
            get => _accountOwners ??= new List<Models.User>();
            set => _accountOwners = value;
        }

        private List<Models.Shop.Discount> _agencyDiscounts;
        public List<Models.Shop.Discount> AgencyDiscounts
        {
            get => _agencyDiscounts ??= new List<Models.Shop.Discount>();
            set => _agencyDiscounts = value;
        }

        private List<Models.Business.Client> _agencies;
        public List<Models.Business.Client> Agencies
        {
            get => _agencies ??= new List<Models.Business.Client>();
            set => _agencies = value;
        }

        private List<Models.Shared.Country> _countries;
        public List<Models.Shared.Country> Countries
        {
            get => _countries ??= new List<Models.Shared.Country>();
            set => _countries = value;
        }

        private List<Models.Shop.Currency> _currencies;
        public List<Models.Shop.Currency> Currencies
        {
            get => _currencies ??= new List<Models.Shop.Currency>();
            set => _currencies = value;
        }

        private List<Models.Shared.Industry> _industries;
        public List<Models.Shared.Industry> Industries
        {
            get => _industries ??= new List<Models.Shared.Industry>();
            set => _industries = value;
        }

        private List<Models.Shared.Language> _languages;
        public List<Models.Shared.Language> Languages
        {
            get => _languages ??= new List<Models.Shared.Language>();
            set => _languages = value;
        }

        private List<Models.Business.Client> _practiceAccounts;
        public List<Models.Business.Client> PracticeAccounts
        {
            get => _practiceAccounts ??= new List<Models.Business.Client>();
            set => _practiceAccounts = value;
        }

        private List<Models.Shared.ClientType> _types;
        public List<Models.Shared.ClientType> Types
        {
            get => _types ??= new List<Models.Shared.ClientType>();
            set => _types = value;
        }

        private List<Models.Business.Application> _applications; 
        public List<Models.Business.Application> Applications 
        {
            get
            {
                if (_applications != null)
                    return _applications;

                _applications = new List<Business.Application>();

                if (_core.Applications == null)
                    return _applications;

                foreach (var core in _core.Applications)
                    _applications.Add(new Models.Business.Application(core));

                return _applications;
            }
            set => _applications = value;
        }

        private List<Models.Business.Client> _customers; 
        public List<Models.Business.Client> Customers 
        {
            get
            {
                if (_customers != null)
                    return _customers;

                _customers = new List<Business.Client>();

                if (_core.Customers == null)
                    return _customers;

                foreach (var core in _core.Customers)
                    _customers.Add(new Models.Business.Client(core));

                return _customers;
            }
            set => _customers = value;
        }

        private List<Models.Business.Client> _productionAccounts; 
        public List<Models.Business.Client> ProductionAccounts 
        {
            get
            {
                if (_productionAccounts != null)
                    return _productionAccounts;

                _productionAccounts = new List<Business.Client>();

                if (_core.ProductionAccounts == null)
                    return _productionAccounts;

                foreach (var core in _core.ProductionAccounts)
                    _productionAccounts.Add(new Models.Business.Client(core));

                return _productionAccounts;
            }
            set => _productionAccounts = value;
        }

        private List<Models.Business.Comment> _comments; 
        public List<Models.Business.Comment> Comments 
        {
            get
            {
                if (_comments != null)
                    return _comments;

                _comments = new List<Business.Comment>();

                if (_core.Comments == null)
                    return _comments;

                foreach (var core in _core.Comments)
                    _comments.Add(new Models.Business.Comment(core));

                return _comments;
            }
            set => _comments = value;
        }

        private List<Models.Business.Department> _departments; 
        public List<Models.Business.Department> Departments 
        {
            get
            {
                if (_departments != null)
                    return _departments;

                _departments = new List<Business.Department>();

                if (_core.Departments == null)
                    return _departments;

                foreach (var core in _core.Departments)
                    _departments.Add(new Models.Business.Department(core));

                return _departments;
            }
            set => _departments = value;
        }

        private List<Models.Business.Document> _documents; 
        public List<Models.Business.Document> Documents 
        {
            get
            {
                if (_documents != null)
                    return _documents;

                _documents = new List<Business.Document>();

                if (_core.Documents == null)
                    return _documents;

                foreach (var core in _core.Documents)
                    _documents.Add(new Models.Business.Document(core));

                return _documents;
            }
            set => _documents = value;
        }

        private List<Models.Business.Idea> _ideas; 
        public List<Models.Business.Idea> Ideas 
        {
            get
            {
                if (_ideas != null)
                    return _ideas;

                _ideas = new List<Business.Idea>();

                if (_core.Ideas == null)
                    return _ideas;

                foreach (var core in _core.Ideas)
                    _ideas.Add(new Models.Business.Idea(core));

                return _ideas;
            }
            set => _ideas = value;
        }

        private List<Models.Business.IdeaOtherRunningCost> _ideaOtherRunningCosts; 
        public List<Models.Business.IdeaOtherRunningCost> IdeaOtherRunningCosts 
        {
            get
            {
                if (_ideaOtherRunningCosts != null)
                    return _ideaOtherRunningCosts;

                _ideaOtherRunningCosts = new List<Business.IdeaOtherRunningCost>();

                if (_core.IdeaOtherRunningCosts == null)
                    return _ideaOtherRunningCosts;

                foreach (var core in _core.IdeaOtherRunningCosts)
                    _ideaOtherRunningCosts.Add(new Models.Business.IdeaOtherRunningCost(core));

                return _ideaOtherRunningCosts;
            }
            set => _ideaOtherRunningCosts = value;
        }

        private List<Models.Business.IdeaRunningCost> _ideaRunningCosts; 
        public List<Models.Business.IdeaRunningCost> IdeaRunningCosts 
        {
            get
            {
                if (_ideaRunningCosts != null)
                    return _ideaRunningCosts;

                _ideaRunningCosts = new List<Business.IdeaRunningCost>();

                if (_core.IdeaRunningCosts == null)
                    return _ideaRunningCosts;

                foreach (var core in _core.IdeaRunningCosts)
                    _ideaRunningCosts.Add(new Models.Business.IdeaRunningCost(core));

                return _ideaRunningCosts;
            }
            set => _ideaRunningCosts = value;
        }

        private List<Models.Business.ImplementationCost> _implementationCosts; 
        public List<Models.Business.ImplementationCost> ImplementationCosts 
        {
            get
            {
                if (_implementationCosts != null)
                    return _implementationCosts;

                _implementationCosts = new List<Business.ImplementationCost>();

                if (_core.ImplementationCosts == null)
                    return _implementationCosts;

                foreach (var core in _core.ImplementationCosts)
                    _implementationCosts.Add(new Models.Business.ImplementationCost(core));

                return _implementationCosts;
            }
            set => _implementationCosts = value;
        }

        private List<Models.Business.Location> _locations; 
        public List<Models.Business.Location> Locations 
        {
            get
            {
                if (_locations != null)
                    return _locations;

                _locations = new List<Business.Location>();

                if (_core.Locations == null)
                    return _locations;

                foreach (var core in _core.Locations)
                    _locations.Add(new Models.Business.Location(core));

                return _locations;
            }
            set => _locations = value;
        }

        private List<Models.Agency.ManageTenant> _manageTenants; 
        public List<Models.Agency.ManageTenant> ManageTenants 
        {
            get
            {
                if (_manageTenants != null)
                    return _manageTenants;

                _manageTenants = new List<Agency.ManageTenant>();

                if (_core.ManageTenants == null)
                    return _manageTenants;

                foreach (var core in _core.ManageTenants)
                    _manageTenants.Add(new Models.Agency.ManageTenant(core));

                return _manageTenants;
            }
            set => _manageTenants = value;
        }

        private List<Models.Message> _messages; 
        public List<Models.Message> Messages 
        {
            get
            {
                if (_messages != null)
                    return _messages;

                _messages = new List<Message>();

                if (_core.Messages == null)
                    return _messages;

                foreach (var core in _core.Messages)
                    _messages.Add(new Models.Message(core));

                return _messages;
            }
            set => _messages = value;
        }

        private List<Models.Business.OtherRunningCost> _otherRunningCosts; 
        public List<Models.Business.OtherRunningCost> OtherRunningCosts 
        {
            get
            {
                if (_otherRunningCosts != null)
                    return _otherRunningCosts;

                _otherRunningCosts = new List<Business.OtherRunningCost>();

                if (_core.OtherRunningCosts == null)
                    return _otherRunningCosts;

                foreach (var core in _core.OtherRunningCosts)
                    _otherRunningCosts.Add(new Models.Business.OtherRunningCost(core));

                return _otherRunningCosts;
            }
            set => _otherRunningCosts = value;
        }

        private List<Models.Business.Process> _processes; 
        public List<Models.Business.Process> Processes 
        {
            get
            {
                if (_processes != null)
                    return _processes;

                _processes = new List<Business.Process>();

                if (_core.Processes == null)
                    return _processes;

                foreach (var core in _core.Processes)
                    _processes.Add(new Models.Business.Process(core));

                return _processes;
            }
            set => _processes = value;
        }

        private List<Models.Business.Role> _roles; 
        public List<Models.Business.Role> Roles 
        {
            get
            {
                if (_roles != null)
                    return _roles;

                _roles = new List<Business.Role>();

                if (_core.Roles == null)
                    return _roles;

                foreach (var core in _core.Roles)
                    _roles.Add(new Models.Business.Role(core));

                return _roles;
            }
            set => _roles = value;
        }

        private List<Models.Business.RoleCost> _roleCosts; 
        public List<Models.Business.RoleCost> RoleCosts 
        {
            get
            {
                if (_roleCosts != null)
                    return _roleCosts;

                _roleCosts = new List<Business.RoleCost>();

                if (_core.RoleCosts == null)
                    return _roleCosts;

                foreach (var core in _core.RoleCosts)
                    _roleCosts.Add(new Models.Business.RoleCost(core));

                return _roleCosts;
            }
            set => _roleCosts = value;
        }

        private List<Models.Business.RoleIdeaAuthorisation> _roleIdeaAuthorisations; 
        public List<Models.Business.RoleIdeaAuthorisation> RoleIdeaAuthorisations 
        {
            get
            {
                if (_roleIdeaAuthorisations != null)
                    return _roleIdeaAuthorisations;

                _roleIdeaAuthorisations = new List<Business.RoleIdeaAuthorisation>();

                if (_core.RoleIdeaAuthorisations == null)
                    return _roleIdeaAuthorisations;

                foreach (var core in _core.RoleIdeaAuthorisations)
                    _roleIdeaAuthorisations.Add(new Models.Business.RoleIdeaAuthorisation(core));

                return _roleIdeaAuthorisations;
            }
            set => _roleIdeaAuthorisations = value;
        }

        private List<Models.Business.RunningCost> _runningCosts; 
        public List<Models.Business.RunningCost> RunningCosts 
        {
            get
            {
                if (_runningCosts != null)
                    return _runningCosts;

                _runningCosts = new List<Business.RunningCost>();

                if (_core.RunningCosts == null)
                    return _runningCosts;

                foreach (var core in _core.RunningCosts)
                    _runningCosts.Add(new Models.Business.RunningCost(core));

                return _runningCosts;
            }
            set => _runningCosts = value;
        }

        private List<Models.Business.SoftwareVender> _softwareVenders; 
        public List<Models.Business.SoftwareVender> SoftwareVenders 
        {
            get
            {
                if (_softwareVenders != null)
                    return _softwareVenders;

                _softwareVenders = new List<Business.SoftwareVender>();

                if (_core.SoftwareVenders == null)
                    return _softwareVenders;

                foreach (var core in _core.SoftwareVenders)
                    _softwareVenders.Add(new Models.Business.SoftwareVender(core));

                return _softwareVenders;
            }
            set => _softwareVenders = value;
        }

        private List<Models.Shop.Subscription> _tenantSubscriptions; 
        public List<Models.Shop.Subscription> TenantSubscriptions 
        {
            get
            {
                if (_tenantSubscriptions != null)
                    return _tenantSubscriptions;

                _tenantSubscriptions = new List<Shop.Subscription>();

                if (_core.TenantSubscriptions == null)
                    return _tenantSubscriptions;

                foreach (var core in _core.TenantSubscriptions)
                    _tenantSubscriptions.Add(new Models.Shop.Subscription(core));

                return _tenantSubscriptions;
            }
            set => _tenantSubscriptions = value;
        }

        private List<Models.Shop.Subscription> _agencySubscriptions; 
        public List<Models.Shop.Subscription> AgencySubscriptions 
        {
            get
            {
                if (_agencySubscriptions != null)
                    return _agencySubscriptions;

                _agencySubscriptions = new List<Shop.Subscription>();

                if (_core.AgencySubscriptions == null)
                    return _agencySubscriptions;

                foreach (var core in _core.AgencySubscriptions)
                    _agencySubscriptions.Add(new Models.Shop.Subscription(core));

                return _agencySubscriptions;
            }
            set => _agencySubscriptions = value;
        }

        private List<Models.Business.Team> _teams; 
        public List<Models.Business.Team> Teams 
        {
            get
            {
                if (_teams != null)
                    return _teams;

                _teams = new List<Business.Team>();

                if (_core.Teams == null)
                    return _teams;

                foreach (var core in _core.Teams)
                    _teams.Add(new Models.Business.Team(core));

                return _teams;
            }
            set => _teams = value;
        }

        private List<Models.User> _users; 
        public List<Models.User> Users 
        {
            get
            {
                if (_users != null)
                    return _users;

                _users = new List<User>();

                if (_core.Users == null)
                    return _users;

                foreach (var core in _core.Users)
                    _users.Add(new Models.User(core));

                return _users;
            }
            set => _users = value;
        }

        private List<Models.Business.Version> _versions; 
        public List<Models.Business.Version> Versions 
        {
            get
            {
                if (_versions != null)
                    return _versions;

                _versions = new List<Business.Version>();

                if (_core.Versions == null)
                    return _versions;

                foreach (var core in _core.Versions)
                    _versions.Add(new Models.Business.Version(core));

                return _versions;
            }
            set => _versions = value;
        }

        #region OwnerId
        public string OwnerId => UpdatedById ?? CreatedById;
        #endregion

        #region Owner  
        public string Owner => UpdatedBy ?? CreatedBy;
        #endregion
        

        #region CreatedBy
        [DisplayName("Created By")]
        public string CreatedBy => _core.CreatedBy == null ? "" : _core.CreatedBy.ToString();
        #endregion

        #region CreatedDate
        [DisplayName("Created Date")]
        public DateTime? CreatedDate
        {
            get => _core.CreatedDate;
            set
            {
                if (_core.CreatedDate == value)
                    return;

                _core.CreatedDate = value;
            }
        }
        #endregion

        [DisplayName("Created Date")]
        public string CreatedDateString => CreatedDate?.ToString(Data.Core.Settings.DateFormatShort);

        #region CreatedById
        [DisplayName("Created By Id")]
        public string CreatedById
        {
            get => _core.CreatedById;
            set => _core.CreatedById = value;
        }
        #endregion

        #region UpdatedById
        [DisplayName("Updated By Id")]
        public string UpdatedById
        {
            get => _core.UpdatedById;
            set => _core.UpdatedById = value;
        }
        #endregion

        #region UpdatedBy
        [DisplayName("Updated By")]
        public string UpdatedBy => _core.UpdatedBy == null ? "" : _core.UpdatedBy.ToString();
        #endregion

        #region UpdatedDate
        [DisplayName("Updated Date")]
        public DateTime? UpdatedDate
        {
            get => _core.UpdatedDate;
            set
            {
                if (_core.UpdatedDate == value)
                    return;

                _core.UpdatedDate = value;
            }
        }
        #endregion

        [DisplayName("Updated Date")]
        public string UpdatedDateString => UpdatedDate?.ToString(Data.Core.Settings.DateTimeFormatShort);


        [DisplayName("Date")]
        public string DateDisplayed => UpdatedDate == null ? CreatedDate?.ToString("yyyy-MM-dd") : UpdatedDate?.ToString("yyyy-MM-dd");

        [DisplayName("Date Time")]
        public string DateTimeDisplayed => UpdatedDate == null ? CreatedDate?.ToString("yyyy-MM-dd HH:mm:ss") : UpdatedDate?.ToString("yyyy-MM-dd HH:mm:ss");
        #endregion

        #region IsDeleted
        [DisplayName("Is Deleted")]
        public bool IsDeleted
        {
            get => _core.IsDeleted;
            set
            {
                if (_core.IsDeleted == value)
                    return;

                _core.IsDeleted = value;
            }
        }
        #endregion

        #region IsSaved
        [DisplayName("Is Saved")]
        public bool IsSaved => _core.IsSaved;
        #endregion

        public List<Models.Selector> AllUsers_For_ManageTenants { get; set; } = new List<Models.Selector>();

        public async Task GetCreatedAndUpdated(Data.Core.IUnitOfWork unitOfWork)
        {
            _core.CreatedBy = await unitOfWork.Users.GetAsync(_core.CreatedById);
            _core.UpdatedBy = await unitOfWork.Users.GetAsync(_core.UpdatedById);
        }

        /// <summary>
        /// Check unique key constraints.
        /// </summary>
        /// <returns>ViewModels.Feedback</returns>
        public async Task<ViewModels.Feedback> CheckUniqueAsync(
        Data.Core.IUnitOfWork unitOfWork,
        ViewModels.Feedback feedback)
        {
            if (unitOfWork == null)
                throw new NullReferenceException("Data.Core.IUnitOfWork cannot be null");

            // Check unique
            var message = await Data.Persistence.UnitOfWork.IsUniqueAsync(GetCore());// Data.Persistence.UnitOfWork.IsUniqueAsync(GetCore());

            if (string.IsNullOrWhiteSpace(message)) 
                return feedback;


             // We have a conflict, give feedback.
            if (feedback.Elements.ContainsKey("Name"))
                feedback.Elements["Name"] = message;
            else
                feedback.Elements.Add("Name", message);


            feedback.IsValid = false;

            return feedback;
        }

        public override string ToString()
        {
            if(!string.IsNullOrWhiteSpace(DisplayText))
                return DisplayText;

            return Name;
        }
        public static List<Models.Business.Client> Create(IEnumerable<Data.Core.Domain.Business.Client> cores, bool includeEmpty = false)
        {
            if (cores == null)
                return null;

            if(includeEmpty)
            {
                var models = new List<Models.Business.Client>();
                models.Add(new Models.Business.Client
                {
                    DisplayText = "<Empty>"
                });

                models.AddRange(cores.Select(core => new Models.Business.Client(core)));
                return models;
            }

            return cores.Select(core => new Models.Business.Client(core)).ToList();
        }

        public static Models.Business.Client[] Create(Data.Core.Domain.Business.Client[] cores, bool includeEmpty = false)
        {
            if (cores == null)
                return null;

            if(includeEmpty)
                return Create(cores.ToList(), true).ToArray();

            return cores.Select(core => new Models.Business.Client(core)).ToArray();
        }
    }
}