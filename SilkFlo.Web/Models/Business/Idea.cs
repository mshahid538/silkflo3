/*********************************************************
       Code Generated By  .  .  .  .  Delaney's ScriptBot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Template Name.  .  .  .  .  .  Project Green 3.0
       Template Version.  .  .  .  .  20220411 004
       Author .  .  .  .  .  .  .  .  Delaney

                      ,        ,--,_
                       \ _ ___/ /\|
                       ( )__, )
                      |/_  '--,
                        \ `  / '
 
 Note: Create this object,
       populate from properties from the Core.Domain classes
       and send to a view.

Object Models
-------------
What can this object do.

* GetApplicationStability()
  Two overrides to get the parent applicationStability for the object.
  This is used to display parent in a summary table.

* GetApplicationStabilities()
  Two overrides to get a list of alternative parent applicationStabilities.

* GetAutomationGoal()
  Two overrides to get the parent automationGoal for the object.
  This is used to display parent in a summary table.

* GetAutomationGoals()
  Two overrides to get a list of alternative parent automationGoals.

* GetAverageNumberOfStep()
  Two overrides to get the parent averageNumberOfStep for the object.
  This is used to display parent in a summary table.

* GetAverageNumberOfSteps()
  Two overrides to get a list of alternative parent averageNumberOfSteps.

* GetClient()
  Two overrides to get the parent client for the object.
  This is used to display parent in a summary table.

* GetClients()
  Two overrides to get a list of alternative parent clients.

* GetDataInputPercentOfStructured()
  Two overrides to get the parent dataInputPercentOfStructured for the object.
  This is used to display parent in a summary table.

* GetDataInputPercentOfStructureds()
  Two overrides to get a list of alternative parent dataInputPercentOfStructureds.

* GetDecisionCount()
  Two overrides to get the parent decisionCount for the object.
  This is used to display parent in a summary table.

* GetDecisionCounts()
  Two overrides to get a list of alternative parent decisionCounts.

* GetDecisionDifficulty()
  Two overrides to get the parent decisionDifficulty for the object.
  This is used to display parent in a summary table.

* GetDecisionDifficulties()
  Two overrides to get a list of alternative parent decisionDifficulties.

* GetDepartment()
  Two overrides to get the parent department for the object.
  This is used to display parent in a summary table.

* GetDepartments()
  Two overrides to get a list of alternative parent departments.

* GetDocumentationPresent()
  Two overrides to get the parent documentationPresent for the object.
  This is used to display parent in a summary table.

* GetDocumentationPresents()
  Two overrides to get a list of alternative parent documentationPresents.

* GetInputDataStructure()
  Two overrides to get the parent inputDataStructure for the object.
  This is used to display parent in a summary table.

* GetInputDataStructures()
  Two overrides to get a list of alternative parent inputDataStructures.

* GetInput()
  Two overrides to get the parent input for the object.
  This is used to display parent in a summary table.

* GetInputs()
  Two overrides to get a list of alternative parent inputs.

* GetNumberOfWaysToCompleteProcess()
  Two overrides to get the parent numberOfWaysToCompleteProcess for the object.
  This is used to display parent in a summary table.

* GetNumberOfWaysToCompleteProcesses()
  Two overrides to get a list of alternative parent numberOfWaysToCompleteProcesses.

* GetProcess()
  Two overrides to get the parent process for the object.
  This is used to display parent in a summary table.

* GetProcesses()
  Two overrides to get a list of alternative parent processes.

* GetProcessOwner()
  Two overrides to get the parent processOwner for the object.
  This is used to display parent in a summary table.

* GetProcessOwners()
  Two overrides to get a list of alternative parent processOwners.

* GetProcessPeak()
  Two overrides to get the parent processPeak for the object.
  This is used to display parent in a summary table.

* GetProcessPeaks()
  Two overrides to get a list of alternative parent processPeaks.

* GetProcessStability()
  Two overrides to get the parent processStability for the object.
  This is used to display parent in a summary table.

* GetProcessStabilities()
  Two overrides to get a list of alternative parent processStabilities.

* GetRule()
  Two overrides to get the parent rule for the object.
  This is used to display parent in a summary table.

* GetRules()
  Two overrides to get a list of alternative parent rules.

* GetRunningCost()
  Two overrides to get the parent runningCost for the object.
  This is used to display parent in a summary table.



* GetSubmissionPath()
  Two overrides to get the parent submissionPath for the object.
  This is used to display parent in a summary table.

* GetSubmissionPaths()
  Two overrides to get a list of alternative parent submissionPaths.

* GetTaskFrequency()
  Two overrides to get the parent taskFrequency for the object.
  This is used to display parent in a summary table.

* GetTaskFrequencies()
  Two overrides to get a list of alternative parent taskFrequencies.

* GetTeam()
  Two overrides to get the parent team for the object.
  This is used to display parent in a summary table.

* GetTeams()
  Two overrides to get a list of alternative parent teams.* GetModels()
  Return a model containing properties populated with the objects values

* GetCreatedAndUpdated()
  Two overrides to get Users who created updated this object
  and assign them to CreatedBy and UpdatedBy properties.
 
 *********************************************************/

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace SilkFlo.Web.Models.Business
{
    public partial class Idea : Abstract
    {
        private SilkFlo.Data.Core.Domain.Business.Idea _core;
        #region Constructors
        
        // This constructor is used by HTTP posts 
        public Idea ()
        {
            _core = new SilkFlo.Data.Core.Domain.Business.Idea();
        }
        public Idea(SilkFlo.Data.Core.Domain.Business.Idea core)
        {
            _core = core ??   
	        throw new NullReferenceException("The SilkFlo.Data.Core.Domain.Business.Idea cannot be null");
        }
        #endregion

        #region Properties
        private string _displayText;
        public string DisplayText
        { 
            get => string.IsNullOrWhiteSpace(_displayText) ? Name : _displayText;
            set => _displayText = value;
        }
        public SilkFlo.Data.Core.Domain.Business.Idea GetCore()
        {
            return _core;
        }
        public void SetCore(SilkFlo.Data.Core.Domain.Business.Idea core)
        {
            _core = core;
        }

        public bool IsNew => string.IsNullOrWhiteSpace(Id);

        /// <summary>
        /// Primary Key
        /// </summary>
        #region Id
        [StringLength(255,
                      MinimumLength = 0,
                      ErrorMessage = "Id cannot be greater than 255 characters in length.")]
        [DisplayName("Id")]
        public string Id
        {
            get => _core.Id;
            set
            {
                if (_core.Id == value)
                    return;

                _core.Id = value;
            }
        }

        public string Id_Error { get; set; }
        public string Id_ErrorMessage { get; set; } = "Required";
        public bool Id_IsInValid { get; set; }
        #endregion

        #region Actual Volume Average (per Selected Frequency)
        [DisplayName("Actual Volume Average (per Selected Frequency)")]
        public int? ActivityVolumeAverage
        {
            get => _core.ActivityVolumeAverage;
            set
            {
                if (_core.ActivityVolumeAverage == value)
                    return;

                _core.ActivityVolumeAverage = value;
            }
        }

        public string ActivityVolumeAverage_ErrorMessage { get; set; }
        public bool ActivityVolumeAverage_IsInValid { get; set; }
        #endregion

        #region Comment (Actual Volume Average)
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Comment (Actual Volume Average) cannot be greater than 750 characters in length.")]
        [DisplayName("Comment (Actual Volume Average)")]
        public string ActivityVolumeAverageComment
        {
            get => _core.ActivityVolumeAverageComment;
            set
            {
                if (_core.ActivityVolumeAverageComment == value)
                    return;

                _core.ActivityVolumeAverageComment = value;
            }
        }

        public string ActivityVolumeAverageComment_ErrorMessage { get; set; }
        public bool ActivityVolumeAverageComment_IsInValid { get; set; }
        #endregion

        #region AHT Robot
        [DisplayName("AHT Automation")]
        public decimal? AHTRobot
        {
            get => _core.AHTRobot;
            set
            {
                if (_core.AHTRobot == value)
                    return;

                _core.AHTRobot = value;
            }
        }

        public string AHTRobot_ErrorMessage { get; set; }
        public bool AHTRobot_IsInValid { get; set; }
        #endregion

        #region Comment (Application Change)
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Comment (Application Change) cannot be greater than 750 characters in length.")]
        [DisplayName("Comment (Application Change)")]
        public string ApplicationStabilityComment
        {
            get => _core.ApplicationStabilityComment;
            set
            {
                if (_core.ApplicationStabilityComment == value)
                    return;

                _core.ApplicationStabilityComment = value;
            }
        }

        public string ApplicationStabilityComment_ErrorMessage { get; set; }
        public bool ApplicationStabilityComment_IsInValid { get; set; }
        #endregion

        #region Average Employee Full Cost per Year
        [DisplayName("Average Employee Full Cost per Year")]
        public int? AverageEmployeeFullCost
        {
            get => _core.AverageEmployeeFullCost;
            set
            {
                if (_core.AverageEmployeeFullCost == value)
                    return;

                _core.AverageEmployeeFullCost = value;
            }
        }

        public string AverageEmployeeFullCost_ErrorMessage { get; set; }
        public bool AverageEmployeeFullCost_IsInValid { get; set; }
        #endregion

        #region Comment (Average Employee Full Cost)
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Comment (Average Employee Full Cost) cannot be greater than 750 characters in length.")]
        [DisplayName("Comment (Average Employee Full Cost)")]
        public string AverageEmployeeFullCostComment
        {
            get => _core.AverageEmployeeFullCostComment;
            set
            {
                if (_core.AverageEmployeeFullCostComment == value)
                    return;

                _core.AverageEmployeeFullCostComment = value;
            }
        }

        public string AverageEmployeeFullCostComment_ErrorMessage { get; set; }
        public bool AverageEmployeeFullCostComment_IsInValid { get; set; }
        #endregion

        #region Average Error Rate (% of the Total Volume)
        [DisplayName("Average Error Rate (% of the Total Volume)")]
        public int? AverageErrorRate
        {
            get => _core.AverageErrorRate;
            set
            {
                if (_core.AverageErrorRate == value)
                    return;

                _core.AverageErrorRate = value;
            }
        }

        public string AverageErrorRate_ErrorMessage { get; set; }
        public bool AverageErrorRate_IsInValid { get; set; }
        #endregion

        #region Comment (Average Error Rate)
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Comment (Average Error Rate) cannot be greater than 750 characters in length.")]
        [DisplayName("Comment (Average Error Rate)")]
        public string AverageErrorRateComment
        {
            get => _core.AverageErrorRateComment;
            set
            {
                if (_core.AverageErrorRateComment == value)
                    return;

                _core.AverageErrorRateComment = value;
            }
        }

        public string AverageErrorRateComment_ErrorMessage { get; set; }
        public bool AverageErrorRateComment_IsInValid { get; set; }
        #endregion

        #region Comment (Average Number of Steps)
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Comment (Average Number of Steps) cannot be greater than 750 characters in length.")]
        [DisplayName("Comment (Average Number of Steps)")]
        public string AverageNumberOfStepComment
        {
            get => _core.AverageNumberOfStepComment;
            set
            {
                if (_core.AverageNumberOfStepComment == value)
                    return;

                _core.AverageNumberOfStepComment = value;
            }
        }

        public string AverageNumberOfStepComment_ErrorMessage { get; set; }
        public bool AverageNumberOfStepComment_IsInValid { get; set; }
        #endregion

        #region Average Processing Time per Transaction (min)
        [DisplayName("Average Processing Time per Transaction (min)")]
        public decimal? AverageProcessingTime
        {
            get => _core.AverageProcessingTime;
            set
            {
                if (_core.AverageProcessingTime == value)
                    return;

                _core.AverageProcessingTime = value;
            }
        }

        public string AverageProcessingTime_ErrorMessage { get; set; }
        public bool AverageProcessingTime_IsInValid { get; set; }
        #endregion

        #region Comment (Average Processing Time per Transaction (min))
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Comment (Average Processing Time per Transaction (min)) cannot be greater than 750 characters in length.")]
        [DisplayName("Comment (Average Processing Time per Transaction (min))")]
        public string AverageProcessingTimeComment
        {
            get => _core.AverageProcessingTimeComment;
            set
            {
                if (_core.AverageProcessingTimeComment == value)
                    return;

                _core.AverageProcessingTimeComment = value;
            }
        }

        public string AverageProcessingTimeComment_ErrorMessage { get; set; }
        public bool AverageProcessingTimeComment_IsInValid { get; set; }
        #endregion

        #region Average Review or Audit Time per Transaction (min)
        [DisplayName("Average Review or Audit Time per Transaction (min)")]
        public decimal? AverageReviewTime
        {
            get => _core.AverageReviewTime;
            set
            {
                if (_core.AverageReviewTime == value)
                    return;

                _core.AverageReviewTime = value;
            }
        }

        public string AverageReviewTime_ErrorMessage { get; set; }
        public bool AverageReviewTime_IsInValid { get; set; }
        #endregion

        #region Comment (Average Review or Audit Time per Transaction (min))
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Comment (Average Review or Audit Time per Transaction (min)) cannot be greater than 750 characters in length.")]
        [DisplayName("Comment (Average Review or Audit Time per Transaction (min))")]
        public string AverageReviewTimeComment
        {
            get => _core.AverageReviewTimeComment;
            set
            {
                if (_core.AverageReviewTimeComment == value)
                    return;

                _core.AverageReviewTimeComment = value;
            }
        }

        public string AverageReviewTimeComment_ErrorMessage { get; set; }
        public bool AverageReviewTimeComment_IsInValid { get; set; }
        #endregion

        #region Average Rework Time per Transaction (min)
        [DisplayName("Average Rework Time per Transaction (min)")]
        public decimal? AverageReworkTime
        {
            get => _core.AverageReworkTime;
            set
            {
                if (_core.AverageReworkTime == value)
                    return;

                _core.AverageReworkTime = value;
            }
        }

        public string AverageReworkTime_ErrorMessage { get; set; }
        public bool AverageReworkTime_IsInValid { get; set; }
        #endregion

        #region Comment (Average Rework Time)
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Comment (Average Rework Time) cannot be greater than 750 characters in length.")]
        [DisplayName("Comment (Average Rework Time)")]
        public string AverageReworkTimeComment
        {
            get => _core.AverageReworkTimeComment;
            set
            {
                if (_core.AverageReworkTimeComment == value)
                    return;

                _core.AverageReworkTimeComment = value;
            }
        }

        public string AverageReworkTimeComment_ErrorMessage { get; set; }
        public bool AverageReworkTimeComment_IsInValid { get; set; }
        #endregion

        #region Average Working Day per Year
        [DisplayName("Average Working Day per Year")]
        public int? AverageWorkingDay
        {
            get => _core.AverageWorkingDay;
            set
            {
                if (_core.AverageWorkingDay == value)
                    return;

                _core.AverageWorkingDay = value;
            }
        }

        public string AverageWorkingDay_ErrorMessage { get; set; }
        public bool AverageWorkingDay_IsInValid { get; set; }
        #endregion

        #region Comment (Average Working Day Comment)
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Comment (Average Working Day Comment) cannot be greater than 750 characters in length.")]
        [DisplayName("Comment (Average Working Day Comment)")]
        public string AverageWorkingDayComment
        {
            get => _core.AverageWorkingDayComment;
            set
            {
                if (_core.AverageWorkingDayComment == value)
                    return;

                _core.AverageWorkingDayComment = value;
            }
        }

        public string AverageWorkingDayComment_ErrorMessage { get; set; }
        public bool AverageWorkingDayComment_IsInValid { get; set; }
        #endregion

        #region Average Work to be Reviewed per Audited (% of Total Volume)
        [DisplayName("Average Work to be Reviewed per Audited (% of Total Volume)")]
        public decimal? AverageWorkToBeReviewed
        {
            get => _core.AverageWorkToBeReviewed;
            set
            {
                if (_core.AverageWorkToBeReviewed == value)
                    return;

                _core.AverageWorkToBeReviewed = value;
            }
        }

        public string AverageWorkToBeReviewed_ErrorMessage { get; set; }
        public bool AverageWorkToBeReviewed_IsInValid { get; set; }
        #endregion

        #region Comment (Average Work to be Reviewed per Autited (% of Total Volume))
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Comment (Average Work to be Reviewed per Autited (% of Total Volume)) cannot be greater than 750 characters in length.")]
        [DisplayName("Comment (Average Work to be Reviewed per Autited (% of Total Volume))")]
        public string AverageWorkToBeReviewedComment
        {
            get => _core.AverageWorkToBeReviewedComment;
            set
            {
                if (_core.AverageWorkToBeReviewedComment == value)
                    return;

                _core.AverageWorkToBeReviewedComment = value;
            }
        }

        public string AverageWorkToBeReviewedComment_ErrorMessage { get; set; }
        public bool AverageWorkToBeReviewedComment_IsInValid { get; set; }
        #endregion

        #region Benefit Actual
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Benefit Actual cannot be greater than 750 characters in length.")]
        [DisplayName("Benefit Actual")]
        public string BenefitActual
        {
            get => _core.BenefitActual;
            set
            {
                if (_core.BenefitActual == value)
                    return;

                _core.BenefitActual = value;
            }
        }

        public string BenefitActual_ErrorMessage { get; set; }
        public bool BenefitActual_IsInValid { get; set; }
        #endregion

        #region Benefit Expected
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Benefit Expected cannot be greater than 750 characters in length.")]
        [DisplayName("Benefit Expected")]
        public string BenefitExpected
        {
            get => _core.BenefitExpected;
            set
            {
                if (_core.BenefitExpected == value)
                    return;

                _core.BenefitExpected = value;
            }
        }

        public string BenefitExpected_ErrorMessage { get; set; }
        public bool BenefitExpected_IsInValid { get; set; }
        #endregion

        #region Challenge Actual
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Challenge Actual cannot be greater than 750 characters in length.")]
        [DisplayName("Challenge Actual")]
        public string ChallengeActual
        {
            get => _core.ChallengeActual;
            set
            {
                if (_core.ChallengeActual == value)
                    return;

                _core.ChallengeActual = value;
            }
        }

        public string ChallengeActual_ErrorMessage { get; set; }
        public bool ChallengeActual_IsInValid { get; set; }
        #endregion

        #region Challenge Expected
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Challenge Expected cannot be greater than 750 characters in length.")]
        [DisplayName("Challenge Expected")]
        public string ChallengeExpected
        {
            get => _core.ChallengeExpected;
            set
            {
                if (_core.ChallengeExpected == value)
                    return;

                _core.ChallengeExpected = value;
            }
        }

        public string ChallengeExpected_ErrorMessage { get; set; }
        public bool ChallengeExpected_IsInValid { get; set; }
        #endregion

        #region Comment (% of Structured Digital Data Input)
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Comment (% of Structured Digital Data Input) cannot be greater than 750 characters in length.")]
        [DisplayName("Comment (% of Structured Digital Data Input)")]
        public string DataInputPercentOfStructuredComment
        {
            get => _core.DataInputPercentOfStructuredComment;
            set
            {
                if (_core.DataInputPercentOfStructuredComment == value)
                    return;

                _core.DataInputPercentOfStructuredComment = value;
            }
        }

        public string DataInputPercentOfStructuredComment_ErrorMessage { get; set; }
        public bool DataInputPercentOfStructuredComment_IsInValid { get; set; }
        #endregion

        #region Comment (Scanned Data Input)
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Comment (Scanned Data Input) cannot be greater than 750 characters in length.")]
        [DisplayName("Comment (Scanned Data Input)")]
        public string DataInputScannedComment
        {
            get => _core.DataInputScannedComment;
            set
            {
                if (_core.DataInputScannedComment == value)
                    return;

                _core.DataInputScannedComment = value;
            }
        }

        public string DataInputScannedComment_ErrorMessage { get; set; }
        public bool DataInputScannedComment_IsInValid { get; set; }
        #endregion

        #region Comment (Decision Count)
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Comment (Decision Count) cannot be greater than 750 characters in length.")]
        [DisplayName("Comment (Decision Count)")]
        public string DecisionCountComment
        {
            get => _core.DecisionCountComment;
            set
            {
                if (_core.DecisionCountComment == value)
                    return;

                _core.DecisionCountComment = value;
            }
        }

        public string DecisionCountComment_ErrorMessage { get; set; }
        public bool DecisionCountComment_IsInValid { get; set; }
        #endregion

        #region Comment (Decision Difficulty)
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Comment (Decision Difficulty) cannot be greater than 750 characters in length.")]
        [DisplayName("Comment (Decision Difficulty)")]
        public string DecisionDifficultyComment
        {
            get => _core.DecisionDifficultyComment;
            set
            {
                if (_core.DecisionDifficultyComment == value)
                    return;

                _core.DecisionDifficultyComment = value;
            }
        }

        public string DecisionDifficultyComment_ErrorMessage { get; set; }
        public bool DecisionDifficultyComment_IsInValid { get; set; }
        #endregion

        #region Comment (Documentation Present)
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Comment (Documentation Present) cannot be greater than 750 characters in length.")]
        [DisplayName("Comment (Documentation Present)")]
        public string DocumentationPresentComment
        {
            get => _core.DocumentationPresentComment;
            set
            {
                if (_core.DocumentationPresentComment == value)
                    return;

                _core.DocumentationPresentComment = value;
            }
        }

        public string DocumentationPresentComment_ErrorMessage { get; set; }
        public bool DocumentationPresentComment_IsInValid { get; set; }
        #endregion

        #region Ease Of Implementation Final
        [StringLength(255,
                      MinimumLength = 0,
                      ErrorMessage = "Ease Of Implementation Final cannot be greater than 255 characters in length.")]
        [DisplayName("Ease Of Implementation Final")]
        public string EaseOfImplementationFinal
        {
            get => _core.EaseOfImplementationFinal;
            set
            {
                if (_core.EaseOfImplementationFinal == value)
                    return;

                _core.EaseOfImplementationFinal = value;
            }
        }

        public string EaseOfImplementationFinal_ErrorMessage { get; set; }
        public bool EaseOfImplementationFinal_IsInValid { get; set; }
        #endregion

        #region Number of Employees Performing the Task
        [DisplayName("Number of Employees Performing the Task")]
        public int? EmployeeCount
        {
            get => _core.EmployeeCount;
            set
            {
                if (_core.EmployeeCount == value)
                    return;

                _core.EmployeeCount = value;
            }
        }

        public string EmployeeCount_ErrorMessage { get; set; }
        public bool EmployeeCount_IsInValid { get; set; }
        #endregion

        #region Comment (Number of Employees Performing the Task)
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Comment (Number of Employees Performing the Task) cannot be greater than 750 characters in length.")]
        [DisplayName("Comment (Number of Employees Performing the Task)")]
        public string EmployeeCountComment
        {
            get => _core.EmployeeCountComment;
            set
            {
                if (_core.EmployeeCountComment == value)
                    return;

                _core.EmployeeCountComment = value;
            }
        }

        public string EmployeeCountComment_ErrorMessage { get; set; }
        public bool EmployeeCountComment_IsInValid { get; set; }
        #endregion

        #region Comment (Input)
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Comment (Input) cannot be greater than 750 characters in length.")]
        [DisplayName("Comment (Input)")]
        public string InputComment
        {
            get => _core.InputComment;
            set
            {
                if (_core.InputComment == value)
                    return;

                _core.InputComment = value;
            }
        }

        public string InputComment_ErrorMessage { get; set; }
        public bool InputComment_IsInValid { get; set; }
        #endregion

        #region Alternative Solutions except for RPA?
        [Required]
        [DisplayName("Alternative Solutions except for RPA?")]
        public bool IsAlternative
        {
            get => _core.IsAlternative;
            set
            {
                if (_core.IsAlternative == value)
                    return;

                _core.IsAlternative = value;
            }
        }

        public string IsAlternative_ErrorMessage { get; set; } = "Required";
        public bool IsAlternative_IsInValid { get; set; }
        #endregion

        #region Is Scanned Data Input
        [Required]
        [DisplayName("Is Scanned Data Input")]
        public bool IsDataInputScanned
        {
            get => _core.IsDataInputScanned;
            set
            {
                if (_core.IsDataInputScanned == value)
                    return;

                _core.IsDataInputScanned = value;
            }
        }

        public string IsDataInputScanned_ErrorMessage { get; set; } = "Required";
        public bool IsDataInputScanned_IsInValid { get; set; }
        #endregion

        #region Will the RPA access or process sensitive personal data?
        [Required]
        [DisplayName("Will the RPA access or process sensitive personal data?")]
        public bool IsDataSensitive
        {
            get => _core.IsDataSensitive;
            set
            {
                if (_core.IsDataSensitive == value)
                    return;

                _core.IsDataSensitive = value;
            }
        }

        public string IsDataSensitive_ErrorMessage { get; set; } = "Required";
        public bool IsDataSensitive_IsInValid { get; set; }
        #endregion

        #region Is Draft
        [Required]
        [DisplayName("Is Draft")]
        public bool IsDraft
        {
            get => _core.IsDraft;
            set
            {
                if (_core.IsDraft == value)
                    return;

                _core.IsDraft = value;
            }
        }

        public string IsDraft_ErrorMessage { get; set; } = "Required";
        public bool IsDraft_IsInValid { get; set; }
        #endregion

        #region Will the RPA access high-risk / high-exposure IT systems?
        [Required]
        [DisplayName("Will the RPA access high-risk / high-exposure IT systems?")]
        public bool IsHighRisk
        {
            get => _core.IsHighRisk;
            set
            {
                if (_core.IsHighRisk == value)
                    return;

                _core.IsHighRisk = value;
            }
        }

        public string IsHighRisk_ErrorMessage { get; set; } = "Required";
        public bool IsHighRisk_IsInValid { get; set; }
        #endregion

        #region Will the automation tough systems due for major up?
        [Required]
        [DisplayName("Will the automation tough systems due for major up?")]
        public bool IsHostUpgrade
        {
            get => _core.IsHostUpgrade;
            set
            {
                if (_core.IsHostUpgrade == value)
                    return;

                _core.IsHostUpgrade = value;
            }
        }

        public string IsHostUpgrade_ErrorMessage { get; set; } = "Required";
        public bool IsHostUpgrade_IsInValid { get; set; }
        #endregion

        #region Lessen Learnt
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Lessen Learnt cannot be greater than 750 characters in length.")]
        [DisplayName("Lessen Learnt")]
        public string LessenLearnt
        {
            get => _core.LessenLearnt;
            set
            {
                if (_core.LessenLearnt == value)
                    return;

                _core.LessenLearnt = value;
            }
        }

        public string LessenLearnt_ErrorMessage { get; set; }
        public bool LessenLearnt_IsInValid { get; set; }
        #endregion

        #region Name
        [StringLength(100,
                      MinimumLength = 0,
                      ErrorMessage = "Name cannot be greater than 100 characters in length.")]
        [DisplayName("Name")]
        public string Name
        {
            get => _core.Name;
            set
            {
                if (_core.Name == value)
                    return;

                _core.Name = value;
            }
        }

        public string Name_ErrorMessage { get; set; }
        public bool Name_IsInValid { get; set; }
        #endregion

        #region Negative Impact
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Negative Impact cannot be greater than 750 characters in length.")]
        [DisplayName("Negative Impact")]
        public string NegativeImpactComment
        {
            get => _core.NegativeImpactComment;
            set
            {
                if (_core.NegativeImpactComment == value)
                    return;

                _core.NegativeImpactComment = value;
            }
        }

        public string NegativeImpactComment_ErrorMessage { get; set; }
        public bool NegativeImpactComment_IsInValid { get; set; }
        #endregion

        #region Comment (Number Of Ways to Complete Process)
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Comment (Number Of Ways to Complete Process) cannot be greater than 750 characters in length.")]
        [DisplayName("Comment (Number Of Ways to Complete Process)")]
        public string NumberOfWaysToCompleteProcessComment
        {
            get => _core.NumberOfWaysToCompleteProcessComment;
            set
            {
                if (_core.NumberOfWaysToCompleteProcessComment == value)
                    return;

                _core.NumberOfWaysToCompleteProcessComment = value;
            }
        }

        public string NumberOfWaysToCompleteProcessComment_ErrorMessage { get; set; }
        public bool NumberOfWaysToCompleteProcessComment_IsInValid { get; set; }
        #endregion

        #region Pain Points
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Pain Points cannot be greater than 750 characters in length.")]
        [DisplayName("Pain Points")]
        public string PainPointComment
        {
            get => _core.PainPointComment;
            set
            {
                if (_core.PainPointComment == value)
                    return;

                _core.PainPointComment = value;
            }
        }

        public string PainPointComment_ErrorMessage { get; set; }
        public bool PainPointComment_IsInValid { get; set; }
        #endregion

        #region Potential Fine Amount
        [DisplayName("Potential Fine Amount")]
        public Decimal? PotentialFineAmount
        {
            get => _core.PotentialFineAmount;
            set
            {
                if (_core.PotentialFineAmount == value)
                    return;

                _core.PotentialFineAmount = value;
            }
        }

        public string PotentialFineAmount_ErrorMessage { get; set; }
        public bool PotentialFineAmount_IsInValid { get; set; }
        #endregion

        #region Potential Fine Probability
        [DisplayName("Potential Fine Probability")]
        public decimal? PotentialFineProbability
        {
            get => _core.PotentialFineProbability;
            set
            {
                if (_core.PotentialFineProbability == value)
                    return;

                _core.PotentialFineProbability = value;
            }
        }

        public string PotentialFineProbability_ErrorMessage { get; set; }
        public bool PotentialFineProbability_IsInValid { get; set; }
        #endregion

        #region Comment (Process Peak)
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Comment (Process Peak) cannot be greater than 750 characters in length.")]
        [DisplayName("Comment (Process Peak)")]
        public string ProcessPeakComment
        {
            get => _core.ProcessPeakComment;
            set
            {
                if (_core.ProcessPeakComment == value)
                    return;

                _core.ProcessPeakComment = value;
            }
        }

        public string ProcessPeakComment_ErrorMessage { get; set; }
        public bool ProcessPeakComment_IsInValid { get; set; }
        #endregion

        #region Comment (Process Change)
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Comment (Process Change) cannot be greater than 750 characters in length.")]
        [DisplayName("Comment (Process Change)")]
        public string ProcessStabilityComment
        {
            get => _core.ProcessStabilityComment;
            set
            {
                if (_core.ProcessStabilityComment == value)
                    return;

                _core.ProcessStabilityComment = value;
            }
        }

        public string ProcessStabilityComment_ErrorMessage { get; set; }
        public bool ProcessStabilityComment_IsInValid { get; set; }
        #endregion

        #region Process Volumetry Per Month
        [DisplayName("Process Volumetry Per Month")]
        public decimal? ProcessVolumetryPerMonth
        {
            get => _core.ProcessVolumetryPerMonth;
            set
            {
                if (_core.ProcessVolumetryPerMonth == value)
                    return;

                _core.ProcessVolumetryPerMonth = value;
            }
        }

        public string ProcessVolumetryPerMonth_ErrorMessage { get; set; }
        public bool ProcessVolumetryPerMonth_IsInValid { get; set; }
        #endregion

        #region Process Volumetry Per Year
        [DisplayName("Process Volumetry Per Year")]
        public decimal? ProcessVolumetryPerYear
        {
            get => _core.ProcessVolumetryPerYear;
            set
            {
                if (_core.ProcessVolumetryPerYear == value)
                    return;

                _core.ProcessVolumetryPerYear = value;
            }
        }

        public string ProcessVolumetryPerYear_ErrorMessage { get; set; }
        public bool ProcessVolumetryPerYear_IsInValid { get; set; }
        #endregion

        #region Rating
        [DisplayName("Rating")]
        public int? Rating
        {
            get => _core.Rating;
            set
            {
                if (_core.Rating == value)
                    return;

                _core.Rating = value;
            }
        }

        public string Rating_ErrorMessage { get; set; }
        public bool Rating_IsInValid { get; set; }
        #endregion

        #region Comment (Rating)
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Comment (Rating) cannot be greater than 750 characters in length.")]
        [DisplayName("Comment (Rating)")]
        public string RatingComment
        {
            get => _core.RatingComment;
            set
            {
                if (_core.RatingComment == value)
                    return;

                _core.RatingComment = value;
            }
        }

        public string RatingComment_ErrorMessage { get; set; }
        public bool RatingComment_IsInValid { get; set; }
        #endregion

        #region Robot Speed Multiplier
        [DisplayName("Automation Speed Multiplier")]
        public decimal? RobotSpeedMultiplier
        {
            get => _core.RobotSpeedMultiplier;
            set
            {
                if (_core.RobotSpeedMultiplier == value)
                    return;

                _core.RobotSpeedMultiplier = value;
            }
        }

        public string RobotSpeedMultiplier_ErrorMessage { get; set; }
        public bool RobotSpeedMultiplier_IsInValid { get; set; }
        #endregion

        #region Robot Work Day Year
        [DisplayName("Automation Work Day Year")]
        public decimal? RobotWorkDayYear
        {
            get => _core.RobotWorkDayYear;
            set
            {
                if (_core.RobotWorkDayYear == value)
                    return;

                _core.RobotWorkDayYear = value;
            }
        }

        public string RobotWorkDayYear_ErrorMessage { get; set; }
        public bool RobotWorkDayYear_IsInValid { get; set; }
        #endregion

        #region Robot Work Hour Day
        [DisplayName("Automation Work Hour Day")]
        public decimal? RobotWorkHourDay
        {
            get => _core.RobotWorkHourDay;
            set
            {
                if (_core.RobotWorkHourDay == value)
                    return;

                _core.RobotWorkHourDay = value;
            }
        }

        public string RobotWorkHourDay_ErrorMessage { get; set; }
        public bool RobotWorkHourDay_IsInValid { get; set; }
        #endregion

        #region Comment (Rule)
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Comment (Rule) cannot be greater than 750 characters in length.")]
        [DisplayName("Comment (Rule)")]
        public string RuleComment
        {
            get => _core.RuleComment;
            set
            {
                if (_core.RuleComment == value)
                    return;

                _core.RuleComment = value;
            }
        }

        public string RuleComment_ErrorMessage { get; set; }
        public bool RuleComment_IsInValid { get; set; }
        #endregion

        #region Comment (Input Data Structure)
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Comment (Input Data Structure) cannot be greater than 750 characters in length.")]
        [DisplayName("Comment (Input Data Structure)")]
        public string StructureComment
        {
            get => _core.StructureComment;
            set
            {
                if (_core.StructureComment == value)
                    return;

                _core.StructureComment = value;
            }
        }

        public string StructureComment_ErrorMessage { get; set; }
        public bool StructureComment_IsInValid { get; set; }
        #endregion

        #region Sub Title
        [StringLength(100,
                      MinimumLength = 0,
                      ErrorMessage = "Sub Title cannot be greater than 100 characters in length.")]
        [DisplayName("Sub Title")]
        public string SubTitle
        {
            get => _core.SubTitle;
            set
            {
                if (_core.SubTitle == value)
                    return;

                _core.SubTitle = value;
            }
        }

        public string SubTitle_ErrorMessage { get; set; }
        public bool SubTitle_IsInValid { get; set; }
        #endregion

        #region Summary
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Summary cannot be greater than 750 characters in length.")]
        [DisplayName("Summary")]
        public string Summary
        {
            get => _core.Summary;
            set
            {
                if (_core.Summary == value)
                    return;

                _core.Summary = value;
            }
        }

        public string Summary_ErrorMessage { get; set; }
        public bool Summary_IsInValid { get; set; }
        #endregion

        #region Comment (Task or Process Frequency)
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Comment (Task or Process Frequency) cannot be greater than 750 characters in length.")]
        [DisplayName("Comment (Task or Process Frequency)")]
        public string TaskFrequencyComment
        {
            get => _core.TaskFrequencyComment;
            set
            {
                if (_core.TaskFrequencyComment == value)
                    return;

                _core.TaskFrequencyComment = value;
            }
        }

        public string TaskFrequencyComment_ErrorMessage { get; set; }
        public bool TaskFrequencyComment_IsInValid { get; set; }
        #endregion

        #region Working Hour per Day
        [DisplayName("Working Hour per Day")]
        public decimal? WorkingHour
        {
            get => _core.WorkingHour;
            set
            {
                if (_core.WorkingHour == value)
                    return;

                _core.WorkingHour = value;
            }
        }

        public string WorkingHour_ErrorMessage { get; set; }
        public bool WorkingHour_IsInValid { get; set; }
        #endregion

        #region Comment (Working Hour per Day)
        [StringLength(750,
                      MinimumLength = 0,
                      ErrorMessage = "Comment (Working Hour per Day) cannot be greater than 750 characters in length.")]
        [DisplayName("Comment (Working Hour per Day)")]
        public string WorkingHourComment
        {
            get => _core.WorkingHourComment;
            set
            {
                if (_core.WorkingHourComment == value)
                    return;

                _core.WorkingHourComment = value;
            }
        }

        public string WorkingHourComment_ErrorMessage { get; set; }
        public bool WorkingHourComment_IsInValid { get; set; }
        #endregion

        #region Workload Split
        [DisplayName("Workload Split")]
        public decimal? WorkloadSplit
        {
            get => _core.WorkloadSplit;
            set
            {
                if (_core.WorkloadSplit == value)
                    return;

                _core.WorkloadSplit = value;
            }
        }

        public string WorkloadSplit_ErrorMessage { get; set; }
        public bool WorkloadSplit_IsInValid { get; set; }
        #endregion

        [DisplayName("Application Change")]
        public string ApplicationStabilityId
        {
            get => _core.ApplicationStabilityId;
            set
            {
                if (_core.ApplicationStabilityId == value)
                    return;

                _core.ApplicationStabilityId = value;
                _applicationStability = null;
            }
        }
        private Models.Shared.ApplicationStability _applicationStability;
        public Models.Shared.ApplicationStability ApplicationStability
        {
            get
            {
                if (_applicationStability != null)
                    return _applicationStability;

                if (_core.ApplicationStability != null)
                    _applicationStability = new Models.Shared.ApplicationStability(_core.ApplicationStability);

                return _applicationStability;
            }
            set
            {
                if (_applicationStability == value)
                    return;

                _applicationStability = value;

                if (_applicationStability == null)
                    _core.ApplicationStability = null;
                else
                {
                    if (_core.ApplicationStabilityId != _applicationStability.Id)
                        _core.ApplicationStability = null;

                    _core.ApplicationStabilityId = _applicationStability.Id;
                }
            }
        }

        [DisplayName("Application Change")]
        public string ApplicationStabilityString => ApplicationStability?.ToString();

        public string ApplicationStabilityId_ErrorMessage { get; set; }
        public bool ApplicationStabilityId_IsInValid { get; set; }

        [DisplayName("Environmental Stability")]
        public string AutomationGoalId
        {
            get => _core.AutomationGoalId;
            set
            {
                if (_core.AutomationGoalId == value)
                    return;

                _core.AutomationGoalId = value;
                _automationGoal = null;
            }
        }
        private Models.Shared.AutomationGoal _automationGoal;
        public Models.Shared.AutomationGoal AutomationGoal
        {
            get
            {
                if (_automationGoal != null)
                    return _automationGoal;

                if (_core.AutomationGoal != null)
                    _automationGoal = new Models.Shared.AutomationGoal(_core.AutomationGoal);

                return _automationGoal;
            }
            set
            {
                if (_automationGoal == value)
                    return;

                _automationGoal = value;

                if (_automationGoal == null)
                    _core.AutomationGoal = null;
                else
                {
                    if (_core.AutomationGoalId != _automationGoal.Id)
                        _core.AutomationGoal = null;

                    _core.AutomationGoalId = _automationGoal.Id;
                }
            }
        }

        [DisplayName("Environmental Stability")]
        public string AutomationGoalString => AutomationGoal?.ToString();

        public string AutomationGoalId_ErrorMessage { get; set; }
        public bool AutomationGoalId_IsInValid { get; set; }

        [DisplayName("Average Number of Steps")]
        public string AverageNumberOfStepId
        {
            get => _core.AverageNumberOfStepId;
            set
            {
                if (_core.AverageNumberOfStepId == value)
                    return;

                _core.AverageNumberOfStepId = value;
                _averageNumberOfStep = null;
            }
        }
        private Models.Shared.AverageNumberOfStep _averageNumberOfStep;
        public Models.Shared.AverageNumberOfStep AverageNumberOfStep
        {
            get
            {
                if (_averageNumberOfStep != null)
                    return _averageNumberOfStep;

                if (_core.AverageNumberOfStep != null)
                    _averageNumberOfStep = new Models.Shared.AverageNumberOfStep(_core.AverageNumberOfStep);

                return _averageNumberOfStep;
            }
            set
            {
                if (_averageNumberOfStep == value)
                    return;

                _averageNumberOfStep = value;

                if (_averageNumberOfStep == null)
                    _core.AverageNumberOfStep = null;
                else
                {
                    if (_core.AverageNumberOfStepId != _averageNumberOfStep.Id)
                        _core.AverageNumberOfStep = null;

                    _core.AverageNumberOfStepId = _averageNumberOfStep.Id;
                }
            }
        }

        [DisplayName("Average Number of Steps")]
        public string AverageNumberOfStepString => AverageNumberOfStep?.ToString();

        public string AverageNumberOfStepId_ErrorMessage { get; set; }
        public bool AverageNumberOfStepId_IsInValid { get; set; }

        [DisplayName("Client")]
        public string ClientId
        {
            get => _core.ClientId;
            set
            {
                if (_core.ClientId == value)
                    return;

                _core.ClientId = value;
                _client = null;
            }
        }
        private Models.Business.Client _client;
        public Models.Business.Client Client
        {
            get
            {
                if (_client != null)
                    return _client;

                if (_core.Client != null)
                    _client = new Models.Business.Client(_core.Client);

                return _client;
            }
            set
            {
                if (_client == value)
                    return;

                _client = value;

                if (_client == null)
                    _core.Client = null;
                else
                {
                    if (_core.ClientId != _client.Id)
                        _core.Client = null;

                    _core.ClientId = _client.Id;
                }
            }
        }

        [DisplayName("Client")]
        public string ClientString => Client?.ToString();

        public string ClientId_ErrorMessage { get; set; }
        public bool ClientId_IsInValid { get; set; }

        [DisplayName("Percentage of Structured Digital Data Input")]
        public string DataInputPercentOfStructuredId
        {
            get => _core.DataInputPercentOfStructuredId;
            set
            {
                if (_core.DataInputPercentOfStructuredId == value)
                    return;

                _core.DataInputPercentOfStructuredId = value;
                _dataInputPercentOfStructured = null;
            }
        }
        private Models.Shared.DataInputPercentOfStructured _dataInputPercentOfStructured;
        public Models.Shared.DataInputPercentOfStructured DataInputPercentOfStructured
        {
            get
            {
                if (_dataInputPercentOfStructured != null)
                    return _dataInputPercentOfStructured;

                if (_core.DataInputPercentOfStructured != null)
                    _dataInputPercentOfStructured = new Models.Shared.DataInputPercentOfStructured(_core.DataInputPercentOfStructured);

                return _dataInputPercentOfStructured;
            }
            set
            {
                if (_dataInputPercentOfStructured == value)
                    return;

                _dataInputPercentOfStructured = value;

                if (_dataInputPercentOfStructured == null)
                    _core.DataInputPercentOfStructured = null;
                else
                {
                    if (_core.DataInputPercentOfStructuredId != _dataInputPercentOfStructured.Id)
                        _core.DataInputPercentOfStructured = null;

                    _core.DataInputPercentOfStructuredId = _dataInputPercentOfStructured.Id;
                }
            }
        }

        [DisplayName("Percentage of Structured Digital Data Input")]
        public string DataInputPercentOfStructuredString => DataInputPercentOfStructured?.ToString();

        public string DataInputPercentOfStructuredId_ErrorMessage { get; set; }
        public bool DataInputPercentOfStructuredId_IsInValid { get; set; }

        [DisplayName("Decision Count")]
        public string DecisionCountId
        {
            get => _core.DecisionCountId;
            set
            {
                if (_core.DecisionCountId == value)
                    return;

                _core.DecisionCountId = value;
                _decisionCount = null;
            }
        }
        private Models.Shared.DecisionCount _decisionCount;
        public Models.Shared.DecisionCount DecisionCount
        {
            get
            {
                if (_decisionCount != null)
                    return _decisionCount;

                if (_core.DecisionCount != null)
                    _decisionCount = new Models.Shared.DecisionCount(_core.DecisionCount);

                return _decisionCount;
            }
            set
            {
                if (_decisionCount == value)
                    return;

                _decisionCount = value;

                if (_decisionCount == null)
                    _core.DecisionCount = null;
                else
                {
                    if (_core.DecisionCountId != _decisionCount.Id)
                        _core.DecisionCount = null;

                    _core.DecisionCountId = _decisionCount.Id;
                }
            }
        }

        [DisplayName("Decision Count")]
        public string DecisionCountString => DecisionCount?.ToString();

        public string DecisionCountId_ErrorMessage { get; set; }
        public bool DecisionCountId_IsInValid { get; set; }

        [DisplayName("Decision Difficulty")]
        public string DecisionDifficultyId
        {
            get => _core.DecisionDifficultyId;
            set
            {
                if (_core.DecisionDifficultyId == value)
                    return;

                _core.DecisionDifficultyId = value;
                _decisionDifficulty = null;
            }
        }
        private Models.Shared.DecisionDifficulty _decisionDifficulty;
        public Models.Shared.DecisionDifficulty DecisionDifficulty
        {
            get
            {
                if (_decisionDifficulty != null)
                    return _decisionDifficulty;

                if (_core.DecisionDifficulty != null)
                    _decisionDifficulty = new Models.Shared.DecisionDifficulty(_core.DecisionDifficulty);

                return _decisionDifficulty;
            }
            set
            {
                if (_decisionDifficulty == value)
                    return;

                _decisionDifficulty = value;

                if (_decisionDifficulty == null)
                    _core.DecisionDifficulty = null;
                else
                {
                    if (_core.DecisionDifficultyId != _decisionDifficulty.Id)
                        _core.DecisionDifficulty = null;

                    _core.DecisionDifficultyId = _decisionDifficulty.Id;
                }
            }
        }

        [DisplayName("Decision Difficulty")]
        public string DecisionDifficultyString => DecisionDifficulty?.ToString();

        public string DecisionDifficultyId_ErrorMessage { get; set; }
        public bool DecisionDifficultyId_IsInValid { get; set; }

        [DisplayName("Business Unit")]
        public string DepartmentId
        {
            get => _core.DepartmentId;
            set
            {
                if (_core.DepartmentId == value)
                    return;

                _core.DepartmentId = value;
                _department = null;
            }
        }
        private Models.Business.Department _department;
        public Models.Business.Department Department
        {
            get
            {
                if (_department != null)
                    return _department;

                if (_core.Department != null)
                    _department = new Models.Business.Department(_core.Department);

                return _department;
            }
            set
            {
                if (_department == value)
                    return;

                _department = value;

                if (_department == null)
                    _core.Department = null;
                else
                {
                    if (_core.DepartmentId != _department.Id)
                        _core.Department = null;

                    _core.DepartmentId = _department.Id;
                }
            }
        }

        [DisplayName("Business Unit")]
        public string DepartmentString => Department?.ToString();

        public string DepartmentId_ErrorMessage { get; set; }
        public bool DepartmentId_IsInValid { get; set; }

        [DisplayName("Documentation Present")]
        public string DocumentationPresentId
        {
            get => _core.DocumentationPresentId;
            set
            {
                if (_core.DocumentationPresentId == value)
                    return;

                _core.DocumentationPresentId = value;
                _documentationPresent = null;
            }
        }
        private Models.Shared.DocumentationPresent _documentationPresent;
        public Models.Shared.DocumentationPresent DocumentationPresent
        {
            get
            {
                if (_documentationPresent != null)
                    return _documentationPresent;

                if (_core.DocumentationPresent != null)
                    _documentationPresent = new Models.Shared.DocumentationPresent(_core.DocumentationPresent);

                return _documentationPresent;
            }
            set
            {
                if (_documentationPresent == value)
                    return;

                _documentationPresent = value;

                if (_documentationPresent == null)
                    _core.DocumentationPresent = null;
                else
                {
                    if (_core.DocumentationPresentId != _documentationPresent.Id)
                        _core.DocumentationPresent = null;

                    _core.DocumentationPresentId = _documentationPresent.Id;
                }
            }
        }

        [DisplayName("Documentation Present")]
        public string DocumentationPresentString => DocumentationPresent?.ToString();

        public string DocumentationPresentId_ErrorMessage { get; set; }
        public bool DocumentationPresentId_IsInValid { get; set; }

        [DisplayName("Input Data Structure")]
        public string InputDataStructureId
        {
            get => _core.InputDataStructureId;
            set
            {
                if (_core.InputDataStructureId == value)
                    return;

                _core.InputDataStructureId = value;
                _inputDataStructure = null;
            }
        }
        private Models.Shared.InputDataStructure _inputDataStructure;
        public Models.Shared.InputDataStructure InputDataStructure
        {
            get
            {
                if (_inputDataStructure != null)
                    return _inputDataStructure;

                if (_core.InputDataStructure != null)
                    _inputDataStructure = new Models.Shared.InputDataStructure(_core.InputDataStructure);

                return _inputDataStructure;
            }
            set
            {
                if (_inputDataStructure == value)
                    return;

                _inputDataStructure = value;

                if (_inputDataStructure == null)
                    _core.InputDataStructure = null;
                else
                {
                    if (_core.InputDataStructureId != _inputDataStructure.Id)
                        _core.InputDataStructure = null;

                    _core.InputDataStructureId = _inputDataStructure.Id;
                }
            }
        }

        [DisplayName("Input Data Structure")]
        public string InputDataStructureString => InputDataStructure?.ToString();

        public string InputDataStructureId_ErrorMessage { get; set; }
        public bool InputDataStructureId_IsInValid { get; set; }

        [DisplayName("Input")]
        public string InputId
        {
            get => _core.InputId;
            set
            {
                if (_core.InputId == value)
                    return;

                _core.InputId = value;
                _input = null;
            }
        }
        private Models.Shared.Input _input;
        public Models.Shared.Input Input
        {
            get
            {
                if (_input != null)
                    return _input;

                if (_core.Input != null)
                    _input = new Models.Shared.Input(_core.Input);

                return _input;
            }
            set
            {
                if (_input == value)
                    return;

                _input = value;

                if (_input == null)
                    _core.Input = null;
                else
                {
                    if (_core.InputId != _input.Id)
                        _core.Input = null;

                    _core.InputId = _input.Id;
                }
            }
        }

        [DisplayName("Input")]
        public string InputString => Input?.ToString();

        public string InputId_ErrorMessage { get; set; }
        public bool InputId_IsInValid { get; set; }

        [DisplayName("Number Of Ways to Complete Process")]
        public string NumberOfWaysToCompleteProcessId
        {
            get => _core.NumberOfWaysToCompleteProcessId;
            set
            {
                if (_core.NumberOfWaysToCompleteProcessId == value)
                    return;

                _core.NumberOfWaysToCompleteProcessId = value;
                _numberOfWaysToCompleteProcess = null;
            }
        }
        private Models.Shared.NumberOfWaysToCompleteProcess _numberOfWaysToCompleteProcess;
        public Models.Shared.NumberOfWaysToCompleteProcess NumberOfWaysToCompleteProcess
        {
            get
            {
                if (_numberOfWaysToCompleteProcess != null)
                    return _numberOfWaysToCompleteProcess;

                if (_core.NumberOfWaysToCompleteProcess != null)
                    _numberOfWaysToCompleteProcess = new Models.Shared.NumberOfWaysToCompleteProcess(_core.NumberOfWaysToCompleteProcess);

                return _numberOfWaysToCompleteProcess;
            }
            set
            {
                if (_numberOfWaysToCompleteProcess == value)
                    return;

                _numberOfWaysToCompleteProcess = value;

                if (_numberOfWaysToCompleteProcess == null)
                    _core.NumberOfWaysToCompleteProcess = null;
                else
                {
                    if (_core.NumberOfWaysToCompleteProcessId != _numberOfWaysToCompleteProcess.Id)
                        _core.NumberOfWaysToCompleteProcess = null;

                    _core.NumberOfWaysToCompleteProcessId = _numberOfWaysToCompleteProcess.Id;
                }
            }
        }

        [DisplayName("Number Of Ways to Complete Process")]
        public string NumberOfWaysToCompleteProcessString => NumberOfWaysToCompleteProcess?.ToString();

        public string NumberOfWaysToCompleteProcessId_ErrorMessage { get; set; }
        public bool NumberOfWaysToCompleteProcessId_IsInValid { get; set; }

        [DisplayName("Sub-Area")]
        public string ProcessId
        {
            get => _core.ProcessId;
            set
            {
                if (_core.ProcessId == value)
                    return;

                _core.ProcessId = value;
                _process = null;
            }
        }
        private Models.Business.Process _process;
        public Models.Business.Process Process
        {
            get
            {
                if (_process != null)
                    return _process;

                if (_core.Process != null)
                    _process = new Models.Business.Process(_core.Process);

                return _process;
            }
            set
            {
                if (_process == value)
                    return;

                _process = value;

                if (_process == null)
                    _core.Process = null;
                else
                {
                    if (_core.ProcessId != _process.Id)
                        _core.Process = null;

                    _core.ProcessId = _process.Id;
                }
            }
        }

        [DisplayName("Sub-Area")]
        public string ProcessString => Process?.ToString();

        public string ProcessId_ErrorMessage { get; set; }
        public bool ProcessId_IsInValid { get; set; }

        [DisplayName("Process Owner")]
        public string ProcessOwnerId
        {
            get => _core.ProcessOwnerId;
            set
            {
                if (_core.ProcessOwnerId == value)
                    return;

                _core.ProcessOwnerId = value;
                _processOwner = null;
            }
        }
        private Models.User _processOwner;
        public Models.User ProcessOwner
        {
            get
            {
                if (_processOwner != null)
                    return _processOwner;

                if (_core.ProcessOwner != null)
                    _processOwner = new Models.User(_core.ProcessOwner);

                return _processOwner;
            }
            set
            {
                if (_processOwner == value)
                    return;

                _processOwner = value;

                if (_processOwner == null)
                    _core.ProcessOwner = null;
                else
                {
                    if (_core.ProcessOwnerId != _processOwner.Id)
                        _core.ProcessOwner = null;

                    _core.ProcessOwnerId = _processOwner.Id;
                }
            }
        }

        [DisplayName("Process Owner")]
        public string ProcessOwnerString => ProcessOwner?.ToString();

        public string ProcessOwnerId_ErrorMessage { get; set; }
        public bool ProcessOwnerId_IsInValid { get; set; }

        [DisplayName("Number of Employees Performing the Task")]
        public string ProcessPeakId
        {
            get => _core.ProcessPeakId;
            set
            {
                if (_core.ProcessPeakId == value)
                    return;

                _core.ProcessPeakId = value;
                _processPeak = null;
            }
        }
        private Models.Shared.ProcessPeak _processPeak;
        public Models.Shared.ProcessPeak ProcessPeak
        {
            get
            {
                if (_processPeak != null)
                    return _processPeak;

                if (_core.ProcessPeak != null)
                    _processPeak = new Models.Shared.ProcessPeak(_core.ProcessPeak);

                return _processPeak;
            }
            set
            {
                if (_processPeak == value)
                    return;

                _processPeak = value;

                if (_processPeak == null)
                    _core.ProcessPeak = null;
                else
                {
                    if (_core.ProcessPeakId != _processPeak.Id)
                        _core.ProcessPeak = null;

                    _core.ProcessPeakId = _processPeak.Id;
                }
            }
        }

        [DisplayName("Number of Employees Performing the Task")]
        public string ProcessPeakString => ProcessPeak?.ToString();

        public string ProcessPeakId_ErrorMessage { get; set; }
        public bool ProcessPeakId_IsInValid { get; set; }

        [DisplayName("Process Change")]
        public string ProcessStabilityId
        {
            get => _core.ProcessStabilityId;
            set
            {
                if (_core.ProcessStabilityId == value)
                    return;

                _core.ProcessStabilityId = value;
                _processStability = null;
            }
        }
        private Models.Shared.ProcessStability _processStability;
        public Models.Shared.ProcessStability ProcessStability
        {
            get
            {
                if (_processStability != null)
                    return _processStability;

                if (_core.ProcessStability != null)
                    _processStability = new Models.Shared.ProcessStability(_core.ProcessStability);

                return _processStability;
            }
            set
            {
                if (_processStability == value)
                    return;

                _processStability = value;

                if (_processStability == null)
                    _core.ProcessStability = null;
                else
                {
                    if (_core.ProcessStabilityId != _processStability.Id)
                        _core.ProcessStability = null;

                    _core.ProcessStabilityId = _processStability.Id;
                }
            }
        }

        [DisplayName("Process Change")]
        public string ProcessStabilityString => ProcessStability?.ToString();

        public string ProcessStabilityId_ErrorMessage { get; set; }
        public bool ProcessStabilityId_IsInValid { get; set; }

        [DisplayName("Rule")]
        public string RuleId
        {
            get => _core.RuleId;
            set
            {
                if (_core.RuleId == value)
                    return;

                _core.RuleId = value;
                _rule = null;
            }
        }
        private Models.Shared.Rule _rule;
        public Models.Shared.Rule Rule
        {
            get
            {
                if (_rule != null)
                    return _rule;

                if (_core.Rule != null)
                    _rule = new Models.Shared.Rule(_core.Rule);

                return _rule;
            }
            set
            {
                if (_rule == value)
                    return;

                _rule = value;

                if (_rule == null)
                    _core.Rule = null;
                else
                {
                    if (_core.RuleId != _rule.Id)
                        _core.Rule = null;

                    _core.RuleId = _rule.Id;
                }
            }
        }

        [DisplayName("Rule")]
        public string RuleString => Rule?.ToString();

        public string RuleId_ErrorMessage { get; set; }
        public bool RuleId_IsInValid { get; set; }

        [DisplayName("Running Cost")]
        public string RunningCostId
        {
            get => _core.RunningCostId;
            set
            {
                if (_core.RunningCostId == value)
                    return;

                _core.RunningCostId = value;
                _runningCost = null;
            }
        }
        private Models.Business.RunningCost _runningCost;
        public Models.Business.RunningCost RunningCost
        {
            get
            {
                if (_runningCost != null)
                    return _runningCost;

                if (_core.RunningCost != null)
                    _runningCost = new Models.Business.RunningCost(_core.RunningCost);

                return _runningCost;
            }
            set
            {
                if (_runningCost == value)
                    return;

                _runningCost = value;

                if (_runningCost == null)
                    _core.RunningCost = null;
                else
                {
                    if (_core.RunningCostId != _runningCost.Id)
                        _core.RunningCost = null;

                    _core.RunningCostId = _runningCost.Id;
                }
            }
        }

        [DisplayName("Running Cost")]
        public string RunningCostString => RunningCost?.ToString();

        public string RunningCostId_ErrorMessage { get; set; }
        public bool RunningCostId_IsInValid { get; set; }

        [Required]
        [DisplayName("Submission Path")]
        public string SubmissionPathId
        {
            get => _core.SubmissionPathId;
            set
            {
                if (_core.SubmissionPathId == value)
                    return;

                _core.SubmissionPathId = value;
                _submissionPath = null;
            }
        }
        private Models.Shared.SubmissionPath _submissionPath;
        public Models.Shared.SubmissionPath SubmissionPath
        {
            get
            {
                if (_submissionPath != null)
                    return _submissionPath;

                if (_core.SubmissionPath != null)
                    _submissionPath = new Models.Shared.SubmissionPath(_core.SubmissionPath);

                return _submissionPath;
            }
            set
            {
                if (_submissionPath == value)
                    return;

                _submissionPath = value;

                if (_submissionPath == null)
                    _core.SubmissionPath = null;
                else
                {
                    if (_core.SubmissionPathId != _submissionPath.Id)
                        _core.SubmissionPath = _submissionPath.GetCore();

                    _core.SubmissionPathId = _submissionPath.Id;
                }
            }
        }

        [DisplayName("Submission Path")]
        public string SubmissionPathString => SubmissionPath?.ToString();

        public string SubmissionPathId_ErrorMessage { get; set; } = "Required";
        public bool SubmissionPathId_IsInValid { get; set; }

        [DisplayName("Task or Process Frequency")]
        public string TaskFrequencyId
        {
            get => _core.TaskFrequencyId;
            set
            {
                if (_core.TaskFrequencyId == value)
                    return;

                _core.TaskFrequencyId = value;
                _taskFrequency = null;
            }
        }
        private Models.Shared.TaskFrequency _taskFrequency;
        public Models.Shared.TaskFrequency TaskFrequency
        {
            get
            {
                if (_taskFrequency != null)
                    return _taskFrequency;

                if (_core.TaskFrequency != null)
                    _taskFrequency = new Models.Shared.TaskFrequency(_core.TaskFrequency);

                return _taskFrequency;
            }
            set
            {
                if (_taskFrequency == value)
                    return;

                _taskFrequency = value;

                if (_taskFrequency == null)
                    _core.TaskFrequency = null;
                else
                {
                    if (_core.TaskFrequencyId != _taskFrequency.Id)
                        _core.TaskFrequency = null;

                    _core.TaskFrequencyId = _taskFrequency.Id;
                }
            }
        }

        [DisplayName("Task or Process Frequency")]
        public string TaskFrequencyString => TaskFrequency?.ToString();

        public string TaskFrequencyId_ErrorMessage { get; set; }
        public bool TaskFrequencyId_IsInValid { get; set; }

        [DisplayName("Area")]
        public string TeamId
        {
            get => _core.TeamId;
            set
            {
                if (_core.TeamId == value)
                    return;

                _core.TeamId = value;
                _team = null;
            }
        }
        private Models.Business.Team _team;
        public Models.Business.Team Team
        {
            get
            {
                if (_team != null)
                    return _team;

                if (_core.Team != null)
                    _team = new Models.Business.Team(_core.Team);

                return _team;
            }
            set
            {
                if (_team == value)
                    return;

                _team = value;

                if (_team == null)
                    _core.Team = null;
                else
                {
                    if (_core.TeamId != _team.Id)
                        _core.Team = null;

                    _core.TeamId = _team.Id;
                }
            }
        }

        [DisplayName("Area")]
        public string TeamString => Team?.ToString();

        public string TeamId_ErrorMessage { get; set; }
        public bool TeamId_IsInValid { get; set; }

        private List<Models.Shared.ApplicationStability> _applicationStabilities;
        public List<Models.Shared.ApplicationStability> ApplicationStabilities
        {
            get => _applicationStabilities ??= new List<Models.Shared.ApplicationStability>();
            set => _applicationStabilities = value;
        }

        private List<Models.Shared.AutomationGoal> _automationGoals;
        public List<Models.Shared.AutomationGoal> AutomationGoals
        {
            get => _automationGoals ??= new List<Models.Shared.AutomationGoal>();
            set => _automationGoals = value;
        }

        private List<Models.Shared.AverageNumberOfStep> _averageNumberOfSteps;
        public List<Models.Shared.AverageNumberOfStep> AverageNumberOfSteps
        {
            get => _averageNumberOfSteps ??= new List<Models.Shared.AverageNumberOfStep>();
            set => _averageNumberOfSteps = value;
        }

        private List<Models.Business.Client> _clients;
        public List<Models.Business.Client> Clients
        {
            get => _clients ??= new List<Models.Business.Client>();
            set => _clients = value;
        }

        private List<Models.Shared.DataInputPercentOfStructured> _dataInputPercentOfStructureds;
        public List<Models.Shared.DataInputPercentOfStructured> DataInputPercentOfStructureds
        {
            get => _dataInputPercentOfStructureds ??= new List<Models.Shared.DataInputPercentOfStructured>();
            set => _dataInputPercentOfStructureds = value;
        }

        private List<Models.Shared.DecisionCount> _decisionCounts;
        public List<Models.Shared.DecisionCount> DecisionCounts
        {
            get => _decisionCounts ??= new List<Models.Shared.DecisionCount>();
            set => _decisionCounts = value;
        }

        private List<Models.Shared.DecisionDifficulty> _decisionDifficulties;
        public List<Models.Shared.DecisionDifficulty> DecisionDifficulties
        {
            get => _decisionDifficulties ??= new List<Models.Shared.DecisionDifficulty>();
            set => _decisionDifficulties = value;
        }

        private List<Models.Business.Department> _departments;
        public List<Models.Business.Department> Departments
        {
            get => _departments ??= new List<Models.Business.Department>();
            set => _departments = value;
        }

        private List<Models.Shared.DocumentationPresent> _documentationPresents;
        public List<Models.Shared.DocumentationPresent> DocumentationPresents
        {
            get => _documentationPresents ??= new List<Models.Shared.DocumentationPresent>();
            set => _documentationPresents = value;
        }

        private List<Models.Shared.InputDataStructure> _inputDataStructures;
        public List<Models.Shared.InputDataStructure> InputDataStructures
        {
            get => _inputDataStructures ??= new List<Models.Shared.InputDataStructure>();
            set => _inputDataStructures = value;
        }

        private List<Models.Shared.Input> _inputs;
        public List<Models.Shared.Input> Inputs
        {
            get => _inputs ??= new List<Models.Shared.Input>();
            set => _inputs = value;
        }

        private List<Models.Shared.NumberOfWaysToCompleteProcess> _numberOfWaysToCompleteProcesses;
        public List<Models.Shared.NumberOfWaysToCompleteProcess> NumberOfWaysToCompleteProcesses
        {
            get => _numberOfWaysToCompleteProcesses ??= new List<Models.Shared.NumberOfWaysToCompleteProcess>();
            set => _numberOfWaysToCompleteProcesses = value;
        }

        private List<Models.Business.Process> _processes;
        public List<Models.Business.Process> Processes
        {
            get => _processes ??= new List<Models.Business.Process>();
            set => _processes = value;
        }

        private List<Models.User> _processOwners;
        public List<Models.User> ProcessOwners
        {
            get => _processOwners ??= new List<Models.User>();
            set => _processOwners = value;
        }

        private List<Models.Shared.ProcessPeak> _processPeaks;
        public List<Models.Shared.ProcessPeak> ProcessPeaks
        {
            get => _processPeaks ??= new List<Models.Shared.ProcessPeak>();
            set => _processPeaks = value;
        }

        private List<Models.Shared.ProcessStability> _processStabilities;
        public List<Models.Shared.ProcessStability> ProcessStabilities
        {
            get => _processStabilities ??= new List<Models.Shared.ProcessStability>();
            set => _processStabilities = value;
        }

        private List<Models.Shared.Rule> _rules;
        public List<Models.Shared.Rule> Rules
        {
            get => _rules ??= new List<Models.Shared.Rule>();
            set => _rules = value;
        }

        private List<Models.Business.RunningCost> _runningCosts;
        public List<Models.Business.RunningCost> RunningCosts
        {
            get => _runningCosts ??= new List<Models.Business.RunningCost>();
            set => _runningCosts = value;
        }

        private List<Models.Shared.SubmissionPath> _submissionPaths;
        public List<Models.Shared.SubmissionPath> SubmissionPaths
        {
            get => _submissionPaths ??= new List<Models.Shared.SubmissionPath>();
            set => _submissionPaths = value;
        }

        private List<Models.Shared.TaskFrequency> _taskFrequencies;
        public List<Models.Shared.TaskFrequency> TaskFrequencies
        {
            get => _taskFrequencies ??= new List<Models.Shared.TaskFrequency>();
            set => _taskFrequencies = value;
        }

        private List<Models.Business.Team> _teams;
        public List<Models.Business.Team> Teams
        {
            get => _teams ??= new List<Models.Business.Team>();
            set => _teams = value;
        }

        private List<Models.Business.Collaborator> _collaborators; 
        public List<Models.Business.Collaborator> Collaborators 
        {
            get
            {
                if (_collaborators != null)
                    return _collaborators;

                _collaborators = new List<Business.Collaborator>();

                if (_core.Collaborators == null)
                    return _collaborators;

                foreach (var core in _core.Collaborators)
                    _collaborators.Add(new Models.Business.Collaborator(core));

                return _collaborators;
            }
            set => _collaborators = value;
        }

        private List<Models.Business.Comment> _comments; 
        public List<Models.Business.Comment> Comments 
        {
            get
            {
                if (_comments != null)
                    return _comments;

                _comments = new List<Business.Comment>();

                if (_core.Comments == null)
                    return _comments;

                foreach (var core in _core.Comments)
                    _comments.Add(new Models.Business.Comment(core));

                return _comments;
            }
            set => _comments = value;
        }

        private List<Models.Business.Document> _documents; 
        public List<Models.Business.Document> Documents 
        {
            get
            {
                if (_documents != null)
                    return _documents;

                _documents = new List<Business.Document>();

                if (_core.Documents == null)
                    return _documents;

                foreach (var core in _core.Documents)
                    _documents.Add(new Models.Business.Document(core));

                return _documents;
            }
            set => _documents = value;
        }

        private List<Models.Business.Follow> _follows; 
        public List<Models.Business.Follow> Follows 
        {
            get
            {
                if (_follows != null)
                    return _follows;

                _follows = new List<Business.Follow>();

                if (_core.Follows == null)
                    return _follows;

                foreach (var core in _core.Follows)
                    _follows.Add(new Models.Business.Follow(core));

                return _follows;
            }
            set => _follows = value;
        }

        private List<Models.Business.IdeaApplicationVersion> _ideaApplicationVersions; 
        public List<Models.Business.IdeaApplicationVersion> IdeaApplicationVersions 
        {
            get
            {
                if (_ideaApplicationVersions != null)
                    return _ideaApplicationVersions;

                _ideaApplicationVersions = new List<Business.IdeaApplicationVersion>();

                if (_core.IdeaApplicationVersions == null)
                    return _ideaApplicationVersions;

                foreach (var core in _core.IdeaApplicationVersions)
                    _ideaApplicationVersions.Add(new Models.Business.IdeaApplicationVersion(core));

                return _ideaApplicationVersions;
            }
            set => _ideaApplicationVersions = value;
        }

        private List<Models.Business.IdeaOtherRunningCost> _ideaOtherRunningCosts; 
        public List<Models.Business.IdeaOtherRunningCost> IdeaOtherRunningCosts 
        {
            get
            {
                if (_ideaOtherRunningCosts != null)
                    return _ideaOtherRunningCosts;

                _ideaOtherRunningCosts = new List<Business.IdeaOtherRunningCost>();

                if (_core.IdeaOtherRunningCosts == null)
                    return _ideaOtherRunningCosts;

                foreach (var core in _core.IdeaOtherRunningCosts)
                    _ideaOtherRunningCosts.Add(new Models.Business.IdeaOtherRunningCost(core));

                return _ideaOtherRunningCosts;
            }
            set => _ideaOtherRunningCosts = value;
        }

        private List<Models.Business.IdeaRunningCost> _ideaRunningCosts; 
        public List<Models.Business.IdeaRunningCost> IdeaRunningCosts 
        {
            get
            {
                if (_ideaRunningCosts != null)
                    return _ideaRunningCosts;

                _ideaRunningCosts = new List<Business.IdeaRunningCost>();

                if (_core.IdeaRunningCosts == null)
                    return _ideaRunningCosts;

                foreach (var core in _core.IdeaRunningCosts)
                    _ideaRunningCosts.Add(new Models.Business.IdeaRunningCost(core));

                return _ideaRunningCosts;
            }
            set => _ideaRunningCosts = value;
        }

        private List<Models.Business.IdeaStage> _ideaStages; 
        public List<Models.Business.IdeaStage> IdeaStages 
        {
            get
            {
                if (_ideaStages != null)
                    return _ideaStages;

                _ideaStages = new List<Business.IdeaStage>();

                if (_core.IdeaStages == null)
                    return _ideaStages;

                foreach (var core in _core.IdeaStages)
                    _ideaStages.Add(new Models.Business.IdeaStage(core));

                return _ideaStages;
            }
            set => _ideaStages = value;
        }

        private List<Models.Business.UserAuthorisation> _userAuthorisations; 
        public List<Models.Business.UserAuthorisation> UserAuthorisations 
        {
            get
            {
                if (_userAuthorisations != null)
                    return _userAuthorisations;

                _userAuthorisations = new List<Business.UserAuthorisation>();

                if (_core.UserAuthorisations == null)
                    return _userAuthorisations;

                foreach (var core in _core.UserAuthorisations)
                    _userAuthorisations.Add(new Models.Business.UserAuthorisation(core));

                return _userAuthorisations;
            }
            set => _userAuthorisations = value;
        }

        private List<Models.Business.Vote> _votes; 
        public List<Models.Business.Vote> Votes 
        {
            get
            {
                if (_votes != null)
                    return _votes;

                _votes = new List<Business.Vote>();

                if (_core.Votes == null)
                    return _votes;

                foreach (var core in _core.Votes)
                    _votes.Add(new Models.Business.Vote(core));

                return _votes;
            }
            set => _votes = value;
        }

        #region OwnerId
        public string OwnerId => UpdatedById ?? CreatedById;
        #endregion

        #region Owner  
        public string Owner => UpdatedBy ?? CreatedBy;
        #endregion
        

        #region CreatedBy
        [DisplayName("Created By")]
        public string CreatedBy => _core.CreatedBy == null ? "" : _core.CreatedBy.ToString();
        #endregion

        #region CreatedDate
        [DisplayName("Created Date")]
        public DateTime? CreatedDate
        {
            get => _core.CreatedDate;
            set
            {
                if (_core.CreatedDate == value)
                    return;

                _core.CreatedDate = value;
            }
        }
        #endregion

        [DisplayName("Created Date")]
        public string CreatedDateString => CreatedDate?.ToString(Data.Core.Settings.DateFormatShort);

        #region CreatedById
        [DisplayName("Created By Id")]
        public string CreatedById
        {
            get => _core.CreatedById;
            set => _core.CreatedById = value;
        }
        #endregion

        #region UpdatedById
        [DisplayName("Updated By Id")]
        public string UpdatedById
        {
            get => _core.UpdatedById;
            set => _core.UpdatedById = value;
        }
        #endregion

        #region UpdatedBy
        [DisplayName("Updated By")]
        public string UpdatedBy => _core.UpdatedBy == null ? "" : _core.UpdatedBy.ToString();
        #endregion

        #region UpdatedDate
        [DisplayName("Updated Date")]
        public DateTime? UpdatedDate
        {
            get => _core.UpdatedDate;
            set
            {
                if (_core.UpdatedDate == value)
                    return;

                _core.UpdatedDate = value;
            }
        }
        #endregion

        [DisplayName("Updated Date")]
        public string UpdatedDateString => UpdatedDate?.ToString(Data.Core.Settings.DateTimeFormatShort);


        [DisplayName("Date")]
        public string DateDisplayed => UpdatedDate == null ? CreatedDate?.ToString("yyyy-MM-dd") : UpdatedDate?.ToString("yyyy-MM-dd");

        [DisplayName("Date Time")]
        public string DateTimeDisplayed => UpdatedDate == null ? CreatedDate?.ToString("yyyy-MM-dd HH:mm:ss") : UpdatedDate?.ToString("yyyy-MM-dd HH:mm:ss");
        #endregion

        #region IsDeleted
        [DisplayName("Is Deleted")]
        public bool IsDeleted
        {
            get => _core.IsDeleted;
            set
            {
                if (_core.IsDeleted == value)
                    return;

                _core.IsDeleted = value;
            }
        }
        #endregion

        #region IsSaved
        [DisplayName("Is Saved")]
        public bool IsSaved => _core.IsSaved;
        #endregion

        public List<Models.Selector> AllUsers_For_Follows { get; set; } = new List<Models.Selector>();
        public List<Models.Selector> AllUsers_For_Votes { get; set; } = new List<Models.Selector>();

        public async Task GetCreatedAndUpdated(Data.Core.IUnitOfWork unitOfWork)
        {
            _core.CreatedBy = await unitOfWork.Users.GetAsync(_core.CreatedById);
            _core.UpdatedBy = await unitOfWork.Users.GetAsync(_core.UpdatedById);
        }

        /// <summary>
        /// Check unique key constraints.
        /// </summary>
        /// <returns>ViewModels.Feedback</returns>
        public async Task<ViewModels.Feedback> CheckUniqueAsync(
        Data.Core.IUnitOfWork unitOfWork,
        ViewModels.Feedback feedback)
        {
            if (unitOfWork == null)
                throw new NullReferenceException("Data.Core.IUnitOfWork cannot be null");

            // Check unique
            var message = await Data.Persistence.UnitOfWork.IsUniqueAsync(GetCore());// Data.Persistence.UnitOfWork.IsUniqueAsync(GetCore());

            if (string.IsNullOrWhiteSpace(message)) 
                return feedback;


             // We have a conflict, give feedback.
            if (feedback.Elements.ContainsKey("ClientId"))
                feedback.Elements["ClientId"] = message;
            else
                feedback.Elements.Add("ClientId", message);

            if (feedback.Elements.ContainsKey("Name"))
                feedback.Elements["Name"] = message;
            else
                feedback.Elements.Add("Name", message);


            feedback.IsValid = false;

            return feedback;
        }

        public override string ToString()
        {
            if(!string.IsNullOrWhiteSpace(DisplayText))
                return DisplayText;

            return Name;
        }
        public static List<Models.Business.Idea> Create(IEnumerable<Data.Core.Domain.Business.Idea> cores, bool includeEmpty = false)
        {
            if (cores == null)
                return null;

            if(includeEmpty)
            {
                var models = new List<Models.Business.Idea>();
                models.Add(new Models.Business.Idea
                {
                    DisplayText = "<Empty>"
                });

                models.AddRange(cores.Select(core => new Models.Business.Idea(core)));
                return models;
            }

            return cores.Select(core => new Models.Business.Idea(core)).ToList();
        }

        public static Models.Business.Idea[] Create(Data.Core.Domain.Business.Idea[] cores, bool includeEmpty = false)
        {
            if (cores == null)
                return null;

            if(includeEmpty)
                return Create(cores.ToList(), true).ToArray();

            return cores.Select(core => new Models.Business.Idea(core)).ToArray();
        }
    }
}