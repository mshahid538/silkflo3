/*********************************************************
       Code Generated By  .  .  .  .  Delaney's ScriptBot
       WWW .  .  .  .  .  .  .  .  .  www.scriptbot.io
       Template Name.  .  .  .  .  .  Project Green 3.0
       Template Version.  .  .  .  .  20220411 004
       Author .  .  .  .  .  .  .  .  Delaney

                      ,        ,--,_
                       \ _ ___/ /\|
                       ( )__, )
                      |/_  '--,
                        \ `  / '
 
 Note: Create this object,
       populate from properties from the Core.Domain classes
       and send to a view.

Object Models
-------------
What can this object do.

* GetModels()
  Return a model containing properties populated with the objects values

* GetCreatedAndUpdated()
  Two overrides to get Users who created updated this object
  and assign them to CreatedBy and UpdatedBy properties.
 
 *********************************************************/

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace SilkFlo.Web.Models
{
    public partial class Log : Abstract
    {
        private SilkFlo.Data.Core.Domain.Log _core;
        #region Constructors
        
        // This constructor is used by HTTP posts 
        public Log ()
        {
            _core = new SilkFlo.Data.Core.Domain.Log();
        }
        public Log(SilkFlo.Data.Core.Domain.Log core)
        {
            _core = core ??   
	        throw new NullReferenceException("The SilkFlo.Data.Core.Domain.Log cannot be null");
        }
        public static string Message_DatabaseErrorFetchList {get; private set; } = "Database error. Could not fetch list.";
        public static string Message_CouldNotSave {get; private set; } = "Could not save the item.";

        #endregion

        #region Properties
        public string DisplayText { get; set; }
        public SilkFlo.Data.Core.Domain.Log GetCore()
        {
            return _core;
        }
        public void SetCore(SilkFlo.Data.Core.Domain.Log core)
        {
            _core = core;
        }

        public bool IsNew => string.IsNullOrWhiteSpace(Id);

        /// <summary>
        /// Primary Key
        /// </summary>
        #region Id
        [StringLength(255,
                      MinimumLength = 0,
                      ErrorMessage = "Id cannot be greater than 255 characters in length.")]
        [DisplayName("Id")]
        public string Id
        {
            get => _core.Id;
            set
            {
                if (_core.Id == value)
                    return;

                _core.Id = value;
            }
        }

        public string Id_Error { get; set; }
        public string Id_ErrorMessage { get; set; } = "Required";
        public bool Id_IsInValid { get; set; }
        #endregion

        #region Fullname
        [StringLength(255,
                      MinimumLength = 0,
                      ErrorMessage = "Fullname cannot be greater than 255 characters in length.")]
        [DisplayName("Fullname")]
        public string Fullname
        {
            get => _core.Fullname;
            set
            {
                if (_core.Fullname == value)
                    return;

                _core.Fullname = value;
            }
        }

        public string Fullname_ErrorMessage { get; set; }
        public bool Fullname_IsInValid { get; set; }
        #endregion

        #region FunctionName
        [StringLength(255,
                      MinimumLength = 0,
                      ErrorMessage = "FunctionName cannot be greater than 255 characters in length.")]
        [DisplayName("FunctionName")]
        public string FunctionName
        {
            get => _core.FunctionName;
            set
            {
                if (_core.FunctionName == value)
                    return;

                _core.FunctionName = value;
            }
        }

        public string FunctionName_ErrorMessage { get; set; }
        public bool FunctionName_IsInValid { get; set; }
        #endregion

        #region InnerException
        [StringLength(255,
                      MinimumLength = 0,
                      ErrorMessage = "InnerException cannot be greater than 255 characters in length.")]
        [DisplayName("InnerException")]
        public string InnerException
        {
            get => _core.InnerException;
            set
            {
                if (_core.InnerException == value)
                    return;

                _core.InnerException = value;
            }
        }

        public string InnerException_ErrorMessage { get; set; }
        public bool InnerException_IsInValid { get; set; }
        #endregion

        #region Message
        [StringLength(255,
                      MinimumLength = 0,
                      ErrorMessage = "Message cannot be greater than 255 characters in length.")]
        [DisplayName("Message")]
        public string Message
        {
            get => _core.Message;
            set
            {
                if (_core.Message == value)
                    return;

                _core.Message = value;
            }
        }

        public string Message_ErrorMessage { get; set; }
        public bool Message_IsInValid { get; set; }
        #endregion

        #region RequestId
        [StringLength(255,
                      MinimumLength = 0,
                      ErrorMessage = "RequestId cannot be greater than 255 characters in length.")]
        [DisplayName("RequestId")]
        public string RequestId
        {
            get => _core.RequestId;
            set
            {
                if (_core.RequestId == value)
                    return;

                _core.RequestId = value;
            }
        }

        public string RequestId_ErrorMessage { get; set; }
        public bool RequestId_IsInValid { get; set; }
        #endregion

        #region Severity
        [Required]
        [DisplayName("Severity")]
        public int Severity
        {
            get => _core.Severity;
            set
            {
                if (_core.Severity == value)
                    return;

                _core.Severity = value;
            }
        }

        public string Severity_ErrorMessage { get; set; } = "Required";
        public bool Severity_IsInValid { get; set; }
        #endregion

        #region Source
        [StringLength(255,
                      MinimumLength = 0,
                      ErrorMessage = "Source cannot be greater than 255 characters in length.")]
        [DisplayName("Source")]
        public string Source
        {
            get => _core.Source;
            set
            {
                if (_core.Source == value)
                    return;

                _core.Source = value;
            }
        }

        public string Source_ErrorMessage { get; set; }
        public bool Source_IsInValid { get; set; }
        #endregion

        #region StackTrace
        [StringLength(255,
                      MinimumLength = 0,
                      ErrorMessage = "StackTrace cannot be greater than 255 characters in length.")]
        [DisplayName("StackTrace")]
        public string StackTrace
        {
            get => _core.StackTrace;
            set
            {
                if (_core.StackTrace == value)
                    return;

                _core.StackTrace = value;
            }
        }

        public string StackTrace_ErrorMessage { get; set; }
        public bool StackTrace_IsInValid { get; set; }
        #endregion

        #region TargetSite
        [StringLength(255,
                      MinimumLength = 0,
                      ErrorMessage = "TargetSite cannot be greater than 255 characters in length.")]
        [DisplayName("TargetSite")]
        public string TargetSite
        {
            get => _core.TargetSite;
            set
            {
                if (_core.TargetSite == value)
                    return;

                _core.TargetSite = value;
            }
        }

        public string TargetSite_ErrorMessage { get; set; }
        public bool TargetSite_IsInValid { get; set; }
        #endregion

        #region Text
        [StringLength(255,
                      MinimumLength = 0,
                      ErrorMessage = "Text cannot be greater than 255 characters in length.")]
        [DisplayName("Text")]
        public string Text
        {
            get => _core.Text;
            set
            {
                if (_core.Text == value)
                    return;

                _core.Text = value;
            }
        }

        public string Text_ErrorMessage { get; set; }
        public bool Text_IsInValid { get; set; }
        #endregion

        #region Username
        [StringLength(255,
                      MinimumLength = 0,
                      ErrorMessage = "Username cannot be greater than 255 characters in length.")]
        [DisplayName("Username")]
        public string Username
        {
            get => _core.Username;
            set
            {
                if (_core.Username == value)
                    return;

                _core.Username = value;
            }
        }

        public string Username_ErrorMessage { get; set; }
        public bool Username_IsInValid { get; set; }
        #endregion

        #region OwnerId
        public string OwnerId => UpdatedById ?? CreatedById;
        #endregion

        #region Owner  
        public string Owner => UpdatedBy ?? CreatedBy;
        #endregion
        

        #region CreatedBy
        [DisplayName("Created By")]
        public string CreatedBy => _core.CreatedBy == null ? "" : _core.CreatedBy.ToString();
        #endregion

        #region CreatedDate
        [DisplayName("Created Date")]
        public DateTime? CreatedDate
        {
            get => _core.CreatedDate;
            set
            {
                if (_core.CreatedDate == value)
                    return;

                _core.CreatedDate = value;
            }
        }
        #endregion

        [DisplayName("Created Date")]
        public string CreatedDateString => CreatedDate?.ToString(Data.Core.Settings.DateFormatShort);

        #region CreatedById
        [DisplayName("Created By Id")]
        public string CreatedById
        {
            get => _core.CreatedById;
            set => _core.CreatedById = value;
        }
        #endregion

        #region UpdatedById
        [DisplayName("Updated By Id")]
        public string UpdatedById
        {
            get => _core.UpdatedById;
            set => _core.UpdatedById = value;
        }
        #endregion

        #region UpdatedBy
        [DisplayName("Updated By")]
        public string UpdatedBy => _core.UpdatedBy == null ? "" : _core.UpdatedBy.ToString();
        #endregion

        #region UpdatedDate
        [DisplayName("Updated Date")]
        public DateTime? UpdatedDate
        {
            get => _core.UpdatedDate;
            set
            {
                if (_core.UpdatedDate == value)
                    return;

                _core.UpdatedDate = value;
            }
        }
        #endregion

        [DisplayName("Updated Date")]
        public string UpdatedDateString => UpdatedDate?.ToString(Data.Core.Settings.DateTimeFormatShort);


        [DisplayName("Date")]
        public string DateDisplayed => UpdatedDate == null ? CreatedDate?.ToString("yyyy-MM-dd") : UpdatedDate?.ToString("yyyy-MM-dd");

        [DisplayName("Date Time")]
        public string DateTimeDisplayed => UpdatedDate == null ? CreatedDate?.ToString("yyyy-MM-dd HH:mm:ss") : UpdatedDate?.ToString("yyyy-MM-dd HH:mm:ss");
        #endregion

        #region IsDeleted
        [DisplayName("Is Deleted")]
        public bool IsDeleted
        {
            get => _core.IsDeleted;
            set
            {
                if (_core.IsDeleted == value)
                    return;

                _core.IsDeleted = value;
            }
        }
        #endregion

        #region IsSaved
        [DisplayName("Is Saved")]
        public bool IsSaved => _core.IsSaved;
        #endregion

        public async Task GetCreatedAndUpdated(Data.Core.IUnitOfWork unitOfWork)
        {
            _core.CreatedBy = await unitOfWork.Users.GetAsync(_core.CreatedById);
            _core.UpdatedBy = await unitOfWork.Users.GetAsync(_core.UpdatedById);
        }


        public override string ToString()
        {
            if(!string.IsNullOrWhiteSpace(DisplayText))
                return DisplayText;

            return Text;
        }
        public static List<Models.Log> Create(IEnumerable<Data.Core.Domain.Log> cores)
        {
            return cores.Select(core => new Models.Log(core)).ToList();
        }
        
        public static Models.Log[] Create(Data.Core.Domain.Log[] cores)
        {
            return cores.Select(core => new Models.Log(core)).ToArray();
        }
    }
}