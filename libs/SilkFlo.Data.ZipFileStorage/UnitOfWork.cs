using SilkFlo.Data.Core;
using SilkFlo.Data.Core.Domain;
using SilkFlo.Data.Core.Domain.Agency;
using SilkFlo.Data.Core.Domain.Application;
using SilkFlo.Data.Core.Domain.Business;
using SilkFlo.Data.Core.Domain.CRM;
using SilkFlo.Data.Core.Domain.Shared;
using SilkFlo.Data.Core.Domain.Shop;
using SilkFlo.Data.Core.Repositories;
using SilkFlo.Data.Core.Repositories.Agency;
using SilkFlo.Data.Core.Repositories.Application;
using SilkFlo.Data.Core.Repositories.Business;
using SilkFlo.Data.Core.Repositories.CRM;
using SilkFlo.Data.Core.Repositories.Shared;
using SilkFlo.Data.Core.Repositories.Shop;
using SilkFlo.Data.Persistence.Repositories;
using SilkFlo.Data.Persistence.Repositories.Agency;
using SilkFlo.Data.Persistence.Repositories.Application;
using SilkFlo.Data.Persistence.Repositories.Business;
using SilkFlo.Data.Persistence.Repositories.CRM;
using SilkFlo.Data.Persistence.Repositories.Shared;
using SilkFlo.Data.Persistence.Repositories.Shop;
using SilkFlo.Email;
using SilkFlo.Security;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.Serialization;
using System.Text;
using SilkFlo.Data.Core.Persistence;
using System.Data.Entity;
using static System.Net.Mime.MediaTypeNames;

namespace SilkFlo.Data.Persistence
{
  public class UnitOfWork : IUnitOfWork, IDisposable
  {
        //private static string _userId;
        //private static bool _isSaved;
        //private static readonly 

        //string _xmlFilename = "DataSet.xml";
        //private static readonly string _fullname = ApplicationDataFolderPath + "\\Data File.data";
        //private static readonly string _fullnameBackup = ApplicationDataFolderPath + "\\Data File Backup.data";
        //private static bool _isSaving;
        //private static DataSet _dataSet;
        //private static readonly int _totalSaveCount = 5;
        //private static int _saveAttemptCount = 0;
        //private static BackgroundWorker _backgroundWorkerCopyFile;

        private readonly ApplicationDbContext _dbContext;// = new ApplicationDbContext();
        private readonly ApplicationDbContext _dataSet;
        //public static string ApplicationDataFolderPath { get; private set; } = AppDomain.CurrentDomain.BaseDirectory + "Application Data";

        //public static bool IsNewDataStore { get; set; }

        [IgnoreDataMember]
    [XmlIgnore]
    public string UserId { get; set; }

    [IgnoreDataMember]
    [XmlIgnore]
    public static bool IsLoaded { get; set; }

    [IgnoreDataMember]
    [XmlIgnore]
    public static bool IsOpening { get; private set; }

        public UnitOfWork(ApplicationDbContext dbContext)
        {
            _dbContext = dbContext; // new ApplicationDbContext();
            _dataSet = dbContext; // new ApplicationDbContext();
            this.Analytics = (IAnalyticRepository)new AnalyticRepository(this);
            this.Logs = (ILogRepository)new LogRepository(this);
            this.Messages = (IMessageRepository)new MessageRepository(this);
            this.Roles = (SilkFlo.Data.Core.Repositories.IRoleRepository)new SilkFlo.Data.Persistence.Repositories.RoleRepository(this);
            this.Users = (IUserRepository)new UserRepository(this);
            this.UserAchievements = (IUserAchievementRepository)new UserAchievementRepository(this);
            this.UserBadges = (IUserBadgeRepository)new UserBadgeRepository(this);
            this.UserRoles = (IUserRoleRepository)new UserRoleRepository(this);
            this.WebHookLogs = (IWebHookLogRepository)new WebHookLogRepository(this);
            this.AgencyManageTenants = (IManageTenantRepository)new ManageTenantRepository(this);
            this.ApplicationHotSpots = (IHotSpotRepository)new HotSpotRepository(this);
            this.ApplicationPages = (IPageRepository)new PageRepository(this);
            this.ApplicationSettings = (ISettingRepository)new SettingRepository(this);
            this.BusinessApplications = (IApplicationRepository)new ApplicationRepository(this);
            this.BusinessClients = (IClientRepository)new ClientRepository(this);
            this.BusinessCollaborators = (ICollaboratorRepository)new CollaboratorRepository(this);
            this.BusinessCollaboratorRoles = (ICollaboratorRoleRepository)new CollaboratorRoleRepository(this);
            this.BusinessComments = (ICommentRepository)new CommentRepository(this);
            this.BusinessDepartments = (IDepartmentRepository)new DepartmentRepository(this);
            this.BusinessDocuments = (IDocumentRepository)new DocumentRepository(this);
            this.BusinessFollows = (IFollowRepository)new FollowRepository(this);
            this.BusinessIdeas = (IIdeaRepository)new IdeaRepository(this);
            this.BusinessIdeaApplicationVersions = (IIdeaApplicationVersionRepository)new IdeaApplicationVersionRepository(this);
            this.BusinessIdeaOtherRunningCosts = (IIdeaOtherRunningCostRepository)new IdeaOtherRunningCostRepository(this);
            this.BusinessIdeaRunningCosts = (IIdeaRunningCostRepository)new IdeaRunningCostRepository(this);
            this.BusinessIdeaStages = (IIdeaStageRepository)new IdeaStageRepository(this);
            this.BusinessIdeaStageStatuses = (IIdeaStageStatusRepository)new IdeaStageStatusRepository(this);
            this.BusinessImplementationCosts = (IImplementationCostRepository)new ImplementationCostRepository(this);
            this.BusinessLocations = (ILocationRepository)new LocationRepository(this);
            this.BusinessOtherRunningCosts = (IOtherRunningCostRepository)new OtherRunningCostRepository(this);
            this.BusinessProcesses = (IProcessRepository)new ProcessRepository(this);
            this.BusinessRecipients = (IRecipientRepository)new RecipientRepository(this);
            this.BusinessRoles = (SilkFlo.Data.Core.Repositories.Business.IRoleRepository)new SilkFlo.Data.Persistence.Repositories.Business.RoleRepository(this);
            this.BusinessRoleCosts = (IRoleCostRepository)new RoleCostRepository(this);
            this.BusinessRoleIdeaAuthorisations = (IRoleIdeaAuthorisationRepository)new RoleIdeaAuthorisationRepository(this);
            this.BusinessRunningCosts = (IRunningCostRepository)new RunningCostRepository(this);
            this.BusinessSoftwareVenders = (ISoftwareVenderRepository)new SoftwareVenderRepository(this);
            this.BusinessTeams = (ITeamRepository)new TeamRepository(this);
            this.BusinessUserAuthorisations = (IUserAuthorisationRepository)new UserAuthorisationRepository(this);
            this.BusinessVersions = (IVersionRepository)new VersionRepository(this);
            this.BusinessVotes = (IVoteRepository)new VoteRepository(this);
            this.CRMCompanySizes = (ICompanySizeRepository)new CompanySizeRepository(this);
            this.CRMJobLevels = (IJobLevelRepository)new JobLevelRepository(this);
            this.CRMProspects = (IProspectRepository)new ProspectRepository(this);
            this.SharedAchievements = (IAchievementRepository)new AchievementRepository(this);
            this.SharedApplicationStabilities = (IApplicationStabilityRepository)new ApplicationStabilityRepository(this);
            this.SharedAutomationGoals = (IAutomationGoalRepository)new AutomationGoalRepository(this);
            this.SharedAutomationTypes = (IAutomationTypeRepository)new AutomationTypeRepository(this);
            this.SharedAverageNumberOfSteps = (IAverageNumberOfStepRepository)new AverageNumberOfStepRepository(this);
            this.SharedBadges = (IBadgeRepository)new BadgeRepository(this);
            this.SharedClientTypes = (IClientTypeRepository)new ClientTypeRepository(this);
            this.SharedCostTypes = (ICostTypeRepository)new CostTypeRepository(this);
            this.SharedCountries = (ICountryRepository)new CountryRepository(this);
            this.SharedDataInputPercentOfStructureds = (IDataInputPercentOfStructuredRepository)new DataInputPercentOfStructuredRepository(this);
            this.SharedDecisionCounts = (IDecisionCountRepository)new DecisionCountRepository(this);
            this.SharedDecisionDifficulties = (IDecisionDifficultyRepository)new DecisionDifficultyRepository(this);
            this.SharedDocumentationPresents = (IDocumentationPresentRepository)new DocumentationPresentRepository(this);
            this.SharedIdeaAuthorisations = (IIdeaAuthorisationRepository)new IdeaAuthorisationRepository(this);
            this.SharedIdeaStatuses = (IIdeaStatusRepository)new IdeaStatusRepository(this);
            this.SharedIndustries = (IIndustryRepository)new IndustryRepository(this);
            this.SharedInputs = (IInputRepository)new InputRepository(this);
            this.SharedInputDataStructures = (IInputDataStructureRepository)new InputDataStructureRepository(this);
            this.SharedLanguages = (ILanguageRepository)new LanguageRepository(this);
            this.SharedNumberOfWaysToCompleteProcesses = (INumberOfWaysToCompleteProcessRepository)new NumberOfWaysToCompleteProcessRepository(this);
            this.SharedPeriods = (IPeriodRepository)new PeriodRepository(this);
            this.SharedProcessPeaks = (IProcessPeakRepository)new ProcessPeakRepository(this);
            this.SharedProcessStabilities = (IProcessStabilityRepository)new ProcessStabilityRepository(this);
            this.SharedRules = (IRuleRepository)new RuleRepository(this);
            this.SharedStages = (IStageRepository)new StageRepository(this);
            this.SharedStageGroups = (IStageGroupRepository)new StageGroupRepository(this);
            this.SharedSubmissionPaths = (ISubmissionPathRepository)new SubmissionPathRepository(this);
            this.SharedTaskFrequencies = (ITaskFrequencyRepository)new TaskFrequencyRepository(this);
            this.ShopCoupons = (ICouponRepository)new CouponRepository(this);
            this.ShopCurrencies = (ICurrencyRepository)new CurrencyRepository(this);
            this.ShopDiscounts = (IDiscountRepository)new DiscountRepository(this);
            this.ShopPrices = (IPriceRepository)new PriceRepository(this);
            this.ShopProducts = (IProductRepository)new ProductRepository(this);
            this.ShopSubscriptions = (ISubscriptionRepository)new SubscriptionRepository(this);
        }

    public bool IncludeDeleted { get; set; }

    public bool Commit { get; set; } = true;

        #region Repositories
        public IAnalyticRepository Analytics { get; private set; }

    public ILogRepository Logs { get; private set; }

    public IMessageRepository Messages { get; private set; }

    public SilkFlo.Data.Core.Repositories.IRoleRepository Roles { get; private set; }

    public IUserRepository Users { get; private set; }

    public IUserAchievementRepository UserAchievements { get; private set; }

    public IUserBadgeRepository UserBadges { get; private set; }

    public IUserRoleRepository UserRoles { get; private set; }

    public IWebHookLogRepository WebHookLogs { get; private set; }

    public IManageTenantRepository AgencyManageTenants { get; private set; }

    public IHotSpotRepository ApplicationHotSpots { get; private set; }

    public IPageRepository ApplicationPages { get; private set; }

    public ISettingRepository ApplicationSettings { get; private set; }

    public IApplicationRepository BusinessApplications { get; private set; }

    public IClientRepository BusinessClients { get; private set; }

    public ICollaboratorRepository BusinessCollaborators { get; private set; }

    public ICollaboratorRoleRepository BusinessCollaboratorRoles { get; private set; }

    public ICommentRepository BusinessComments { get; private set; }

    public IDepartmentRepository BusinessDepartments { get; private set; }

    public IDocumentRepository BusinessDocuments { get; private set; }

    public IFollowRepository BusinessFollows { get; private set; }

    public IIdeaRepository BusinessIdeas { get; private set; }

    public IIdeaApplicationVersionRepository BusinessIdeaApplicationVersions { get; private set; }

    public IIdeaOtherRunningCostRepository BusinessIdeaOtherRunningCosts { get; private set; }

    public IIdeaRunningCostRepository BusinessIdeaRunningCosts { get; private set; }

    public IIdeaStageRepository BusinessIdeaStages { get; private set; }

    public IIdeaStageStatusRepository BusinessIdeaStageStatuses { get; private set; }

    public IImplementationCostRepository BusinessImplementationCosts { get; private set; }

    public ILocationRepository BusinessLocations { get; private set; }

    public IOtherRunningCostRepository BusinessOtherRunningCosts { get; private set; }

    public IProcessRepository BusinessProcesses { get; private set; }

    public IRecipientRepository BusinessRecipients { get; private set; }

    public SilkFlo.Data.Core.Repositories.Business.IRoleRepository BusinessRoles { get; private set; }

    public IRoleCostRepository BusinessRoleCosts { get; private set; }

    public IRoleIdeaAuthorisationRepository BusinessRoleIdeaAuthorisations { get; private set; }

    public IRunningCostRepository BusinessRunningCosts { get; private set; }

    public ISoftwareVenderRepository BusinessSoftwareVenders { get; private set; }

    public ITeamRepository BusinessTeams { get; private set; }

    public IUserAuthorisationRepository BusinessUserAuthorisations { get; private set; }

    public IVersionRepository BusinessVersions { get; private set; }

    public IVoteRepository BusinessVotes { get; private set; }

    public ICompanySizeRepository CRMCompanySizes { get; private set; }

    public IJobLevelRepository CRMJobLevels { get; private set; }

    public IProspectRepository CRMProspects { get; private set; }

    public IAchievementRepository SharedAchievements { get; private set; }

    public IApplicationStabilityRepository SharedApplicationStabilities { get; private set; }

    public IAutomationGoalRepository SharedAutomationGoals { get; private set; }

    public IAutomationTypeRepository SharedAutomationTypes { get; private set; }

    public IAverageNumberOfStepRepository SharedAverageNumberOfSteps { get; private set; }

    public IBadgeRepository SharedBadges { get; private set; }

    public IClientTypeRepository SharedClientTypes { get; private set; }

    public ICostTypeRepository SharedCostTypes { get; private set; }

    public ICountryRepository SharedCountries { get; private set; }

    public IDataInputPercentOfStructuredRepository SharedDataInputPercentOfStructureds { get; private set; }

    public IDecisionCountRepository SharedDecisionCounts { get; private set; }

    public IDecisionDifficultyRepository SharedDecisionDifficulties { get; private set; }

    public IDocumentationPresentRepository SharedDocumentationPresents { get; private set; }

    public IIdeaAuthorisationRepository SharedIdeaAuthorisations { get; private set; }

    public IIdeaStatusRepository SharedIdeaStatuses { get; private set; }

    public IIndustryRepository SharedIndustries { get; private set; }

    public IInputRepository SharedInputs { get; private set; }

    public IInputDataStructureRepository SharedInputDataStructures { get; private set; }

    public ILanguageRepository SharedLanguages { get; private set; }

    public INumberOfWaysToCompleteProcessRepository SharedNumberOfWaysToCompleteProcesses { get; private set; }

    public IPeriodRepository SharedPeriods { get; private set; }

    public IProcessPeakRepository SharedProcessPeaks { get; private set; }

    public IProcessStabilityRepository SharedProcessStabilities { get; private set; }

    public IRuleRepository SharedRules { get; private set; }

    public IStageRepository SharedStages { get; private set; }

    public IStageGroupRepository SharedStageGroups { get; private set; }

    public ISubmissionPathRepository SharedSubmissionPaths { get; private set; }

    public ITaskFrequencyRepository SharedTaskFrequencies { get; private set; }

    public ICouponRepository ShopCoupons { get; private set; }

    public ICurrencyRepository ShopCurrencies { get; private set; }

    public IDiscountRepository ShopDiscounts { get; private set; }

    public IPriceRepository ShopPrices { get; private set; }

    public IProductRepository ShopProducts { get; private set; }

    public ISubscriptionRepository ShopSubscriptions { get; private set; }
        #endregion

        public async Task<string> IsUniqueAsync<T>(T entity)
        {
            if (typeof(T) == typeof(SilkFlo.Data.Core.Domain.Role))
            {
                var role = entity as SilkFlo.Data.Core.Domain.Role;
                return await IsUniqueAsync(role);
            }
            else if (typeof(T) == typeof(User))
            {
                var user = entity as User;
                return await IsUniqueAsync(user);
            }
            else if (typeof(T) == typeof(UserRole))
            {
                var userRole = entity as UserRole;
                return await IsUniqueAsync(userRole);
            }
            else if (typeof(T) == typeof(ManageTenant))
            {
                var manageTenant = entity as ManageTenant;
                return await IsUniqueAsync(manageTenant);
            }
            else if (typeof(T) == typeof(HotSpot))
            {
                var hotSpot = entity as HotSpot;
                return await IsUniqueAsync(hotSpot);
            }
            else if (typeof(T) == typeof(SilkFlo.Data.Core.Domain.Business.Application))
            {
                var app = entity as SilkFlo.Data.Core.Domain.Business.Application;
                return await IsUniqueAsync(app);
            }
            else if (typeof(T) == typeof(Client))
            {
                var client = entity as Client;
                return await IsUniqueAsync(client);
            }
            else if (typeof(T) == typeof(Collaborator))
            {
                var collaborator = entity as Collaborator;
                return await IsUniqueAsync(collaborator);
            }
            else if (typeof(T) == typeof(CollaboratorRole))
            {
                var collaboratorRole = entity as CollaboratorRole;
                return await IsUniqueAsync(collaboratorRole);
            }
            else if (typeof(T) == typeof(Comment))
            {
                var comment = entity as Comment;
                return await IsUniqueAsync(comment);
            }
            else if (typeof(T) == typeof(Department))
            {
                var department = entity as Department;
                return await IsUniqueAsync(department);
            }
            else if (typeof(T) == typeof(Document))
            {
                var document = entity as Document;
                return await IsUniqueAsync(document);
            }
            else if (typeof(T) == typeof(Idea))
            {
                var idea = entity as Idea;
                return await IsUniqueAsync(idea);
            }
            else if (typeof(T) == typeof(IdeaOtherRunningCost))
            {
                var ideaOtherRunningCost = entity as IdeaOtherRunningCost;
                return await IsUniqueAsync(ideaOtherRunningCost);
            }
            else if (typeof(T) == typeof(IdeaRunningCost))
            {
                var ideaRunningCost = entity as IdeaRunningCost;
                return await IsUniqueAsync(ideaRunningCost);
            }
            else if (typeof(T) == typeof(IdeaStage))
            {
                var ideaStage = entity as IdeaStage;
                return await IsUniqueAsync(ideaStage);
            }
            else if (typeof(T) == typeof(IdeaStageStatus))
            {
                var ideaStageStatus = entity as IdeaStageStatus;
                return await IsUniqueAsync(ideaStageStatus);
            }
            else if (typeof(T) == typeof(Location))
            {
                var location = entity as Location;
                return await IsUniqueAsync(location);
            }
            else if (typeof(T) == typeof(OtherRunningCost))
            {
                var otherRunningCost = entity as OtherRunningCost;
                return await IsUniqueAsync(otherRunningCost);
            }
            else if (typeof(T) == typeof(Process))
            {
                var process = entity as Process;
                return await IsUniqueAsync(process);
            }
            else if (typeof(T) == typeof(SilkFlo.Data.Core.Domain.Business.BusinessRole))
            {
                var businessRole = entity as SilkFlo.Data.Core.Domain.Business.BusinessRole;
                return await IsUniqueAsync(businessRole);
            }
            else if (typeof(T) == typeof(RoleCost))
            {
                var roleCost = entity as RoleCost;
                return await IsUniqueAsync(roleCost);
            }
            else if (typeof(T) == typeof(RoleIdeaAuthorisation))
            {
                var roleIdeaAuthorisation = entity as RoleIdeaAuthorisation;
                return await IsUniqueAsync(roleIdeaAuthorisation);
            }
            else if (typeof(T) == typeof(RunningCost))
            {
                var runningCost = entity as RunningCost;
                return await IsUniqueAsync(runningCost);
            }
            else if (typeof(T) == typeof(SoftwareVender))
            {
                var softwareVender = entity as SoftwareVender;
                return await IsUniqueAsync(softwareVender);
            }
            else if (typeof(T) == typeof(Team))
            {
                var team = entity as Team;
                return await IsUniqueAsync(team);
            }
            else if (typeof(T) == typeof(UserAuthorisation))
            {
                var userAuthorisation = entity as UserAuthorisation;
                return await IsUniqueAsync(userAuthorisation);
            }
            else if (typeof(T) == typeof(SilkFlo.Data.Core.Domain.Business.Version))
            {
                var version = entity as SilkFlo.Data.Core.Domain.Business.Version;
                return await IsUniqueAsync(version);
            }
            else if (typeof(T) == typeof(CompanySize))
            {
                var companySize = entity as CompanySize;
                return await IsUniqueAsync(companySize);
            }
            else if (typeof(T) == typeof(JobLevel))
            {
                var jobLevel = entity as JobLevel;
                return await IsUniqueAsync(jobLevel);
            }
            else if (typeof(T) == typeof(Achievement))
            {
                var acheivement = entity as Achievement;
                return await IsUniqueAsync(acheivement);
            }
            else if (typeof(T) == typeof(ApplicationStability))
            {
                var appStability = entity as ApplicationStability;
                return await IsUniqueAsync(appStability);
            }
            else if (typeof(T) == typeof(AutomationGoal))
            {
                var automationGoal = entity as AutomationGoal;
                return await IsUniqueAsync(automationGoal);
            }
            else if (typeof(T) == typeof(AutomationType))
            {
                var automationType = entity as AutomationType;
                return await IsUniqueAsync(automationType);
            }
            else if (typeof(T) == typeof(AverageNumberOfStep))
            {
                var averageNumberOfStep = entity as AverageNumberOfStep;
                return await IsUniqueAsync(averageNumberOfStep);
            }
            else if (typeof(T) == typeof(Badge))
            {
                var badge = entity as Badge;
                return await IsUniqueAsync(badge);
            }
            else if (typeof(T) == typeof(CostType))
            {
                var costType = entity as CostType;
                return await IsUniqueAsync(costType);
            }
            else if (typeof(T) == typeof(DataInputPercentOfStructured))
            {
                var dataInputPercentOfStructured = entity as DataInputPercentOfStructured;
                return await IsUniqueAsync(dataInputPercentOfStructured);
            }
            else if (typeof(T) == typeof(DecisionCount))
            {
                var decisionCount = entity as DecisionCount;
                return await IsUniqueAsync(decisionCount);
            }
            else if (typeof(T) == typeof(DecisionDifficulty))
            {
                var decisionDifficulty = entity as DecisionDifficulty;
                return await IsUniqueAsync(decisionDifficulty);
            }
            else if (typeof(T) == typeof(DocumentationPresent))
            {
                var docPresent = entity as DocumentationPresent;
                return await IsUniqueAsync(docPresent);
            }
            else if (typeof(T) == typeof(IdeaAuthorisation))
            {
                var ideaAuthorisation = entity as IdeaAuthorisation;
                return await IsUniqueAsync(ideaAuthorisation);
            }
            else if (typeof(T) == typeof(IdeaStatus))
            {
                var ideaStatus = entity as IdeaStatus;
                return await IsUniqueAsync(ideaStatus);
            }
            else if (typeof(T) == typeof(Input))
            {
                var input = entity as Input;
                return await IsUniqueAsync(input);
            }
            else if (typeof(T) == typeof(InputDataStructure))
            {
                var inputDS = entity as InputDataStructure;
                return await IsUniqueAsync(inputDS);
            }
            else if (typeof(T) == typeof(NumberOfWaysToCompleteProcess))
            {
                var nofways = entity as NumberOfWaysToCompleteProcess;
                return await IsUniqueAsync(nofways);
            }
            else if (typeof(T) == typeof(Period))
            {
                var period = entity as Period;
                return await IsUniqueAsync(period);
            }
            else if (typeof(T) == typeof(ProcessPeak))
            {
                var processPeak = entity as ProcessPeak;
                return await IsUniqueAsync(processPeak);
            }
            else if (typeof(T) == typeof(ProcessStability))
            {
                var processStability = entity as ProcessStability;
                return await IsUniqueAsync(processStability);
            }
            else if (typeof(T) == typeof(Rule))
            {
                var rule = entity as Rule;
                return await IsUniqueAsync(rule);
            }
            else if (typeof(T) == typeof(Stage))
            {
                var stage = entity as Stage;
                return await IsUniqueAsync(stage);
            }
            else if (typeof(T) == typeof(StageGroup))
            {
                var stageG = entity as StageGroup;
                return await IsUniqueAsync(stageG);
            }
            else if (typeof(T) == typeof(SubmissionPath))
            {
                var subPath = entity as SubmissionPath;
                return await IsUniqueAsync(subPath);
            }
            else if (typeof(T) == typeof(TaskFrequency))
            {
                var tFreq = entity as TaskFrequency;
                return await IsUniqueAsync(tFreq);
            }
            else if (typeof(T) == typeof(Coupon))
            {
                var coupon = entity as Coupon;
                return await IsUniqueAsync(coupon);
            }
            else if (typeof(T) == typeof(Currency))
            {
                var currency = entity as Coupon;
                return await IsUniqueAsync(currency);
            }
            else if (typeof(T) == typeof(Discount))
            {
                var discount = entity as Discount;
                return await IsUniqueAsync(discount);
            }
            else if (typeof(T) == typeof(Price))
            {
                var price = entity as Price;
                return await IsUniqueAsync(price);
            }
            else if (typeof(T) == typeof(Product))
            {
                var product = entity as Coupon;
                return await IsUniqueAsync(product);
            }
            // Return the appropriate result
            return "";
        }

        public DataStoreResult Complete() => Save(this.UserId).Result;

    public async Task<DataStoreResult> CompleteAsync()
    {
      DataStoreResult dataStoreResult = await Save(this.UserId);
      return dataStoreResult;
    }

        #region AnalyticsTable-IO
        public string Validate(Analytic core) => ValidateAsync(core).Result;

        public static async Task<string> ValidateAsync(Analytic core)
        {
          string messages = "";
          if (core.Date == DateTime.MinValue)
            messages += "Analytic.Date: Date missing; ";
          if (string.IsNullOrWhiteSpace(core.URL))
            messages += "Analytic.URL: URL missing; ";
          if (!string.IsNullOrWhiteSpace(messages))
            messages = messages.Substring(0, messages.Length - 2);
          string str = messages;
          messages = (string) null;
          return str;
        }

        public void Add(IEnumerable<Analytic> analytics)
        {
          try
          {
            foreach (Analytic analytic in analytics)
              this.Add(analytic);
          }
          catch
          {
            throw;
          }
        }

        public async Task AddAsync(IEnumerable<Analytic> analytics)
        {
          try
          {
            foreach (Analytic analytic in analytics)
              await this.AddAsync(analytic);
          }
          catch
          {
            throw;
          }
        }

        public async Task AddAsync(Analytic core)
        {
          try
          {
            if (core == null)
              ;
            else
            {
              string messageValidate = await ValidateAsync(core);
              if (!string.IsNullOrWhiteSpace(messageValidate))
                throw new InvalidFieldsException(messageValidate);
              Analytic analytic = (Analytic) null;
              if (!string.IsNullOrWhiteSpace(core.Id))
                analytic = _dataSet.Analytics.SingleOrDefault<Analytic>((Func<Analytic, bool>) (x => x.Id == core.Id));
              if (analytic == null)
              {
                core.CreatedDate = new DateTime?(DateTime.Now);
                core.CreatedById = this.UserId;
                if (string.IsNullOrWhiteSpace(core.Id))
                  core.Id = Guid.NewGuid().ToString();
                _dataSet.Analytics.Add(core);
              }
              else
              {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////analytic.Update(core);
                        ///

                        _dataSet.Entry(analytic).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        analytic.Update(core);
                        _dataSet.Analytics.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
              messageValidate = (string) null;
              analytic = (Analytic) null;
            }
          }
          catch
          {
            throw;
          }
        }

        public void Add(Analytic core)
        {
          try
          {
            this.AddAsync(core).RunSynchronously();
          }
          catch
          {
            throw;
          }
        }

        public DataStoreResult Delete(Analytic analytic, bool cascadeDelete = false)
        {
          try
          {
            Transaction transaction = (Transaction) null;
            if (cascadeDelete)
              transaction = Transaction.Begin();
            DataStoreResult dataStoreResult = this.Delete(analytic, transaction);
            if (dataStoreResult == DataStoreResult.Success && transaction != null)
              transaction.Commit(this);
            return dataStoreResult;
          }
          catch
          {
            throw;
          }
        }

        public async Task<DataStoreResult> DeleteAsync(Analytic analytic, bool cascadeDelete = false)
        {
          DataStoreResult dataStoreResult1;
          try
          {
            Transaction transaction = (Transaction) null;
            if (cascadeDelete)
              transaction = Transaction.Begin();
            DataStoreResult dataStoreResult = await this.DeleteAsync(analytic, transaction);
            if (dataStoreResult == DataStoreResult.Success && transaction != null)
              await transaction.CommitAsync(this);
            dataStoreResult1 = dataStoreResult;
          }
          catch
          {
            throw;
          }
          return dataStoreResult1;
        }

        public DataStoreResult Delete(IEnumerable<Analytic> analytics, bool cascadeDelete = false)
        {
          try
          {
            DataStoreResult dataStoreResult = DataStoreResult.Success;
            if (analytics == null)
              return dataStoreResult;
            Transaction transaction = (Transaction) null;
            if (cascadeDelete)
              transaction = Transaction.Begin();
            foreach (Analytic analytic in analytics.ToList<Analytic>())
            {
              dataStoreResult = this.Delete(analytic, transaction);
              if (dataStoreResult != DataStoreResult.Success)
                break;
            }
            if (dataStoreResult == DataStoreResult.Success && transaction != null)
              transaction.Commit(this);
            return dataStoreResult;
          }
          catch
          {
            throw;
          }
        }

        public async Task<DataStoreResult> DeleteAsync(IEnumerable<Analytic> analytics, bool cascadeDelete = false)
        {
          try
          {
            DataStoreResult dataStoreResult = DataStoreResult.Success;
            if (analytics == null)
              return dataStoreResult;
            Transaction transaction = (Transaction) null;
            if (cascadeDelete)
              transaction = Transaction.Begin();
            List<Analytic> lst = analytics.ToList<Analytic>();
            foreach (Analytic analytic in lst)
            {
              Analytic item = analytic;
              dataStoreResult = await this.DeleteAsync(item, transaction);
              if (dataStoreResult == DataStoreResult.Success)
                item = (Analytic) null;
              else
                break;
            }
            if (dataStoreResult == DataStoreResult.Success && transaction != null)
              await transaction.CommitAsync(this);
            return dataStoreResult;
          }
          catch
          {
            throw;
          }
        }

        private DataStoreResult Delete(Analytic analytic, Transaction transaction)
        {
          try
          {
            if (analytic.Id == null)
              return DataStoreResult.Success;
            Analytic entity = _dataSet.Analytics.SingleOrDefault<Analytic>((Func<Analytic, bool>) (x => x.Id == analytic.Id));
            if (entity == null)
              return DataStoreResult.Success;
            this.RefreshCanDelete(analytic, transaction);
            if (!analytic.CanDelete)
              throw new ChildDependencyException("The analytic (" + analytic.ToString() + ") contains " + " therefore cannot be deleted.");
            if (transaction == null)
              _dataSet.Analytics.Remove(entity);
            else
              transaction.Add((Abstract) entity, Action.Delete);
            return DataStoreResult.Success;
          }
          catch
          {
            throw;
          }
        }

        private async Task<DataStoreResult> DeleteAsync(Analytic analytic, Transaction transaction)
        {
          try
          {
            if (analytic.Id == null)
              return DataStoreResult.Success;
            Analytic core = _dataSet.Analytics.SingleOrDefault<Analytic>((Func<Analytic, bool>) (x => x.Id == analytic.Id));
            if (core == null)
              return DataStoreResult.Success;
            await this.RefreshCanDeleteAsync(analytic, transaction);
            if (analytic.CanDelete)
            {
              if (transaction == null)
                _dataSet.Analytics.Remove(core);
              else
                transaction.Add((Abstract) core, Action.Delete);
              return DataStoreResult.Success;
            }
            string erorrMessage = "The analytic (" + analytic.ToString() + ") contains ";
            erorrMessage += " therefore cannot be deleted.";
            throw new ChildDependencyException(erorrMessage);
          }
          catch
          {
            throw;
          }
        }

        public DataStoreResult DeleteAnalytic(string Id, bool cascadeDelete = false)
        {
          try
          {
            return this.Delete(_dataSet.Analytics.SingleOrDefault<Analytic>((Func<Analytic, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The analytic is not found"), cascadeDelete);
          }
          catch
          {
            throw;
          }
        }

        public async Task<DataStoreResult> DeleteAsyncAnalytic(string Id, bool cascadeDelete = false)
        {
          DataStoreResult dataStoreResult;
          try
          {
            Analytic analytic = _dataSet.Analytics.SingleOrDefault<Analytic>((Func<Analytic, bool>) (x => x.Id == Id));
            if (analytic == null)
              throw new NotFoundException("The analytic is not found");
            dataStoreResult = await this.DeleteAsync(analytic, cascadeDelete);
          }
          catch
          {
            throw;
          }
          return dataStoreResult;
        }

        internal void RefreshCanDelete(Analytic analytic, Transaction transaction)
        {
          if (analytic == null)
            return;
          analytic.CanDelete = true;
        }

        internal async Task RefreshCanDeleteAsync(Analytic analytic, Transaction transaction)
        {
          if (analytic == null)
            return;
          analytic.CanDelete = true;
        }

        public Analytic FindAnalytic(string Id) => Id == null ? (Analytic) null : _dataSet.Analytics.SingleOrDefault<Analytic>((Func<Analytic, bool>) (x => x.Id == Id));

        public async Task<Analytic> FindAnalyticAsync(string Id)
        {
          Analytic analyticAsync;
          try
          {
            analyticAsync = await Task.Run<Analytic>((Func<Analytic>) (() => this.FindAnalytic(Id)));
          }
          catch
          {
            throw;
          }
          return analyticAsync;
        }

        public List<Analytic> GetAnalyticByDate(DateTime date) => _dataSet.Analytics.Where<Analytic>((Func<Analytic, bool>) (m => m.Date == date.Date)).ToList<Analytic>();

        public async Task<List<Analytic>> GetAnalyticByDateAsync(DateTime date)
        {
          List<Analytic> analyticByDateAsync;
          try
          {
            analyticByDateAsync = await Task.Run<List<Analytic>>((Func<List<Analytic>>) (() => this.GetAnalyticByDate(date)));
          }
          catch
          {
            throw;
          }
          return analyticByDateAsync;
        }

        public void GetCreatedUpdated(IEnumerable<Analytic> cores)
        {
          try
          {
            foreach (Analytic core in cores)
              this.GetCreatedUpdated(core);
          }
          catch
          {
            throw;
          }
        }

        public async Task GetCreatedUpdatedAsync(IEnumerable<Analytic> cores)
        {
          try
          {
            foreach (Analytic core in cores)
              await this.GetCreatedUpdatedAsync(core);
          }
          catch
          {
            throw;
          }
        }

        public void GetCreatedUpdated(Analytic analytic)
        {
          if (analytic == null)
            return;
          if (analytic.CreatedById != null && analytic.CreatedBy == null)
            analytic.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == analytic.CreatedById));
          if (analytic.UpdatedById == null || analytic.UpdatedBy != null)
            return;
          analytic.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == analytic.UpdatedById));
        }

        public async Task GetCreatedUpdatedAsync(Analytic analytic)
        {
          try
          {
            await Task.Run((System.Action) (() => this.GetCreatedUpdated(analytic)));
          }
          catch
          {
            throw;
          }
        }

        public void GetUser(Analytic analytic)
        {
          if (analytic == null)
            return;
          foreach (User user in (List<User>) _dataSet.Users.ToList())
          {
            if (analytic.UserId != null && user.Id == analytic.UserId)
            {
              analytic.User = user;
              break;
            }
          }
        }

        public async Task GetUserAsync(Analytic analytic)
        {
          try
          {
            await Task.Run((System.Action) (() => this.GetUser(analytic)));
          }
          catch
          {
            throw;
          }
        }

        public void GetUsers(IEnumerable<Analytic> analytics)
        {
          foreach (Analytic analytic in analytics)
            this.GetUser(analytic);
        }

        public async Task GetUsersAsync(IEnumerable<Analytic> analytics)
        {
          foreach (Analytic analytic in analytics)
            await this.GetUserAsync(analytic);
        }

        #endregion

        #region LogsTable-IO
        public string Validate(SilkFlo.Data.Core.Domain.Log core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(SilkFlo.Data.Core.Domain.Log core)
    {
      string messages = "";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public void Add(IEnumerable<SilkFlo.Data.Core.Domain.Log> logs)
    {
      try
      {
        foreach (SilkFlo.Data.Core.Domain.Log log in logs)
          this.Add(log);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<SilkFlo.Data.Core.Domain.Log> logs)
    {
      try
      {
        foreach (SilkFlo.Data.Core.Domain.Log log in logs)
          await this.AddAsync(log);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(SilkFlo.Data.Core.Domain.Log core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          SilkFlo.Data.Core.Domain.Log log = (SilkFlo.Data.Core.Domain.Log) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            log = _dataSet.Logs.SingleOrDefault<SilkFlo.Data.Core.Domain.Log>((Func<SilkFlo.Data.Core.Domain.Log, bool>) (x => x.Id == core.Id));
          if (log == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.Logs.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////log.Update(core);
                        ///

                        _dataSet.Entry(log).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        log.Update(core);
                        _dataSet.Logs.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          log = (SilkFlo.Data.Core.Domain.Log) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(SilkFlo.Data.Core.Domain.Log core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(SilkFlo.Data.Core.Domain.Log log, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(log, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(SilkFlo.Data.Core.Domain.Log log, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(log, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<SilkFlo.Data.Core.Domain.Log> logs, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (logs == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (SilkFlo.Data.Core.Domain.Log log in logs.ToList<SilkFlo.Data.Core.Domain.Log>())
        {
          dataStoreResult = this.Delete(log, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<SilkFlo.Data.Core.Domain.Log> logs, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (logs == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<SilkFlo.Data.Core.Domain.Log> lst = logs.ToList<SilkFlo.Data.Core.Domain.Log>();
        foreach (SilkFlo.Data.Core.Domain.Log log in lst)
        {
          SilkFlo.Data.Core.Domain.Log item = log;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (SilkFlo.Data.Core.Domain.Log) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(SilkFlo.Data.Core.Domain.Log log, Transaction transaction)
    {
      try
      {
        if (log.Id == null)
          return DataStoreResult.Success;
        SilkFlo.Data.Core.Domain.Log entity = _dataSet.Logs.SingleOrDefault<SilkFlo.Data.Core.Domain.Log>((Func<SilkFlo.Data.Core.Domain.Log, bool>) (x => x.Id == log.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(log, transaction);
        if (!log.CanDelete)
          throw new ChildDependencyException("The log (" + log.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.Logs.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(SilkFlo.Data.Core.Domain.Log log, Transaction transaction)
    {
      try
      {
        if (log.Id == null)
          return DataStoreResult.Success;
        SilkFlo.Data.Core.Domain.Log core = _dataSet.Logs.SingleOrDefault<SilkFlo.Data.Core.Domain.Log>((Func<SilkFlo.Data.Core.Domain.Log, bool>) (x => x.Id == log.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(log, transaction);
        if (log.CanDelete)
        {
          if (transaction == null)
            _dataSet.Logs.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The log (" + log.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteLog(string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.Logs.SingleOrDefault<SilkFlo.Data.Core.Domain.Log>((Func<SilkFlo.Data.Core.Domain.Log, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The log is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsyncLog(string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        SilkFlo.Data.Core.Domain.Log log = _dataSet.Logs.SingleOrDefault<SilkFlo.Data.Core.Domain.Log>((Func<SilkFlo.Data.Core.Domain.Log, bool>) (x => x.Id == Id));
        if (log == null)
          throw new NotFoundException("The log is not found");
        dataStoreResult = await this.DeleteAsync(log, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(SilkFlo.Data.Core.Domain.Log log, Transaction transaction)
    {
      if (log == null)
        return;
      log.CanDelete = true;
    }

    internal async Task RefreshCanDeleteAsync(SilkFlo.Data.Core.Domain.Log log, Transaction transaction)
    {
      if (log == null)
        return;
      log.CanDelete = true;
    }

    public SilkFlo.Data.Core.Domain.Log FindLog(string Id) => Id == null ? (SilkFlo.Data.Core.Domain.Log) null : _dataSet.Logs.SingleOrDefault<SilkFlo.Data.Core.Domain.Log>((Func<SilkFlo.Data.Core.Domain.Log, bool>) (x => x.Id == Id));

    public async Task<SilkFlo.Data.Core.Domain.Log> FindLogAsync(string Id)
    {
      SilkFlo.Data.Core.Domain.Log logAsync;
      try
      {
        logAsync = await Task.Run<SilkFlo.Data.Core.Domain.Log>((Func<SilkFlo.Data.Core.Domain.Log>) (() => this.FindLog(Id)));
      }
      catch
      {
        throw;
      }
      return logAsync;
    }

    public List<SilkFlo.Data.Core.Domain.Log> GetLogByDate(DateTime date) => _dataSet.Logs.Where<SilkFlo.Data.Core.Domain.Log>((Func<SilkFlo.Data.Core.Domain.Log, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<SilkFlo.Data.Core.Domain.Log>();

    public async Task<List<SilkFlo.Data.Core.Domain.Log>> GetLogByDateAsync(DateTime date)
    {
      List<SilkFlo.Data.Core.Domain.Log> logByDateAsync;
      try
      {
        logByDateAsync = await Task.Run<List<SilkFlo.Data.Core.Domain.Log>>((Func<List<SilkFlo.Data.Core.Domain.Log>>) (() => this.GetLogByDate(date)));
      }
      catch
      {
        throw;
      }
      return logByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<SilkFlo.Data.Core.Domain.Log> cores)
    {
      try
      {
        foreach (SilkFlo.Data.Core.Domain.Log core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<SilkFlo.Data.Core.Domain.Log> cores)
    {
      try
      {
        foreach (SilkFlo.Data.Core.Domain.Log core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(SilkFlo.Data.Core.Domain.Log log)
    {
      if (log == null)
        return;
      if (log.CreatedById != null && log.CreatedBy == null)
        log.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == log.CreatedById));
      if (log.UpdatedById == null || log.UpdatedBy != null)
        return;
      log.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == log.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(SilkFlo.Data.Core.Domain.Log log)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(log)));
      }
      catch
      {
        throw;
      }
    }

        #endregion

        #region MessageTable-IO
        public string Validate(Message core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(Message core)
    {
      string messages = "";
      if (core.Client == null)
      {
        if (string.IsNullOrWhiteSpace(core.ClientId))
        {
          messages += "Message.ClientId: Client missing; ";
        }
        else
        {
          Client parent = _dataSet.BusinessClients.SingleOrDefault<Client>((Func<Client, bool>) (x => x.Id == core.ClientId));
          if (parent == null)
            messages += "Message.ClientId: Client invalid; ";
          parent = (Client) null;
        }
      }
      if (string.IsNullOrWhiteSpace(core.Subject))
        messages += "Message.Subject: Subject missing; ";
      if (string.IsNullOrWhiteSpace(core.Text))
        messages += "Message.Text: Text missing; ";
      if (core.User == null)
      {
        if (string.IsNullOrWhiteSpace(core.UserId))
        {
          messages += "Message.UserId: User missing; ";
        }
        else
        {
          User parent = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (x => x.Id == core.UserId));
          if (parent == null)
            messages += "Message.UserId: User invalid; ";
          parent = (User) null;
        }
      }
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public void Add(IEnumerable<Message> messages)
    {
      try
      {
        foreach (Message message in messages)
          this.Add(message);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Message> messages)
    {
      try
      {
        foreach (Message message in messages)
          await this.AddAsync(message);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Message core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          Message message = (Message) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            message = _dataSet.Messages.SingleOrDefault<Message>((Func<Message, bool>) (x => x.Id == core.Id));
          if (message == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.Messages.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////message.Update(core);
                        ///

                        _dataSet.Entry(message).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        message.Update(core);
                        _dataSet.Messages.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          message = (Message) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Message core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Message message, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(message, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Message message, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(message, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Message> messages, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (messages == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Message message in messages.ToList<Message>())
        {
          dataStoreResult = this.Delete(message, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<Message> messages, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (messages == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Message> lst = messages.ToList<Message>();
        foreach (Message message in lst)
        {
          Message item = message;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Message) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Message message, Transaction transaction)
    {
      try
      {
        if (message.Id == null)
          return DataStoreResult.Success;
        Message entity = _dataSet.Messages.SingleOrDefault<Message>((Func<Message, bool>) (x => x.Id == message.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(message, transaction);
        if (!message.CanDelete)
          throw new ChildDependencyException("The message (" + message.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.Messages.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Message message, Transaction transaction)
    {
      try
      {
        if (message.Id == null)
          return DataStoreResult.Success;
        Message core = _dataSet.Messages.SingleOrDefault<Message>((Func<Message, bool>) (x => x.Id == message.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(message, transaction);
        if (message.CanDelete)
        {
          if (transaction == null)
            _dataSet.Messages.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The message (" + message.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteMessage(string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.Messages.SingleOrDefault<Message>((Func<Message, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The message is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsyncMessage(string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Message message = _dataSet.Messages.SingleOrDefault<Message>((Func<Message, bool>) (x => x.Id == Id));
        if (message == null)
          throw new NotFoundException("The message is not found");
        dataStoreResult = await this.DeleteAsync(message, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(Message message, Transaction transaction)
    {
      if (message == null)
        return;
      message.CanDelete = true;
    }

    internal async Task RefreshCanDeleteAsync(Message message, Transaction transaction)
    {
      if (message == null)
        return;
      message.CanDelete = true;
    }

    public Message FindMessage(string Id) => Id == null ? (Message) null : _dataSet.Messages.SingleOrDefault<Message>((Func<Message, bool>) (x => x.Id == Id));

    public async Task<Message> FindMessageAsync(string Id)
    {
      Message messageAsync;
      try
      {
        messageAsync = await Task.Run<Message>((Func<Message>) (() => this.FindMessage(Id)));
      }
      catch
      {
        throw;
      }
      return messageAsync;
    }

    public List<Message> GetMessageByDate(DateTime date) => _dataSet.Messages.Where<Message>((Func<Message, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Message>();

    public async Task<List<Message>> GetMessageByDateAsync(DateTime date)
    {
      List<Message> messageByDateAsync;
      try
      {
        messageByDateAsync = await Task.Run<List<Message>>((Func<List<Message>>) (() => this.GetMessageByDate(date)));
      }
      catch
      {
        throw;
      }
      return messageByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Message> cores)
    {
      try
      {
        foreach (Message core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Message> cores)
    {
      try
      {
        foreach (Message core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Message message)
    {
      if (message == null)
        return;
      if (message.CreatedById != null && message.CreatedBy == null)
        message.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == message.CreatedById));
      if (message.UpdatedById == null || message.UpdatedBy != null)
        return;
      message.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == message.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Message message)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(message)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClient(Message message)
    {
      if (message == null)
        return;
      foreach (Client businessClient in (List<Client>) _dataSet.BusinessClients.ToList())
      {
        if (message.ClientId != null && businessClient.Id == message.ClientId)
        {
          message.Client = businessClient;
          break;
        }
      }
    }

    public async Task GetBusinessClientAsync(Message message)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClient(message)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClients(IEnumerable<Message> messages)
    {
      foreach (Message message in messages)
        this.GetBusinessClient(message);
    }

    public async Task GetBusinessClientsAsync(IEnumerable<Message> messages)
    {
      foreach (Message message in messages)
        await this.GetBusinessClientAsync(message);
    }

    public void GetUser(Message message)
    {
      if (message == null)
        return;
      foreach (User user in (List<User>) _dataSet.Users.ToList())
      {
        if (message.UserId != null && user.Id == message.UserId)
        {
          message.User = user;
          break;
        }
      }
    }

    public async Task GetUserAsync(Message message)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetUser(message)));
      }
      catch
      {
        throw;
      }
    }

    public void GetUsers(IEnumerable<Message> messages)
    {
      foreach (Message message in messages)
        this.GetUser(message);
    }

    public async Task GetUsersAsync(IEnumerable<Message> messages)
    {
      foreach (Message message in messages)
        await this.GetUserAsync(message);
    }

        #endregion

        #region RolesTable-IO
        public string Validate(SilkFlo.Data.Core.Domain.Role core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(SilkFlo.Data.Core.Domain.Role core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Role.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(SilkFlo.Data.Core.Domain.Role core)
    {
      string str = "";
      if (_dataSet.Roles.ToList<SilkFlo.Data.Core.Domain.Role>().FirstOrDefault<SilkFlo.Data.Core.Domain.Role>((Func<SilkFlo.Data.Core.Domain.Role, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(SilkFlo.Data.Core.Domain.Role core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<SilkFlo.Data.Core.Domain.Role> roles)
    {
      try
      {
        foreach (SilkFlo.Data.Core.Domain.Role role in roles)
          this.Add(role);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<SilkFlo.Data.Core.Domain.Role> roles)
    {
      try
      {
        foreach (SilkFlo.Data.Core.Domain.Role role in roles)
          await this.AddAsync(role);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(SilkFlo.Data.Core.Domain.Role core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          SilkFlo.Data.Core.Domain.Role role = (SilkFlo.Data.Core.Domain.Role) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            role = _dataSet.Roles.SingleOrDefault<SilkFlo.Data.Core.Domain.Role>((Func<SilkFlo.Data.Core.Domain.Role, bool>) (x => x.Id == core.Id));
          if (role == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.Roles.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////role.Update(core);
                        ///

                        _dataSet.Entry(role).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        role.Update(core);
                        _dataSet.Roles.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          role = (SilkFlo.Data.Core.Domain.Role) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(SilkFlo.Data.Core.Domain.Role core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(SilkFlo.Data.Core.Domain.Role role, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(role, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(SilkFlo.Data.Core.Domain.Role role, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(role, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<SilkFlo.Data.Core.Domain.Role> roles, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (roles == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (SilkFlo.Data.Core.Domain.Role role in roles.ToList<SilkFlo.Data.Core.Domain.Role>())
        {
          dataStoreResult = this.Delete(role, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<SilkFlo.Data.Core.Domain.Role> roles, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (roles == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<SilkFlo.Data.Core.Domain.Role> lst = roles.ToList<SilkFlo.Data.Core.Domain.Role>();
        foreach (SilkFlo.Data.Core.Domain.Role role in lst)
        {
          SilkFlo.Data.Core.Domain.Role item = role;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (SilkFlo.Data.Core.Domain.Role) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(SilkFlo.Data.Core.Domain.Role role, Transaction transaction)
    {
      try
      {
        if (role.Id == null)
          return DataStoreResult.Success;
        SilkFlo.Data.Core.Domain.Role entity = _dataSet.Roles.SingleOrDefault<SilkFlo.Data.Core.Domain.Role>((Func<SilkFlo.Data.Core.Domain.Role, bool>) (x => x.Id == role.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.GetUserRoles(role);
        foreach (UserRole userRole in role.UserRoles)
        {
          int num = (int) this.Delete(userRole, transaction);
        }
        this.RefreshCanDelete(role, transaction);
        if (!role.CanDelete)
          throw new ChildDependencyException("The role (" + role.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.Roles.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(SilkFlo.Data.Core.Domain.Role role, Transaction transaction)
    {
      try
      {
        if (role.Id == null)
          return DataStoreResult.Success;
        SilkFlo.Data.Core.Domain.Role core = _dataSet.Roles.SingleOrDefault<SilkFlo.Data.Core.Domain.Role>((Func<SilkFlo.Data.Core.Domain.Role, bool>) (x => x.Id == role.Id));
        if (core == null)
          return DataStoreResult.Success;
        this.GetUserRoles(role);
        foreach (UserRole m in role.UserRoles)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        await this.RefreshCanDeleteAsync(role, transaction);
        if (role.CanDelete)
        {
          if (transaction == null)
            _dataSet.Roles.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The role (" + role.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteRole(string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.Roles.SingleOrDefault<SilkFlo.Data.Core.Domain.Role>((Func<SilkFlo.Data.Core.Domain.Role, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The role is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsyncRole(string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        SilkFlo.Data.Core.Domain.Role role = _dataSet.Roles.SingleOrDefault<SilkFlo.Data.Core.Domain.Role>((Func<SilkFlo.Data.Core.Domain.Role, bool>) (x => x.Id == Id));
        if (role == null)
          throw new NotFoundException("The role is not found");
        dataStoreResult = await this.DeleteAsync(role, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(SilkFlo.Data.Core.Domain.Role role, Transaction transaction)
    {
      if (role == null)
        return;
      if (role.Id == null)
      {
        role.CanDelete = true;
      }
      else
      {
        this.GetUserRoles(role, transaction);
        role.CanDelete = role.UserRoles.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(SilkFlo.Data.Core.Domain.Role role, Transaction transaction)
    {
      if (role == null)
        return;
      role.CanDelete = true;
    }

    public SilkFlo.Data.Core.Domain.Role FindRole(string Id) => Id == null ? (SilkFlo.Data.Core.Domain.Role) null : _dataSet.Roles.SingleOrDefault<SilkFlo.Data.Core.Domain.Role>((Func<SilkFlo.Data.Core.Domain.Role, bool>) (x => x.Id == Id));

    public async Task<SilkFlo.Data.Core.Domain.Role> FindRoleAsync(string Id)
    {
      SilkFlo.Data.Core.Domain.Role roleAsync;
      try
      {
        roleAsync = await Task.Run<SilkFlo.Data.Core.Domain.Role>((Func<SilkFlo.Data.Core.Domain.Role>) (() => this.FindRole(Id)));
      }
      catch
      {
        throw;
      }
      return roleAsync;
    }

    public List<SilkFlo.Data.Core.Domain.Role> GetRoleByDate(DateTime date) => _dataSet.Roles.Where<SilkFlo.Data.Core.Domain.Role>((Func<SilkFlo.Data.Core.Domain.Role, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<SilkFlo.Data.Core.Domain.Role>();

    public async Task<List<SilkFlo.Data.Core.Domain.Role>> GetRoleByDateAsync(DateTime date)
    {
      List<SilkFlo.Data.Core.Domain.Role> roleByDateAsync;
      try
      {
        roleByDateAsync = await Task.Run<List<SilkFlo.Data.Core.Domain.Role>>((Func<List<SilkFlo.Data.Core.Domain.Role>>) (() => this.GetRoleByDate(date)));
      }
      catch
      {
        throw;
      }
      return roleByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<SilkFlo.Data.Core.Domain.Role> cores)
    {
      try
      {
        foreach (SilkFlo.Data.Core.Domain.Role core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<SilkFlo.Data.Core.Domain.Role> cores)
    {
      try
      {
        foreach (SilkFlo.Data.Core.Domain.Role core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(SilkFlo.Data.Core.Domain.Role role)
    {
      if (role == null)
        return;
      if (role.CreatedById != null && role.CreatedBy == null)
        role.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == role.CreatedById));
      if (role.UpdatedById == null || role.UpdatedBy != null)
        return;
      role.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == role.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(SilkFlo.Data.Core.Domain.Role role)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(role)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetUserRoles(SilkFlo.Data.Core.Domain.Role role) => this.GetUserRoles(role, (Transaction) null);

    internal async Task GetUserRolesAsync(SilkFlo.Data.Core.Domain.Role role) => await this.GetUserRolesAsync(role, (Transaction) null);

    internal void GetUserRoles(SilkFlo.Data.Core.Domain.Role role, Transaction transaction)
    {
      if (role != null)
        role.UserRoles = _dataSet.UserRoles.Where<UserRole>((Func<UserRole, bool>) (m => m.RoleId == role.Id)).ToList<UserRole>();
      if (transaction == null)
        return;
      for (int index = role.UserRoles.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) role.UserRoles[index]) == Action.Delete)
          role.UserRoles.Remove(role.UserRoles[index]);
      }
    }

    internal async Task GetUserRolesAsync(SilkFlo.Data.Core.Domain.Role role, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetUserRoles(role, transaction)));
      }
      catch
      {
        throw;
      }
    }
        #endregion

        #region UsersTable-IO
        public string Validate(User core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(User core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Email))
        messages += "User.Email: Email Address missing; ";
      if (string.IsNullOrWhiteSpace(core.FirstName))
        messages += "User.FirstName: First Name missing; ";
      if (string.IsNullOrWhiteSpace(core.LastName))
        messages += "User.LastName: Last Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(User core)
    {
      string str = "";
      if (_dataSet.Users.ToList<User>().FirstOrDefault<User>((Func<User, bool>) (x => x.Id != (core.Id ?? "") && x.Email.ToLower() == core.Email?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this email Address.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(User core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<User> users)
    {
      try
      {
        foreach (User user in users)
          this.Add(user);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<User> users)
    {
      try
      {
        foreach (User user in users)
          await this.AddAsync(user);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(User core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          User user = (User) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            user = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (x => x.Id == core.Id));
          if (user == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.Users.Add(core);
          }
          else
          {
                        _dataSet.Entry(user).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
            core.UpdatedById = this.UserId;
                        user.Update(core);
                        _dataSet.Users.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
          }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          user = (User) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(User core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(User user, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(user, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(User user, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(user, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<User> users, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (users == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (User user in users.ToList<User>())
        {
          dataStoreResult = this.Delete(user, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<User> users, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (users == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<User> lst = users.ToList<User>();
        foreach (User user in lst)
        {
          User item = user;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (User) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(User user, Transaction transaction)
    {
      try
      {
        if (user.Id == null)
          return DataStoreResult.Success;
        User entity = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (x => x.Id == user.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.GetAnalytics(user);
        foreach (Analytic analytic in user.Analytics)
        {
          int num = (int) this.Delete(analytic, transaction);
        }
        this.GetBusinessCollaborators(user);
        foreach (Collaborator collaborator in user.Collaborators)
        {
          int num = (int) this.Delete(collaborator, transaction);
        }
        this.GetBusinessInvitedCollaborators(user);
        foreach (Collaborator invitedCollaborator in user.InvitedCollaborators)
        {
          int num = (int) this.Delete(invitedCollaborator, transaction);
        }
        this.GetBusinessCommentsSend(user);
        foreach (Comment comment in user.CommentsSend)
        {
          int num = (int) this.Delete(comment, transaction);
        }
        this.GetBusinessFollows(user);
        foreach (Follow follow in user.Follows)
        {
          int num = (int) this.Delete(follow, transaction);
        }
        this.GetAgencyManageTenants(user);
        foreach (ManageTenant manageTenant in user.ManageTenants)
        {
          int num = (int) this.Delete(manageTenant, transaction);
        }
        this.GetMessages(user);
        foreach (Message message in user.Messages)
        {
          int num = (int) this.Delete(message, transaction);
        }
        this.GetBusinessRecipients(user);
        foreach (Recipient recipient in user.Recipients)
        {
          int num = (int) this.Delete(recipient, transaction);
        }
        this.GetUserAchievements(user);
        foreach (UserAchievement userAchievement in user.UserAchievements)
        {
          int num = (int) this.Delete(userAchievement, transaction);
        }
        this.GetBusinessUserAuthorisations(user);
        foreach (UserAuthorisation userAuthorisation in user.UserAuthorisations)
        {
          int num = (int) this.Delete(userAuthorisation, transaction);
        }
        this.GetUserBadges(user);
        foreach (UserBadge userBadge in user.UserBadges)
        {
          int num = (int) this.Delete(userBadge, transaction);
        }
        this.GetUserRoles(user);
        foreach (UserRole userRole in user.UserRoles)
        {
          int num = (int) this.Delete(userRole, transaction);
        }
        this.GetBusinessVotes(user);
        foreach (Vote vote in user.Votes)
        {
          int num = (int) this.Delete(vote, transaction);
        }
        this.RefreshCanDelete(user, transaction);
        if (user.CanDelete)
        {
          this.DeleteCreatedBy(transaction, user);
          if (transaction == null)
            _dataSet.Users.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The user (" + user.ToString() + ") contains ";
        if (user.AccountOwners.Count > 0)
          str += "clients, ";
        if (user.Ideas.Count > 0)
          str += "ideas, ";
        if (user.TeamMembers.Count > 0)
          str += "users, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(User user, Transaction transaction)
    {
      try
      {
        if (user.Id == null)
          return DataStoreResult.Success;
        User core = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (x => x.Id == user.Id));
        if (core == null)
          return DataStoreResult.Success;
        this.GetAnalytics(user);
        foreach (Analytic m in user.Analytics)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessCollaborators(user);
        foreach (Collaborator m in user.Collaborators)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessInvitedCollaborators(user);
        foreach (Collaborator m in user.InvitedCollaborators)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessCommentsSend(user);
        foreach (Comment m in user.CommentsSend)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessFollows(user);
        foreach (Follow m in user.Follows)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetAgencyManageTenants(user);
        foreach (ManageTenant m in user.ManageTenants)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetMessages(user);
        foreach (Message m in user.Messages)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessRecipients(user);
        foreach (Recipient m in user.Recipients)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetUserAchievements(user);
        foreach (UserAchievement m in user.UserAchievements)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessUserAuthorisations(user);
        foreach (UserAuthorisation m in user.UserAuthorisations)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetUserBadges(user);
        foreach (UserBadge m in user.UserBadges)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetUserRoles(user);
        foreach (UserRole m in user.UserRoles)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessVotes(user);
        foreach (Vote m in user.Votes)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        await this.RefreshCanDeleteAsync(user, transaction);
        if (user.CanDelete)
        {
          DataStoreResult dataStoreResult = await this.DeleteCreatedByAsync(transaction, user);
          if (transaction == null)
            _dataSet.Users.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The user (" + user.ToString() + ") contains ";
        if (user.AccountOwners.Count > 0)
          erorrMessage += "clients, ";
        if (user.Ideas.Count > 0)
          erorrMessage += "ideas, ";
        if (user.TeamMembers.Count > 0)
          erorrMessage += "users, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteUser(string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The user is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsyncUser(string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        User user = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (x => x.Id == Id));
        if (user == null)
          throw new NotFoundException("The user is not found");
        dataStoreResult = await this.DeleteAsync(user, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(User user, Transaction transaction)
    {
      if (user == null)
        return;
      if (user.Id == null)
      {
        user.CanDelete = true;
      }
      else
      {
        this.GetAnalytics(user, transaction);
        this.GetBusinessAccountOwners(user, transaction);
        this.GetBusinessCollaborators(user, transaction);
        this.GetBusinessInvitedCollaborators(user, transaction);
        this.GetBusinessCommentsSend(user, transaction);
        this.GetBusinessFollows(user, transaction);
        this.GetBusinessIdeas(user, transaction);
        this.GetAgencyManageTenants(user, transaction);
        this.GetMessages(user, transaction);
        this.GetBusinessRecipients(user, transaction);
        this.GetTeamMembers(user, transaction);
        this.GetUserAchievements(user, transaction);
        this.GetBusinessUserAuthorisations(user, transaction);
        this.GetUserBadges(user, transaction);
        this.GetUserRoles(user, transaction);
        this.GetBusinessVotes(user, transaction);
        user.CanDelete = user.Analytics.Count + user.AccountOwners.Count + user.Collaborators.Count + user.InvitedCollaborators.Count + user.CommentsSend.Count + user.Follows.Count + user.Ideas.Count + user.ManageTenants.Count + user.Messages.Count + user.Recipients.Count + user.TeamMembers.Count + user.UserAchievements.Count + user.UserAuthorisations.Count + user.UserBadges.Count + user.UserRoles.Count + user.Votes.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(User user, Transaction transaction)
    {
      if (user == null)
        return;
      if (user.Id == null)
      {
        user.CanDelete = true;
      }
      else
      {
        await this.GetBusinessAccountOwnersAsync(user, transaction);
        await this.GetBusinessIdeasAsync(user, transaction);
        await this.GetTeamMembersAsync(user, transaction);
        user.CanDelete = user.AccountOwners.Count + user.Ideas.Count + user.TeamMembers.Count <= 0;
      }
    }

    public User FindUser(string Id) => Id == null ? (User) null : _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (x => x.Id == Id));

    public async Task<User> FindUserAsync(string Id)
    {
      User userAsync;
      try
      {
        userAsync = await Task.Run<User>((Func<User>) (() => this.FindUser(Id)));
      }
      catch
      {
        throw;
      }
      return userAsync;
    }

    public List<User> GetUserByDate(DateTime date) => _dataSet.Users.Where<User>((Func<User, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<User>();

    public async Task<List<User>> GetUserByDateAsync(DateTime date)
    {
      List<User> userByDateAsync;
      try
      {
        userByDateAsync = await Task.Run<List<User>>((Func<List<User>>) (() => this.GetUserByDate(date)));
      }
      catch
      {
        throw;
      }
      return userByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<User> cores)
    {
      try
      {
        foreach (User core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<User> cores)
    {
      try
      {
        foreach (User core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(User user)
    {
      if (user == null)
        return;
      if (user.CreatedById != null && user.CreatedBy == null)
        user.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == user.CreatedById));
      if (user.UpdatedById == null || user.UpdatedBy != null)
        return;
      user.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == user.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(User user)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(user)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetAnalytics(User user) => this.GetAnalytics(user, (Transaction) null);

    internal async Task GetAnalyticsAsync(User user) => await this.GetAnalyticsAsync(user, (Transaction) null);

    internal void GetAnalytics(User user, Transaction transaction)
    {
      if (user != null)
        user.Analytics = _dataSet.Analytics.Where<Analytic>((Func<Analytic, bool>) (m => m.UserId == user.Id)).ToList<Analytic>();
      if (transaction == null)
        return;
      for (int index = user.Analytics.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) user.Analytics[index]) == Action.Delete)
          user.Analytics.Remove(user.Analytics[index]);
      }
    }

    internal async Task GetAnalyticsAsync(User user, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetAnalytics(user, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessAccountOwners(User accountOwner) => this.GetBusinessAccountOwners(accountOwner, (Transaction) null);

    internal async Task GetBusinessAccountOwnersAsync(User accountOwner) => await this.GetBusinessAccountOwnersAsync(accountOwner, (Transaction) null);

    internal void GetBusinessAccountOwners(User accountOwner, Transaction transaction)
    {
      if (accountOwner != null)
        accountOwner.AccountOwners = _dataSet.BusinessClients.Where<Client>((Func<Client, bool>) (m => m.AccountOwnerId == accountOwner.Id)).ToList<Client>();
      if (transaction == null)
        return;
      for (int index = accountOwner.AccountOwners.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) accountOwner.AccountOwners[index]) == Action.Delete)
          accountOwner.AccountOwners.Remove(accountOwner.AccountOwners[index]);
      }
    }

    internal async Task GetBusinessAccountOwnersAsync(User accountOwner, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessAccountOwners(accountOwner, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessCollaborators(User user) => this.GetBusinessCollaborators(user, (Transaction) null);

    internal async Task GetBusinessCollaboratorsAsync(User user) => await this.GetBusinessCollaboratorsAsync(user, (Transaction) null);

    internal void GetBusinessCollaborators(User user, Transaction transaction)
    {
      if (user != null)
        user.Collaborators = _dataSet.BusinessCollaborators.Where<Collaborator>((Func<Collaborator, bool>) (m => m.UserId == user.Id)).ToList<Collaborator>();
      if (transaction == null)
        return;
      for (int index = user.Collaborators.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) user.Collaborators[index]) == Action.Delete)
          user.Collaborators.Remove(user.Collaborators[index]);
      }
    }

    internal async Task GetBusinessCollaboratorsAsync(User user, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessCollaborators(user, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessInvitedCollaborators(User invitedBy) => this.GetBusinessInvitedCollaborators(invitedBy, (Transaction) null);

    internal async Task GetBusinessInvitedCollaboratorsAsync(User invitedBy) => await this.GetBusinessInvitedCollaboratorsAsync(invitedBy, (Transaction) null);

    internal void GetBusinessInvitedCollaborators(User invitedBy, Transaction transaction)
    {
      if (invitedBy != null)
        invitedBy.InvitedCollaborators = _dataSet.BusinessCollaborators.Where<Collaborator>((Func<Collaborator, bool>) (m => m.InvitedById == invitedBy.Id)).ToList<Collaborator>();
      if (transaction == null)
        return;
      for (int index = invitedBy.InvitedCollaborators.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) invitedBy.InvitedCollaborators[index]) == Action.Delete)
          invitedBy.InvitedCollaborators.Remove(invitedBy.InvitedCollaborators[index]);
      }
    }

    internal async Task GetBusinessInvitedCollaboratorsAsync(User invitedBy, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessInvitedCollaborators(invitedBy, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessCommentsSend(User sender) => this.GetBusinessCommentsSend(sender, (Transaction) null);

    internal async Task GetBusinessCommentsSendAsync(User sender) => await this.GetBusinessCommentsSendAsync(sender, (Transaction) null);

    internal void GetBusinessCommentsSend(User sender, Transaction transaction)
    {
      if (sender != null)
        sender.CommentsSend = _dataSet.BusinessComments.Where<Comment>((Func<Comment, bool>) (m => m.SenderId == sender.Id)).ToList<Comment>();
      if (transaction == null)
        return;
      for (int index = sender.CommentsSend.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) sender.CommentsSend[index]) == Action.Delete)
          sender.CommentsSend.Remove(sender.CommentsSend[index]);
      }
    }

    internal async Task GetBusinessCommentsSendAsync(User sender, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessCommentsSend(sender, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessFollows(User user) => this.GetBusinessFollows(user, (Transaction) null);

    internal async Task GetBusinessFollowsAsync(User user) => await this.GetBusinessFollowsAsync(user, (Transaction) null);

    internal void GetBusinessFollows(User user, Transaction transaction)
    {
      if (user != null)
        user.Follows = _dataSet.BusinessFollows.Where<Follow>((Func<Follow, bool>) (m => m.UserId == user.Id)).ToList<Follow>();
      if (transaction == null)
        return;
      for (int index = user.Follows.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) user.Follows[index]) == Action.Delete)
          user.Follows.Remove(user.Follows[index]);
      }
    }

    internal async Task GetBusinessFollowsAsync(User user, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessFollows(user, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeas(User processOwner) => this.GetBusinessIdeas(processOwner, (Transaction) null);

    internal async Task GetBusinessIdeasAsync(User processOwner) => await this.GetBusinessIdeasAsync(processOwner, (Transaction) null);

    internal void GetBusinessIdeas(User processOwner, Transaction transaction)
    {
      if (processOwner != null)
        processOwner.Ideas = _dataSet.BusinessIdeas.Where<Idea>((Func<Idea, bool>) (m => m.ProcessOwnerId == processOwner.Id)).ToList<Idea>();
      if (transaction == null)
        return;
      for (int index = processOwner.Ideas.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) processOwner.Ideas[index]) == Action.Delete)
          processOwner.Ideas.Remove(processOwner.Ideas[index]);
      }
    }

    internal async Task GetBusinessIdeasAsync(User processOwner, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeas(processOwner, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetAgencyManageTenants(User user) => this.GetAgencyManageTenants(user, (Transaction) null);

    internal async Task GetAgencyManageTenantsAsync(User user) => await this.GetAgencyManageTenantsAsync(user, (Transaction) null);

    internal void GetAgencyManageTenants(User user, Transaction transaction)
    {
      if (user != null)
        user.ManageTenants = _dataSet.AgencyManageTenants.Where<ManageTenant>((Func<ManageTenant, bool>) (m => m.UserId == user.Id)).ToList<ManageTenant>();
      if (transaction == null)
        return;
      for (int index = user.ManageTenants.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) user.ManageTenants[index]) == Action.Delete)
          user.ManageTenants.Remove(user.ManageTenants[index]);
      }
    }

    internal async Task GetAgencyManageTenantsAsync(User user, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetAgencyManageTenants(user, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetMessages(User user) => this.GetMessages(user, (Transaction) null);

    internal async Task GetMessagesAsync(User user) => await this.GetMessagesAsync(user, (Transaction) null);

    internal void GetMessages(User user, Transaction transaction)
    {
      if (user != null)
        user.Messages = _dataSet.Messages.Where<Message>((Func<Message, bool>) (m => m.UserId == user.Id)).ToList<Message>();
      if (transaction == null)
        return;
      for (int index = user.Messages.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) user.Messages[index]) == Action.Delete)
          user.Messages.Remove(user.Messages[index]);
      }
    }

    internal async Task GetMessagesAsync(User user, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetMessages(user, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessRecipients(User user) => this.GetBusinessRecipients(user, (Transaction) null);

    internal async Task GetBusinessRecipientsAsync(User user) => await this.GetBusinessRecipientsAsync(user, (Transaction) null);

    internal void GetBusinessRecipients(User user, Transaction transaction)
    {
      if (user != null)
        user.Recipients = _dataSet.BusinessRecipients.Where<Recipient>((Func<Recipient, bool>) (m => m.UserId == user.Id)).ToList<Recipient>();
      if (transaction == null)
        return;
      for (int index = user.Recipients.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) user.Recipients[index]) == Action.Delete)
          user.Recipients.Remove(user.Recipients[index]);
      }
    }

    internal async Task GetBusinessRecipientsAsync(User user, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessRecipients(user, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetTeamMembers(User manager) => this.GetTeamMembers(manager, (Transaction) null);

    internal async Task GetTeamMembersAsync(User manager) => await this.GetTeamMembersAsync(manager, (Transaction) null);

    internal void GetTeamMembers(User manager, Transaction transaction)
    {
      if (manager != null)
        manager.TeamMembers = _dataSet.Users.Where<User>((Func<User, bool>) (m => m.ManagerId == manager.Id)).ToList<User>();
      if (transaction == null)
        return;
      for (int index = manager.TeamMembers.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) manager.TeamMembers[index]) == Action.Delete)
          manager.TeamMembers.Remove(manager.TeamMembers[index]);
      }
    }

    internal async Task GetTeamMembersAsync(User manager, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetTeamMembers(manager, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetUserAchievements(User user) => this.GetUserAchievements(user, (Transaction) null);

    internal async Task GetUserAchievementsAsync(User user) => await this.GetUserAchievementsAsync(user, (Transaction) null);

    internal void GetUserAchievements(User user, Transaction transaction)
    {
      if (user != null)
        user.UserAchievements = _dataSet.UserAchievements.Where<UserAchievement>((Func<UserAchievement, bool>) (m => m.UserId == user.Id)).ToList<UserAchievement>();
      if (transaction == null)
        return;
      for (int index = user.UserAchievements.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) user.UserAchievements[index]) == Action.Delete)
          user.UserAchievements.Remove(user.UserAchievements[index]);
      }
    }

    internal async Task GetUserAchievementsAsync(User user, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetUserAchievements(user, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessUserAuthorisations(User user) => this.GetBusinessUserAuthorisations(user, (Transaction) null);

    internal async Task GetBusinessUserAuthorisationsAsync(User user) => await this.GetBusinessUserAuthorisationsAsync(user, (Transaction) null);

    internal void GetBusinessUserAuthorisations(User user, Transaction transaction)
    {
      if (user != null)
        user.UserAuthorisations = _dataSet.BusinessUserAuthorisations.Where<UserAuthorisation>((Func<UserAuthorisation, bool>) (m => m.UserId == user.Id)).ToList<UserAuthorisation>();
      if (transaction == null)
        return;
      for (int index = user.UserAuthorisations.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) user.UserAuthorisations[index]) == Action.Delete)
          user.UserAuthorisations.Remove(user.UserAuthorisations[index]);
      }
    }

    internal async Task GetBusinessUserAuthorisationsAsync(User user, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessUserAuthorisations(user, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetUserBadges(User user) => this.GetUserBadges(user, (Transaction) null);

    internal async Task GetUserBadgesAsync(User user) => await this.GetUserBadgesAsync(user, (Transaction) null);

    internal void GetUserBadges(User user, Transaction transaction)
    {
      if (user != null)
        user.UserBadges = _dataSet.UserBadges.Where<UserBadge>((Func<UserBadge, bool>) (m => m.UserId == user.Id)).ToList<UserBadge>();
      if (transaction == null)
        return;
      for (int index = user.UserBadges.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) user.UserBadges[index]) == Action.Delete)
          user.UserBadges.Remove(user.UserBadges[index]);
      }
    }

    internal async Task GetUserBadgesAsync(User user, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetUserBadges(user, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetUserRoles(User user) => this.GetUserRoles(user, (Transaction) null);

    internal async Task GetUserRolesAsync(User user) => await this.GetUserRolesAsync(user, (Transaction) null);

    internal void GetUserRoles(User user, Transaction transaction)
    {
      if (user != null)
        user.UserRoles = _dataSet.UserRoles.Where<UserRole>((Func<UserRole, bool>) (m => m.UserId == user.Id)).ToList<UserRole>();
      if (transaction == null)
        return;
      for (int index = user.UserRoles.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) user.UserRoles[index]) == Action.Delete)
          user.UserRoles.Remove(user.UserRoles[index]);
      }
    }

    internal async Task GetUserRolesAsync(User user, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetUserRoles(user, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessVotes(User user) => this.GetBusinessVotes(user, (Transaction) null);

    internal async Task GetBusinessVotesAsync(User user) => await this.GetBusinessVotesAsync(user, (Transaction) null);

    internal void GetBusinessVotes(User user, Transaction transaction)
    {
      if (user != null)
        user.Votes = _dataSet.BusinessVotes.Where<Vote>((Func<Vote, bool>) (m => m.UserId == user.Id)).ToList<Vote>();
      if (transaction == null)
        return;
      for (int index = user.Votes.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) user.Votes[index]) == Action.Delete)
          user.Votes.Remove(user.Votes[index]);
      }
    }

    internal async Task GetBusinessVotesAsync(User user, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessVotes(user, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClient(User user)
    {
      if (user == null)
        return;
      foreach (Client businessClient in (List<Client>) _dataSet.BusinessClients.ToList())
      {
        if (user.ClientId != null && businessClient.Id == user.ClientId)
        {
          user.Client = businessClient;
          break;
        }
      }
    }

    public async Task GetBusinessClientAsync(User user)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClient(user)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClients(IEnumerable<User> users)
    {
      foreach (User user in users)
        this.GetBusinessClient(user);
    }

    public async Task GetBusinessClientsAsync(IEnumerable<User> users)
    {
      foreach (User user in users)
        await this.GetBusinessClientAsync(user);
    }

    public void GetBusinessDepartment(User user)
    {
      if (user == null)
        return;
      foreach (Department businessDepartment in (List<Department>) _dataSet.BusinessDepartments.ToList())
      {
        if (user.DepartmentId != null && businessDepartment.Id == user.DepartmentId)
        {
          user.Department = businessDepartment;
          break;
        }
      }
    }

    public async Task GetBusinessDepartmentAsync(User user)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessDepartment(user)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessDepartments(IEnumerable<User> users)
    {
      foreach (User user in users)
        this.GetBusinessDepartment(user);
    }

    public async Task GetBusinessDepartmentsAsync(IEnumerable<User> users)
    {
      foreach (User user in users)
        await this.GetBusinessDepartmentAsync(user);
    }

    public void GetBusinessLocation(User user)
    {
      if (user == null)
        return;
      foreach (Location businessLocation in (List<Location>) _dataSet.BusinessLocations.ToList())
      {
        if (user.LocationId != null && businessLocation.Id == user.LocationId)
        {
          user.Location = businessLocation;
          break;
        }
      }
    }

    public async Task GetBusinessLocationAsync(User user)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessLocation(user)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessLocations(IEnumerable<User> users)
    {
      foreach (User user in users)
        this.GetBusinessLocation(user);
    }

    public async Task GetBusinessLocationsAsync(IEnumerable<User> users)
    {
      foreach (User user in users)
        await this.GetBusinessLocationAsync(user);
    }

    public void GetManager(User user)
    {
      if (user == null)
        return;
      foreach (User user1 in (List<User>) _dataSet.Users.ToList())
      {
        if (user.ManagerId != null && user1.Id == user.ManagerId)
        {
          user.Manager = user1;
          break;
        }
      }
    }

    public async Task GetManagerAsync(User user)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetManager(user)));
      }
      catch
      {
        throw;
      }
    }

    public void GetManagers(IEnumerable<User> users)
    {
      foreach (User user in users)
        this.GetManager(user);
    }

    public async Task GetManagersAsync(IEnumerable<User> users)
    {
      foreach (User user in users)
        await this.GetManagerAsync(user);
    }
        #endregion

        #region UserAcheivementsTable-IO
        public string Validate(UserAchievement core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(UserAchievement core)
    {
      string messages = "";
      if (core.Achievement == null)
      {
        if (string.IsNullOrWhiteSpace(core.AchievementId))
        {
          messages += "UserAchievement.AchievementId: Achievement missing; ";
        }
        else
        {
          Achievement parent = _dataSet.SharedAchievements.SingleOrDefault<Achievement>((Func<Achievement, bool>) (x => x.Id == core.AchievementId));
          if (parent == null)
            messages += "UserAchievement.AchievementId: Achievement invalid; ";
          parent = (Achievement) null;
        }
      }
      if (core.User == null)
      {
        if (string.IsNullOrWhiteSpace(core.UserId))
        {
          messages += "UserAchievement.UserId: User missing; ";
        }
        else
        {
          User parent = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (x => x.Id == core.UserId));
          if (parent == null)
            messages += "UserAchievement.UserId: User invalid; ";
          parent = (User) null;
        }
      }
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public void Add(IEnumerable<UserAchievement> userAchievements)
    {
      try
      {
        foreach (UserAchievement userAchievement in userAchievements)
          this.Add(userAchievement);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<UserAchievement> userAchievements)
    {
      try
      {
        foreach (UserAchievement userAchievement in userAchievements)
          await this.AddAsync(userAchievement);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(UserAchievement core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          UserAchievement userAchievement = (UserAchievement) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            userAchievement = _dataSet.UserAchievements.SingleOrDefault<UserAchievement>((Func<UserAchievement, bool>) (x => x.Id == core.Id));
          if (userAchievement == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.UserAchievements.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////userAchievement.Update(core);
                        ///

                        _dataSet.Entry(userAchievement).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        userAchievement.Update(core);
                        _dataSet.UserAchievements.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          userAchievement = (UserAchievement) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(UserAchievement core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(UserAchievement userAchievement, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(userAchievement, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(UserAchievement userAchievement, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(userAchievement, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<UserAchievement> userAchievements, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (userAchievements == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (UserAchievement userAchievement in userAchievements.ToList<UserAchievement>())
        {
          dataStoreResult = this.Delete(userAchievement, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<UserAchievement> userAchievements, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (userAchievements == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<UserAchievement> lst = userAchievements.ToList<UserAchievement>();
        foreach (UserAchievement userAchievement in lst)
        {
          UserAchievement item = userAchievement;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (UserAchievement) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(UserAchievement userAchievement, Transaction transaction)
    {
      try
      {
        if (userAchievement.Id == null)
          return DataStoreResult.Success;
        UserAchievement entity = _dataSet.UserAchievements.SingleOrDefault<UserAchievement>((Func<UserAchievement, bool>) (x => x.Id == userAchievement.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(userAchievement, transaction);
        if (!userAchievement.CanDelete)
          throw new ChildDependencyException("The achievement (" + userAchievement.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.UserAchievements.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(UserAchievement userAchievement, Transaction transaction)
    {
      try
      {
        if (userAchievement.Id == null)
          return DataStoreResult.Success;
        UserAchievement core = _dataSet.UserAchievements.SingleOrDefault<UserAchievement>((Func<UserAchievement, bool>) (x => x.Id == userAchievement.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(userAchievement, transaction);
        if (userAchievement.CanDelete)
        {
          if (transaction == null)
            _dataSet.UserAchievements.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The achievement (" + userAchievement.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteUserAchievement(string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.UserAchievements.SingleOrDefault<UserAchievement>((Func<UserAchievement, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The userAchievement is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsyncUserAchievement(string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        UserAchievement userAchievement = _dataSet.UserAchievements.SingleOrDefault<UserAchievement>((Func<UserAchievement, bool>) (x => x.Id == Id));
        if (userAchievement == null)
          throw new NotFoundException("The userAchievement is not found");
        dataStoreResult = await this.DeleteAsync(userAchievement, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(UserAchievement userAchievement, Transaction transaction)
    {
      if (userAchievement == null)
        return;
      userAchievement.CanDelete = true;
    }

    internal async Task RefreshCanDeleteAsync(UserAchievement userAchievement, Transaction transaction)
    {
      if (userAchievement == null)
        return;
      userAchievement.CanDelete = true;
    }

    public UserAchievement FindUserAchievement(string Id) => Id == null ? (UserAchievement) null : _dataSet.UserAchievements.SingleOrDefault<UserAchievement>((Func<UserAchievement, bool>) (x => x.Id == Id));

    public async Task<UserAchievement> FindUserAchievementAsync(string Id)
    {
      UserAchievement achievementAsync;
      try
      {
        achievementAsync = await Task.Run<UserAchievement>((Func<UserAchievement>) (() => this.FindUserAchievement(Id)));
      }
      catch
      {
        throw;
      }
      return achievementAsync;
    }

    public List<UserAchievement> GetUserAchievementByDate(DateTime date) => _dataSet.UserAchievements.Where<UserAchievement>((Func<UserAchievement, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<UserAchievement>();

    public async Task<List<UserAchievement>> GetUserAchievementByDateAsync(DateTime date)
    {
      List<UserAchievement> achievementByDateAsync;
      try
      {
        achievementByDateAsync = await Task.Run<List<UserAchievement>>((Func<List<UserAchievement>>) (() => this.GetUserAchievementByDate(date)));
      }
      catch
      {
        throw;
      }
      return achievementByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<UserAchievement> cores)
    {
      try
      {
        foreach (UserAchievement core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<UserAchievement> cores)
    {
      try
      {
        foreach (UserAchievement core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(UserAchievement userAchievement)
    {
      if (userAchievement == null)
        return;
      if (userAchievement.CreatedById != null && userAchievement.CreatedBy == null)
        userAchievement.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == userAchievement.CreatedById));
      if (userAchievement.UpdatedById == null || userAchievement.UpdatedBy != null)
        return;
      userAchievement.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == userAchievement.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(UserAchievement userAchievement)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(userAchievement)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedAchievement(UserAchievement userAchievement)
    {
      if (userAchievement == null)
        return;
      foreach (Achievement sharedAchievement in (List<Achievement>) _dataSet.SharedAchievements.ToList())
      {
        if (userAchievement.AchievementId != null && sharedAchievement.Id == userAchievement.AchievementId)
        {
          userAchievement.Achievement = sharedAchievement;
          break;
        }
      }
    }

    public async Task GetSharedAchievementAsync(UserAchievement userAchievement)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedAchievement(userAchievement)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedAchievements(IEnumerable<UserAchievement> userAchievements)
    {
      foreach (UserAchievement userAchievement in userAchievements)
        this.GetSharedAchievement(userAchievement);
    }

    public async Task GetSharedAchievementsAsync(IEnumerable<UserAchievement> userAchievements)
    {
      foreach (UserAchievement userAchievement in userAchievements)
        await this.GetSharedAchievementAsync(userAchievement);
    }

    public void GetUser(UserAchievement userAchievement)
    {
      if (userAchievement == null)
        return;
      foreach (User user in (List<User>) _dataSet.Users.ToList())
      {
        if (userAchievement.UserId != null && user.Id == userAchievement.UserId)
        {
          userAchievement.User = user;
          break;
        }
      }
    }

    public async Task GetUserAsync(UserAchievement userAchievement)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetUser(userAchievement)));
      }
      catch
      {
        throw;
      }
    }

    public void GetUsers(IEnumerable<UserAchievement> userAchievements)
    {
      foreach (UserAchievement userAchievement in userAchievements)
        this.GetUser(userAchievement);
    }

    public async Task GetUsersAsync(IEnumerable<UserAchievement> userAchievements)
    {
      foreach (UserAchievement userAchievement in userAchievements)
        await this.GetUserAsync(userAchievement);
    }
        #endregion

        #region UserBadgesTable-IO
        public string Validate(UserBadge core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(UserBadge core)
    {
      string messages = "";
      if (core.Badge == null)
      {
        if (string.IsNullOrWhiteSpace(core.BadgeId))
        {
          messages += "UserBadge.BadgeId: Badge missing; ";
        }
        else
        {
          Badge parent = _dataSet.SharedBadges.SingleOrDefault<Badge>((Func<Badge, bool>) (x => x.Id == core.BadgeId));
          if (parent == null)
            messages += "UserBadge.BadgeId: Badge invalid; ";
          parent = (Badge) null;
        }
      }
      if (core.User == null)
      {
        if (string.IsNullOrWhiteSpace(core.UserId))
        {
          messages += "UserBadge.UserId: User missing; ";
        }
        else
        {
          User parent = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (x => x.Id == core.UserId));
          if (parent == null)
            messages += "UserBadge.UserId: User invalid; ";
          parent = (User) null;
        }
      }
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public void Add(IEnumerable<UserBadge> userBadges)
    {
      try
      {
        foreach (UserBadge userBadge in userBadges)
          this.Add(userBadge);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<UserBadge> userBadges)
    {
      try
      {
        foreach (UserBadge userBadge in userBadges)
          await this.AddAsync(userBadge);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(UserBadge core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          UserBadge userBadge = (UserBadge) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            userBadge = _dataSet.UserBadges.SingleOrDefault<UserBadge>((Func<UserBadge, bool>) (x => x.Id == core.Id));
          if (userBadge == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.UserBadges.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////userBadge.Update(core);
                        ///

                        _dataSet.Entry(userBadge).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        userBadge.Update(core);
                        _dataSet.UserBadges.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          userBadge = (UserBadge) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(UserBadge core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(UserBadge userBadge, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(userBadge, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(UserBadge userBadge, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(userBadge, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<UserBadge> userBadges, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (userBadges == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (UserBadge userBadge in userBadges.ToList<UserBadge>())
        {
          dataStoreResult = this.Delete(userBadge, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<UserBadge> userBadges, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (userBadges == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<UserBadge> lst = userBadges.ToList<UserBadge>();
        foreach (UserBadge userBadge in lst)
        {
          UserBadge item = userBadge;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (UserBadge) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(UserBadge userBadge, Transaction transaction)
    {
      try
      {
        if (userBadge.Id == null)
          return DataStoreResult.Success;
        UserBadge entity = _dataSet.UserBadges.SingleOrDefault<UserBadge>((Func<UserBadge, bool>) (x => x.Id == userBadge.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(userBadge, transaction);
        if (!userBadge.CanDelete)
          throw new ChildDependencyException("The badge (" + userBadge.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.UserBadges.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(UserBadge userBadge, Transaction transaction)
    {
      try
      {
        if (userBadge.Id == null)
          return DataStoreResult.Success;
        UserBadge core = _dataSet.UserBadges.SingleOrDefault<UserBadge>((Func<UserBadge, bool>) (x => x.Id == userBadge.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(userBadge, transaction);
        if (userBadge.CanDelete)
        {
          if (transaction == null)
            _dataSet.UserBadges.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The badge (" + userBadge.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteUserBadge(string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.UserBadges.SingleOrDefault<UserBadge>((Func<UserBadge, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The userBadge is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsyncUserBadge(string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        UserBadge userBadge = _dataSet.UserBadges.SingleOrDefault<UserBadge>((Func<UserBadge, bool>) (x => x.Id == Id));
        if (userBadge == null)
          throw new NotFoundException("The userBadge is not found");
        dataStoreResult = await this.DeleteAsync(userBadge, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(UserBadge userBadge, Transaction transaction)
    {
      if (userBadge == null)
        return;
      userBadge.CanDelete = true;
    }

    internal async Task RefreshCanDeleteAsync(UserBadge userBadge, Transaction transaction)
    {
      if (userBadge == null)
        return;
      userBadge.CanDelete = true;
    }

    public UserBadge FindUserBadge(string Id) => Id == null ? (UserBadge) null : _dataSet.UserBadges.SingleOrDefault<UserBadge>((Func<UserBadge, bool>) (x => x.Id == Id));

    public async Task<UserBadge> FindUserBadgeAsync(string Id)
    {
      UserBadge userBadgeAsync;
      try
      {
        userBadgeAsync = await Task.Run<UserBadge>((Func<UserBadge>) (() => this.FindUserBadge(Id)));
      }
      catch
      {
        throw;
      }
      return userBadgeAsync;
    }

    public List<UserBadge> GetUserBadgeByDate(DateTime date) => _dataSet.UserBadges.Where<UserBadge>((Func<UserBadge, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<UserBadge>();

    public async Task<List<UserBadge>> GetUserBadgeByDateAsync(DateTime date)
    {
      List<UserBadge> badgeByDateAsync;
      try
      {
        badgeByDateAsync = await Task.Run<List<UserBadge>>((Func<List<UserBadge>>) (() => this.GetUserBadgeByDate(date)));
      }
      catch
      {
        throw;
      }
      return badgeByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<UserBadge> cores)
    {
      try
      {
        foreach (UserBadge core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<UserBadge> cores)
    {
      try
      {
        foreach (UserBadge core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(UserBadge userBadge)
    {
      if (userBadge == null)
        return;
      if (userBadge.CreatedById != null && userBadge.CreatedBy == null)
        userBadge.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == userBadge.CreatedById));
      if (userBadge.UpdatedById == null || userBadge.UpdatedBy != null)
        return;
      userBadge.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == userBadge.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(UserBadge userBadge)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(userBadge)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedBadge(UserBadge userBadge)
    {
      if (userBadge == null)
        return;
      foreach (Badge sharedBadge in (List<Badge>) _dataSet.SharedBadges.ToList())
      {
        if (userBadge.BadgeId != null && sharedBadge.Id == userBadge.BadgeId)
        {
          userBadge.Badge = sharedBadge;
          break;
        }
      }
    }

    public async Task GetSharedBadgeAsync(UserBadge userBadge)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedBadge(userBadge)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedBadges(IEnumerable<UserBadge> userBadges)
    {
      foreach (UserBadge userBadge in userBadges)
        this.GetSharedBadge(userBadge);
    }

    public async Task GetSharedBadgesAsync(IEnumerable<UserBadge> userBadges)
    {
      foreach (UserBadge userBadge in userBadges)
        await this.GetSharedBadgeAsync(userBadge);
    }

    public void GetUser(UserBadge userBadge)
    {
      if (userBadge == null)
        return;
      foreach (User user in (List<User>) _dataSet.Users.ToList())
      {
        if (userBadge.UserId != null && user.Id == userBadge.UserId)
        {
          userBadge.User = user;
          break;
        }
      }
    }

    public async Task GetUserAsync(UserBadge userBadge)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetUser(userBadge)));
      }
      catch
      {
        throw;
      }
    }

    public void GetUsers(IEnumerable<UserBadge> userBadges)
    {
      foreach (UserBadge userBadge in userBadges)
        this.GetUser(userBadge);
    }

    public async Task GetUsersAsync(IEnumerable<UserBadge> userBadges)
    {
      foreach (UserBadge userBadge in userBadges)
        await this.GetUserAsync(userBadge);
    }
        #endregion

        #region UserRolesTable-IO
        public string Validate(UserRole core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(UserRole core)
    {
      string messages = "";
      if (core.Role == null)
      {
        if (string.IsNullOrWhiteSpace(core.RoleId))
        {
          messages += "UserRole.RoleId: Role missing; ";
        }
        else
        {
          SilkFlo.Data.Core.Domain.Role parent = _dataSet.Roles.SingleOrDefault<SilkFlo.Data.Core.Domain.Role>((Func<SilkFlo.Data.Core.Domain.Role, bool>) (x => x.Id == core.RoleId));
          if (parent == null)
            messages += "UserRole.RoleId: Role invalid; ";
          parent = (SilkFlo.Data.Core.Domain.Role) null;
        }
      }
      if (core.User == null)
      {
        if (string.IsNullOrWhiteSpace(core.UserId))
        {
          messages += "UserRole.UserId: User missing; ";
        }
        else
        {
          User parent = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (x => x.Id == core.UserId));
          if (parent == null)
            messages += "UserRole.UserId: User invalid; ";
          parent = (User) null;
        }
      }
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(UserRole core)
    {
      string str = "";
      if (_dataSet.UserRoles.ToList<UserRole>().FirstOrDefault<UserRole>((Func<UserRole, bool>) (x => x.Id != (core.Id ?? "") && x.RoleId == core.RoleId && x.UserId == core.UserId)) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this role and user.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(UserRole core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<UserRole> userRoles)
    {
      try
      {
        foreach (UserRole userRole in userRoles)
          this.Add(userRole);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<UserRole> userRoles)
    {
      try
      {
        foreach (UserRole userRole in userRoles)
          await this.AddAsync(userRole);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(UserRole core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          UserRole userRole = (UserRole) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            userRole = _dataSet.UserRoles.SingleOrDefault<UserRole>((Func<UserRole, bool>) (x => x.Id == core.Id));
          if (userRole == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.UserRoles.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////userRole.Update(core);
                        ///

                        _dataSet.Entry(userRole).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        userRole.Update(core);
                        _dataSet.UserRoles.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          userRole = (UserRole) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(UserRole core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(UserRole userRole, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(userRole, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(UserRole userRole, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(userRole, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<UserRole> userRoles, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (userRoles == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (UserRole userRole in userRoles.ToList<UserRole>())
        {
          dataStoreResult = this.Delete(userRole, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<UserRole> userRoles, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (userRoles == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<UserRole> lst = userRoles.ToList<UserRole>();
        foreach (UserRole userRole in lst)
        {
          UserRole item = userRole;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (UserRole) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(UserRole userRole, Transaction transaction)
    {
      try
      {
        if (userRole.Id == null)
          return DataStoreResult.Success;
        UserRole entity = _dataSet.UserRoles.SingleOrDefault<UserRole>((Func<UserRole, bool>) (x => x.Id == userRole.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(userRole, transaction);
        if (!userRole.CanDelete)
          throw new ChildDependencyException("The role (" + userRole.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.UserRoles.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(UserRole userRole, Transaction transaction)
    {
      try
      {
        if (userRole.Id == null)
          return DataStoreResult.Success;
        UserRole core = _dataSet.UserRoles.SingleOrDefault<UserRole>((Func<UserRole, bool>) (x => x.Id == userRole.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(userRole, transaction);
        if (userRole.CanDelete)
        {
          if (transaction == null)
            _dataSet.UserRoles.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The role (" + userRole.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteUserRole(string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.UserRoles.SingleOrDefault<UserRole>((Func<UserRole, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The userRole is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsyncUserRole(string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        UserRole userRole = _dataSet.UserRoles.SingleOrDefault<UserRole>((Func<UserRole, bool>) (x => x.Id == Id));
        if (userRole == null)
          throw new NotFoundException("The userRole is not found");
        dataStoreResult = await this.DeleteAsync(userRole, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(UserRole userRole, Transaction transaction)
    {
      if (userRole == null)
        return;
      userRole.CanDelete = true;
    }

    internal async Task RefreshCanDeleteAsync(UserRole userRole, Transaction transaction)
    {
      if (userRole == null)
        return;
      userRole.CanDelete = true;
    }

    public UserRole FindUserRole(string Id) => Id == null ? (UserRole) null : _dataSet.UserRoles.SingleOrDefault<UserRole>((Func<UserRole, bool>) (x => x.Id == Id));

    public async Task<UserRole> FindUserRoleAsync(string Id)
    {
      UserRole userRoleAsync;
      try
      {
        userRoleAsync = await Task.Run<UserRole>((Func<UserRole>) (() => this.FindUserRole(Id)));
      }
      catch
      {
        throw;
      }
      return userRoleAsync;
    }

    public List<UserRole> GetUserRoleByDate(DateTime date) => _dataSet.UserRoles.Where<UserRole>((Func<UserRole, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<UserRole>();

    public async Task<List<UserRole>> GetUserRoleByDateAsync(DateTime date)
    {
      List<UserRole> userRoleByDateAsync;
      try
      {
        userRoleByDateAsync = await Task.Run<List<UserRole>>((Func<List<UserRole>>) (() => this.GetUserRoleByDate(date)));
      }
      catch
      {
        throw;
      }
      return userRoleByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<UserRole> cores)
    {
      try
      {
        foreach (UserRole core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<UserRole> cores)
    {
      try
      {
        foreach (UserRole core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(UserRole userRole)
    {
      if (userRole == null)
        return;
      if (userRole.CreatedById != null && userRole.CreatedBy == null)
        userRole.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == userRole.CreatedById));
      if (userRole.UpdatedById == null || userRole.UpdatedBy != null)
        return;
      userRole.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == userRole.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(UserRole userRole)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(userRole)));
      }
      catch
      {
        throw;
      }
    }

    public void GetRole(UserRole userRole)
    {
      if (userRole == null)
        return;
      foreach (SilkFlo.Data.Core.Domain.Role role in (List<SilkFlo.Data.Core.Domain.Role>) _dataSet.Roles.ToList())
      {
        if (userRole.RoleId != null && role.Id == userRole.RoleId)
        {
          userRole.Role = role;
          break;
        }
      }
    }

    public async Task GetRoleAsync(UserRole userRole)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetRole(userRole)));
      }
      catch
      {
        throw;
      }
    }

    public void GetRoles(IEnumerable<UserRole> userRoles)
    {
      foreach (UserRole userRole in userRoles)
        this.GetRole(userRole);
    }

    public async Task GetRolesAsync(IEnumerable<UserRole> userRoles)
    {
      foreach (UserRole userRole in userRoles)
        await this.GetRoleAsync(userRole);
    }

    public void GetUser(UserRole userRole)
    {
      if (userRole == null)
        return;
      foreach (User user in (List<User>) _dataSet.Users.ToList())
      {
        if (userRole.UserId != null && user.Id == userRole.UserId)
        {
          userRole.User = user;
          break;
        }
      }
    }

    public async Task GetUserAsync(UserRole userRole)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetUser(userRole)));
      }
      catch
      {
        throw;
      }
    }

    public void GetUsers(IEnumerable<UserRole> userRoles)
    {
      foreach (UserRole userRole in userRoles)
        this.GetUser(userRole);
    }

    public async Task GetUsersAsync(IEnumerable<UserRole> userRoles)
    {
      foreach (UserRole userRole in userRoles)
        await this.GetUserAsync(userRole);
    }
        #endregion

        #region WebHookLogsTable-IO
        public string Validate(WebHookLog core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(WebHookLog core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.KeyId))
        messages += "WebHookLog.KeyId: KeyId missing; ";
      if (string.IsNullOrWhiteSpace(core.SourceId))
        messages += "WebHookLog.SourceId: SourceId missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public void Add(IEnumerable<WebHookLog> webHookLogs)
    {
      try
      {
        foreach (WebHookLog webHookLog in webHookLogs)
          this.Add(webHookLog);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<WebHookLog> webHookLogs)
    {
      try
      {
        foreach (WebHookLog webHookLog in webHookLogs)
          await this.AddAsync(webHookLog);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(WebHookLog core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          WebHookLog webHookLog = (WebHookLog) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            webHookLog = _dataSet.WebHookLogs.SingleOrDefault<WebHookLog>((Func<WebHookLog, bool>) (x => x.Id == core.Id));
          if (webHookLog == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.WebHookLogs.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////webHookLog.Update(core);
                        ///

                        _dataSet.Entry(webHookLog).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        webHookLog.Update(core);
                        _dataSet.WebHookLogs.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          webHookLog = (WebHookLog) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(WebHookLog core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(WebHookLog webHookLog, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(webHookLog, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(WebHookLog webHookLog, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(webHookLog, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<WebHookLog> webHookLogs, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (webHookLogs == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (WebHookLog webHookLog in webHookLogs.ToList<WebHookLog>())
        {
          dataStoreResult = this.Delete(webHookLog, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<WebHookLog> webHookLogs, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (webHookLogs == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<WebHookLog> lst = webHookLogs.ToList<WebHookLog>();
        foreach (WebHookLog webHookLog in lst)
        {
          WebHookLog item = webHookLog;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (WebHookLog) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(WebHookLog webHookLog, Transaction transaction)
    {
      try
      {
        if (webHookLog.Id == null)
          return DataStoreResult.Success;
        WebHookLog entity = _dataSet.WebHookLogs.SingleOrDefault<WebHookLog>((Func<WebHookLog, bool>) (x => x.Id == webHookLog.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(webHookLog, transaction);
        if (!webHookLog.CanDelete)
          throw new ChildDependencyException("The webhooklog (" + webHookLog.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.WebHookLogs.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(WebHookLog webHookLog, Transaction transaction)
    {
      try
      {
        if (webHookLog.Id == null)
          return DataStoreResult.Success;
        WebHookLog core = _dataSet.WebHookLogs.SingleOrDefault<WebHookLog>((Func<WebHookLog, bool>) (x => x.Id == webHookLog.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(webHookLog, transaction);
        if (webHookLog.CanDelete)
        {
          if (transaction == null)
            _dataSet.WebHookLogs.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The webhooklog (" + webHookLog.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteWebHookLog(string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.WebHookLogs.SingleOrDefault<WebHookLog>((Func<WebHookLog, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The webHookLog is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsyncWebHookLog(string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        WebHookLog webHookLog = _dataSet.WebHookLogs.SingleOrDefault<WebHookLog>((Func<WebHookLog, bool>) (x => x.Id == Id));
        if (webHookLog == null)
          throw new NotFoundException("The webHookLog is not found");
        dataStoreResult = await this.DeleteAsync(webHookLog, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(WebHookLog webHookLog, Transaction transaction)
    {
      if (webHookLog == null)
        return;
      webHookLog.CanDelete = true;
    }

    internal async Task RefreshCanDeleteAsync(WebHookLog webHookLog, Transaction transaction)
    {
      if (webHookLog == null)
        return;
      webHookLog.CanDelete = true;
    }

    public WebHookLog FindWebHookLog(string Id) => Id == null ? (WebHookLog) null : _dataSet.WebHookLogs.SingleOrDefault<WebHookLog>((Func<WebHookLog, bool>) (x => x.Id == Id));

    public async Task<WebHookLog> FindWebHookLogAsync(string Id)
    {
      WebHookLog webHookLogAsync;
      try
      {
        webHookLogAsync = await Task.Run<WebHookLog>((Func<WebHookLog>) (() => this.FindWebHookLog(Id)));
      }
      catch
      {
        throw;
      }
      return webHookLogAsync;
    }

    public List<WebHookLog> GetWebHookLogByDate(DateTime date) => _dataSet.WebHookLogs.Where<WebHookLog>((Func<WebHookLog, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<WebHookLog>();

    public async Task<List<WebHookLog>> GetWebHookLogByDateAsync(DateTime date)
    {
      List<WebHookLog> hookLogByDateAsync;
      try
      {
        hookLogByDateAsync = await Task.Run<List<WebHookLog>>((Func<List<WebHookLog>>) (() => this.GetWebHookLogByDate(date)));
      }
      catch
      {
        throw;
      }
      return hookLogByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<WebHookLog> cores)
    {
      try
      {
        foreach (WebHookLog core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<WebHookLog> cores)
    {
      try
      {
        foreach (WebHookLog core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(WebHookLog webHookLog)
    {
      if (webHookLog == null)
        return;
      if (webHookLog.CreatedById != null && webHookLog.CreatedBy == null)
        webHookLog.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == webHookLog.CreatedById));
      if (webHookLog.UpdatedById == null || webHookLog.UpdatedBy != null)
        return;
      webHookLog.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == webHookLog.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(WebHookLog webHookLog)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(webHookLog)));
      }
      catch
      {
        throw;
      }
    }
        #endregion

        #region ManageTenantsTable-IO
        public string Validate(ManageTenant core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(ManageTenant core)
    {
      string messages = "";
      if (core.Tenant == null)
      {
        if (string.IsNullOrWhiteSpace(core.TenantId))
        {
          messages += "Agency.ManageTenant.TenantId: Tenant missing; ";
        }
        else
        {
          Client parent = _dataSet.BusinessClients.SingleOrDefault<Client>((Func<Client, bool>) (x => x.Id == core.TenantId));
          if (parent == null)
            messages += "Agency.ManageTenant.TenantId: Tenant invalid; ";
          parent = (Client) null;
        }
      }
      if (core.User == null)
      {
        if (string.IsNullOrWhiteSpace(core.UserId))
        {
          messages += "Agency.ManageTenant.UserId: User missing; ";
        }
        else
        {
          User parent = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (x => x.Id == core.UserId));
          if (parent == null)
            messages += "Agency.ManageTenant.UserId: User invalid; ";
          parent = (User) null;
        }
      }
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(ManageTenant core)
    {
      string str = "";
      if (_dataSet.AgencyManageTenants.ToList<ManageTenant>().FirstOrDefault<ManageTenant>((Func<ManageTenant, bool>) (x => x.Id != (core.Id ?? "") && x.TenantId == core.TenantId && x.UserId == core.UserId)) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this tenant and user.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(ManageTenant core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<ManageTenant> manageTenants)
    {
      try
      {
        foreach (ManageTenant manageTenant in manageTenants)
          this.Add(manageTenant);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<ManageTenant> manageTenants)
    {
      try
      {
        foreach (ManageTenant manageTenant in manageTenants)
          await this.AddAsync(manageTenant);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(ManageTenant core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          ManageTenant manageTenant = (ManageTenant) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            manageTenant = _dataSet.AgencyManageTenants.SingleOrDefault<ManageTenant>((Func<ManageTenant, bool>) (x => x.Id == core.Id));
          if (manageTenant == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.AgencyManageTenants.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////manageTenant.Update(core);
                        ///

                        _dataSet.Entry(manageTenant).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        manageTenant.Update(core);
                        _dataSet.AgencyManageTenants.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          manageTenant = (ManageTenant) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(ManageTenant core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(ManageTenant manageTenant, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(manageTenant, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(ManageTenant manageTenant, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(manageTenant, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<ManageTenant> manageTenants, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (manageTenants == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (ManageTenant manageTenant in manageTenants.ToList<ManageTenant>())
        {
          dataStoreResult = this.Delete(manageTenant, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<ManageTenant> manageTenants, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (manageTenants == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<ManageTenant> lst = manageTenants.ToList<ManageTenant>();
        foreach (ManageTenant manageTenant in lst)
        {
          ManageTenant item = manageTenant;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (ManageTenant) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(ManageTenant manageTenant, Transaction transaction)
    {
      try
      {
        if (manageTenant.Id == null)
          return DataStoreResult.Success;
        ManageTenant entity = _dataSet.AgencyManageTenants.SingleOrDefault<ManageTenant>((Func<ManageTenant, bool>) (x => x.Id == manageTenant.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(manageTenant, transaction);
        if (!manageTenant.CanDelete)
          throw new ChildDependencyException("The role (" + manageTenant.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.AgencyManageTenants.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(ManageTenant manageTenant, Transaction transaction)
    {
      try
      {
        if (manageTenant.Id == null)
          return DataStoreResult.Success;
        ManageTenant core = _dataSet.AgencyManageTenants.SingleOrDefault<ManageTenant>((Func<ManageTenant, bool>) (x => x.Id == manageTenant.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(manageTenant, transaction);
        if (manageTenant.CanDelete)
        {
          if (transaction == null)
            _dataSet.AgencyManageTenants.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The role (" + manageTenant.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteAgencyManageTenant(string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.AgencyManageTenants.SingleOrDefault<ManageTenant>((Func<ManageTenant, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The manageTenant is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsyncAgencyManageTenant(string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        ManageTenant manageTenant = _dataSet.AgencyManageTenants.SingleOrDefault<ManageTenant>((Func<ManageTenant, bool>) (x => x.Id == Id));
        if (manageTenant == null)
          throw new NotFoundException("The manageTenant is not found");
        dataStoreResult = await this.DeleteAsync(manageTenant, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(ManageTenant manageTenant, Transaction transaction)
    {
      if (manageTenant == null)
        return;
      manageTenant.CanDelete = true;
    }

    internal async Task RefreshCanDeleteAsync(ManageTenant manageTenant, Transaction transaction)
    {
      if (manageTenant == null)
        return;
      manageTenant.CanDelete = true;
    }

    public ManageTenant FindAgencyManageTenant(string Id) => Id == null ? (ManageTenant) null : _dataSet.AgencyManageTenants.SingleOrDefault<ManageTenant>((Func<ManageTenant, bool>) (x => x.Id == Id));

    public async Task<ManageTenant> FindAgencyManageTenantAsync(string Id)
    {
      ManageTenant manageTenantAsync;
      try
      {
        manageTenantAsync = await Task.Run<ManageTenant>((Func<ManageTenant>) (() => this.FindAgencyManageTenant(Id)));
      }
      catch
      {
        throw;
      }
      return manageTenantAsync;
    }

    public List<ManageTenant> GetAgencyManageTenantByDate(DateTime date) => _dataSet.AgencyManageTenants.Where<ManageTenant>((Func<ManageTenant, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<ManageTenant>();

    public async Task<List<ManageTenant>> GetAgencyManageTenantByDateAsync(DateTime date)
    {
      List<ManageTenant> tenantByDateAsync;
      try
      {
        tenantByDateAsync = await Task.Run<List<ManageTenant>>((Func<List<ManageTenant>>) (() => this.GetAgencyManageTenantByDate(date)));
      }
      catch
      {
        throw;
      }
      return tenantByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<ManageTenant> cores)
    {
      try
      {
        foreach (ManageTenant core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<ManageTenant> cores)
    {
      try
      {
        foreach (ManageTenant core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(ManageTenant manageTenant)
    {
      if (manageTenant == null)
        return;
      if (manageTenant.CreatedById != null && manageTenant.CreatedBy == null)
        manageTenant.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == manageTenant.CreatedById));
      if (manageTenant.UpdatedById == null || manageTenant.UpdatedBy != null)
        return;
      manageTenant.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == manageTenant.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(ManageTenant manageTenant)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(manageTenant)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessTenant(ManageTenant manageTenant)
    {
      if (manageTenant == null)
        return;
      foreach (Client businessClient in (List<Client>) _dataSet.BusinessClients.ToList())
      {
        if (manageTenant.TenantId != null && businessClient.Id == manageTenant.TenantId)
        {
          manageTenant.Tenant = businessClient;
          break;
        }
      }
    }

    public async Task GetBusinessTenantAsync(ManageTenant manageTenant)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessTenant(manageTenant)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessTenants(IEnumerable<ManageTenant> manageTenants)
    {
      foreach (ManageTenant manageTenant in manageTenants)
        this.GetBusinessTenant(manageTenant);
    }

    public async Task GetBusinessTenantsAsync(IEnumerable<ManageTenant> manageTenants)
    {
      foreach (ManageTenant manageTenant in manageTenants)
        await this.GetBusinessTenantAsync(manageTenant);
    }

    public void GetUser(ManageTenant manageTenant)
    {
      if (manageTenant == null)
        return;
      foreach (User user in (List<User>) _dataSet.Users.ToList())
      {
        if (manageTenant.UserId != null && user.Id == manageTenant.UserId)
        {
          manageTenant.User = user;
          break;
        }
      }
    }

    public async Task GetUserAsync(ManageTenant manageTenant)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetUser(manageTenant)));
      }
      catch
      {
        throw;
      }
    }

    public void GetUsers(IEnumerable<ManageTenant> manageTenants)
    {
      foreach (ManageTenant manageTenant in manageTenants)
        this.GetUser(manageTenant);
    }

    public async Task GetUsersAsync(IEnumerable<ManageTenant> manageTenants)
    {
      foreach (ManageTenant manageTenant in manageTenants)
        await this.GetUserAsync(manageTenant);
    }
        #endregion

        #region HoSpotTable-IO
        public string Validate(HotSpot core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(HotSpot core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Application.HotSpot.Name: Name missing; ";
      if (string.IsNullOrWhiteSpace(core.Text))
        messages += "Application.HotSpot.Text: Text missing; ";
      if (string.IsNullOrWhiteSpace(core.Width))
        messages += "Application.HotSpot.Width: Width missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(HotSpot core)
    {
      string str = "";
      if (_dataSet.ApplicationHotSpots.ToList<HotSpot>().FirstOrDefault<HotSpot>((Func<HotSpot, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(HotSpot core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<HotSpot> hotSpots)
    {
      try
      {
        foreach (HotSpot hotSpot in hotSpots)
          this.Add(hotSpot);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<HotSpot> hotSpots)
    {
      try
      {
        foreach (HotSpot hotSpot in hotSpots)
          await this.AddAsync(hotSpot);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(HotSpot core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          HotSpot hotSpot = (HotSpot) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            hotSpot = _dataSet.ApplicationHotSpots.SingleOrDefault<HotSpot>((Func<HotSpot, bool>) (x => x.Id == core.Id));
          if (hotSpot == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.ApplicationHotSpots.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////hotSpot.Update(core);
                        ///

                        _dataSet.Entry(hotSpot).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        hotSpot.Update(core);
                        _dataSet.ApplicationHotSpots.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          hotSpot = (HotSpot) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(HotSpot core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(HotSpot hotSpot, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(hotSpot, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(HotSpot hotSpot, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(hotSpot, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<HotSpot> hotSpots, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (hotSpots == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (HotSpot hotSpot in hotSpots.ToList<HotSpot>())
        {
          dataStoreResult = this.Delete(hotSpot, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<HotSpot> hotSpots, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (hotSpots == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<HotSpot> lst = hotSpots.ToList<HotSpot>();
        foreach (HotSpot hotSpot in lst)
        {
          HotSpot item = hotSpot;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (HotSpot) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(HotSpot hotSpot, Transaction transaction)
    {
      try
      {
        if (hotSpot.Id == null)
          return DataStoreResult.Success;
        HotSpot entity = _dataSet.ApplicationHotSpots.SingleOrDefault<HotSpot>((Func<HotSpot, bool>) (x => x.Id == hotSpot.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(hotSpot, transaction);
        if (!hotSpot.CanDelete)
          throw new ChildDependencyException("The hotspot (" + hotSpot.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.ApplicationHotSpots.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(HotSpot hotSpot, Transaction transaction)
    {
      try
      {
        if (hotSpot.Id == null)
          return DataStoreResult.Success;
        HotSpot core = _dataSet.ApplicationHotSpots.SingleOrDefault<HotSpot>((Func<HotSpot, bool>) (x => x.Id == hotSpot.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(hotSpot, transaction);
        if (hotSpot.CanDelete)
        {
          if (transaction == null)
            _dataSet.ApplicationHotSpots.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The hotspot (" + hotSpot.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteApplicationHotSpot(string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.ApplicationHotSpots.SingleOrDefault<HotSpot>((Func<HotSpot, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The hotSpot is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsyncApplicationHotSpot(string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        HotSpot hotSpot = _dataSet.ApplicationHotSpots.SingleOrDefault<HotSpot>((Func<HotSpot, bool>) (x => x.Id == Id));
        if (hotSpot == null)
          throw new NotFoundException("The hotSpot is not found");
        dataStoreResult = await this.DeleteAsync(hotSpot, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(HotSpot hotSpot, Transaction transaction)
    {
      if (hotSpot == null)
        return;
      hotSpot.CanDelete = true;
    }

    internal async Task RefreshCanDeleteAsync(HotSpot hotSpot, Transaction transaction)
    {
      if (hotSpot == null)
        return;
      hotSpot.CanDelete = true;
    }

    public HotSpot FindApplicationHotSpot(string Id) => Id == null ? (HotSpot) null : _dataSet.ApplicationHotSpots.SingleOrDefault<HotSpot>((Func<HotSpot, bool>) (x => x.Id == Id));

    public async Task<HotSpot> FindApplicationHotSpotAsync(string Id)
    {
      HotSpot applicationHotSpotAsync;
      try
      {
        applicationHotSpotAsync = await Task.Run<HotSpot>((Func<HotSpot>) (() => this.FindApplicationHotSpot(Id)));
      }
      catch
      {
        throw;
      }
      return applicationHotSpotAsync;
    }

    public List<HotSpot> GetApplicationHotSpotByDate(DateTime date) => _dataSet.ApplicationHotSpots.Where<HotSpot>((Func<HotSpot, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<HotSpot>();

    public async Task<List<HotSpot>> GetApplicationHotSpotByDateAsync(DateTime date)
    {
      List<HotSpot> hotSpotByDateAsync;
      try
      {
        hotSpotByDateAsync = await Task.Run<List<HotSpot>>((Func<List<HotSpot>>) (() => this.GetApplicationHotSpotByDate(date)));
      }
      catch
      {
        throw;
      }
      return hotSpotByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<HotSpot> cores)
    {
      try
      {
        foreach (HotSpot core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<HotSpot> cores)
    {
      try
      {
        foreach (HotSpot core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(HotSpot hotSpot)
    {
      if (hotSpot == null)
        return;
      if (hotSpot.CreatedById != null && hotSpot.CreatedBy == null)
        hotSpot.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == hotSpot.CreatedById));
      if (hotSpot.UpdatedById == null || hotSpot.UpdatedBy != null)
        return;
      hotSpot.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == hotSpot.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(HotSpot hotSpot)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(hotSpot)));
      }
      catch
      {
        throw;
      }
    }
        #endregion

        #region PageTable-IO
        public string Validate(Page core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(Page core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Application.Page.Name: Name missing; ";
      if (string.IsNullOrWhiteSpace(core.Text))
        messages += "Application.Page.Text: Text (HTML) missing; ";
      if (string.IsNullOrWhiteSpace(core.URL))
        messages += "Application.Page.URL: URL missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public void Add(IEnumerable<Page> pages)
    {
      try
      {
        foreach (Page page in pages)
          this.Add(page);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Page> pages)
    {
      try
      {
        foreach (Page page in pages)
          await this.AddAsync(page);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Page core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          Page page = (Page) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            page = _dataSet.ApplicationPages.SingleOrDefault<Page>((Func<Page, bool>) (x => x.Id == core.Id));
          if (page == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.ApplicationPages.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////page.Update(core);
                        ///

                        _dataSet.Entry(page).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        page.Update(core);
                        _dataSet.ApplicationPages.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          page = (Page) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Page core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Page page, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(page, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Page page, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(page, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Page> pages, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (pages == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Page page in pages.ToList<Page>())
        {
          dataStoreResult = this.Delete(page, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<Page> pages, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (pages == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Page> lst = pages.ToList<Page>();
        foreach (Page page in lst)
        {
          Page item = page;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Page) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Page page, Transaction transaction)
    {
      try
      {
        if (page.Id == null)
          return DataStoreResult.Success;
        Page entity = _dataSet.ApplicationPages.SingleOrDefault<Page>((Func<Page, bool>) (x => x.Id == page.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(page, transaction);
        if (!page.CanDelete)
          throw new ChildDependencyException("The page (" + page.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.ApplicationPages.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Page page, Transaction transaction)
    {
      try
      {
        if (page.Id == null)
          return DataStoreResult.Success;
        Page core = _dataSet.ApplicationPages.SingleOrDefault<Page>((Func<Page, bool>) (x => x.Id == page.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(page, transaction);
        if (page.CanDelete)
        {
          if (transaction == null)
            _dataSet.ApplicationPages.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The page (" + page.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteApplicationPage(string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.ApplicationPages.SingleOrDefault<Page>((Func<Page, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The page is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsyncApplicationPage(string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Page page = _dataSet.ApplicationPages.SingleOrDefault<Page>((Func<Page, bool>) (x => x.Id == Id));
        if (page == null)
          throw new NotFoundException("The page is not found");
        dataStoreResult = await this.DeleteAsync(page, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(Page page, Transaction transaction)
    {
      if (page == null)
        return;
      page.CanDelete = true;
    }

    internal async Task RefreshCanDeleteAsync(Page page, Transaction transaction)
    {
      if (page == null)
        return;
      page.CanDelete = true;
    }

    public Page FindApplicationPage(string Id) => Id == null ? (Page) null : _dataSet.ApplicationPages.SingleOrDefault<Page>((Func<Page, bool>) (x => x.Id == Id));

    public async Task<Page> FindApplicationPageAsync(string Id)
    {
      Page applicationPageAsync;
      try
      {
        applicationPageAsync = await Task.Run<Page>((Func<Page>) (() => this.FindApplicationPage(Id)));
      }
      catch
      {
        throw;
      }
      return applicationPageAsync;
    }

    public List<Page> GetApplicationPageByDate(DateTime date) => _dataSet.ApplicationPages.Where<Page>((Func<Page, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Page>();

    public async Task<List<Page>> GetApplicationPageByDateAsync(DateTime date)
    {
      List<Page> applicationPageByDateAsync;
      try
      {
        applicationPageByDateAsync = await Task.Run<List<Page>>((Func<List<Page>>) (() => this.GetApplicationPageByDate(date)));
      }
      catch
      {
        throw;
      }
      return applicationPageByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Page> cores)
    {
      try
      {
        foreach (Page core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Page> cores)
    {
      try
      {
        foreach (Page core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Page page)
    {
      if (page == null)
        return;
      if (page.CreatedById != null && page.CreatedBy == null)
        page.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == page.CreatedById));
      if (page.UpdatedById == null || page.UpdatedBy != null)
        return;
      page.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == page.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Page page)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(page)));
      }
      catch
      {
        throw;
      }
    }
        #endregion

        #region SettingTable-IO
        public string Validate(Setting core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(Setting core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Value))
        messages += "Application.Setting.Value: Value missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public void Add(IEnumerable<Setting> settings)
    {
      try
      {
        foreach (Setting setting in settings)
          this.Add(setting);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Setting> settings)
    {
      try
      {
        foreach (Setting setting in settings)
          await this.AddAsync(setting);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Setting core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          Setting setting = (Setting) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            setting = _dataSet.ApplicationSettings.SingleOrDefault<Setting>((Func<Setting, bool>) (x => x.Id == core.Id));
          if (setting == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.ApplicationSettings.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////setting.Update(core);
                        ///

                        _dataSet.Entry(setting).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        setting.Update(core);
                        _dataSet.ApplicationSettings.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          setting = (Setting) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Setting core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Setting setting, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(setting, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Setting setting, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(setting, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Setting> settings, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (settings == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Setting setting in settings.ToList<Setting>())
        {
          dataStoreResult = this.Delete(setting, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<Setting> settings, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (settings == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Setting> lst = settings.ToList<Setting>();
        foreach (Setting setting in lst)
        {
          Setting item = setting;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Setting) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Setting setting, Transaction transaction)
    {
      try
      {
        if (setting.Id == null)
          return DataStoreResult.Success;
        Setting entity = _dataSet.ApplicationSettings.SingleOrDefault<Setting>((Func<Setting, bool>) (x => x.Id == setting.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(setting, transaction);
        if (!setting.CanDelete)
          throw new ChildDependencyException("The setting (" + setting.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.ApplicationSettings.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Setting setting, Transaction transaction)
    {
      try
      {
        if (setting.Id == null)
          return DataStoreResult.Success;
        Setting core = _dataSet.ApplicationSettings.SingleOrDefault<Setting>((Func<Setting, bool>) (x => x.Id == setting.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(setting, transaction);
        if (setting.CanDelete)
        {
          if (transaction == null)
            _dataSet.ApplicationSettings.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The setting (" + setting.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteApplicationSetting(string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.ApplicationSettings.SingleOrDefault<Setting>((Func<Setting, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The setting is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsyncApplicationSetting(string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Setting setting = _dataSet.ApplicationSettings.SingleOrDefault<Setting>((Func<Setting, bool>) (x => x.Id == Id));
        if (setting == null)
          throw new NotFoundException("The setting is not found");
        dataStoreResult = await this.DeleteAsync(setting, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(Setting setting, Transaction transaction)
    {
      if (setting == null)
        return;
      setting.CanDelete = true;
    }

    internal async Task RefreshCanDeleteAsync(Setting setting, Transaction transaction)
    {
      if (setting == null)
        return;
      setting.CanDelete = true;
    }

    public Setting FindApplicationSetting(string Id) => Id == null ? (Setting) null : _dataSet.ApplicationSettings.SingleOrDefault<Setting>((Func<Setting, bool>) (x => x.Id == Id));

    public async Task<Setting> FindApplicationSettingAsync(string Id)
    {
      Setting applicationSettingAsync;
      try
      {
        applicationSettingAsync = await Task.Run<Setting>((Func<Setting>) (() => this.FindApplicationSetting(Id)));
      }
      catch
      {
        throw;
      }
      return applicationSettingAsync;
    }

    public List<Setting> GetApplicationSettingByDate(DateTime date) => _dataSet.ApplicationSettings.Where<Setting>((Func<Setting, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Setting>();

    public async Task<List<Setting>> GetApplicationSettingByDateAsync(DateTime date)
    {
      List<Setting> settingByDateAsync;
      try
      {
        settingByDateAsync = await Task.Run<List<Setting>>((Func<List<Setting>>) (() => this.GetApplicationSettingByDate(date)));
      }
      catch
      {
        throw;
      }
      return settingByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Setting> cores)
    {
      try
      {
        foreach (Setting core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Setting> cores)
    {
      try
      {
        foreach (Setting core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Setting setting)
    {
      if (setting == null)
        return;
      if (setting.CreatedById != null && setting.CreatedBy == null)
        setting.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == setting.CreatedById));
      if (setting.UpdatedById == null || setting.UpdatedBy != null)
        return;
      setting.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == setting.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Setting setting)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(setting)));
      }
      catch
      {
        throw;
      }
    }
        #endregion

        #region ApplicationTable-IO
        public string Validate(SilkFlo.Data.Core.Domain.Business.Application core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(SilkFlo.Data.Core.Domain.Business.Application core)
    {
      string messages = "";
      if (core.Client == null)
      {
        if (string.IsNullOrWhiteSpace(core.ClientId))
        {
          messages += "Business.Application.ClientId: Client missing; ";
        }
        else
        {
          Client parent = _dataSet.BusinessClients.SingleOrDefault<Client>((Func<Client, bool>) (x => x.Id == core.ClientId));
          if (parent == null)
            messages += "Business.Application.ClientId: Client invalid; ";
          parent = (Client) null;
        }
      }
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Business.Application.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(SilkFlo.Data.Core.Domain.Business.Application core)
    {
      string str = "";
      if (_dataSet.BusinessApplications.ToList<SilkFlo.Data.Core.Domain.Business.Application>().FirstOrDefault<SilkFlo.Data.Core.Domain.Business.Application>((Func<SilkFlo.Data.Core.Domain.Business.Application, bool>) (x => x.Id != (core.Id ?? "") && x.ClientId == core.ClientId && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this client and name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(SilkFlo.Data.Core.Domain.Business.Application core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<SilkFlo.Data.Core.Domain.Business.Application> applications)
    {
      try
      {
        foreach (SilkFlo.Data.Core.Domain.Business.Application application in applications)
          this.Add(application);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<SilkFlo.Data.Core.Domain.Business.Application> applications)
    {
      try
      {
        foreach (SilkFlo.Data.Core.Domain.Business.Application application in applications)
          await this.AddAsync(application);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(SilkFlo.Data.Core.Domain.Business.Application core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          SilkFlo.Data.Core.Domain.Business.Application application = (SilkFlo.Data.Core.Domain.Business.Application) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            application = _dataSet.BusinessApplications.SingleOrDefault<SilkFlo.Data.Core.Domain.Business.Application>((Func<SilkFlo.Data.Core.Domain.Business.Application, bool>) (x => x.Id == core.Id));
          if (application == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessApplications.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////application.Update(core);
                        ///

                        _dataSet.Entry(application).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        application.Update(core);
                        _dataSet.BusinessApplications.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          application = (SilkFlo.Data.Core.Domain.Business.Application) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(SilkFlo.Data.Core.Domain.Business.Application core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(SilkFlo.Data.Core.Domain.Business.Application application, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(application, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(SilkFlo.Data.Core.Domain.Business.Application application, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(application, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<SilkFlo.Data.Core.Domain.Business.Application> applications, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (applications == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (SilkFlo.Data.Core.Domain.Business.Application application in applications.ToList<SilkFlo.Data.Core.Domain.Business.Application>())
        {
          dataStoreResult = this.Delete(application, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<SilkFlo.Data.Core.Domain.Business.Application> applications, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (applications == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<SilkFlo.Data.Core.Domain.Business.Application> lst = applications.ToList<SilkFlo.Data.Core.Domain.Business.Application>();
        foreach (SilkFlo.Data.Core.Domain.Business.Application application in lst)
        {
          SilkFlo.Data.Core.Domain.Business.Application item = application;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (SilkFlo.Data.Core.Domain.Business.Application) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(SilkFlo.Data.Core.Domain.Business.Application application, Transaction transaction)
    {
      try
      {
        if (application.Id == null)
          return DataStoreResult.Success;
        SilkFlo.Data.Core.Domain.Business.Application entity = _dataSet.BusinessApplications.SingleOrDefault<SilkFlo.Data.Core.Domain.Business.Application>((Func<SilkFlo.Data.Core.Domain.Business.Application, bool>) (x => x.Id == application.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.GetBusinessVersions(application);
        foreach (SilkFlo.Data.Core.Domain.Business.Version version in application.Versions)
        {
          int num = (int) this.Delete(version, transaction);
        }
        this.RefreshCanDelete(application, transaction);
        if (!application.CanDelete)
          throw new ChildDependencyException("The application (" + application.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.BusinessApplications.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(SilkFlo.Data.Core.Domain.Business.Application application, Transaction transaction)
    {
      try
      {
        if (application.Id == null)
          return DataStoreResult.Success;
        SilkFlo.Data.Core.Domain.Business.Application core = _dataSet.BusinessApplications.SingleOrDefault<SilkFlo.Data.Core.Domain.Business.Application>((Func<SilkFlo.Data.Core.Domain.Business.Application, bool>) (x => x.Id == application.Id));
        if (core == null)
          return DataStoreResult.Success;
        this.GetBusinessVersions(application);
        foreach (SilkFlo.Data.Core.Domain.Business.Version m in application.Versions)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        await this.RefreshCanDeleteAsync(application, transaction);
        if (application.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessApplications.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The application (" + application.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessApplication(string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessApplications.SingleOrDefault<SilkFlo.Data.Core.Domain.Business.Application>((Func<SilkFlo.Data.Core.Domain.Business.Application, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The application is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsyncBusinessApplication(string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        SilkFlo.Data.Core.Domain.Business.Application application = _dataSet.BusinessApplications.SingleOrDefault<SilkFlo.Data.Core.Domain.Business.Application>((Func<SilkFlo.Data.Core.Domain.Business.Application, bool>) (x => x.Id == Id));
        if (application == null)
          throw new NotFoundException("The application is not found");
        dataStoreResult = await this.DeleteAsync(application, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(SilkFlo.Data.Core.Domain.Business.Application application, Transaction transaction)
    {
      if (application == null)
        return;
      if (application.Id == null)
      {
        application.CanDelete = true;
      }
      else
      {
        this.GetBusinessVersions(application, transaction);
        application.CanDelete = application.Versions.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(SilkFlo.Data.Core.Domain.Business.Application application, Transaction transaction)
    {
      if (application == null)
        return;
      application.CanDelete = true;
    }

    public SilkFlo.Data.Core.Domain.Business.Application FindBusinessApplication(string Id) => Id == null ? (SilkFlo.Data.Core.Domain.Business.Application) null : _dataSet.BusinessApplications.SingleOrDefault<SilkFlo.Data.Core.Domain.Business.Application>((Func<SilkFlo.Data.Core.Domain.Business.Application, bool>) (x => x.Id == Id));

    public async Task<SilkFlo.Data.Core.Domain.Business.Application> FindBusinessApplicationAsync(string Id)
    {
      SilkFlo.Data.Core.Domain.Business.Application applicationAsync;
      try
      {
        applicationAsync = await Task.Run<SilkFlo.Data.Core.Domain.Business.Application>((Func<SilkFlo.Data.Core.Domain.Business.Application>) (() => this.FindBusinessApplication(Id)));
      }
      catch
      {
        throw;
      }
      return applicationAsync;
    }

    public List<SilkFlo.Data.Core.Domain.Business.Application> GetBusinessApplicationByDate(DateTime date)
    {
      return _dataSet.BusinessApplications.Where<SilkFlo.Data.Core.Domain.Business.Application>((Func<SilkFlo.Data.Core.Domain.Business.Application, bool>) (m =>
      {
        DateTime? date1 = m.Date;
        DateTime date2 = date.Date;
        if (!date1.HasValue)
          return false;
        return !date1.HasValue || date1.GetValueOrDefault() == date2;
      })).ToList<SilkFlo.Data.Core.Domain.Business.Application>();
    }

    public async Task<List<SilkFlo.Data.Core.Domain.Business.Application>> GetBusinessApplicationByDateAsync(DateTime date)
    {
      List<SilkFlo.Data.Core.Domain.Business.Application> applicationByDateAsync;
      try
      {
        applicationByDateAsync = await Task.Run<List<SilkFlo.Data.Core.Domain.Business.Application>>((Func<List<SilkFlo.Data.Core.Domain.Business.Application>>) (() => this.GetBusinessApplicationByDate(date)));
      }
      catch
      {
        throw;
      }
      return applicationByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<SilkFlo.Data.Core.Domain.Business.Application> cores)
    {
      try
      {
        foreach (SilkFlo.Data.Core.Domain.Business.Application core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<SilkFlo.Data.Core.Domain.Business.Application> cores)
    {
      try
      {
        foreach (SilkFlo.Data.Core.Domain.Business.Application core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(SilkFlo.Data.Core.Domain.Business.Application application)
    {
      if (application == null)
        return;
      if (application.CreatedById != null && application.CreatedBy == null)
        application.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == application.CreatedById));
      if (application.UpdatedById == null || application.UpdatedBy != null)
        return;
      application.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == application.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(SilkFlo.Data.Core.Domain.Business.Application application)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(application)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessVersions(SilkFlo.Data.Core.Domain.Business.Application application) => this.GetBusinessVersions(application, (Transaction) null);

    internal async Task GetBusinessVersionsAsync(SilkFlo.Data.Core.Domain.Business.Application application) => await this.GetBusinessVersionsAsync(application, (Transaction) null);

    internal void GetBusinessVersions(SilkFlo.Data.Core.Domain.Business.Application application, Transaction transaction)
    {
      if (application != null)
        application.Versions = _dataSet.BusinessVersions.Where<SilkFlo.Data.Core.Domain.Business.Version>((Func<SilkFlo.Data.Core.Domain.Business.Version, bool>) (m => m.ApplicationId == application.Id)).ToList<SilkFlo.Data.Core.Domain.Business.Version>();
      if (transaction == null)
        return;
      for (int index = application.Versions.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) application.Versions[index]) == Action.Delete)
          application.Versions.Remove(application.Versions[index]);
      }
    }

    internal async Task GetBusinessVersionsAsync(SilkFlo.Data.Core.Domain.Business.Application application, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessVersions(application, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClient(SilkFlo.Data.Core.Domain.Business.Application application)
    {
      if (application == null)
        return;
      foreach (Client businessClient in (List<Client>) _dataSet.BusinessClients.ToList())
      {
        if (application.ClientId != null && businessClient.Id == application.ClientId)
        {
          application.Client = businessClient;
          break;
        }
      }
    }

    public async Task GetBusinessClientAsync(SilkFlo.Data.Core.Domain.Business.Application application)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClient(application)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClients(IEnumerable<SilkFlo.Data.Core.Domain.Business.Application> applications)
    {
      foreach (SilkFlo.Data.Core.Domain.Business.Application application in applications)
        this.GetBusinessClient(application);
    }

    public async Task GetBusinessClientsAsync(IEnumerable<SilkFlo.Data.Core.Domain.Business.Application> applications)
    {
      foreach (SilkFlo.Data.Core.Domain.Business.Application application in applications)
        await this.GetBusinessClientAsync(application);
    }
        #endregion

        #region ClientTable-IO
        public string Validate(Client core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(Client core)
    {
      string messages = "";
      if (core.Currency == null)
      {
        if (string.IsNullOrWhiteSpace(core.CurrencyId))
        {
          messages += "Business.Client.CurrencyId: Currency missing; ";
        }
        else
        {
          Currency parent = _dataSet.ShopCurrencies.SingleOrDefault<Currency>((Func<Currency, bool>) (x => x.Id == core.CurrencyId));
          if (parent == null)
            messages += "Business.Client.CurrencyId: Currency invalid; ";
          parent = (Currency) null;
        }
      }
      if (core.Language == null)
      {
        if (string.IsNullOrWhiteSpace(core.LanguageId))
        {
          messages += "Business.Client.LanguageId: Language missing; ";
        }
        else
        {
          Language parent = _dataSet.SharedLanguages.SingleOrDefault<Language>((Func<Language, bool>) (x => x.Id == core.LanguageId));
          if (parent == null)
            messages += "Business.Client.LanguageId: Language invalid; ";
          parent = (Language) null;
        }
      }
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Business.Client.Name: Name missing; ";
      if (core.Type == null)
      {
        if (string.IsNullOrWhiteSpace(core.TypeId))
        {
          messages += "Business.Client.TypeId: Type missing; ";
        }
        else
        {
          ClientType parent = _dataSet.SharedClientTypes.SingleOrDefault<ClientType>((Func<ClientType, bool>) (x => x.Id == core.TypeId));
          if (parent == null)
            messages += "Business.Client.TypeId: Type invalid; ";
          parent = (ClientType) null;
        }
      }
      if (string.IsNullOrWhiteSpace(core.Website))
        messages += "Business.Client.Website: Website missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(Client core)
    {
      string str = "";
      if (_dataSet.BusinessClients.ToList<Client>().FirstOrDefault<Client>((Func<Client, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(Client core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<Client> clients)
    {
      try
      {
        foreach (Client client in clients)
          this.Add(client);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Client> clients)
    {
      try
      {
        foreach (Client client in clients)
          await this.AddAsync(client);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Client core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          Client client = (Client) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            client = _dataSet.BusinessClients.SingleOrDefault<Client>((Func<Client, bool>) (x => x.Id == core.Id));
          if (client == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessClients.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////client.Update(core);
                        ///

                        _dataSet.Entry(client).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        client.Update(core);
                        _dataSet.BusinessClients.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          client = (Client) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Client core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Client client, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(client, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Client client, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(client, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Client> clients, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (clients == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Client client in clients.ToList<Client>())
        {
          dataStoreResult = this.Delete(client, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<Client> clients, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (clients == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Client> lst = clients.ToList<Client>();
        foreach (Client client in lst)
        {
          Client item = client;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Client) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Client client, Transaction transaction)
    {
      try
      {
        if (client.Id == null)
          return DataStoreResult.Success;
        Client entity = _dataSet.BusinessClients.SingleOrDefault<Client>((Func<Client, bool>) (x => x.Id == client.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.GetBusinessApplications(client);
        foreach (SilkFlo.Data.Core.Domain.Business.Application application in client.Applications)
        {
          int num = (int) this.Delete(application, transaction);
        }
        this.GetBusinessComments(client);
        foreach (Comment comment in client.Comments)
        {
          int num = (int) this.Delete(comment, transaction);
        }
        this.GetBusinessDepartments(client);
        foreach (Department department in client.Departments)
        {
          int num = (int) this.Delete(department, transaction);
        }
        this.GetBusinessDocuments(client);
        foreach (Document document in client.Documents)
        {
          int num = (int) this.Delete(document, transaction);
        }
        this.GetBusinessIdeaOtherRunningCosts(client);
        foreach (IdeaOtherRunningCost otherRunningCost in client.IdeaOtherRunningCosts)
        {
          int num = (int) this.Delete(otherRunningCost, transaction);
        }
        this.GetBusinessIdeaRunningCosts(client);
        foreach (IdeaRunningCost ideaRunningCost in client.IdeaRunningCosts)
        {
          int num = (int) this.Delete(ideaRunningCost, transaction);
        }
        this.GetBusinessImplementationCosts(client);
        foreach (ImplementationCost implementationCost in client.ImplementationCosts)
        {
          int num = (int) this.Delete(implementationCost, transaction);
        }
        this.GetBusinessLocations(client);
        foreach (Location location in client.Locations)
        {
          int num = (int) this.Delete(location, transaction);
        }
        this.GetAgencyManageTenants(client);
        foreach (ManageTenant manageTenant in client.ManageTenants)
        {
          int num = (int) this.Delete(manageTenant, transaction);
        }
        this.GetMessages(client);
        foreach (Message message in client.Messages)
        {
          int num = (int) this.Delete(message, transaction);
        }
        this.GetBusinessOtherRunningCosts(client);
        foreach (OtherRunningCost otherRunningCost in client.OtherRunningCosts)
        {
          int num = (int) this.Delete(otherRunningCost, transaction);
        }
        this.GetBusinessProcesses(client);
        foreach (Process process in client.Processes)
        {
          int num = (int) this.Delete(process, transaction);
        }
        this.GetBusinessRoles(client);
        foreach (SilkFlo.Data.Core.Domain.Business.BusinessRole role in client.Roles)
        {
          int num = (int) this.Delete(role, transaction);
        }
        this.GetBusinessRoleCosts(client);
        foreach (RoleCost roleCost in client.RoleCosts)
        {
          int num = (int) this.Delete(roleCost, transaction);
        }
        this.GetBusinessRoleIdeaAuthorisations(client);
        foreach (RoleIdeaAuthorisation ideaAuthorisation in client.RoleIdeaAuthorisations)
        {
          int num = (int) this.Delete(ideaAuthorisation, transaction);
        }
        this.GetBusinessRunningCosts(client);
        foreach (RunningCost runningCost in client.RunningCosts)
        {
          int num = (int) this.Delete(runningCost, transaction);
        }
        this.GetBusinessSoftwareVenders(client);
        foreach (SoftwareVender softwareVender in client.SoftwareVenders)
        {
          int num = (int) this.Delete(softwareVender, transaction);
        }
        this.GetBusinessTeams(client);
        foreach (Team team in client.Teams)
        {
          int num = (int) this.Delete(team, transaction);
        }
        this.GetUsers(client);
        foreach (User user in client.Users)
        {
          int num = (int) this.Delete(user, transaction);
        }
        this.GetBusinessVersions(client);
        foreach (SilkFlo.Data.Core.Domain.Business.Version version in client.Versions)
        {
          int num = (int) this.Delete(version, transaction);
        }
        this.RefreshCanDelete(client, transaction);
        if (client.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessClients.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The client (" + client.ToString() + ") contains ";
        if (client.Customers.Count > 0)
          str += "clients, ";
        if (client.ProductionAccounts.Count > 0)
          str += "clients, ";
        if (client.Ideas.Count > 0)
          str += "ideas, ";
        if (client.TenantSubscriptions.Count > 0)
          str += "subscriptions, ";
        if (client.AgencySubscriptions.Count > 0)
          str += "subscriptions, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Client client, Transaction transaction)
    {
      try
      {
        if (client.Id == null)
          return DataStoreResult.Success;
        Client core = _dataSet.BusinessClients.SingleOrDefault<Client>((Func<Client, bool>) (x => x.Id == client.Id));
        if (core == null)
          return DataStoreResult.Success;
        this.GetBusinessApplications(client);
        foreach (SilkFlo.Data.Core.Domain.Business.Application m in client.Applications)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessComments(client);
        foreach (Comment m in client.Comments)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessDepartments(client);
        foreach (Department m in client.Departments)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessDocuments(client);
        foreach (Document m in client.Documents)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessIdeaOtherRunningCosts(client);
        foreach (IdeaOtherRunningCost m in client.IdeaOtherRunningCosts)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessIdeaRunningCosts(client);
        foreach (IdeaRunningCost m in client.IdeaRunningCosts)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessImplementationCosts(client);
        foreach (ImplementationCost m in client.ImplementationCosts)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessLocations(client);
        foreach (Location m in client.Locations)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetAgencyManageTenants(client);
        foreach (ManageTenant m in client.ManageTenants)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetMessages(client);
        foreach (Message m in client.Messages)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessOtherRunningCosts(client);
        foreach (OtherRunningCost m in client.OtherRunningCosts)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessProcesses(client);
        foreach (Process m in client.Processes)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessRoles(client);
        foreach (SilkFlo.Data.Core.Domain.Business.BusinessRole m in client.Roles)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessRoleCosts(client);
        foreach (RoleCost m in client.RoleCosts)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessRoleIdeaAuthorisations(client);
        foreach (RoleIdeaAuthorisation m in client.RoleIdeaAuthorisations)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessRunningCosts(client);
        foreach (RunningCost m in client.RunningCosts)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessSoftwareVenders(client);
        foreach (SoftwareVender m in client.SoftwareVenders)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessTeams(client);
        foreach (Team m in client.Teams)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetUsers(client);
        foreach (User m in client.Users)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessVersions(client);
        foreach (SilkFlo.Data.Core.Domain.Business.Version m in client.Versions)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        await this.RefreshCanDeleteAsync(client, transaction);
        if (client.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessClients.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The client (" + client.ToString() + ") contains ";
        if (client.Customers.Count > 0)
          erorrMessage += "clients, ";
        if (client.ProductionAccounts.Count > 0)
          erorrMessage += "clients, ";
        if (client.Ideas.Count > 0)
          erorrMessage += "ideas, ";
        if (client.TenantSubscriptions.Count > 0)
          erorrMessage += "subscriptions, ";
        if (client.AgencySubscriptions.Count > 0)
          erorrMessage += "subscriptions, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessClient(string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessClients.SingleOrDefault<Client>((Func<Client, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The client is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsyncBusinessClient(string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Client client = _dataSet.BusinessClients.SingleOrDefault<Client>((Func<Client, bool>) (x => x.Id == Id));
        if (client == null)
          throw new NotFoundException("The client is not found");
        dataStoreResult = await this.DeleteAsync(client, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(Client client, Transaction transaction)
    {
      if (client == null)
        return;
      if (client.Id == null)
      {
        client.CanDelete = true;
      }
      else
      {
        this.GetBusinessApplications(client, transaction);
        this.GetBusinessCustomers(client, transaction);
        this.GetBusinessProductionAccounts(client, transaction);
        this.GetBusinessComments(client, transaction);
        this.GetBusinessDepartments(client, transaction);
        this.GetBusinessDocuments(client, transaction);
        this.GetBusinessIdeas(client, transaction);
        this.GetBusinessIdeaOtherRunningCosts(client, transaction);
        this.GetBusinessIdeaRunningCosts(client, transaction);
        this.GetBusinessImplementationCosts(client, transaction);
        this.GetBusinessLocations(client, transaction);
        this.GetAgencyManageTenants(client, transaction);
        this.GetMessages(client, transaction);
        this.GetBusinessOtherRunningCosts(client, transaction);
        this.GetBusinessProcesses(client, transaction);
        this.GetBusinessRoles(client, transaction);
        this.GetBusinessRoleCosts(client, transaction);
        this.GetBusinessRoleIdeaAuthorisations(client, transaction);
        this.GetBusinessRunningCosts(client, transaction);
        this.GetBusinessSoftwareVenders(client, transaction);
        this.GetShopTenantSubscriptions(client, transaction);
        this.GetShopAgencySubscriptions(client, transaction);
        this.GetBusinessTeams(client, transaction);
        this.GetUsers(client, transaction);
        this.GetBusinessVersions(client, transaction);
        client.CanDelete = client.Applications.Count + client.Customers.Count + client.ProductionAccounts.Count + client.Comments.Count + client.Departments.Count + client.Documents.Count + client.Ideas.Count + client.IdeaOtherRunningCosts.Count + client.IdeaRunningCosts.Count + client.ImplementationCosts.Count + client.Locations.Count + client.ManageTenants.Count + client.Messages.Count + client.OtherRunningCosts.Count + client.Processes.Count + client.Roles.Count + client.RoleCosts.Count + client.RoleIdeaAuthorisations.Count + client.RunningCosts.Count + client.SoftwareVenders.Count + client.TenantSubscriptions.Count + client.AgencySubscriptions.Count + client.Teams.Count + client.Users.Count + client.Versions.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(Client client, Transaction transaction)
    {
      if (client == null)
        return;
      if (client.Id == null)
      {
        client.CanDelete = true;
      }
      else
      {
        await this.GetBusinessCustomersAsync(client, transaction);
        await this.GetBusinessProductionAccountsAsync(client, transaction);
        await this.GetBusinessIdeasAsync(client, transaction);
        await this.GetShopTenantSubscriptionsAsync(client, transaction);
        await this.GetShopAgencySubscriptionsAsync(client, transaction);
        client.CanDelete = client.Customers.Count + client.ProductionAccounts.Count + client.Ideas.Count + client.TenantSubscriptions.Count + client.AgencySubscriptions.Count <= 0;
      }
    }

    public Client FindBusinessClient(string Id) => Id == null ? (Client) null : _dataSet.BusinessClients.SingleOrDefault<Client>((Func<Client, bool>) (x => x.Id == Id));

    public async Task<Client> FindBusinessClientAsync(string Id)
    {
      Client businessClientAsync;
      try
      {
        businessClientAsync = await Task.Run<Client>((Func<Client>) (() => this.FindBusinessClient(Id)));
      }
      catch
      {
        throw;
      }
      return businessClientAsync;
    }

    public List<Client> GetBusinessClientByDate(DateTime date) => _dataSet.BusinessClients.Where<Client>((Func<Client, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Client>();

    public async Task<List<Client>> GetBusinessClientByDateAsync(DateTime date)
    {
      List<Client> clientByDateAsync;
      try
      {
        clientByDateAsync = await Task.Run<List<Client>>((Func<List<Client>>) (() => this.GetBusinessClientByDate(date)));
      }
      catch
      {
        throw;
      }
      return clientByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Client> cores)
    {
      try
      {
        foreach (Client core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Client> cores)
    {
      try
      {
        foreach (Client core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Client client)
    {
      if (client == null)
        return;
      if (client.CreatedById != null && client.CreatedBy == null)
        client.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == client.CreatedById));
      if (client.UpdatedById == null || client.UpdatedBy != null)
        return;
      client.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == client.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Client client)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(client)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessApplications(Client client) => this.GetBusinessApplications(client, (Transaction) null);

    internal async Task GetBusinessApplicationsAsync(Client client) => await this.GetBusinessApplicationsAsync(client, (Transaction) null);

    internal void GetBusinessApplications(Client client, Transaction transaction)
    {
      if (client != null)
        client.Applications = _dataSet.BusinessApplications.Where<SilkFlo.Data.Core.Domain.Business.Application>((Func<SilkFlo.Data.Core.Domain.Business.Application, bool>) (m => m.ClientId == client.Id)).ToList<SilkFlo.Data.Core.Domain.Business.Application>();
      if (transaction == null)
        return;
      for (int index = client.Applications.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) client.Applications[index]) == Action.Delete)
          client.Applications.Remove(client.Applications[index]);
      }
    }

    internal async Task GetBusinessApplicationsAsync(Client client, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessApplications(client, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessCustomers(Client agency) => this.GetBusinessCustomers(agency, (Transaction) null);

    internal async Task GetBusinessCustomersAsync(Client agency) => await this.GetBusinessCustomersAsync(agency, (Transaction) null);

    internal void GetBusinessCustomers(Client agency, Transaction transaction)
    {
      if (agency != null)
        agency.Customers = _dataSet.BusinessClients.Where<Client>((Func<Client, bool>) (m => m.AgencyId == agency.Id)).ToList<Client>();
      if (transaction == null)
        return;
      for (int index = agency.Customers.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) agency.Customers[index]) == Action.Delete)
          agency.Customers.Remove(agency.Customers[index]);
      }
    }

    internal async Task GetBusinessCustomersAsync(Client agency, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessCustomers(agency, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessProductionAccounts(Client practiceAccount) => this.GetBusinessProductionAccounts(practiceAccount, (Transaction) null);

    internal async Task GetBusinessProductionAccountsAsync(Client practiceAccount) => await this.GetBusinessProductionAccountsAsync(practiceAccount, (Transaction) null);

    internal void GetBusinessProductionAccounts(Client practiceAccount, Transaction transaction)
    {
      if (practiceAccount != null)
        practiceAccount.ProductionAccounts = _dataSet.BusinessClients.Where<Client>((Func<Client, bool>) (m => m.PracticeId == practiceAccount.Id)).ToList<Client>();
      if (transaction == null)
        return;
      for (int index = practiceAccount.ProductionAccounts.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) practiceAccount.ProductionAccounts[index]) == Action.Delete)
          practiceAccount.ProductionAccounts.Remove(practiceAccount.ProductionAccounts[index]);
      }
    }

    internal async Task GetBusinessProductionAccountsAsync(Client practiceAccount, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessProductionAccounts(practiceAccount, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessComments(Client client) => this.GetBusinessComments(client, (Transaction) null);

    internal async Task GetBusinessCommentsAsync(Client client) => await this.GetBusinessCommentsAsync(client, (Transaction) null);

    internal void GetBusinessComments(Client client, Transaction transaction)
    {
      if (client != null)
        client.Comments = _dataSet.BusinessComments.Where<Comment>((Func<Comment, bool>) (m => m.ClientId == client.Id)).ToList<Comment>();
      if (transaction == null)
        return;
      for (int index = client.Comments.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) client.Comments[index]) == Action.Delete)
          client.Comments.Remove(client.Comments[index]);
      }
    }

    internal async Task GetBusinessCommentsAsync(Client client, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessComments(client, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessDepartments(Client client) => this.GetBusinessDepartments(client, (Transaction) null);

    internal async Task GetBusinessDepartmentsAsync(Client client) => await this.GetBusinessDepartmentsAsync(client, (Transaction) null);

    internal void GetBusinessDepartments(Client client, Transaction transaction)
    {
      if (client != null)
        client.Departments = _dataSet.BusinessDepartments.Where<Department>((Func<Department, bool>) (m => m.ClientId == client.Id)).ToList<Department>();
      if (transaction == null)
        return;
      for (int index = client.Departments.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) client.Departments[index]) == Action.Delete)
          client.Departments.Remove(client.Departments[index]);
      }
    }

    internal async Task GetBusinessDepartmentsAsync(Client client, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessDepartments(client, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessDocuments(Client client) => this.GetBusinessDocuments(client, (Transaction) null);

    internal async Task GetBusinessDocumentsAsync(Client client) => await this.GetBusinessDocumentsAsync(client, (Transaction) null);

    internal void GetBusinessDocuments(Client client, Transaction transaction)
    {
      if (client != null)
        client.Documents = _dataSet.BusinessDocuments.Where<Document>((Func<Document, bool>) (m => m.ClientId == client.Id)).ToList<Document>();
      if (transaction == null)
        return;
      for (int index = client.Documents.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) client.Documents[index]) == Action.Delete)
          client.Documents.Remove(client.Documents[index]);
      }
    }

    internal async Task GetBusinessDocumentsAsync(Client client, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessDocuments(client, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeas(Client client) => this.GetBusinessIdeas(client, (Transaction) null);

    internal async Task GetBusinessIdeasAsync(Client client) => await this.GetBusinessIdeasAsync(client, (Transaction) null);

    internal void GetBusinessIdeas(Client client, Transaction transaction)
    {
      if (client != null)
        client.Ideas = _dataSet.BusinessIdeas.Where<Idea>((Func<Idea, bool>) (m => m.ClientId == client.Id)).ToList<Idea>();
      if (transaction == null)
        return;
      for (int index = client.Ideas.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) client.Ideas[index]) == Action.Delete)
          client.Ideas.Remove(client.Ideas[index]);
      }
    }

    internal async Task GetBusinessIdeasAsync(Client client, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeas(client, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeaOtherRunningCosts(Client client) => this.GetBusinessIdeaOtherRunningCosts(client, (Transaction) null);

    internal async Task GetBusinessIdeaOtherRunningCostsAsync(Client client) => await this.GetBusinessIdeaOtherRunningCostsAsync(client, (Transaction) null);

    internal void GetBusinessIdeaOtherRunningCosts(Client client, Transaction transaction)
    {
      if (client != null)
        client.IdeaOtherRunningCosts = _dataSet.BusinessIdeaOtherRunningCosts.Where<IdeaOtherRunningCost>((Func<IdeaOtherRunningCost, bool>) (m => m.ClientId == client.Id)).ToList<IdeaOtherRunningCost>();
      if (transaction == null)
        return;
      for (int index = client.IdeaOtherRunningCosts.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) client.IdeaOtherRunningCosts[index]) == Action.Delete)
          client.IdeaOtherRunningCosts.Remove(client.IdeaOtherRunningCosts[index]);
      }
    }

    internal async Task GetBusinessIdeaOtherRunningCostsAsync(Client client, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeaOtherRunningCosts(client, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeaRunningCosts(Client client) => this.GetBusinessIdeaRunningCosts(client, (Transaction) null);

    internal async Task GetBusinessIdeaRunningCostsAsync(Client client) => await this.GetBusinessIdeaRunningCostsAsync(client, (Transaction) null);

    internal void GetBusinessIdeaRunningCosts(Client client, Transaction transaction)
    {
      if (client != null)
        client.IdeaRunningCosts = _dataSet.BusinessIdeaRunningCosts.Where<IdeaRunningCost>((Func<IdeaRunningCost, bool>) (m => m.ClientId == client.Id)).ToList<IdeaRunningCost>();
      if (transaction == null)
        return;
      for (int index = client.IdeaRunningCosts.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) client.IdeaRunningCosts[index]) == Action.Delete)
          client.IdeaRunningCosts.Remove(client.IdeaRunningCosts[index]);
      }
    }

    internal async Task GetBusinessIdeaRunningCostsAsync(Client client, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeaRunningCosts(client, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessImplementationCosts(Client client) => this.GetBusinessImplementationCosts(client, (Transaction) null);

    internal async Task GetBusinessImplementationCostsAsync(Client client) => await this.GetBusinessImplementationCostsAsync(client, (Transaction) null);

    internal void GetBusinessImplementationCosts(Client client, Transaction transaction)
    {
      if (client != null)
        client.ImplementationCosts = _dataSet.BusinessImplementationCosts.Where<ImplementationCost>((Func<ImplementationCost, bool>) (m => m.ClientId == client.Id)).ToList<ImplementationCost>();
      if (transaction == null)
        return;
      for (int index = client.ImplementationCosts.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) client.ImplementationCosts[index]) == Action.Delete)
          client.ImplementationCosts.Remove(client.ImplementationCosts[index]);
      }
    }

    internal async Task GetBusinessImplementationCostsAsync(Client client, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessImplementationCosts(client, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessLocations(Client client) => this.GetBusinessLocations(client, (Transaction) null);

    internal async Task GetBusinessLocationsAsync(Client client) => await this.GetBusinessLocationsAsync(client, (Transaction) null);

    internal void GetBusinessLocations(Client client, Transaction transaction)
    {
      if (client != null)
        client.Locations = _dataSet.BusinessLocations.Where<Location>((Func<Location, bool>) (m => m.ClientId == client.Id)).ToList<Location>();
      if (transaction == null)
        return;
      for (int index = client.Locations.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) client.Locations[index]) == Action.Delete)
          client.Locations.Remove(client.Locations[index]);
      }
    }

    internal async Task GetBusinessLocationsAsync(Client client, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessLocations(client, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetAgencyManageTenants(Client tenant) => this.GetAgencyManageTenants(tenant, (Transaction) null);

    internal async Task GetAgencyManageTenantsAsync(Client tenant) => await this.GetAgencyManageTenantsAsync(tenant, (Transaction) null);

    internal void GetAgencyManageTenants(Client tenant, Transaction transaction)
    {
      if (tenant != null)
        tenant.ManageTenants = _dataSet.AgencyManageTenants.Where<ManageTenant>((Func<ManageTenant, bool>) (m => m.TenantId == tenant.Id)).ToList<ManageTenant>();
      if (transaction == null)
        return;
      for (int index = tenant.ManageTenants.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) tenant.ManageTenants[index]) == Action.Delete)
          tenant.ManageTenants.Remove(tenant.ManageTenants[index]);
      }
    }

    internal async Task GetAgencyManageTenantsAsync(Client tenant, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetAgencyManageTenants(tenant, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetMessages(Client client) => this.GetMessages(client, (Transaction) null);

    internal async Task GetMessagesAsync(Client client) => await this.GetMessagesAsync(client, (Transaction) null);

    internal void GetMessages(Client client, Transaction transaction)
    {
      if (client != null)
        client.Messages = _dataSet.Messages.Where<Message>((Func<Message, bool>) (m => m.ClientId == client.Id)).ToList<Message>();
      if (transaction == null)
        return;
      for (int index = client.Messages.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) client.Messages[index]) == Action.Delete)
          client.Messages.Remove(client.Messages[index]);
      }
    }

    internal async Task GetMessagesAsync(Client client, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetMessages(client, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessOtherRunningCosts(Client client) => this.GetBusinessOtherRunningCosts(client, (Transaction) null);

    internal async Task GetBusinessOtherRunningCostsAsync(Client client) => await this.GetBusinessOtherRunningCostsAsync(client, (Transaction) null);

    internal void GetBusinessOtherRunningCosts(Client client, Transaction transaction)
    {
      if (client != null)
        client.OtherRunningCosts = _dataSet.BusinessOtherRunningCosts.Where<OtherRunningCost>((Func<OtherRunningCost, bool>) (m => m.ClientId == client.Id)).ToList<OtherRunningCost>();
      if (transaction == null)
        return;
      for (int index = client.OtherRunningCosts.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) client.OtherRunningCosts[index]) == Action.Delete)
          client.OtherRunningCosts.Remove(client.OtherRunningCosts[index]);
      }
    }

    internal async Task GetBusinessOtherRunningCostsAsync(Client client, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessOtherRunningCosts(client, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessProcesses(Client client) => this.GetBusinessProcesses(client, (Transaction) null);

    internal async Task GetBusinessProcessesAsync(Client client) => await this.GetBusinessProcessesAsync(client, (Transaction) null);

    internal void GetBusinessProcesses(Client client, Transaction transaction)
    {
      if (client != null)
        client.Processes = _dataSet.BusinessProcesses.Where<Process>((Func<Process, bool>) (m => m.ClientId == client.Id)).ToList<Process>();
      if (transaction == null)
        return;
      for (int index = client.Processes.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) client.Processes[index]) == Action.Delete)
          client.Processes.Remove(client.Processes[index]);
      }
    }

    internal async Task GetBusinessProcessesAsync(Client client, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessProcesses(client, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessRoles(Client client) => this.GetBusinessRoles(client, (Transaction) null);

    internal async Task GetBusinessRolesAsync(Client client) => await this.GetBusinessRolesAsync(client, (Transaction) null);

    internal void GetBusinessRoles(Client client, Transaction transaction)
    {
      if (client != null)
        client.Roles = _dataSet.BusinessRoles.Where<SilkFlo.Data.Core.Domain.Business.BusinessRole>((Func<SilkFlo.Data.Core.Domain.Business.BusinessRole, bool>) (m => m.ClientId == client.Id)).ToList<SilkFlo.Data.Core.Domain.Business.BusinessRole>();
      if (transaction == null)
        return;
      for (int index = client.Roles.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) client.Roles[index]) == Action.Delete)
          client.Roles.Remove(client.Roles[index]);
      }
    }

    internal async Task GetBusinessRolesAsync(Client client, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessRoles(client, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessRoleCosts(Client client) => this.GetBusinessRoleCosts(client, (Transaction) null);

    internal async Task GetBusinessRoleCostsAsync(Client client) => await this.GetBusinessRoleCostsAsync(client, (Transaction) null);

    internal void GetBusinessRoleCosts(Client client, Transaction transaction)
    {
      if (client != null)
        client.RoleCosts = _dataSet.BusinessRoleCosts.Where<RoleCost>((Func<RoleCost, bool>) (m => m.ClientId == client.Id)).ToList<RoleCost>();
      if (transaction == null)
        return;
      for (int index = client.RoleCosts.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) client.RoleCosts[index]) == Action.Delete)
          client.RoleCosts.Remove(client.RoleCosts[index]);
      }
    }

    internal async Task GetBusinessRoleCostsAsync(Client client, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessRoleCosts(client, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessRoleIdeaAuthorisations(Client client) => this.GetBusinessRoleIdeaAuthorisations(client, (Transaction) null);

    internal async Task GetBusinessRoleIdeaAuthorisationsAsync(Client client) => await this.GetBusinessRoleIdeaAuthorisationsAsync(client, (Transaction) null);

    internal void GetBusinessRoleIdeaAuthorisations(Client client, Transaction transaction)
    {
      if (client != null)
        client.RoleIdeaAuthorisations = _dataSet.BusinessRoleIdeaAuthorisations.Where<RoleIdeaAuthorisation>((Func<RoleIdeaAuthorisation, bool>) (m => m.ClientId == client.Id)).ToList<RoleIdeaAuthorisation>();
      if (transaction == null)
        return;
      for (int index = client.RoleIdeaAuthorisations.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) client.RoleIdeaAuthorisations[index]) == Action.Delete)
          client.RoleIdeaAuthorisations.Remove(client.RoleIdeaAuthorisations[index]);
      }
    }

    internal async Task GetBusinessRoleIdeaAuthorisationsAsync(Client client, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessRoleIdeaAuthorisations(client, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessRunningCosts(Client client) => this.GetBusinessRunningCosts(client, (Transaction) null);

    internal async Task GetBusinessRunningCostsAsync(Client client) => await this.GetBusinessRunningCostsAsync(client, (Transaction) null);

    internal void GetBusinessRunningCosts(Client client, Transaction transaction)
    {
      if (client != null)
        client.RunningCosts = _dataSet.BusinessRunningCosts.Where<RunningCost>((Func<RunningCost, bool>) (m => m.ClientId == client.Id)).ToList<RunningCost>();
      if (transaction == null)
        return;
      for (int index = client.RunningCosts.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) client.RunningCosts[index]) == Action.Delete)
          client.RunningCosts.Remove(client.RunningCosts[index]);
      }
    }

    internal async Task GetBusinessRunningCostsAsync(Client client, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessRunningCosts(client, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessSoftwareVenders(Client client) => this.GetBusinessSoftwareVenders(client, (Transaction) null);

    internal async Task GetBusinessSoftwareVendersAsync(Client client) => await this.GetBusinessSoftwareVendersAsync(client, (Transaction) null);

    internal void GetBusinessSoftwareVenders(Client client, Transaction transaction)
    {
      if (client != null)
        client.SoftwareVenders = _dataSet.BusinessSoftwareVenders.Where<SoftwareVender>((Func<SoftwareVender, bool>) (m => m.ClientId == client.Id)).ToList<SoftwareVender>();
      if (transaction == null)
        return;
      for (int index = client.SoftwareVenders.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) client.SoftwareVenders[index]) == Action.Delete)
          client.SoftwareVenders.Remove(client.SoftwareVenders[index]);
      }
    }

    internal async Task GetBusinessSoftwareVendersAsync(Client client, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessSoftwareVenders(client, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetShopTenantSubscriptions(Client tenant) => this.GetShopTenantSubscriptions(tenant, (Transaction) null);

    internal async Task GetShopTenantSubscriptionsAsync(Client tenant) => await this.GetShopTenantSubscriptionsAsync(tenant, (Transaction) null);

    internal void GetShopTenantSubscriptions(Client tenant, Transaction transaction)
    {
      if (tenant != null)
        tenant.TenantSubscriptions = _dataSet.ShopSubscriptions.Where<Subscription>((Func<Subscription, bool>) (m => m.TenantId == tenant.Id)).ToList<Subscription>();
      if (transaction == null)
        return;
      for (int index = tenant.TenantSubscriptions.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) tenant.TenantSubscriptions[index]) == Action.Delete)
          tenant.TenantSubscriptions.Remove(tenant.TenantSubscriptions[index]);
      }
    }

    internal async Task GetShopTenantSubscriptionsAsync(Client tenant, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetShopTenantSubscriptions(tenant, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetShopAgencySubscriptions(Client agency) => this.GetShopAgencySubscriptions(agency, (Transaction) null);

    internal async Task GetShopAgencySubscriptionsAsync(Client agency) => await this.GetShopAgencySubscriptionsAsync(agency, (Transaction) null);

    internal void GetShopAgencySubscriptions(Client agency, Transaction transaction)
    {
      if (agency != null)
        agency.AgencySubscriptions = _dataSet.ShopSubscriptions.Where<Subscription>((Func<Subscription, bool>) (m => m.AgencyId == agency.Id)).ToList<Subscription>();
      if (transaction == null)
        return;
      for (int index = agency.AgencySubscriptions.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) agency.AgencySubscriptions[index]) == Action.Delete)
          agency.AgencySubscriptions.Remove(agency.AgencySubscriptions[index]);
      }
    }

    internal async Task GetShopAgencySubscriptionsAsync(Client agency, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetShopAgencySubscriptions(agency, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessTeams(Client client) => this.GetBusinessTeams(client, (Transaction) null);

    internal async Task GetBusinessTeamsAsync(Client client) => await this.GetBusinessTeamsAsync(client, (Transaction) null);

    internal void GetBusinessTeams(Client client, Transaction transaction)
    {
      if (client != null)
        client.Teams = _dataSet.BusinessTeams.Where<Team>((Func<Team, bool>) (m => m.ClientId == client.Id)).ToList<Team>();
      if (transaction == null)
        return;
      for (int index = client.Teams.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) client.Teams[index]) == Action.Delete)
          client.Teams.Remove(client.Teams[index]);
      }
    }

    internal async Task GetBusinessTeamsAsync(Client client, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessTeams(client, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetUsers(Client client) => this.GetUsers(client, (Transaction) null);

    internal async Task GetUsersAsync(Client client) => await this.GetUsersAsync(client, (Transaction) null);

    internal void GetUsers(Client client, Transaction transaction)
    {
      if (client != null)
        client.Users = _dataSet.Users.Where<User>((Func<User, bool>) (m => m.ClientId == client.Id)).ToList<User>();
      if (transaction == null)
        return;
      for (int index = client.Users.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) client.Users[index]) == Action.Delete)
          client.Users.Remove(client.Users[index]);
      }
    }

    internal async Task GetUsersAsync(Client client, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetUsers(client, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessVersions(Client client) => this.GetBusinessVersions(client, (Transaction) null);

    internal async Task GetBusinessVersionsAsync(Client client) => await this.GetBusinessVersionsAsync(client, (Transaction) null);

    internal void GetBusinessVersions(Client client, Transaction transaction)
    {
      if (client != null)
        client.Versions = _dataSet.BusinessVersions.Where<SilkFlo.Data.Core.Domain.Business.Version>((Func<SilkFlo.Data.Core.Domain.Business.Version, bool>) (m => m.ClientId == client.Id)).ToList<SilkFlo.Data.Core.Domain.Business.Version>();
      if (transaction == null)
        return;
      for (int index = client.Versions.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) client.Versions[index]) == Action.Delete)
          client.Versions.Remove(client.Versions[index]);
      }
    }

    internal async Task GetBusinessVersionsAsync(Client client, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessVersions(client, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public void GetAccountOwner(Client client)
    {
      if (client == null)
        return;
      foreach (User user in (List<User>) _dataSet.Users.ToList())
      {
        if (client.AccountOwnerId != null && user.Id == client.AccountOwnerId)
        {
          client.AccountOwner = user;
          break;
        }
      }
    }

    public async Task GetAccountOwnerAsync(Client client)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetAccountOwner(client)));
      }
      catch
      {
        throw;
      }
    }

    public void GetAccountOwners(IEnumerable<Client> clients)
    {
      foreach (Client client in clients)
        this.GetAccountOwner(client);
    }

    public async Task GetAccountOwnersAsync(IEnumerable<Client> clients)
    {
      foreach (Client client in clients)
        await this.GetAccountOwnerAsync(client);
    }

    public void GetShopAgencyDiscount(Client client)
    {
      if (client == null)
        return;
      foreach (Discount shopDiscount in (List<Discount>) _dataSet.ShopDiscounts.ToList())
      {
        if (client.AgencyDiscountId != null && shopDiscount.Id == client.AgencyDiscountId)
        {
          client.AgencyDiscount = shopDiscount;
          break;
        }
      }
    }

    public async Task GetShopAgencyDiscountAsync(Client client)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetShopAgencyDiscount(client)));
      }
      catch
      {
        throw;
      }
    }

    public void GetShopAgencyDiscounts(IEnumerable<Client> clients)
    {
      foreach (Client client in clients)
        this.GetShopAgencyDiscount(client);
    }

    public async Task GetShopAgencyDiscountsAsync(IEnumerable<Client> clients)
    {
      foreach (Client client in clients)
        await this.GetShopAgencyDiscountAsync(client);
    }

    public void GetBusinessAgency(Client client)
    {
      if (client == null)
        return;
      foreach (Client businessClient in (List<Client>) _dataSet.BusinessClients.ToList())
      {
        if (client.AgencyId != null && businessClient.Id == client.AgencyId)
        {
          client.Agency = businessClient;
          break;
        }
      }
    }

    public async Task GetBusinessAgencyAsync(Client client)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessAgency(client)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessAgencies(IEnumerable<Client> clients)
    {
      foreach (Client client in clients)
        this.GetBusinessAgency(client);
    }

    public async Task GetBusinessAgenciesAsync(IEnumerable<Client> clients)
    {
      foreach (Client client in clients)
        await this.GetBusinessAgencyAsync(client);
    }

    public void GetSharedCountry(Client client)
    {
      if (client == null)
        return;
      foreach (Country sharedCountry in (List<Country>) _dataSet.SharedCountries.ToList())
      {
        if (client.CountryId != null && sharedCountry.Id == client.CountryId)
        {
          client.Country = sharedCountry;
          break;
        }
      }
    }

    public async Task GetSharedCountryAsync(Client client)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedCountry(client)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedCountries(IEnumerable<Client> clients)
    {
      foreach (Client client in clients)
        this.GetSharedCountry(client);
    }

    public async Task GetSharedCountriesAsync(IEnumerable<Client> clients)
    {
      foreach (Client client in clients)
        await this.GetSharedCountryAsync(client);
    }

    public void GetShopCurrency(Client client)
    {
      if (client == null)
        return;
      foreach (Currency shopCurrency in (List<Currency>) _dataSet.ShopCurrencies.ToList())
      {
        if (client.CurrencyId != null && shopCurrency.Id == client.CurrencyId)
        {
          client.Currency = shopCurrency;
          break;
        }
      }
    }

    public async Task GetShopCurrencyAsync(Client client)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetShopCurrency(client)));
      }
      catch
      {
        throw;
      }
    }

    public void GetShopCurrencies(IEnumerable<Client> clients)
    {
      foreach (Client client in clients)
        this.GetShopCurrency(client);
    }

    public async Task GetShopCurrenciesAsync(IEnumerable<Client> clients)
    {
      foreach (Client client in clients)
        await this.GetShopCurrencyAsync(client);
    }

    public void GetSharedIndustry(Client client)
    {
      if (client == null)
        return;
      foreach (Industry sharedIndustry in (List<Industry>) _dataSet.SharedIndustries.ToList())
      {
        if (client.IndustryId != null && sharedIndustry.Id == client.IndustryId)
        {
          client.Industry = sharedIndustry;
          break;
        }
      }
    }

    public async Task GetSharedIndustryAsync(Client client)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedIndustry(client)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedIndustries(IEnumerable<Client> clients)
    {
      foreach (Client client in clients)
        this.GetSharedIndustry(client);
    }

    public async Task GetSharedIndustriesAsync(IEnumerable<Client> clients)
    {
      foreach (Client client in clients)
        await this.GetSharedIndustryAsync(client);
    }

    public void GetSharedLanguage(Client client)
    {
      if (client == null)
        return;
      foreach (Language sharedLanguage in (List<Language>) _dataSet.SharedLanguages.ToList())
      {
        if (client.LanguageId != null && sharedLanguage.Id == client.LanguageId)
        {
          client.Language = sharedLanguage;
          break;
        }
      }
    }

    public async Task GetSharedLanguageAsync(Client client)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedLanguage(client)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedLanguages(IEnumerable<Client> clients)
    {
      foreach (Client client in clients)
        this.GetSharedLanguage(client);
    }

    public async Task GetSharedLanguagesAsync(IEnumerable<Client> clients)
    {
      foreach (Client client in clients)
        await this.GetSharedLanguageAsync(client);
    }

    public void GetBusinessPracticeAccount(Client client)
    {
      if (client == null)
        return;
      foreach (Client businessClient in (List<Client>) _dataSet.BusinessClients.ToList())
      {
        if (client.PracticeId != null && businessClient.Id == client.PracticeId)
        {
          client.PracticeAccount = businessClient;
          break;
        }
      }
    }

    public async Task GetBusinessPracticeAccountAsync(Client client)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessPracticeAccount(client)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessPracticeAccounts(IEnumerable<Client> clients)
    {
      foreach (Client client in clients)
        this.GetBusinessPracticeAccount(client);
    }

    public async Task GetBusinessPracticeAccountsAsync(IEnumerable<Client> clients)
    {
      foreach (Client client in clients)
        await this.GetBusinessPracticeAccountAsync(client);
    }

    public void GetSharedType(Client client)
    {
      if (client == null)
        return;
      foreach (ClientType sharedClientType in (List<ClientType>) _dataSet.SharedClientTypes.ToList())
      {
        if (client.TypeId != null && sharedClientType.Id == client.TypeId)
        {
          client.Type = sharedClientType;
          break;
        }
      }
    }

    public async Task GetSharedTypeAsync(Client client)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedType(client)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedTypes(IEnumerable<Client> clients)
    {
      foreach (Client client in clients)
        this.GetSharedType(client);
    }

    public async Task GetSharedTypesAsync(IEnumerable<Client> clients)
    {
      foreach (Client client in clients)
        await this.GetSharedTypeAsync(client);
    }
        #endregion

        #region CollaboratorTable-IO
        public string Validate(Collaborator core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(Collaborator core)
    {
      string messages = "";
      if (core.Idea == null)
      {
        if (string.IsNullOrWhiteSpace(core.IdeaId))
        {
          messages += "Business.Collaborator.IdeaId: Idea missing; ";
        }
        else
        {
          Idea parent = _dataSet.BusinessIdeas.SingleOrDefault<Idea>((Func<Idea, bool>) (x => x.Id == core.IdeaId));
          if (parent == null)
            messages += "Business.Collaborator.IdeaId: Idea invalid; ";
          parent = (Idea) null;
        }
      }
      if (core.User == null)
      {
        if (string.IsNullOrWhiteSpace(core.UserId))
        {
          messages += "Business.Collaborator.UserId: Collaborator missing; ";
        }
        else
        {
          User parent = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (x => x.Id == core.UserId));
          if (parent == null)
            messages += "Business.Collaborator.UserId: Collaborator invalid; ";
          parent = (User) null;
        }
      }
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(Collaborator core)
    {
      string str = "";
      if (_dataSet.BusinessCollaborators.ToList<Collaborator>().FirstOrDefault<Collaborator>((Func<Collaborator, bool>) (x => x.Id != (core.Id ?? "") && x.IdeaId == core.IdeaId && x.UserId == core.UserId)) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this idea and collaborator.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(Collaborator core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<Collaborator> collaborators)
    {
      try
      {
        foreach (Collaborator collaborator in collaborators)
          this.Add(collaborator);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Collaborator> collaborators)
    {
      try
      {
        foreach (Collaborator collaborator in collaborators)
          await this.AddAsync(collaborator);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Collaborator core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          Collaborator collaborator = (Collaborator) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            collaborator = _dataSet.BusinessCollaborators.SingleOrDefault<Collaborator>((Func<Collaborator, bool>) (x => x.Id == core.Id));
          if (collaborator == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessCollaborators.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////collaborator.Update(core);
                        ///

                        _dataSet.Entry(collaborator).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        collaborator.Update(core);
                        _dataSet.BusinessCollaborators.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          collaborator = (Collaborator) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Collaborator core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Collaborator collaborator, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(collaborator, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Collaborator collaborator, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(collaborator, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Collaborator> collaborators, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (collaborators == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Collaborator collaborator in collaborators.ToList<Collaborator>())
        {
          dataStoreResult = this.Delete(collaborator, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<Collaborator> collaborators, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (collaborators == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Collaborator> lst = collaborators.ToList<Collaborator>();
        foreach (Collaborator collaborator in lst)
        {
          Collaborator item = collaborator;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Collaborator) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Collaborator collaborator, Transaction transaction)
    {
      try
      {
        if (collaborator.Id == null)
          return DataStoreResult.Success;
        Collaborator entity = _dataSet.BusinessCollaborators.SingleOrDefault<Collaborator>((Func<Collaborator, bool>) (x => x.Id == collaborator.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.GetBusinessCollaboratorRoles(collaborator);
        foreach (CollaboratorRole collaboratorRole in collaborator.CollaboratorRoles)
        {
          int num = (int) this.Delete(collaboratorRole, transaction);
        }
        this.RefreshCanDelete(collaborator, transaction);
        if (!collaborator.CanDelete)
          throw new ChildDependencyException("The collaborator (" + collaborator.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.BusinessCollaborators.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Collaborator collaborator, Transaction transaction)
    {
      try
      {
        if (collaborator.Id == null)
          return DataStoreResult.Success;
        Collaborator core = _dataSet.BusinessCollaborators.SingleOrDefault<Collaborator>((Func<Collaborator, bool>) (x => x.Id == collaborator.Id));
        if (core == null)
          return DataStoreResult.Success;
        this.GetBusinessCollaboratorRoles(collaborator);
        foreach (CollaboratorRole m in collaborator.CollaboratorRoles)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        await this.RefreshCanDeleteAsync(collaborator, transaction);
        if (collaborator.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessCollaborators.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The collaborator (" + collaborator.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessCollaborator(string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessCollaborators.SingleOrDefault<Collaborator>((Func<Collaborator, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The collaborator is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsyncBusinessCollaborator(string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Collaborator collaborator = _dataSet.BusinessCollaborators.SingleOrDefault<Collaborator>((Func<Collaborator, bool>) (x => x.Id == Id));
        if (collaborator == null)
          throw new NotFoundException("The collaborator is not found");
        dataStoreResult = await this.DeleteAsync(collaborator, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(Collaborator collaborator, Transaction transaction)
    {
      if (collaborator == null)
        return;
      if (collaborator.Id == null)
      {
        collaborator.CanDelete = true;
      }
      else
      {
        this.GetBusinessCollaboratorRoles(collaborator, transaction);
        collaborator.CanDelete = collaborator.CollaboratorRoles.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(Collaborator collaborator, Transaction transaction)
    {
      if (collaborator == null)
        return;
      collaborator.CanDelete = true;
    }

    public Collaborator FindBusinessCollaborator(string Id) => Id == null ? (Collaborator) null : _dataSet.BusinessCollaborators.SingleOrDefault<Collaborator>((Func<Collaborator, bool>) (x => x.Id == Id));

    public async Task<Collaborator> FindBusinessCollaboratorAsync(string Id)
    {
      Collaborator collaboratorAsync;
      try
      {
        collaboratorAsync = await Task.Run<Collaborator>((Func<Collaborator>) (() => this.FindBusinessCollaborator(Id)));
      }
      catch
      {
        throw;
      }
      return collaboratorAsync;
    }

    public List<Collaborator> GetBusinessCollaboratorByDate(DateTime date) => _dataSet.BusinessCollaborators.Where<Collaborator>((Func<Collaborator, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Collaborator>();

    public async Task<List<Collaborator>> GetBusinessCollaboratorByDateAsync(DateTime date)
    {
      List<Collaborator> collaboratorByDateAsync;
      try
      {
        collaboratorByDateAsync = await Task.Run<List<Collaborator>>((Func<List<Collaborator>>) (() => this.GetBusinessCollaboratorByDate(date)));
      }
      catch
      {
        throw;
      }
      return collaboratorByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Collaborator> cores)
    {
      try
      {
        foreach (Collaborator core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Collaborator> cores)
    {
      try
      {
        foreach (Collaborator core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Collaborator collaborator)
    {
      if (collaborator == null)
        return;
      if (collaborator.CreatedById != null && collaborator.CreatedBy == null)
        collaborator.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == collaborator.CreatedById));
      if (collaborator.UpdatedById == null || collaborator.UpdatedBy != null)
        return;
      collaborator.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == collaborator.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Collaborator collaborator)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(collaborator)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessCollaboratorRoles(Collaborator collaborator) => this.GetBusinessCollaboratorRoles(collaborator, (Transaction) null);

    internal async Task GetBusinessCollaboratorRolesAsync(Collaborator collaborator) => await this.GetBusinessCollaboratorRolesAsync(collaborator, (Transaction) null);

    internal void GetBusinessCollaboratorRoles(Collaborator collaborator, Transaction transaction)
    {
      if (collaborator != null)
        collaborator.CollaboratorRoles = _dataSet.BusinessCollaboratorRoles.Where<CollaboratorRole>((Func<CollaboratorRole, bool>) (m => m.CollaboratorId == collaborator.Id)).ToList<CollaboratorRole>();
      if (transaction == null)
        return;
      for (int index = collaborator.CollaboratorRoles.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) collaborator.CollaboratorRoles[index]) == Action.Delete)
          collaborator.CollaboratorRoles.Remove(collaborator.CollaboratorRoles[index]);
      }
    }

    internal async Task GetBusinessCollaboratorRolesAsync(Collaborator collaborator, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessCollaboratorRoles(collaborator, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessIdea(Collaborator collaborator)
    {
      if (collaborator == null)
        return;
      foreach (Idea businessIdea in (List<Idea>) _dataSet.BusinessIdeas.ToList())
      {
        if (collaborator.IdeaId != null && businessIdea.Id == collaborator.IdeaId)
        {
          collaborator.Idea = businessIdea;
          break;
        }
      }
    }

    public async Task GetBusinessIdeaAsync(Collaborator collaborator)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdea(collaborator)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessIdeas(IEnumerable<Collaborator> collaborators)
    {
      foreach (Collaborator collaborator in collaborators)
        this.GetBusinessIdea(collaborator);
    }

    public async Task GetBusinessIdeasAsync(IEnumerable<Collaborator> collaborators)
    {
      foreach (Collaborator collaborator in collaborators)
        await this.GetBusinessIdeaAsync(collaborator);
    }

    public void GetInvitedBy(Collaborator collaborator)
    {
      if (collaborator == null)
        return;
      foreach (User user in (List<User>) _dataSet.Users.ToList())
      {
        if (collaborator.InvitedById != null && user.Id == collaborator.InvitedById)
        {
          collaborator.InvitedBy = user;
          break;
        }
      }
    }

    public async Task GetInvitedByAsync(Collaborator collaborator)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetInvitedBy(collaborator)));
      }
      catch
      {
        throw;
      }
    }

    public void GetInvitedBies(IEnumerable<Collaborator> collaborators)
    {
      foreach (Collaborator collaborator in collaborators)
        this.GetInvitedBy(collaborator);
    }

    public async Task GetInvitedBiesAsync(IEnumerable<Collaborator> collaborators)
    {
      foreach (Collaborator collaborator in collaborators)
        await this.GetInvitedByAsync(collaborator);
    }

    public void GetUser(Collaborator collaborator)
    {
      if (collaborator == null)
        return;
      foreach (User user in (List<User>) _dataSet.Users.ToList())
      {
        if (collaborator.UserId != null && user.Id == collaborator.UserId)
        {
          collaborator.User = user;
          break;
        }
      }
    }

    public async Task GetUserAsync(Collaborator collaborator)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetUser(collaborator)));
      }
      catch
      {
        throw;
      }
    }

    public void GetUsers(IEnumerable<Collaborator> collaborators)
    {
      foreach (Collaborator collaborator in collaborators)
        this.GetUser(collaborator);
    }

    public async Task GetUsersAsync(IEnumerable<Collaborator> collaborators)
    {
      foreach (Collaborator collaborator in collaborators)
        await this.GetUserAsync(collaborator);
    }
        #endregion

        #region CollaboratorRoleTable-IO
        public string Validate(CollaboratorRole core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(CollaboratorRole core)
    {
      string messages = "";
      if (core.Collaborator == null)
      {
        if (string.IsNullOrWhiteSpace(core.CollaboratorId))
        {
          messages += "Business.CollaboratorRole.CollaboratorId: Collaborator missing; ";
        }
        else
        {
          Collaborator parent = _dataSet.BusinessCollaborators.SingleOrDefault<Collaborator>((Func<Collaborator, bool>) (x => x.Id == core.CollaboratorId));
          if (parent == null)
            messages += "Business.CollaboratorRole.CollaboratorId: Collaborator invalid; ";
          parent = (Collaborator) null;
        }
      }
      if (core.Role == null)
      {
        if (string.IsNullOrWhiteSpace(core.RoleId))
        {
          messages += "Business.CollaboratorRole.RoleId: Role missing; ";
        }
        else
        {
          SilkFlo.Data.Core.Domain.Business.BusinessRole parent = _dataSet.BusinessRoles.SingleOrDefault<SilkFlo.Data.Core.Domain.Business.BusinessRole>((Func<SilkFlo.Data.Core.Domain.Business.BusinessRole, bool>) (x => x.Id == core.RoleId));
          if (parent == null)
            messages += "Business.CollaboratorRole.RoleId: Role invalid; ";
          parent = (SilkFlo.Data.Core.Domain.Business.BusinessRole) null;
        }
      }
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(CollaboratorRole core)
    {
      string str = "";
      if (_dataSet.BusinessCollaboratorRoles.ToList<CollaboratorRole>().FirstOrDefault<CollaboratorRole>((Func<CollaboratorRole, bool>) (x => x.Id != (core.Id ?? "") && x.CollaboratorId == core.CollaboratorId && x.RoleId == core.RoleId)) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this collaborator and role.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(CollaboratorRole core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<CollaboratorRole> collaboratorRoles)
    {
      try
      {
        foreach (CollaboratorRole collaboratorRole in collaboratorRoles)
          this.Add(collaboratorRole);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<CollaboratorRole> collaboratorRoles)
    {
      try
      {
        foreach (CollaboratorRole collaboratorRole in collaboratorRoles)
          await this.AddAsync(collaboratorRole);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(CollaboratorRole core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          CollaboratorRole collaboratorRole = (CollaboratorRole) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            collaboratorRole = _dataSet.BusinessCollaboratorRoles.SingleOrDefault<CollaboratorRole>((Func<CollaboratorRole, bool>) (x => x.Id == core.Id));
          if (collaboratorRole == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessCollaboratorRoles.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////collaboratorRole.Update(core);
                        ///

                        _dataSet.Entry(collaboratorRole).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        collaboratorRole.Update(core);
                        _dataSet.BusinessCollaboratorRoles.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          collaboratorRole = (CollaboratorRole) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(CollaboratorRole core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(CollaboratorRole collaboratorRole, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(collaboratorRole, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(CollaboratorRole collaboratorRole, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(collaboratorRole, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<CollaboratorRole> collaboratorRoles, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (collaboratorRoles == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (CollaboratorRole collaboratorRole in collaboratorRoles.ToList<CollaboratorRole>())
        {
          dataStoreResult = this.Delete(collaboratorRole, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<CollaboratorRole> collaboratorRoles, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (collaboratorRoles == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<CollaboratorRole> lst = collaboratorRoles.ToList<CollaboratorRole>();
        foreach (CollaboratorRole collaboratorRole in lst)
        {
          CollaboratorRole item = collaboratorRole;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (CollaboratorRole) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(CollaboratorRole collaboratorRole, Transaction transaction)
    {
      try
      {
        if (collaboratorRole.Id == null)
          return DataStoreResult.Success;
        CollaboratorRole entity = _dataSet.BusinessCollaboratorRoles.SingleOrDefault<CollaboratorRole>((Func<CollaboratorRole, bool>) (x => x.Id == collaboratorRole.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.GetBusinessUserAuthorisations(collaboratorRole);
        foreach (UserAuthorisation userAuthorisation in collaboratorRole.UserAuthorisations)
        {
          int num = (int) this.Delete(userAuthorisation, transaction);
        }
        this.RefreshCanDelete(collaboratorRole, transaction);
        if (!collaboratorRole.CanDelete)
          throw new ChildDependencyException("The collaborator role (" + collaboratorRole.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.BusinessCollaboratorRoles.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(CollaboratorRole collaboratorRole, Transaction transaction)
    {
      try
      {
        if (collaboratorRole.Id == null)
          return DataStoreResult.Success;
        CollaboratorRole core = _dataSet.BusinessCollaboratorRoles.SingleOrDefault<CollaboratorRole>((Func<CollaboratorRole, bool>) (x => x.Id == collaboratorRole.Id));
        if (core == null)
          return DataStoreResult.Success;
        this.GetBusinessUserAuthorisations(collaboratorRole);
        foreach (UserAuthorisation m in collaboratorRole.UserAuthorisations)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        await this.RefreshCanDeleteAsync(collaboratorRole, transaction);
        if (collaboratorRole.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessCollaboratorRoles.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The collaborator role (" + collaboratorRole.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessCollaboratorRole(string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessCollaboratorRoles.SingleOrDefault<CollaboratorRole>((Func<CollaboratorRole, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The collaboratorRole is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsyncBusinessCollaboratorRole(string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        CollaboratorRole collaboratorRole = _dataSet.BusinessCollaboratorRoles.SingleOrDefault<CollaboratorRole>((Func<CollaboratorRole, bool>) (x => x.Id == Id));
        if (collaboratorRole == null)
          throw new NotFoundException("The collaboratorRole is not found");
        dataStoreResult = await this.DeleteAsync(collaboratorRole, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(CollaboratorRole collaboratorRole, Transaction transaction)
    {
      if (collaboratorRole == null)
        return;
      if (collaboratorRole.Id == null)
      {
        collaboratorRole.CanDelete = true;
      }
      else
      {
        this.GetBusinessUserAuthorisations(collaboratorRole, transaction);
        collaboratorRole.CanDelete = collaboratorRole.UserAuthorisations.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(CollaboratorRole collaboratorRole, Transaction transaction)
    {
      if (collaboratorRole == null)
        return;
      collaboratorRole.CanDelete = true;
    }

    public CollaboratorRole FindBusinessCollaboratorRole(string Id) => Id == null ? (CollaboratorRole) null : _dataSet.BusinessCollaboratorRoles.SingleOrDefault<CollaboratorRole>((Func<CollaboratorRole, bool>) (x => x.Id == Id));

    public async Task<CollaboratorRole> FindBusinessCollaboratorRoleAsync(string Id)
    {
      CollaboratorRole collaboratorRoleAsync;
      try
      {
        collaboratorRoleAsync = await Task.Run<CollaboratorRole>((Func<CollaboratorRole>) (() => this.FindBusinessCollaboratorRole(Id)));
      }
      catch
      {
        throw;
      }
      return collaboratorRoleAsync;
    }

    public List<CollaboratorRole> GetBusinessCollaboratorRoleByDate(DateTime date) => _dataSet.BusinessCollaboratorRoles.Where<CollaboratorRole>((Func<CollaboratorRole, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<CollaboratorRole>();

    public async Task<List<CollaboratorRole>> GetBusinessCollaboratorRoleByDateAsync(DateTime date)
    {
      List<CollaboratorRole> collaboratorRoleByDateAsync;
      try
      {
        collaboratorRoleByDateAsync = await Task.Run<List<CollaboratorRole>>((Func<List<CollaboratorRole>>) (() => this.GetBusinessCollaboratorRoleByDate(date)));
      }
      catch
      {
        throw;
      }
      return collaboratorRoleByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<CollaboratorRole> cores)
    {
      try
      {
        foreach (CollaboratorRole core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<CollaboratorRole> cores)
    {
      try
      {
        foreach (CollaboratorRole core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(CollaboratorRole collaboratorRole)
    {
      if (collaboratorRole == null)
        return;
      if (collaboratorRole.CreatedById != null && collaboratorRole.CreatedBy == null)
        collaboratorRole.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == collaboratorRole.CreatedById));
      if (collaboratorRole.UpdatedById == null || collaboratorRole.UpdatedBy != null)
        return;
      collaboratorRole.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == collaboratorRole.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(CollaboratorRole collaboratorRole)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(collaboratorRole)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessUserAuthorisations(CollaboratorRole collaboratorRole) => this.GetBusinessUserAuthorisations(collaboratorRole, (Transaction) null);

    internal async Task GetBusinessUserAuthorisationsAsync(CollaboratorRole collaboratorRole) => await this.GetBusinessUserAuthorisationsAsync(collaboratorRole, (Transaction) null);

    internal void GetBusinessUserAuthorisations(CollaboratorRole collaboratorRole, Transaction transaction)
    {
      if (collaboratorRole != null)
        collaboratorRole.UserAuthorisations = _dataSet.BusinessUserAuthorisations.Where<UserAuthorisation>((Func<UserAuthorisation, bool>) (m => m.CollaboratorRoleId == collaboratorRole.Id)).ToList<UserAuthorisation>();
      if (transaction == null)
        return;
      for (int index = collaboratorRole.UserAuthorisations.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) collaboratorRole.UserAuthorisations[index]) == Action.Delete)
          collaboratorRole.UserAuthorisations.Remove(collaboratorRole.UserAuthorisations[index]);
      }
    }

    internal async Task GetBusinessUserAuthorisationsAsync(CollaboratorRole collaboratorRole, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessUserAuthorisations(collaboratorRole, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessCollaborator(CollaboratorRole collaboratorRole)
    {
      if (collaboratorRole == null)
        return;
      foreach (Collaborator businessCollaborator in (List<Collaborator>) _dataSet.BusinessCollaborators.ToList())
      {
        if (collaboratorRole.CollaboratorId != null && businessCollaborator.Id == collaboratorRole.CollaboratorId)
        {
          collaboratorRole.Collaborator = businessCollaborator;
          break;
        }
      }
    }

    public async Task GetBusinessCollaboratorAsync(CollaboratorRole collaboratorRole)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessCollaborator(collaboratorRole)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessCollaborators(IEnumerable<CollaboratorRole> collaboratorRoles)
    {
      foreach (CollaboratorRole collaboratorRole in collaboratorRoles)
        this.GetBusinessCollaborator(collaboratorRole);
    }

    public async Task GetBusinessCollaboratorsAsync(IEnumerable<CollaboratorRole> collaboratorRoles)
    {
      foreach (CollaboratorRole collaboratorRole in collaboratorRoles)
        await this.GetBusinessCollaboratorAsync(collaboratorRole);
    }

    public void GetBusinessRole(CollaboratorRole collaboratorRole)
    {
      if (collaboratorRole == null)
        return;
      foreach (SilkFlo.Data.Core.Domain.Business.BusinessRole businessRole in (List<SilkFlo.Data.Core.Domain.Business.BusinessRole>) _dataSet.BusinessRoles.ToList())
      {
        if (collaboratorRole.RoleId != null && businessRole.Id == collaboratorRole.RoleId)
        {
          collaboratorRole.Role = businessRole;
          break;
        }
      }
    }

    public async Task GetBusinessRoleAsync(CollaboratorRole collaboratorRole)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessRole(collaboratorRole)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessRoles(IEnumerable<CollaboratorRole> collaboratorRoles)
    {
      foreach (CollaboratorRole collaboratorRole in collaboratorRoles)
        this.GetBusinessRole(collaboratorRole);
    }

    public async Task GetBusinessRolesAsync(IEnumerable<CollaboratorRole> collaboratorRoles)
    {
      foreach (CollaboratorRole collaboratorRole in collaboratorRoles)
        await this.GetBusinessRoleAsync(collaboratorRole);
    }
        #endregion

        #region CommentTable-IO
        public string Validate(Comment core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(Comment core)
    {
      string messages = "";
      if (core.Client == null)
      {
        if (string.IsNullOrWhiteSpace(core.ClientId))
        {
          messages += "Business.Comment.ClientId: Client missing; ";
        }
        else
        {
          Client parent = _dataSet.BusinessClients.SingleOrDefault<Client>((Func<Client, bool>) (x => x.Id == core.ClientId));
          if (parent == null)
            messages += "Business.Comment.ClientId: Client invalid; ";
          parent = (Client) null;
        }
      }
      if (core.Sender == null)
      {
        if (string.IsNullOrWhiteSpace(core.SenderId))
        {
          messages += "Business.Comment.SenderId: Sender missing; ";
        }
        else
        {
          User parent = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (x => x.Id == core.SenderId));
          if (parent == null)
            messages += "Business.Comment.SenderId: Sender invalid; ";
          parent = (User) null;
        }
      }
      if (string.IsNullOrWhiteSpace(core.Text))
        messages += "Business.Comment.Text: Text missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(Comment core)
    {
      string str = "";
      if (_dataSet.BusinessComments.ToList<Comment>().FirstOrDefault<Comment>((Func<Comment, bool>) (x => x.Id != (core.Id ?? "") && x.ClientId == core.ClientId && x.Text.ToLower() == core.Text?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this client and text.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(Comment core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<Comment> comments)
    {
      try
      {
        foreach (Comment comment in comments)
          this.Add(comment);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Comment> comments)
    {
      try
      {
        foreach (Comment comment in comments)
          await this.AddAsync(comment);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Comment core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          Comment comment = (Comment) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            comment = _dataSet.BusinessComments.SingleOrDefault<Comment>((Func<Comment, bool>) (x => x.Id == core.Id));
          if (comment == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessComments.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////comment.Update(core);
                        ///

                        _dataSet.Entry(comment).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        comment.Update(core);
                        _dataSet.BusinessComments.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          comment = (Comment) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Comment core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Comment comment, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(comment, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Comment comment, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(comment, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Comment> comments, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (comments == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Comment comment in comments.ToList<Comment>())
        {
          dataStoreResult = this.Delete(comment, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<Comment> comments,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (comments == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Comment> lst = comments.ToList<Comment>();
        foreach (Comment comment in lst)
        {
          Comment item = comment;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Comment) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Comment comment, Transaction transaction)
    {
      try
      {
        if (comment.Id == null)
          return DataStoreResult.Success;
        Comment entity = _dataSet.BusinessComments.SingleOrDefault<Comment>((Func<Comment, bool>) (x => x.Id == comment.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.GetBusinessRecipients(comment);
        foreach (Recipient recipient in comment.Recipients)
        {
          int num = (int) this.Delete(recipient, transaction);
        }
        this.RefreshCanDelete(comment, transaction);
        if (!comment.CanDelete)
          throw new ChildDependencyException("The comment (" + comment.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.BusinessComments.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Comment comment, Transaction transaction)
    {
      try
      {
        if (comment.Id == null)
          return DataStoreResult.Success;
        Comment core = _dataSet.BusinessComments.SingleOrDefault<Comment>((Func<Comment, bool>) (x => x.Id == comment.Id));
        if (core == null)
          return DataStoreResult.Success;
        this.GetBusinessRecipients(comment);
        foreach (Recipient m in comment.Recipients)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        await this.RefreshCanDeleteAsync(comment, transaction);
        if (comment.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessComments.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The comment (" + comment.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessComment(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessComments.SingleOrDefault<Comment>((Func<Comment, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The comment is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncBusinessComment(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Comment comment = _dataSet.BusinessComments.SingleOrDefault<Comment>((Func<Comment, bool>) (x => x.Id == Id));
        if (comment == null)
          throw new NotFoundException("The comment is not found");
        dataStoreResult = await this.DeleteAsync(comment, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    Comment comment, Transaction transaction)
    {
      if (comment == null)
        return;
      if (comment.Id == null)
      {
        comment.CanDelete = true;
      }
      else
      {
        this.GetBusinessRecipients(comment, transaction);
        comment.CanDelete = comment.Recipients.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(Comment comment, Transaction transaction)
    {
      if (comment == null)
        return;
      comment.CanDelete = true;
    }

    public Comment FindBusinessComment(
    
    string Id) => Id == null ? (Comment) null : _dataSet.BusinessComments.SingleOrDefault<Comment>((Func<Comment, bool>) (x => x.Id == Id));

    public async 
    
    Task<Comment> FindBusinessCommentAsync(string Id)
    {
      Comment businessCommentAsync;
      try
      {
        businessCommentAsync = await Task.Run<Comment>((Func<Comment>) (() => this.FindBusinessComment(Id)));
      }
      catch
      {
        throw;
      }
      return businessCommentAsync;
    }

    public List<Comment> GetBusinessCommentByDate(DateTime date) => _dataSet.BusinessComments.Where<Comment>((Func<Comment, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Comment>();

    public async Task<List<Comment>> GetBusinessCommentByDateAsync(DateTime date)
    {
      List<Comment> commentByDateAsync;
      try
      {
        commentByDateAsync = await Task.Run<List<Comment>>((Func<List<Comment>>) (() => this.GetBusinessCommentByDate(date)));
      }
      catch
      {
        throw;
      }
      return commentByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Comment> cores)
    {
      try
      {
        foreach (Comment core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Comment> cores)
    {
      try
      {
        foreach (Comment core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Comment comment)
    {
      if (comment == null)
        return;
      if (comment.CreatedById != null && comment.CreatedBy == null)
        comment.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == comment.CreatedById));
      if (comment.UpdatedById == null || comment.UpdatedBy != null)
        return;
      comment.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == comment.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Comment comment)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(comment)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessRecipients(Comment comment) => this.GetBusinessRecipients(comment, (Transaction) null);

    internal async Task GetBusinessRecipientsAsync(Comment comment) => await this.GetBusinessRecipientsAsync(comment, (Transaction) null);

    internal void GetBusinessRecipients(Comment comment, Transaction transaction)
    {
      if (comment != null)
        comment.Recipients = _dataSet.BusinessRecipients.Where<Recipient>((Func<Recipient, bool>) (m => m.CommentId == comment.Id)).ToList<Recipient>();
      if (transaction == null)
        return;
      for (int index = comment.Recipients.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) comment.Recipients[index]) == Action.Delete)
          comment.Recipients.Remove(comment.Recipients[index]);
      }
    }

    internal async Task GetBusinessRecipientsAsync(Comment comment, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessRecipients(comment, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClient(Comment comment)
    {
      if (comment == null)
        return;
      foreach (Client businessClient in (List<Client>) _dataSet.BusinessClients.ToList())
      {
        if (comment.ClientId != null && businessClient.Id == comment.ClientId)
        {
          comment.Client = businessClient;
          break;
        }
      }
    }

    public async Task GetBusinessClientAsync(Comment comment)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClient(comment)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClients(IEnumerable<Comment> comments)
    {
      foreach (Comment comment in comments)
        this.GetBusinessClient(comment);
    }

    public async Task GetBusinessClientsAsync(IEnumerable<Comment> comments)
    {
      foreach (Comment comment in comments)
        await this.GetBusinessClientAsync(comment);
    }

    public void GetBusinessIdea(Comment comment)
    {
      if (comment == null)
        return;
      foreach (Idea businessIdea in (List<Idea>) _dataSet.BusinessIdeas.ToList())
      {
        if (comment.IdeaId != null && businessIdea.Id == comment.IdeaId)
        {
          comment.Idea = businessIdea;
          break;
        }
      }
    }

    public async Task GetBusinessIdeaAsync(Comment comment)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdea(comment)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessIdeas(IEnumerable<Comment> comments)
    {
      foreach (Comment comment in comments)
        this.GetBusinessIdea(comment);
    }

    public async Task GetBusinessIdeasAsync(IEnumerable<Comment> comments)
    {
      foreach (Comment comment in comments)
        await this.GetBusinessIdeaAsync(comment);
    }

    public void GetSender(Comment comment)
    {
      if (comment == null)
        return;
      foreach (User user in (List<User>) _dataSet.Users.ToList())
      {
        if (comment.SenderId != null && user.Id == comment.SenderId)
        {
          comment.Sender = user;
          break;
        }
      }
    }

    public async Task GetSenderAsync(Comment comment)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSender(comment)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSenders(IEnumerable<Comment> comments)
    {
      foreach (Comment comment in comments)
        this.GetSender(comment);
    }

    public async Task GetSendersAsync(IEnumerable<Comment> comments)
    {
      foreach (Comment comment in comments)
        await this.GetSenderAsync(comment);
    }
        #endregion

        #region DepartmentTable-IO
        public string Validate(Department core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(Department core)
    {
      string messages = "";
      if (core.Client == null)
      {
        if (string.IsNullOrWhiteSpace(core.ClientId))
        {
          messages += "Business.Department.ClientId: Client missing; ";
        }
        else
        {
          Client parent = _dataSet.BusinessClients.SingleOrDefault<Client>((Func<Client, bool>) (x => x.Id == core.ClientId));
          if (parent == null)
            messages += "Business.Department.ClientId: Client invalid; ";
          parent = (Client) null;
        }
      }
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Business.Department.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(Department core)
    {
      string str = "";
      if (_dataSet.BusinessDepartments.ToList<Department>().FirstOrDefault<Department>((Func<Department, bool>) (x => x.Id != (core.Id ?? "") && x.ClientId == core.ClientId && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this client and name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(Department core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<Department> departments)
    {
      try
      {
        foreach (Department department in departments)
          this.Add(department);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Department> departments)
    {
      try
      {
        foreach (Department department in departments)
          await this.AddAsync(department);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Department core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          Department department = (Department) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            department = _dataSet.BusinessDepartments.SingleOrDefault<Department>((Func<Department, bool>) (x => x.Id == core.Id));
          if (department == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessDepartments.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////department.Update(core);
                        ///

                        _dataSet.Entry(department).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        department.Update(core);
                        _dataSet.BusinessDepartments.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          department = (Department) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Department core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Department department, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(department, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Department department, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(department, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Department> departments, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (departments == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Department department in departments.ToList<Department>())
        {
          dataStoreResult = this.Delete(department, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<Department> departments,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (departments == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Department> lst = departments.ToList<Department>();
        foreach (Department department in lst)
        {
          Department item = department;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Department) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Department department, Transaction transaction)
    {
      try
      {
        if (department.Id == null)
          return DataStoreResult.Success;
        Department entity = _dataSet.BusinessDepartments.SingleOrDefault<Department>((Func<Department, bool>) (x => x.Id == department.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.GetBusinessTeams(department);
        foreach (Team team in department.Teams)
        {
          int num = (int) this.Delete(team, transaction);
        }
        this.RefreshCanDelete(department, transaction);
        if (department.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessDepartments.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The business department (" + department.ToString() + ") contains ";
        if (department.Ideas.Count > 0)
          str += "ideas, ";
        if (department.Users.Count > 0)
          str += "users, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Department department, Transaction transaction)
    {
      try
      {
        if (department.Id == null)
          return DataStoreResult.Success;
        Department core = _dataSet.BusinessDepartments.SingleOrDefault<Department>((Func<Department, bool>) (x => x.Id == department.Id));
        if (core == null)
          return DataStoreResult.Success;
        this.GetBusinessTeams(department);
        foreach (Team m in department.Teams)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        await this.RefreshCanDeleteAsync(department, transaction);
        if (department.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessDepartments.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The business department (" + department.ToString() + ") contains ";
        if (department.Ideas.Count > 0)
          erorrMessage += "ideas, ";
        if (department.Users.Count > 0)
          erorrMessage += "users, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessDepartment(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessDepartments.SingleOrDefault<Department>((Func<Department, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The department is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncBusinessDepartment(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Department department = _dataSet.BusinessDepartments.SingleOrDefault<Department>((Func<Department, bool>) (x => x.Id == Id));
        if (department == null)
          throw new NotFoundException("The department is not found");
        dataStoreResult = await this.DeleteAsync(department, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    Department department, Transaction transaction)
    {
      if (department == null)
        return;
      if (department.Id == null)
      {
        department.CanDelete = true;
      }
      else
      {
        this.GetBusinessIdeas(department, transaction);
        this.GetBusinessTeams(department, transaction);
        this.GetUsers(department, transaction);
        department.CanDelete = department.Ideas.Count + department.Teams.Count + department.Users.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(Department department, Transaction transaction)
    {
      if (department == null)
        return;
      if (department.Id == null)
      {
        department.CanDelete = true;
      }
      else
      {
        await this.GetBusinessIdeasAsync(department, transaction);
        await this.GetUsersAsync(department, transaction);
        department.CanDelete = department.Ideas.Count + department.Users.Count <= 0;
      }
    }

    public Department FindBusinessDepartment(
    
    string Id) => Id == null ? (Department) null : _dataSet.BusinessDepartments.SingleOrDefault<Department>((Func<Department, bool>) (x => x.Id == Id));

    public async 
    
    Task<Department> FindBusinessDepartmentAsync(string Id)
    {
      Department businessDepartmentAsync;
      try
      {
        businessDepartmentAsync = await Task.Run<Department>((Func<Department>) (() => this.FindBusinessDepartment(Id)));
      }
      catch
      {
        throw;
      }
      return businessDepartmentAsync;
    }

    public List<Department> GetBusinessDepartmentByDate(DateTime date) => _dataSet.BusinessDepartments.Where<Department>((Func<Department, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Department>();

    public async Task<List<Department>> GetBusinessDepartmentByDateAsync(DateTime date)
    {
      List<Department> departmentByDateAsync;
      try
      {
        departmentByDateAsync = await Task.Run<List<Department>>((Func<List<Department>>) (() => this.GetBusinessDepartmentByDate(date)));
      }
      catch
      {
        throw;
      }
      return departmentByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Department> cores)
    {
      try
      {
        foreach (Department core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Department> cores)
    {
      try
      {
        foreach (Department core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Department department)
    {
      if (department == null)
        return;
      if (department.CreatedById != null && department.CreatedBy == null)
        department.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == department.CreatedById));
      if (department.UpdatedById == null || department.UpdatedBy != null)
        return;
      department.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == department.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Department department)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(department)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeas(Department department) => this.GetBusinessIdeas(department, (Transaction) null);

    internal async Task GetBusinessIdeasAsync(Department department) => await this.GetBusinessIdeasAsync(department, (Transaction) null);

    internal void GetBusinessIdeas(Department department, Transaction transaction)
    {
      if (department != null)
        department.Ideas = _dataSet.BusinessIdeas.Where<Idea>((Func<Idea, bool>) (m => m.DepartmentId == department.Id)).ToList<Idea>();
      if (transaction == null)
        return;
      for (int index = department.Ideas.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) department.Ideas[index]) == Action.Delete)
          department.Ideas.Remove(department.Ideas[index]);
      }
    }

    internal async Task GetBusinessIdeasAsync(Department department, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeas(department, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessTeams(Department department) => this.GetBusinessTeams(department, (Transaction) null);

    internal async Task GetBusinessTeamsAsync(Department department) => await this.GetBusinessTeamsAsync(department, (Transaction) null);

    internal void GetBusinessTeams(Department department, Transaction transaction)
    {
      if (department != null)
        department.Teams = _dataSet.BusinessTeams.Where<Team>((Func<Team, bool>) (m => m.DepartmentId == department.Id)).ToList<Team>();
      if (transaction == null)
        return;
      for (int index = department.Teams.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) department.Teams[index]) == Action.Delete)
          department.Teams.Remove(department.Teams[index]);
      }
    }

    internal async Task GetBusinessTeamsAsync(Department department, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessTeams(department, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetUsers(Department department) => this.GetUsers(department, (Transaction) null);

    internal async Task GetUsersAsync(Department department) => await this.GetUsersAsync(department, (Transaction) null);

    internal void GetUsers(Department department, Transaction transaction)
    {
      if (department != null)
        department.Users = _dataSet.Users.Where<User>((Func<User, bool>) (m => m.DepartmentId == department.Id)).ToList<User>();
      if (transaction == null)
        return;
      for (int index = department.Users.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) department.Users[index]) == Action.Delete)
          department.Users.Remove(department.Users[index]);
      }
    }

    internal async Task GetUsersAsync(Department department, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetUsers(department, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClient(Department department)
    {
      if (department == null)
        return;
      foreach (Client businessClient in (List<Client>) _dataSet.BusinessClients.ToList())
      {
        if (department.ClientId != null && businessClient.Id == department.ClientId)
        {
          department.Client = businessClient;
          break;
        }
      }
    }

    public async Task GetBusinessClientAsync(Department department)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClient(department)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClients(IEnumerable<Department> departments)
    {
      foreach (Department department in departments)
        this.GetBusinessClient(department);
    }

    public async Task GetBusinessClientsAsync(IEnumerable<Department> departments)
    {
      foreach (Department department in departments)
        await this.GetBusinessClientAsync(department);
    }
        #endregion

        #region DocumentTable-IO
        public string Validate(Document core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(Document core)
    {
      string messages = "";
      if (core.Client == null)
      {
        if (string.IsNullOrWhiteSpace(core.ClientId))
        {
          messages += "Business.Document.ClientId: Client missing; ";
        }
        else
        {
          Client parent = _dataSet.BusinessClients.SingleOrDefault<Client>((Func<Client, bool>) (x => x.Id == core.ClientId));
          if (parent == null)
            messages += "Business.Document.ClientId: Client invalid; ";
          parent = (Client) null;
        }
      }
      if (string.IsNullOrWhiteSpace(core.Filename))
        messages += "Business.Document.Filename: Filename missing; ";
      if (string.IsNullOrWhiteSpace(core.FilenameBackend))
        messages += "Business.Document.FilenameBackend: FilenameBackend missing; ";
      if (core.Idea == null)
      {
        if (string.IsNullOrWhiteSpace(core.IdeaId))
        {
          messages += "Business.Document.IdeaId: Document missing; ";
        }
        else
        {
          Idea parent = _dataSet.BusinessIdeas.SingleOrDefault<Idea>((Func<Idea, bool>) (x => x.Id == core.IdeaId));
          if (parent == null)
            messages += "Business.Document.IdeaId: Document invalid; ";
          parent = (Idea) null;
        }
      }
      if (string.IsNullOrWhiteSpace(core.Text))
        messages += "Business.Document.Text: Text missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(Document core)
    {
      string str = "";
      if (_dataSet.BusinessDocuments.ToList<Document>().FirstOrDefault<Document>((Func<Document, bool>) (x => x.Id != (core.Id ?? "") && x.ClientId == core.ClientId && x.Filename.ToLower() == core.Filename?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this client and filename.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(Document core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<Document> documents)
    {
      try
      {
        foreach (Document document in documents)
          this.Add(document);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Document> documents)
    {
      try
      {
        foreach (Document document in documents)
          await this.AddAsync(document);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Document core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          Document document = (Document) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            document = _dataSet.BusinessDocuments.SingleOrDefault<Document>((Func<Document, bool>) (x => x.Id == core.Id));
          if (document == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessDocuments.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////document.Update(core);
                        ///

                        _dataSet.Entry(document).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        document.Update(core);
                        _dataSet.BusinessDocuments.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          document = (Document) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Document core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Document document, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(document, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Document document, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(document, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Document> documents, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (documents == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Document document in documents.ToList<Document>())
        {
          dataStoreResult = this.Delete(document, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<Document> documents,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (documents == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Document> lst = documents.ToList<Document>();
        foreach (Document document in lst)
        {
          Document item = document;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Document) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Document document, Transaction transaction)
    {
      try
      {
        if (document.Id == null)
          return DataStoreResult.Success;
        Document entity = _dataSet.BusinessDocuments.SingleOrDefault<Document>((Func<Document, bool>) (x => x.Id == document.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(document, transaction);
        if (!document.CanDelete)
          throw new ChildDependencyException("The document (" + document.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.BusinessDocuments.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Document document, Transaction transaction)
    {
      try
      {
        if (document.Id == null)
          return DataStoreResult.Success;
        Document core = _dataSet.BusinessDocuments.SingleOrDefault<Document>((Func<Document, bool>) (x => x.Id == document.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(document, transaction);
        if (document.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessDocuments.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The document (" + document.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessDocument(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessDocuments.SingleOrDefault<Document>((Func<Document, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The document is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncBusinessDocument(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Document document = _dataSet.BusinessDocuments.SingleOrDefault<Document>((Func<Document, bool>) (x => x.Id == Id));
        if (document == null)
          throw new NotFoundException("The document is not found");
        dataStoreResult = await this.DeleteAsync(document, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    Document document, Transaction transaction)
    {
      if (document == null)
        return;
      document.CanDelete = true;
    }

    internal async Task RefreshCanDeleteAsync(Document document, Transaction transaction)
    {
      if (document == null)
        return;
      document.CanDelete = true;
    }

    public Document FindBusinessDocument(
    
    string Id) => Id == null ? (Document) null : _dataSet.BusinessDocuments.SingleOrDefault<Document>((Func<Document, bool>) (x => x.Id == Id));

    public async 
    
    Task<Document> FindBusinessDocumentAsync(string Id)
    {
      Document businessDocumentAsync;
      try
      {
        businessDocumentAsync = await Task.Run<Document>((Func<Document>) (() => this.FindBusinessDocument(Id)));
      }
      catch
      {
        throw;
      }
      return businessDocumentAsync;
    }

    public List<Document> GetBusinessDocumentByDate(DateTime date) => _dataSet.BusinessDocuments.Where<Document>((Func<Document, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Document>();

    public async Task<List<Document>> GetBusinessDocumentByDateAsync(DateTime date)
    {
      List<Document> documentByDateAsync;
      try
      {
        documentByDateAsync = await Task.Run<List<Document>>((Func<List<Document>>) (() => this.GetBusinessDocumentByDate(date)));
      }
      catch
      {
        throw;
      }
      return documentByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Document> cores)
    {
      try
      {
        foreach (Document core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Document> cores)
    {
      try
      {
        foreach (Document core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Document document)
    {
      if (document == null)
        return;
      if (document.CreatedById != null && document.CreatedBy == null)
        document.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == document.CreatedById));
      if (document.UpdatedById == null || document.UpdatedBy != null)
        return;
      document.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == document.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Document document)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(document)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClient(Document document)
    {
      if (document == null)
        return;
      foreach (Client businessClient in (List<Client>) _dataSet.BusinessClients.ToList())
      {
        if (document.ClientId != null && businessClient.Id == document.ClientId)
        {
          document.Client = businessClient;
          break;
        }
      }
    }

    public async Task GetBusinessClientAsync(Document document)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClient(document)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClients(IEnumerable<Document> documents)
    {
      foreach (Document document in documents)
        this.GetBusinessClient(document);
    }

    public async Task GetBusinessClientsAsync(IEnumerable<Document> documents)
    {
      foreach (Document document in documents)
        await this.GetBusinessClientAsync(document);
    }

    public void GetBusinessIdea(Document document)
    {
      if (document == null)
        return;
      foreach (Idea businessIdea in (List<Idea>) _dataSet.BusinessIdeas.ToList())
      {
        if (document.IdeaId != null && businessIdea.Id == document.IdeaId)
        {
          document.Idea = businessIdea;
          break;
        }
      }
    }

    public async Task GetBusinessIdeaAsync(Document document)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdea(document)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessIdeas(IEnumerable<Document> documents)
    {
      foreach (Document document in documents)
        this.GetBusinessIdea(document);
    }

    public async Task GetBusinessIdeasAsync(IEnumerable<Document> documents)
    {
      foreach (Document document in documents)
        await this.GetBusinessIdeaAsync(document);
    }
        #endregion

        #region FollowTable-IO
        public string Validate(Follow core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(Follow core)
    {
      string messages = "";
      if (core.Idea == null)
      {
        if (string.IsNullOrWhiteSpace(core.IdeaId))
        {
          messages += "Business.Follow.IdeaId: Idea missing; ";
        }
        else
        {
          Idea parent = _dataSet.BusinessIdeas.SingleOrDefault<Idea>((Func<Idea, bool>) (x => x.Id == core.IdeaId));
          if (parent == null)
            messages += "Business.Follow.IdeaId: Idea invalid; ";
          parent = (Idea) null;
        }
      }
      if (core.User == null)
      {
        if (string.IsNullOrWhiteSpace(core.UserId))
        {
          messages += "Business.Follow.UserId: Follow missing; ";
        }
        else
        {
          User parent = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (x => x.Id == core.UserId));
          if (parent == null)
            messages += "Business.Follow.UserId: Follow invalid; ";
          parent = (User) null;
        }
      }
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public void Add(IEnumerable<Follow> follows)
    {
      try
      {
        foreach (Follow follow in follows)
          this.Add(follow);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Follow> follows)
    {
      try
      {
        foreach (Follow follow in follows)
          await this.AddAsync(follow);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Follow core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          Follow follow = (Follow) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            follow = _dataSet.BusinessFollows.SingleOrDefault<Follow>((Func<Follow, bool>) (x => x.Id == core.Id));
          if (follow == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessFollows.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////follow.Update(core);
                        ///

                        _dataSet.Entry(follow).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        follow.Update(core);
                        _dataSet.BusinessFollows.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          follow = (Follow) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Follow core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Follow follow, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(follow, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Follow follow, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(follow, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Follow> follows, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (follows == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Follow follow in follows.ToList<Follow>())
        {
          dataStoreResult = this.Delete(follow, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<Follow> follows, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (follows == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Follow> lst = follows.ToList<Follow>();
        foreach (Follow follow in lst)
        {
          Follow item = follow;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Follow) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Follow follow, Transaction transaction)
    {
      try
      {
        if (follow.Id == null)
          return DataStoreResult.Success;
        Follow entity = _dataSet.BusinessFollows.SingleOrDefault<Follow>((Func<Follow, bool>) (x => x.Id == follow.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(follow, transaction);
        if (!follow.CanDelete)
          throw new ChildDependencyException("The followed idea (" + follow.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.BusinessFollows.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Follow follow, Transaction transaction)
    {
      try
      {
        if (follow.Id == null)
          return DataStoreResult.Success;
        Follow core = _dataSet.BusinessFollows.SingleOrDefault<Follow>((Func<Follow, bool>) (x => x.Id == follow.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(follow, transaction);
        if (follow.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessFollows.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The followed idea (" + follow.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessFollow(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessFollows.SingleOrDefault<Follow>((Func<Follow, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The follow is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncBusinessFollow(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Follow follow = _dataSet.BusinessFollows.SingleOrDefault<Follow>((Func<Follow, bool>) (x => x.Id == Id));
        if (follow == null)
          throw new NotFoundException("The follow is not found");
        dataStoreResult = await this.DeleteAsync(follow, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    Follow follow, Transaction transaction)
    {
      if (follow == null)
        return;
      follow.CanDelete = true;
    }

    internal async Task RefreshCanDeleteAsync(Follow follow, Transaction transaction)
    {
      if (follow == null)
        return;
      follow.CanDelete = true;
    }

    public Follow FindBusinessFollow(
    
    string Id) => Id == null ? (Follow) null : _dataSet.BusinessFollows.SingleOrDefault<Follow>((Func<Follow, bool>) (x => x.Id == Id));

    public async 
    
    Task<Follow> FindBusinessFollowAsync(string Id)
    {
      Follow businessFollowAsync;
      try
      {
        businessFollowAsync = await Task.Run<Follow>((Func<Follow>) (() => this.FindBusinessFollow(Id)));
      }
      catch
      {
        throw;
      }
      return businessFollowAsync;
    }

    public List<Follow> GetBusinessFollowByDate(DateTime date) => _dataSet.BusinessFollows.Where<Follow>((Func<Follow, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Follow>();

    public async Task<List<Follow>> GetBusinessFollowByDateAsync(DateTime date)
    {
      List<Follow> followByDateAsync;
      try
      {
        followByDateAsync = await Task.Run<List<Follow>>((Func<List<Follow>>) (() => this.GetBusinessFollowByDate(date)));
      }
      catch
      {
        throw;
      }
      return followByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Follow> cores)
    {
      try
      {
        foreach (Follow core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Follow> cores)
    {
      try
      {
        foreach (Follow core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Follow follow)
    {
      if (follow == null)
        return;
      if (follow.CreatedById != null && follow.CreatedBy == null)
        follow.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == follow.CreatedById));
      if (follow.UpdatedById == null || follow.UpdatedBy != null)
        return;
      follow.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == follow.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Follow follow)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(follow)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessIdea(Follow follow)
    {
      if (follow == null)
        return;
      foreach (Idea businessIdea in (List<Idea>) _dataSet.BusinessIdeas.ToList())
      {
        if (follow.IdeaId != null && businessIdea.Id == follow.IdeaId)
        {
          follow.Idea = businessIdea;
          break;
        }
      }
    }

    public async Task GetBusinessIdeaAsync(Follow follow)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdea(follow)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessIdeas(IEnumerable<Follow> follows)
    {
      foreach (Follow follow in follows)
        this.GetBusinessIdea(follow);
    }

    public async Task GetBusinessIdeasAsync(IEnumerable<Follow> follows)
    {
      foreach (Follow follow in follows)
        await this.GetBusinessIdeaAsync(follow);
    }

    public void GetUser(Follow follow)
    {
      if (follow == null)
        return;
      foreach (User user in (List<User>) _dataSet.Users.ToList())
      {
        if (follow.UserId != null && user.Id == follow.UserId)
        {
          follow.User = user;
          break;
        }
      }
    }

    public async Task GetUserAsync(Follow follow)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetUser(follow)));
      }
      catch
      {
        throw;
      }
    }

    public void GetUsers(IEnumerable<Follow> follows)
    {
      foreach (Follow follow in follows)
        this.GetUser(follow);
    }

    public async Task GetUsersAsync(IEnumerable<Follow> follows)
    {
      foreach (Follow follow in follows)
        await this.GetUserAsync(follow);
    }
        #endregion

        #region IdeaTable-IO
        public string Validate(Idea core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(Idea core)
    {
      string messages = "";
      if (core.SubmissionPath == null)
      {
        if (string.IsNullOrWhiteSpace(core.SubmissionPathId))
        {
          messages += "Business.Idea.SubmissionPathId: Submission Path missing; ";
        }
        else
        {
          SubmissionPath parent = _dataSet.SharedSubmissionPaths.SingleOrDefault<SubmissionPath>((Func<SubmissionPath, bool>) (x => x.Id == core.SubmissionPathId));
          if (parent == null)
            messages += "Business.Idea.SubmissionPathId: Submission Path invalid; ";
          parent = (SubmissionPath) null;
        }
      }
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(Idea core)
    {
      string str = "";
      if (_dataSet.BusinessIdeas.ToList<Idea>().FirstOrDefault<Idea>((Func<Idea, bool>) (x => x.Id != (core.Id ?? "") && x.ClientId == core.ClientId && x.Name.ToLower() == core.Name?.ToLower() && !string.IsNullOrWhiteSpace(core.Name))) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this client and name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(Idea core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<Idea> ideas)
    {
      try
      {
        foreach (Idea idea in ideas)
          this.Add(idea);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Idea> ideas)
    {
      try
      {
        foreach (Idea idea in ideas)
          await this.AddAsync(idea);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Idea core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          Idea idea = (Idea) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            idea = _dataSet.BusinessIdeas.SingleOrDefault<Idea>((Func<Idea, bool>) (x => x.Id == core.Id));
          if (idea == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessIdeas.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////idea.Update(core);
                        ///

                        _dataSet.Entry(idea).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        idea.Update(core);
                        _dataSet.BusinessIdeas.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          idea = (Idea) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Idea core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Idea idea, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(idea, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Idea idea, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(idea, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Idea> ideas, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (ideas == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Idea idea in ideas.ToList<Idea>())
        {
          dataStoreResult = this.Delete(idea, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<Idea> ideas, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (ideas == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Idea> lst = ideas.ToList<Idea>();
        foreach (Idea idea in lst)
        {
          Idea item = idea;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Idea) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Idea idea, Transaction transaction)
    {
      try
      {
        if (idea.Id == null)
          return DataStoreResult.Success;
        Idea entity = _dataSet.BusinessIdeas.SingleOrDefault<Idea>((Func<Idea, bool>) (x => x.Id == idea.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.GetBusinessCollaborators(idea);
        foreach (Collaborator collaborator in idea.Collaborators)
        {
          int num = (int) this.Delete(collaborator, transaction);
        }
        this.GetBusinessComments(idea);
        foreach (Comment comment in idea.Comments)
        {
          int num = (int) this.Delete(comment, transaction);
        }
        this.GetBusinessDocuments(idea);
        foreach (Document document in idea.Documents)
        {
          int num = (int) this.Delete(document, transaction);
        }
        this.GetBusinessFollows(idea);
        foreach (Follow follow in idea.Follows)
        {
          int num = (int) this.Delete(follow, transaction);
        }
        this.GetBusinessIdeaApplicationVersions(idea);
        foreach (IdeaApplicationVersion applicationVersion in idea.IdeaApplicationVersions)
        {
          int num = (int) this.Delete(applicationVersion, transaction);
        }
        this.GetBusinessIdeaOtherRunningCosts(idea);
        foreach (IdeaOtherRunningCost otherRunningCost in idea.IdeaOtherRunningCosts)
        {
          int num = (int) this.Delete(otherRunningCost, transaction);
        }
        this.GetBusinessIdeaRunningCosts(idea);
        foreach (IdeaRunningCost ideaRunningCost in idea.IdeaRunningCosts)
        {
          int num = (int) this.Delete(ideaRunningCost, transaction);
        }
        this.GetBusinessIdeaStages(idea);
        foreach (IdeaStage ideaStage in idea.IdeaStages)
        {
          int num = (int) this.Delete(ideaStage, transaction);
        }
        this.GetBusinessUserAuthorisations(idea);
        foreach (UserAuthorisation userAuthorisation in idea.UserAuthorisations)
        {
          int num = (int) this.Delete(userAuthorisation, transaction);
        }
        this.GetBusinessVotes(idea);
        foreach (Vote vote in idea.Votes)
        {
          int num = (int) this.Delete(vote, transaction);
        }
        this.RefreshCanDelete(idea, transaction);
        if (!idea.CanDelete)
          throw new ChildDependencyException("The idea (" + idea.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.BusinessIdeas.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Idea idea, Transaction transaction)
    {
      try
      {
        if (idea.Id == null)
          return DataStoreResult.Success;
        Idea core = _dataSet.BusinessIdeas.SingleOrDefault<Idea>((Func<Idea, bool>) (x => x.Id == idea.Id));
        if (core == null)
          return DataStoreResult.Success;
        this.GetBusinessCollaborators(idea);
        foreach (Collaborator m in idea.Collaborators)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessComments(idea);
        foreach (Comment m in idea.Comments)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessDocuments(idea);
        foreach (Document m in idea.Documents)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessFollows(idea);
        foreach (Follow m in idea.Follows)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessIdeaApplicationVersions(idea);
        foreach (IdeaApplicationVersion m in idea.IdeaApplicationVersions)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessIdeaOtherRunningCosts(idea);
        foreach (IdeaOtherRunningCost m in idea.IdeaOtherRunningCosts)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessIdeaRunningCosts(idea);
        foreach (IdeaRunningCost m in idea.IdeaRunningCosts)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessIdeaStages(idea);
        foreach (IdeaStage m in idea.IdeaStages)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessUserAuthorisations(idea);
        foreach (UserAuthorisation m in idea.UserAuthorisations)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessVotes(idea);
        foreach (Vote m in idea.Votes)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        await this.RefreshCanDeleteAsync(idea, transaction);
        if (idea.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessIdeas.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The idea (" + idea.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessIdea(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessIdeas.SingleOrDefault<Idea>((Func<Idea, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The idea is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncBusinessIdea(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Idea idea = _dataSet.BusinessIdeas.SingleOrDefault<Idea>((Func<Idea, bool>) (x => x.Id == Id));
        if (idea == null)
          throw new NotFoundException("The idea is not found");
        dataStoreResult = await this.DeleteAsync(idea, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    Idea idea, Transaction transaction)
    {
      if (idea == null)
        return;
      if (idea.Id == null)
      {
        idea.CanDelete = true;
      }
      else
      {
        this.GetBusinessCollaborators(idea, transaction);
        this.GetBusinessComments(idea, transaction);
        this.GetBusinessDocuments(idea, transaction);
        this.GetBusinessFollows(idea, transaction);
        this.GetBusinessIdeaApplicationVersions(idea, transaction);
        this.GetBusinessIdeaOtherRunningCosts(idea, transaction);
        this.GetBusinessIdeaRunningCosts(idea, transaction);
        this.GetBusinessIdeaStages(idea, transaction);
        this.GetBusinessUserAuthorisations(idea, transaction);
        this.GetBusinessVotes(idea, transaction);
        idea.CanDelete = idea.Collaborators.Count + idea.Comments.Count + idea.Documents.Count + idea.Follows.Count + idea.IdeaApplicationVersions.Count + idea.IdeaOtherRunningCosts.Count + idea.IdeaRunningCosts.Count + idea.IdeaStages.Count + idea.UserAuthorisations.Count + idea.Votes.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(Idea idea, Transaction transaction)
    {
      if (idea == null)
        return;
      idea.CanDelete = true;
    }

    public Idea FindBusinessIdea(
    
    string Id) => Id == null ? (Idea) null : _dataSet.BusinessIdeas.SingleOrDefault<Idea>((Func<Idea, bool>) (x => x.Id == Id));

    public async 
    
    Task<Idea> FindBusinessIdeaAsync(string Id)
    {
      Idea businessIdeaAsync;
      try
      {
        businessIdeaAsync = await Task.Run<Idea>((Func<Idea>) (() => this.FindBusinessIdea(Id)));
      }
      catch
      {
        throw;
      }
      return businessIdeaAsync;
    }

    public List<Idea> GetBusinessIdeaByDate(DateTime date) => _dataSet.BusinessIdeas.Where<Idea>((Func<Idea, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Idea>();

    public async Task<List<Idea>> GetBusinessIdeaByDateAsync(DateTime date)
    {
      List<Idea> businessIdeaByDateAsync;
      try
      {
        businessIdeaByDateAsync = await Task.Run<List<Idea>>((Func<List<Idea>>) (() => this.GetBusinessIdeaByDate(date)));
      }
      catch
      {
        throw;
      }
      return businessIdeaByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Idea> cores)
    {
      try
      {
        foreach (Idea core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Idea> cores)
    {
      try
      {
        foreach (Idea core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Idea idea)
    {
      if (idea == null)
        return;
      if (idea.CreatedById != null && idea.CreatedBy == null)
        idea.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == idea.CreatedById));
      if (idea.UpdatedById == null || idea.UpdatedBy != null)
        return;
      idea.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == idea.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Idea idea)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(idea)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessCollaborators(Idea idea) => this.GetBusinessCollaborators(idea, (Transaction) null);

    internal async Task GetBusinessCollaboratorsAsync(Idea idea) => await this.GetBusinessCollaboratorsAsync(idea, (Transaction) null);

    internal void GetBusinessCollaborators(Idea idea, Transaction transaction)
    {
      if (idea != null)
        idea.Collaborators = _dataSet.BusinessCollaborators.Where<Collaborator>((Func<Collaborator, bool>) (m => m.IdeaId == idea.Id)).ToList<Collaborator>();
      if (transaction == null)
        return;
      for (int index = idea.Collaborators.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) idea.Collaborators[index]) == Action.Delete)
          idea.Collaborators.Remove(idea.Collaborators[index]);
      }
    }

    internal async Task GetBusinessCollaboratorsAsync(Idea idea, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessCollaborators(idea, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessComments(Idea idea) => this.GetBusinessComments(idea, (Transaction) null);

    internal async Task GetBusinessCommentsAsync(Idea idea) => await this.GetBusinessCommentsAsync(idea, (Transaction) null);

    internal void GetBusinessComments(Idea idea, Transaction transaction)
    {
      if (idea != null)
        idea.Comments = _dataSet.BusinessComments.Where<Comment>((Func<Comment, bool>) (m => m.IdeaId == idea.Id)).ToList<Comment>();
      if (transaction == null)
        return;
      for (int index = idea.Comments.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) idea.Comments[index]) == Action.Delete)
          idea.Comments.Remove(idea.Comments[index]);
      }
    }

    internal async Task GetBusinessCommentsAsync(Idea idea, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessComments(idea, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessDocuments(Idea idea) => this.GetBusinessDocuments(idea, (Transaction) null);

    internal async Task GetBusinessDocumentsAsync(Idea idea) => await this.GetBusinessDocumentsAsync(idea, (Transaction) null);

    internal void GetBusinessDocuments(Idea idea, Transaction transaction)
    {
      if (idea != null)
        idea.Documents = _dataSet.BusinessDocuments.Where<Document>((Func<Document, bool>) (m => m.IdeaId == idea.Id)).ToList<Document>();
      if (transaction == null)
        return;
      for (int index = idea.Documents.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) idea.Documents[index]) == Action.Delete)
          idea.Documents.Remove(idea.Documents[index]);
      }
    }

    internal async Task GetBusinessDocumentsAsync(Idea idea, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessDocuments(idea, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessFollows(Idea idea) => this.GetBusinessFollows(idea, (Transaction) null);

    internal async Task GetBusinessFollowsAsync(Idea idea) => await this.GetBusinessFollowsAsync(idea, (Transaction) null);

    internal void GetBusinessFollows(Idea idea, Transaction transaction)
    {
      if (idea != null)
        idea.Follows = _dataSet.BusinessFollows.Where<Follow>((Func<Follow, bool>) (m => m.IdeaId == idea.Id)).ToList<Follow>();
      if (transaction == null)
        return;
      for (int index = idea.Follows.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) idea.Follows[index]) == Action.Delete)
          idea.Follows.Remove(idea.Follows[index]);
      }
    }

    internal async Task GetBusinessFollowsAsync(Idea idea, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessFollows(idea, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeaApplicationVersions(Idea idea) => this.GetBusinessIdeaApplicationVersions(idea, (Transaction) null);

    internal async Task GetBusinessIdeaApplicationVersionsAsync(Idea idea) => await this.GetBusinessIdeaApplicationVersionsAsync(idea, (Transaction) null);

    internal void GetBusinessIdeaApplicationVersions(Idea idea, Transaction transaction)
    {
      if (idea != null)
        idea.IdeaApplicationVersions = _dataSet.BusinessIdeaApplicationVersions.Where<IdeaApplicationVersion>((Func<IdeaApplicationVersion, bool>) (m => m.IdeaId == idea.Id)).ToList<IdeaApplicationVersion>();
      if (transaction == null)
        return;
      for (int index = idea.IdeaApplicationVersions.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) idea.IdeaApplicationVersions[index]) == Action.Delete)
          idea.IdeaApplicationVersions.Remove(idea.IdeaApplicationVersions[index]);
      }
    }

    internal async Task GetBusinessIdeaApplicationVersionsAsync(Idea idea, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeaApplicationVersions(idea, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeaOtherRunningCosts(Idea idea) => this.GetBusinessIdeaOtherRunningCosts(idea, (Transaction) null);

    internal async Task GetBusinessIdeaOtherRunningCostsAsync(Idea idea) => await this.GetBusinessIdeaOtherRunningCostsAsync(idea, (Transaction) null);

    internal void GetBusinessIdeaOtherRunningCosts(Idea idea, Transaction transaction)
    {
      if (idea != null)
        idea.IdeaOtherRunningCosts = _dataSet.BusinessIdeaOtherRunningCosts.Where<IdeaOtherRunningCost>((Func<IdeaOtherRunningCost, bool>) (m => m.IdeaId == idea.Id)).ToList<IdeaOtherRunningCost>();
      if (transaction == null)
        return;
      for (int index = idea.IdeaOtherRunningCosts.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) idea.IdeaOtherRunningCosts[index]) == Action.Delete)
          idea.IdeaOtherRunningCosts.Remove(idea.IdeaOtherRunningCosts[index]);
      }
    }

    internal async Task GetBusinessIdeaOtherRunningCostsAsync(Idea idea, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeaOtherRunningCosts(idea, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeaRunningCosts(Idea idea) => this.GetBusinessIdeaRunningCosts(idea, (Transaction) null);

    internal async Task GetBusinessIdeaRunningCostsAsync(Idea idea) => await this.GetBusinessIdeaRunningCostsAsync(idea, (Transaction) null);

    internal void GetBusinessIdeaRunningCosts(Idea idea, Transaction transaction)
    {
      if (idea != null)
        idea.IdeaRunningCosts = _dataSet.BusinessIdeaRunningCosts.Where<IdeaRunningCost>((Func<IdeaRunningCost, bool>) (m => m.IdeaId == idea.Id)).ToList<IdeaRunningCost>();
      if (transaction == null)
        return;
      for (int index = idea.IdeaRunningCosts.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) idea.IdeaRunningCosts[index]) == Action.Delete)
          idea.IdeaRunningCosts.Remove(idea.IdeaRunningCosts[index]);
      }
    }

    internal async Task GetBusinessIdeaRunningCostsAsync(Idea idea, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeaRunningCosts(idea, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeaStages(Idea idea) => this.GetBusinessIdeaStages(idea, (Transaction) null);

    internal async Task GetBusinessIdeaStagesAsync(Idea idea) => await this.GetBusinessIdeaStagesAsync(idea, (Transaction) null);

    internal void GetBusinessIdeaStages(Idea idea, Transaction transaction)
    {
      if (idea != null)
        idea.IdeaStages = _dataSet.BusinessIdeaStages.Where<IdeaStage>((Func<IdeaStage, bool>) (m => m.IdeaId == idea.Id)).ToList<IdeaStage>();
      if (transaction == null)
        return;
      for (int index = idea.IdeaStages.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) idea.IdeaStages[index]) == Action.Delete)
          idea.IdeaStages.Remove(idea.IdeaStages[index]);
      }
    }

    internal async Task GetBusinessIdeaStagesAsync(Idea idea, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeaStages(idea, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessUserAuthorisations(Idea idea) => this.GetBusinessUserAuthorisations(idea, (Transaction) null);

    internal async Task GetBusinessUserAuthorisationsAsync(Idea idea) => await this.GetBusinessUserAuthorisationsAsync(idea, (Transaction) null);

    internal void GetBusinessUserAuthorisations(Idea idea, Transaction transaction)
    {
      if (idea != null)
        idea.UserAuthorisations = _dataSet.BusinessUserAuthorisations.Where<UserAuthorisation>((Func<UserAuthorisation, bool>) (m => m.IdeaId == idea.Id)).ToList<UserAuthorisation>();
      if (transaction == null)
        return;
      for (int index = idea.UserAuthorisations.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) idea.UserAuthorisations[index]) == Action.Delete)
          idea.UserAuthorisations.Remove(idea.UserAuthorisations[index]);
      }
    }

    internal async Task GetBusinessUserAuthorisationsAsync(Idea idea, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessUserAuthorisations(idea, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessVotes(Idea idea) => this.GetBusinessVotes(idea, (Transaction) null);

    internal async Task GetBusinessVotesAsync(Idea idea) => await this.GetBusinessVotesAsync(idea, (Transaction) null);

    internal void GetBusinessVotes(Idea idea, Transaction transaction)
    {
      if (idea != null)
        idea.Votes = _dataSet.BusinessVotes.Where<Vote>((Func<Vote, bool>) (m => m.IdeaId == idea.Id)).ToList<Vote>();
      if (transaction == null)
        return;
      for (int index = idea.Votes.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) idea.Votes[index]) == Action.Delete)
          idea.Votes.Remove(idea.Votes[index]);
      }
    }

    internal async Task GetBusinessVotesAsync(Idea idea, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessVotes(idea, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedApplicationStability(Idea idea)
    {
      if (idea == null)
        return;
      foreach (ApplicationStability applicationStability in (List<ApplicationStability>) _dataSet.SharedApplicationStabilities.ToList())
      {
        if (idea.ApplicationStabilityId != null && applicationStability.Id == idea.ApplicationStabilityId)
        {
          idea.ApplicationStability = applicationStability;
          break;
        }
      }
    }

    public async Task GetSharedApplicationStabilityAsync(Idea idea)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedApplicationStability(idea)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedApplicationStabilities(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        this.GetSharedApplicationStability(idea);
    }

    public async Task GetSharedApplicationStabilitiesAsync(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        await this.GetSharedApplicationStabilityAsync(idea);
    }

    public void GetSharedAutomationGoal(Idea idea)
    {
      if (idea == null)
        return;
      foreach (AutomationGoal sharedAutomationGoal in (List<AutomationGoal>) _dataSet.SharedAutomationGoals.ToList())
      {
        if (idea.AutomationGoalId != null && sharedAutomationGoal.Id == idea.AutomationGoalId)
        {
          idea.AutomationGoal = sharedAutomationGoal;
          break;
        }
      }
    }

    public async Task GetSharedAutomationGoalAsync(Idea idea)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedAutomationGoal(idea)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedAutomationGoals(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        this.GetSharedAutomationGoal(idea);
    }

    public async Task GetSharedAutomationGoalsAsync(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        await this.GetSharedAutomationGoalAsync(idea);
    }

    public void GetSharedAverageNumberOfStep(Idea idea)
    {
      if (idea == null)
        return;
      foreach (AverageNumberOfStep averageNumberOfStep in (List<AverageNumberOfStep>) _dataSet.SharedAverageNumberOfSteps.ToList())
      {
        if (idea.AverageNumberOfStepId != null && averageNumberOfStep.Id == idea.AverageNumberOfStepId)
        {
          idea.AverageNumberOfStep = averageNumberOfStep;
          break;
        }
      }
    }

    public async Task GetSharedAverageNumberOfStepAsync(Idea idea)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedAverageNumberOfStep(idea)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedAverageNumberOfSteps(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        this.GetSharedAverageNumberOfStep(idea);
    }

    public async Task GetSharedAverageNumberOfStepsAsync(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        await this.GetSharedAverageNumberOfStepAsync(idea);
    }

    public void GetBusinessClient(Idea idea)
    {
      if (idea == null)
        return;
      foreach (Client businessClient in (List<Client>) _dataSet.BusinessClients.ToList())
      {
        if (idea.ClientId != null && businessClient.Id == idea.ClientId)
        {
          idea.Client = businessClient;
          break;
        }
      }
    }

    public async Task GetBusinessClientAsync(Idea idea)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClient(idea)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClients(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        this.GetBusinessClient(idea);
    }

    public async Task GetBusinessClientsAsync(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        await this.GetBusinessClientAsync(idea);
    }

    public void GetSharedDataInputPercentOfStructured(Idea idea)
    {
      if (idea == null)
        return;
      foreach (DataInputPercentOfStructured percentOfStructured in (List<DataInputPercentOfStructured>) _dataSet.SharedDataInputPercentOfStructureds.ToList())
      {
        if (idea.DataInputPercentOfStructuredId != null && percentOfStructured.Id == idea.DataInputPercentOfStructuredId)
        {
          idea.DataInputPercentOfStructured = percentOfStructured;
          break;
        }
      }
    }

    public async Task GetSharedDataInputPercentOfStructuredAsync(Idea idea)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedDataInputPercentOfStructured(idea)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedDataInputPercentOfStructureds(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        this.GetSharedDataInputPercentOfStructured(idea);
    }

    public async Task GetSharedDataInputPercentOfStructuredsAsync(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        await this.GetSharedDataInputPercentOfStructuredAsync(idea);
    }

    public void GetSharedDecisionCount(Idea idea)
    {
      if (idea == null)
        return;
      foreach (DecisionCount sharedDecisionCount in (List<DecisionCount>) _dataSet.SharedDecisionCounts.ToList())
      {
        if (idea.DecisionCountId != null && sharedDecisionCount.Id == idea.DecisionCountId)
        {
          idea.DecisionCount = sharedDecisionCount;
          break;
        }
      }
    }

    public async Task GetSharedDecisionCountAsync(Idea idea)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedDecisionCount(idea)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedDecisionCounts(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        this.GetSharedDecisionCount(idea);
    }

    public async Task GetSharedDecisionCountsAsync(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        await this.GetSharedDecisionCountAsync(idea);
    }

    public void GetSharedDecisionDifficulty(Idea idea)
    {
      if (idea == null)
        return;
      foreach (DecisionDifficulty decisionDifficulty in (List<DecisionDifficulty>) _dataSet.SharedDecisionDifficulties.ToList())
      {
        if (idea.DecisionDifficultyId != null && decisionDifficulty.Id == idea.DecisionDifficultyId)
        {
          idea.DecisionDifficulty = decisionDifficulty;
          break;
        }
      }
    }

    public async Task GetSharedDecisionDifficultyAsync(Idea idea)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedDecisionDifficulty(idea)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedDecisionDifficulties(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        this.GetSharedDecisionDifficulty(idea);
    }

    public async Task GetSharedDecisionDifficultiesAsync(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        await this.GetSharedDecisionDifficultyAsync(idea);
    }

    public void GetBusinessDepartment(Idea idea)
    {
      if (idea == null)
        return;
      foreach (Department businessDepartment in (List<Department>) _dataSet.BusinessDepartments.ToList())
      {
        if (idea.DepartmentId != null && businessDepartment.Id == idea.DepartmentId)
        {
          idea.Department = businessDepartment;
          break;
        }
      }
    }

    public async Task GetBusinessDepartmentAsync(Idea idea)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessDepartment(idea)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessDepartments(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        this.GetBusinessDepartment(idea);
    }

    public async Task GetBusinessDepartmentsAsync(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        await this.GetBusinessDepartmentAsync(idea);
    }

    public void GetSharedDocumentationPresent(Idea idea)
    {
      if (idea == null)
        return;
      foreach (DocumentationPresent documentationPresent in (List<DocumentationPresent>) _dataSet.SharedDocumentationPresents.ToList())
      {
        if (idea.DocumentationPresentId != null && documentationPresent.Id == idea.DocumentationPresentId)
        {
          idea.DocumentationPresent = documentationPresent;
          break;
        }
      }
    }

    public async Task GetSharedDocumentationPresentAsync(Idea idea)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedDocumentationPresent(idea)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedDocumentationPresents(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        this.GetSharedDocumentationPresent(idea);
    }

    public async Task GetSharedDocumentationPresentsAsync(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        await this.GetSharedDocumentationPresentAsync(idea);
    }

    public void GetSharedInputDataStructure(Idea idea)
    {
      if (idea == null)
        return;
      foreach (InputDataStructure inputDataStructure in (List<InputDataStructure>) _dataSet.SharedInputDataStructures.ToList())
      {
        if (idea.InputDataStructureId != null && inputDataStructure.Id == idea.InputDataStructureId)
        {
          idea.InputDataStructure = inputDataStructure;
          break;
        }
      }
    }

    public async Task GetSharedInputDataStructureAsync(Idea idea)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedInputDataStructure(idea)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedInputDataStructures(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        this.GetSharedInputDataStructure(idea);
    }

    public async Task GetSharedInputDataStructuresAsync(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        await this.GetSharedInputDataStructureAsync(idea);
    }

    public void GetSharedInput(Idea idea)
    {
      if (idea == null)
        return;
      foreach (Input sharedInput in (List<Input>) _dataSet.SharedInputs.ToList())
      {
        if (idea.InputId != null && sharedInput.Id == idea.InputId)
        {
          idea.Input = sharedInput;
          break;
        }
      }
    }

    public async Task GetSharedInputAsync(Idea idea)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedInput(idea)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedInputs(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        this.GetSharedInput(idea);
    }

    public async Task GetSharedInputsAsync(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        await this.GetSharedInputAsync(idea);
    }

    public void GetSharedNumberOfWaysToCompleteProcess(Idea idea)
    {
      if (idea == null)
        return;
      foreach (NumberOfWaysToCompleteProcess toCompleteProcess in (List<NumberOfWaysToCompleteProcess>) _dataSet.SharedNumberOfWaysToCompleteProcesses.ToList())
      {
        if (idea.NumberOfWaysToCompleteProcessId != null && toCompleteProcess.Id == idea.NumberOfWaysToCompleteProcessId)
        {
          idea.NumberOfWaysToCompleteProcess = toCompleteProcess;
          break;
        }
      }
    }

    public async Task GetSharedNumberOfWaysToCompleteProcessAsync(Idea idea)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedNumberOfWaysToCompleteProcess(idea)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedNumberOfWaysToCompleteProcesses(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        this.GetSharedNumberOfWaysToCompleteProcess(idea);
    }

    public async Task GetSharedNumberOfWaysToCompleteProcessesAsync(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        await this.GetSharedNumberOfWaysToCompleteProcessAsync(idea);
    }

    public void GetBusinessProcess(Idea idea)
    {
      if (idea == null)
        return;
      foreach (Process businessProcess in (List<Process>) _dataSet.BusinessProcesses.ToList())
      {
        if (idea.ProcessId != null && businessProcess.Id == idea.ProcessId)
        {
          idea.Process = businessProcess;
          break;
        }
      }
    }

    public async Task GetBusinessProcessAsync(Idea idea)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessProcess(idea)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessProcesses(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        this.GetBusinessProcess(idea);
    }

    public async Task GetBusinessProcessesAsync(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        await this.GetBusinessProcessAsync(idea);
    }

    public void GetProcessOwner(Idea idea)
    {
      if (idea == null)
        return;
      foreach (User user in (List<User>) _dataSet.Users.ToList())
      {
        if (idea.ProcessOwnerId != null && user.Id == idea.ProcessOwnerId)
        {
          idea.ProcessOwner = user;
          break;
        }
      }
    }

    public async Task GetProcessOwnerAsync(Idea idea)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetProcessOwner(idea)));
      }
      catch
      {
        throw;
      }
    }

    public void GetProcessOwners(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        this.GetProcessOwner(idea);
    }

    public async Task GetProcessOwnersAsync(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        await this.GetProcessOwnerAsync(idea);
    }

    public void GetSharedProcessPeak(Idea idea)
    {
      if (idea == null)
        return;
      foreach (ProcessPeak sharedProcessPeak in (List<ProcessPeak>) _dataSet.SharedProcessPeaks.ToList())
      {
        if (idea.ProcessPeakId != null && sharedProcessPeak.Id == idea.ProcessPeakId)
        {
          idea.ProcessPeak = sharedProcessPeak;
          break;
        }
      }
    }

    public async Task GetSharedProcessPeakAsync(Idea idea)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedProcessPeak(idea)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedProcessPeaks(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        this.GetSharedProcessPeak(idea);
    }

    public async Task GetSharedProcessPeaksAsync(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        await this.GetSharedProcessPeakAsync(idea);
    }

    public void GetSharedProcessStability(Idea idea)
    {
      if (idea == null)
        return;
      foreach (ProcessStability processStability in (List<ProcessStability>) _dataSet.SharedProcessStabilities.ToList())
      {
        if (idea.ProcessStabilityId != null && processStability.Id == idea.ProcessStabilityId)
        {
          idea.ProcessStability = processStability;
          break;
        }
      }
    }

    public async Task GetSharedProcessStabilityAsync(Idea idea)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedProcessStability(idea)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedProcessStabilities(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        this.GetSharedProcessStability(idea);
    }

    public async Task GetSharedProcessStabilitiesAsync(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        await this.GetSharedProcessStabilityAsync(idea);
    }

    public void GetSharedRule(Idea idea)
    {
      if (idea == null)
        return;
      foreach (Rule sharedRule in (List<Rule>) _dataSet.SharedRules.ToList())
      {
        if (idea.RuleId != null && sharedRule.Id == idea.RuleId)
        {
          idea.Rule = sharedRule;
          break;
        }
      }
    }

    public async Task GetSharedRuleAsync(Idea idea)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedRule(idea)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedRules(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        this.GetSharedRule(idea);
    }

    public async Task GetSharedRulesAsync(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        await this.GetSharedRuleAsync(idea);
    }

    public void GetBusinessRunningCost(Idea idea)
    {
      if (idea == null)
        return;
      foreach (RunningCost businessRunningCost in (List<RunningCost>) _dataSet.BusinessRunningCosts.ToList())
      {
        if (idea.RunningCostId != null && businessRunningCost.Id == idea.RunningCostId)
        {
          idea.RunningCost = businessRunningCost;
          break;
        }
      }
    }

    public async Task GetBusinessRunningCostAsync(Idea idea)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessRunningCost(idea)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessRunningCosts(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        this.GetBusinessRunningCost(idea);
    }

    public async Task GetBusinessRunningCostsAsync(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        await this.GetBusinessRunningCostAsync(idea);
    }

    public void GetSharedSubmissionPath(Idea idea)
    {
      if (idea == null)
        return;
      foreach (SubmissionPath sharedSubmissionPath in (List<SubmissionPath>) _dataSet.SharedSubmissionPaths.ToList())
      {
        if (idea.SubmissionPathId != null && sharedSubmissionPath.Id == idea.SubmissionPathId)
        {
          idea.SubmissionPath = sharedSubmissionPath;
          break;
        }
      }
    }

    public async Task GetSharedSubmissionPathAsync(Idea idea)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedSubmissionPath(idea)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedSubmissionPaths(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        this.GetSharedSubmissionPath(idea);
    }

    public async Task GetSharedSubmissionPathsAsync(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        await this.GetSharedSubmissionPathAsync(idea);
    }

    public void GetSharedTaskFrequency(Idea idea)
    {
      if (idea == null)
        return;
      foreach (TaskFrequency sharedTaskFrequency in (List<TaskFrequency>) _dataSet.SharedTaskFrequencies.ToList())
      {
        if (idea.TaskFrequencyId != null && sharedTaskFrequency.Id == idea.TaskFrequencyId)
        {
          idea.TaskFrequency = sharedTaskFrequency;
          break;
        }
      }
    }

    public async Task GetSharedTaskFrequencyAsync(Idea idea)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedTaskFrequency(idea)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedTaskFrequencies(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        this.GetSharedTaskFrequency(idea);
    }

    public async Task GetSharedTaskFrequenciesAsync(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        await this.GetSharedTaskFrequencyAsync(idea);
    }

    public void GetBusinessTeam(Idea idea)
    {
      if (idea == null)
        return;
      foreach (Team businessTeam in (List<Team>) _dataSet.BusinessTeams.ToList())
      {
        if (idea.TeamId != null && businessTeam.Id == idea.TeamId)
        {
          idea.Team = businessTeam;
          break;
        }
      }
    }

    public async Task GetBusinessTeamAsync(Idea idea)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessTeam(idea)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessTeams(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        this.GetBusinessTeam(idea);
    }

    public async Task GetBusinessTeamsAsync(IEnumerable<Idea> ideas)
    {
      foreach (Idea idea in ideas)
        await this.GetBusinessTeamAsync(idea);
    }
        #endregion
        public string Validate(IdeaApplicationVersion core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(IdeaApplicationVersion core)
    {
      string messages = "";
      if (core.Idea == null)
      {
        if (string.IsNullOrWhiteSpace(core.IdeaId))
        {
          messages += "Business.IdeaApplicationVersion.IdeaId: Idea missing; ";
        }
        else
        {
          Idea parent = _dataSet.BusinessIdeas.SingleOrDefault<Idea>((Func<Idea, bool>) (x => x.Id == core.IdeaId));
          if (parent == null)
            messages += "Business.IdeaApplicationVersion.IdeaId: Idea invalid; ";
          parent = (Idea) null;
        }
      }
      if (core.Language == null)
      {
        if (string.IsNullOrWhiteSpace(core.LanguageId))
        {
          messages += "Business.IdeaApplicationVersion.LanguageId: Language missing; ";
        }
        else
        {
          Language parent = _dataSet.SharedLanguages.SingleOrDefault<Language>((Func<Language, bool>) (x => x.Id == core.LanguageId));
          if (parent == null)
            messages += "Business.IdeaApplicationVersion.LanguageId: Language invalid; ";
          parent = (Language) null;
        }
      }
      if (core.Version == null)
      {
        if (string.IsNullOrWhiteSpace(core.VersionId))
        {
          messages += "Business.IdeaApplicationVersion.VersionId: Version missing; ";
        }
        else
        {
          SilkFlo.Data.Core.Domain.Business.Version parent = _dataSet.BusinessVersions.SingleOrDefault<SilkFlo.Data.Core.Domain.Business.Version>((Func<SilkFlo.Data.Core.Domain.Business.Version, bool>) (x => x.Id == core.VersionId));
          if (parent == null)
            messages += "Business.IdeaApplicationVersion.VersionId: Version invalid; ";
          parent = (SilkFlo.Data.Core.Domain.Business.Version) null;
        }
      }
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public void Add(
      IEnumerable<IdeaApplicationVersion> ideaApplicationVersions)
    {
      try
      {
        foreach (IdeaApplicationVersion applicationVersion in ideaApplicationVersions)
          this.Add(applicationVersion);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(
      IEnumerable<IdeaApplicationVersion> ideaApplicationVersions)
    {
      try
      {
        foreach (IdeaApplicationVersion ideaApplicationVersion in ideaApplicationVersions)
          await this.AddAsync(ideaApplicationVersion);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IdeaApplicationVersion core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          IdeaApplicationVersion ideaApplicationVersion = (IdeaApplicationVersion) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            ideaApplicationVersion = _dataSet.BusinessIdeaApplicationVersions.SingleOrDefault<IdeaApplicationVersion>((Func<IdeaApplicationVersion, bool>) (x => x.Id == core.Id));
          if (ideaApplicationVersion == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessIdeaApplicationVersions.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////ideaApplicationVersion.Update(core);
                        ///

                        _dataSet.Entry(ideaApplicationVersion).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        ideaApplicationVersion.Update(core);
                        _dataSet.BusinessIdeaApplicationVersions.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          ideaApplicationVersion = (IdeaApplicationVersion) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(IdeaApplicationVersion core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(IdeaApplicationVersion ideaApplicationVersion, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(ideaApplicationVersion, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IdeaApplicationVersion ideaApplicationVersion,
      bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(ideaApplicationVersion, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(
      IEnumerable<IdeaApplicationVersion> ideaApplicationVersions,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (ideaApplicationVersions == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (IdeaApplicationVersion ideaApplicationVersion in ideaApplicationVersions.ToList<IdeaApplicationVersion>())
        {
          dataStoreResult = this.Delete(ideaApplicationVersion, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<IdeaApplicationVersion> ideaApplicationVersions,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (ideaApplicationVersions == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<IdeaApplicationVersion> lst = ideaApplicationVersions.ToList<IdeaApplicationVersion>();
        foreach (IdeaApplicationVersion applicationVersion in lst)
        {
          IdeaApplicationVersion item = applicationVersion;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (IdeaApplicationVersion) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(
      IdeaApplicationVersion ideaApplicationVersion,
      Transaction transaction)
    {
      try
      {
        if (ideaApplicationVersion.Id == null)
          return DataStoreResult.Success;
        IdeaApplicationVersion entity = _dataSet.BusinessIdeaApplicationVersions.SingleOrDefault<IdeaApplicationVersion>((Func<IdeaApplicationVersion, bool>) (x => x.Id == ideaApplicationVersion.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(ideaApplicationVersion, transaction);
        if (!ideaApplicationVersion.CanDelete)
          throw new ChildDependencyException("The idea application (" + ideaApplicationVersion.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.BusinessIdeaApplicationVersions.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      IdeaApplicationVersion ideaApplicationVersion,
      Transaction transaction)
    {
      try
      {
        if (ideaApplicationVersion.Id == null)
          return DataStoreResult.Success;
        IdeaApplicationVersion core = _dataSet.BusinessIdeaApplicationVersions.SingleOrDefault<IdeaApplicationVersion>((Func<IdeaApplicationVersion, bool>) (x => x.Id == ideaApplicationVersion.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(ideaApplicationVersion, transaction);
        if (ideaApplicationVersion.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessIdeaApplicationVersions.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The idea application (" + ideaApplicationVersion.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessIdeaApplicationVersion(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessIdeaApplicationVersions.SingleOrDefault<IdeaApplicationVersion>((Func<IdeaApplicationVersion, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The ideaApplicationVersion is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncBusinessIdeaApplicationVersion(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        IdeaApplicationVersion ideaApplicationVersion = _dataSet.BusinessIdeaApplicationVersions.SingleOrDefault<IdeaApplicationVersion>((Func<IdeaApplicationVersion, bool>) (x => x.Id == Id));
        if (ideaApplicationVersion == null)
          throw new NotFoundException("The ideaApplicationVersion is not found");
        dataStoreResult = await this.DeleteAsync(ideaApplicationVersion, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(

      
      IdeaApplicationVersion ideaApplicationVersion,
      Transaction transaction)
    {
      if (ideaApplicationVersion == null)
        return;
      ideaApplicationVersion.CanDelete = true;
    }

    internal async Task RefreshCanDeleteAsync(
      IdeaApplicationVersion ideaApplicationVersion,
      Transaction transaction)
    {
      if (ideaApplicationVersion == null)
        return;
      ideaApplicationVersion.CanDelete = true;
    }

    public IdeaApplicationVersion FindBusinessIdeaApplicationVersion(
    
    string Id) => Id == null ? (IdeaApplicationVersion) null : _dataSet.BusinessIdeaApplicationVersions.SingleOrDefault<IdeaApplicationVersion>((Func<IdeaApplicationVersion, bool>) (x => x.Id == Id));

    public async 
    
    Task<IdeaApplicationVersion> FindBusinessIdeaApplicationVersionAsync(string Id)
    {
      IdeaApplicationVersion applicationVersionAsync;
      try
      {
        applicationVersionAsync = await Task.Run<IdeaApplicationVersion>((Func<IdeaApplicationVersion>) (() => this.FindBusinessIdeaApplicationVersion(Id)));
      }
      catch
      {
        throw;
      }
      return applicationVersionAsync;
    }

    public List<IdeaApplicationVersion> GetBusinessIdeaApplicationVersionByDate(DateTime date) => _dataSet.BusinessIdeaApplicationVersions.Where<IdeaApplicationVersion>((Func<IdeaApplicationVersion, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<IdeaApplicationVersion>();

    public async Task<List<IdeaApplicationVersion>> GetBusinessIdeaApplicationVersionByDateAsync(
      DateTime date)
    {
      List<IdeaApplicationVersion> versionByDateAsync;
      try
      {
        versionByDateAsync = await Task.Run<List<IdeaApplicationVersion>>((Func<List<IdeaApplicationVersion>>) (() => this.GetBusinessIdeaApplicationVersionByDate(date)));
      }
      catch
      {
        throw;
      }
      return versionByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<IdeaApplicationVersion> cores)
    {
      try
      {
        foreach (IdeaApplicationVersion core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<IdeaApplicationVersion> cores)
    {
      try
      {
        foreach (IdeaApplicationVersion core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(IdeaApplicationVersion ideaApplicationVersion)
    {
      if (ideaApplicationVersion == null)
        return;
      if (ideaApplicationVersion.CreatedById != null && ideaApplicationVersion.CreatedBy == null)
        ideaApplicationVersion.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == ideaApplicationVersion.CreatedById));
      if (ideaApplicationVersion.UpdatedById == null || ideaApplicationVersion.UpdatedBy != null)
        return;
      ideaApplicationVersion.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == ideaApplicationVersion.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(IdeaApplicationVersion ideaApplicationVersion)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(ideaApplicationVersion)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessIdea(IdeaApplicationVersion ideaApplicationVersion)
    {
      if (ideaApplicationVersion == null)
        return;
      foreach (Idea businessIdea in (List<Idea>) _dataSet.BusinessIdeas.ToList())
      {
        if (ideaApplicationVersion.IdeaId != null && businessIdea.Id == ideaApplicationVersion.IdeaId)
        {
          ideaApplicationVersion.Idea = businessIdea;
          break;
        }
      }
    }

    public async Task GetBusinessIdeaAsync(IdeaApplicationVersion ideaApplicationVersion)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdea(ideaApplicationVersion)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessIdeas(
      IEnumerable<IdeaApplicationVersion> ideaApplicationVersions)
    {
      foreach (IdeaApplicationVersion applicationVersion in ideaApplicationVersions)
        this.GetBusinessIdea(applicationVersion);
    }

    public async Task GetBusinessIdeasAsync(
      IEnumerable<IdeaApplicationVersion> ideaApplicationVersions)
    {
      foreach (IdeaApplicationVersion ideaApplicationVersion in ideaApplicationVersions)
        await this.GetBusinessIdeaAsync(ideaApplicationVersion);
    }

    public void GetSharedLanguage(IdeaApplicationVersion ideaApplicationVersion)
    {
      if (ideaApplicationVersion == null)
        return;
      foreach (Language sharedLanguage in (List<Language>) _dataSet.SharedLanguages.ToList())
      {
        if (ideaApplicationVersion.LanguageId != null && sharedLanguage.Id == ideaApplicationVersion.LanguageId)
        {
          ideaApplicationVersion.Language = sharedLanguage;
          break;
        }
      }
    }

    public async Task GetSharedLanguageAsync(IdeaApplicationVersion ideaApplicationVersion)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedLanguage(ideaApplicationVersion)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedLanguages(
      IEnumerable<IdeaApplicationVersion> ideaApplicationVersions)
    {
      foreach (IdeaApplicationVersion applicationVersion in ideaApplicationVersions)
        this.GetSharedLanguage(applicationVersion);
    }

    public async Task GetSharedLanguagesAsync(
      IEnumerable<IdeaApplicationVersion> ideaApplicationVersions)
    {
      foreach (IdeaApplicationVersion ideaApplicationVersion in ideaApplicationVersions)
        await this.GetSharedLanguageAsync(ideaApplicationVersion);
    }

    public void GetBusinessVersion(IdeaApplicationVersion ideaApplicationVersion)
    {
      if (ideaApplicationVersion == null)
        return;
      foreach (SilkFlo.Data.Core.Domain.Business.Version businessVersion in (List<SilkFlo.Data.Core.Domain.Business.Version>) _dataSet.BusinessVersions.ToList())
      {
        if (ideaApplicationVersion.VersionId != null && businessVersion.Id == ideaApplicationVersion.VersionId)
        {
          ideaApplicationVersion.Version = businessVersion;
          break;
        }
      }
    }

    public async Task GetBusinessVersionAsync(IdeaApplicationVersion ideaApplicationVersion)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessVersion(ideaApplicationVersion)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessVersions(
      IEnumerable<IdeaApplicationVersion> ideaApplicationVersions)
    {
      foreach (IdeaApplicationVersion applicationVersion in ideaApplicationVersions)
        this.GetBusinessVersion(applicationVersion);
    }

    public async Task GetBusinessVersionsAsync(
      IEnumerable<IdeaApplicationVersion> ideaApplicationVersions)
    {
      foreach (IdeaApplicationVersion ideaApplicationVersion in ideaApplicationVersions)
        await this.GetBusinessVersionAsync(ideaApplicationVersion);
    }

    public string Validate(IdeaOtherRunningCost core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(IdeaOtherRunningCost core)
    {
      string messages = "";
      if (core.Client == null)
      {
        if (string.IsNullOrWhiteSpace(core.ClientId))
        {
          messages += "Business.IdeaOtherRunningCost.ClientId: Client missing; ";
        }
        else
        {
          Client parent = _dataSet.BusinessClients.SingleOrDefault<Client>((Func<Client, bool>) (x => x.Id == core.ClientId));
          if (parent == null)
            messages += "Business.IdeaOtherRunningCost.ClientId: Client invalid; ";
          parent = (Client) null;
        }
      }
      if (core.Idea == null)
      {
        if (string.IsNullOrWhiteSpace(core.IdeaId))
        {
          messages += "Business.IdeaOtherRunningCost.IdeaId: Idea missing; ";
        }
        else
        {
          Idea parent = _dataSet.BusinessIdeas.SingleOrDefault<Idea>((Func<Idea, bool>) (x => x.Id == core.IdeaId));
          if (parent == null)
            messages += "Business.IdeaOtherRunningCost.IdeaId: Idea invalid; ";
          parent = (Idea) null;
        }
      }
      if (core.OtherRunningCost == null)
      {
        if (string.IsNullOrWhiteSpace(core.OtherRunningCostId))
        {
          messages += "Business.IdeaOtherRunningCost.OtherRunningCostId: Other Running Cost missing; ";
        }
        else
        {
          OtherRunningCost parent = _dataSet.BusinessOtherRunningCosts.SingleOrDefault<OtherRunningCost>((Func<OtherRunningCost, bool>) (x => x.Id == core.OtherRunningCostId));
          if (parent == null)
            messages += "Business.IdeaOtherRunningCost.OtherRunningCostId: Other Running Cost invalid; ";
          parent = (OtherRunningCost) null;
        }
      }
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(IdeaOtherRunningCost core)
    {
      string str = "";
      if (_dataSet.BusinessIdeaOtherRunningCosts.ToList<IdeaOtherRunningCost>().FirstOrDefault<IdeaOtherRunningCost>((Func<IdeaOtherRunningCost, bool>) (x => x.Id != (core.Id ?? "") && x.ClientId == core.ClientId && x.IdeaId == core.IdeaId && x.OtherRunningCostId == core.OtherRunningCostId)) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this client and idea and other Running Cost.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(IdeaOtherRunningCost core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(
      IEnumerable<IdeaOtherRunningCost> ideaOtherRunningCosts)
    {
      try
      {
        foreach (IdeaOtherRunningCost otherRunningCost in ideaOtherRunningCosts)
          this.Add(otherRunningCost);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(
      IEnumerable<IdeaOtherRunningCost> ideaOtherRunningCosts)
    {
      try
      {
        foreach (IdeaOtherRunningCost ideaOtherRunningCost in ideaOtherRunningCosts)
          await this.AddAsync(ideaOtherRunningCost);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IdeaOtherRunningCost core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          IdeaOtherRunningCost ideaOtherRunningCost = (IdeaOtherRunningCost) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            ideaOtherRunningCost = _dataSet.BusinessIdeaOtherRunningCosts.SingleOrDefault<IdeaOtherRunningCost>((Func<IdeaOtherRunningCost, bool>) (x => x.Id == core.Id));
          if (ideaOtherRunningCost == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessIdeaOtherRunningCosts.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////ideaOtherRunningCost.Update(core);
                        ///

                        _dataSet.Entry(ideaOtherRunningCost).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        ideaOtherRunningCost.Update(core);
                        _dataSet.BusinessIdeaOtherRunningCosts.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          ideaOtherRunningCost = (IdeaOtherRunningCost) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(IdeaOtherRunningCost core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(IdeaOtherRunningCost ideaOtherRunningCost, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(ideaOtherRunningCost, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IdeaOtherRunningCost ideaOtherRunningCost,
      bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(ideaOtherRunningCost, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(
      IEnumerable<IdeaOtherRunningCost> ideaOtherRunningCosts,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (ideaOtherRunningCosts == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (IdeaOtherRunningCost ideaOtherRunningCost in ideaOtherRunningCosts.ToList<IdeaOtherRunningCost>())
        {
          dataStoreResult = this.Delete(ideaOtherRunningCost, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<IdeaOtherRunningCost> ideaOtherRunningCosts,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (ideaOtherRunningCosts == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<IdeaOtherRunningCost> lst = ideaOtherRunningCosts.ToList<IdeaOtherRunningCost>();
        foreach (IdeaOtherRunningCost otherRunningCost in lst)
        {
          IdeaOtherRunningCost item = otherRunningCost;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (IdeaOtherRunningCost) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(
      IdeaOtherRunningCost ideaOtherRunningCost,
      Transaction transaction)
    {
      try
      {
        if (ideaOtherRunningCost.Id == null)
          return DataStoreResult.Success;
        IdeaOtherRunningCost entity = _dataSet.BusinessIdeaOtherRunningCosts.SingleOrDefault<IdeaOtherRunningCost>((Func<IdeaOtherRunningCost, bool>) (x => x.Id == ideaOtherRunningCost.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(ideaOtherRunningCost, transaction);
        if (!ideaOtherRunningCost.CanDelete)
          throw new ChildDependencyException("The other running cost (" + ideaOtherRunningCost.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.BusinessIdeaOtherRunningCosts.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      IdeaOtherRunningCost ideaOtherRunningCost,
      Transaction transaction)
    {
      try
      {
        if (ideaOtherRunningCost.Id == null)
          return DataStoreResult.Success;
        IdeaOtherRunningCost core = _dataSet.BusinessIdeaOtherRunningCosts.SingleOrDefault<IdeaOtherRunningCost>((Func<IdeaOtherRunningCost, bool>) (x => x.Id == ideaOtherRunningCost.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(ideaOtherRunningCost, transaction);
        if (ideaOtherRunningCost.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessIdeaOtherRunningCosts.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The other running cost (" + ideaOtherRunningCost.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessIdeaOtherRunningCost(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessIdeaOtherRunningCosts.SingleOrDefault<IdeaOtherRunningCost>((Func<IdeaOtherRunningCost, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The ideaOtherRunningCost is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncBusinessIdeaOtherRunningCost(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        IdeaOtherRunningCost ideaOtherRunningCost = _dataSet.BusinessIdeaOtherRunningCosts.SingleOrDefault<IdeaOtherRunningCost>((Func<IdeaOtherRunningCost, bool>) (x => x.Id == Id));
        if (ideaOtherRunningCost == null)
          throw new NotFoundException("The ideaOtherRunningCost is not found");
        dataStoreResult = await this.DeleteAsync(ideaOtherRunningCost, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(

      
      IdeaOtherRunningCost ideaOtherRunningCost,
      Transaction transaction)
    {
      if (ideaOtherRunningCost == null)
        return;
      ideaOtherRunningCost.CanDelete = true;
    }

    internal async Task RefreshCanDeleteAsync(
      IdeaOtherRunningCost ideaOtherRunningCost,
      Transaction transaction)
    {
      if (ideaOtherRunningCost == null)
        return;
      ideaOtherRunningCost.CanDelete = true;
    }

    public IdeaOtherRunningCost FindBusinessIdeaOtherRunningCost(
    
    string Id) => Id == null ? (IdeaOtherRunningCost) null : _dataSet.BusinessIdeaOtherRunningCosts.SingleOrDefault<IdeaOtherRunningCost>((Func<IdeaOtherRunningCost, bool>) (x => x.Id == Id));

    public async 
    
    Task<IdeaOtherRunningCost> FindBusinessIdeaOtherRunningCostAsync(string Id)
    {
      IdeaOtherRunningCost runningCostAsync;
      try
      {
        runningCostAsync = await Task.Run<IdeaOtherRunningCost>((Func<IdeaOtherRunningCost>) (() => this.FindBusinessIdeaOtherRunningCost(Id)));
      }
      catch
      {
        throw;
      }
      return runningCostAsync;
    }

    public List<IdeaOtherRunningCost> GetBusinessIdeaOtherRunningCostByDate(DateTime date) => _dataSet.BusinessIdeaOtherRunningCosts.Where<IdeaOtherRunningCost>((Func<IdeaOtherRunningCost, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<IdeaOtherRunningCost>();

    public async Task<List<IdeaOtherRunningCost>> GetBusinessIdeaOtherRunningCostByDateAsync(
      DateTime date)
    {
      List<IdeaOtherRunningCost> runningCostByDateAsync;
      try
      {
        runningCostByDateAsync = await Task.Run<List<IdeaOtherRunningCost>>((Func<List<IdeaOtherRunningCost>>) (() => this.GetBusinessIdeaOtherRunningCostByDate(date)));
      }
      catch
      {
        throw;
      }
      return runningCostByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<IdeaOtherRunningCost> cores)
    {
      try
      {
        foreach (IdeaOtherRunningCost core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<IdeaOtherRunningCost> cores)
    {
      try
      {
        foreach (IdeaOtherRunningCost core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(IdeaOtherRunningCost ideaOtherRunningCost)
    {
      if (ideaOtherRunningCost == null)
        return;
      if (ideaOtherRunningCost.CreatedById != null && ideaOtherRunningCost.CreatedBy == null)
        ideaOtherRunningCost.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == ideaOtherRunningCost.CreatedById));
      if (ideaOtherRunningCost.UpdatedById == null || ideaOtherRunningCost.UpdatedBy != null)
        return;
      ideaOtherRunningCost.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == ideaOtherRunningCost.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(IdeaOtherRunningCost ideaOtherRunningCost)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(ideaOtherRunningCost)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClient(IdeaOtherRunningCost ideaOtherRunningCost)
    {
      if (ideaOtherRunningCost == null)
        return;
      foreach (Client businessClient in (List<Client>) _dataSet.BusinessClients.ToList())
      {
        if (ideaOtherRunningCost.ClientId != null && businessClient.Id == ideaOtherRunningCost.ClientId)
        {
          ideaOtherRunningCost.Client = businessClient;
          break;
        }
      }
    }

    public async Task GetBusinessClientAsync(IdeaOtherRunningCost ideaOtherRunningCost)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClient(ideaOtherRunningCost)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClients(
      IEnumerable<IdeaOtherRunningCost> ideaOtherRunningCosts)
    {
      foreach (IdeaOtherRunningCost otherRunningCost in ideaOtherRunningCosts)
        this.GetBusinessClient(otherRunningCost);
    }

    public async Task GetBusinessClientsAsync(
      IEnumerable<IdeaOtherRunningCost> ideaOtherRunningCosts)
    {
      foreach (IdeaOtherRunningCost ideaOtherRunningCost in ideaOtherRunningCosts)
        await this.GetBusinessClientAsync(ideaOtherRunningCost);
    }

    public void GetBusinessIdea(IdeaOtherRunningCost ideaOtherRunningCost)
    {
      if (ideaOtherRunningCost == null)
        return;
      foreach (Idea businessIdea in (List<Idea>) _dataSet.BusinessIdeas.ToList())
      {
        if (ideaOtherRunningCost.IdeaId != null && businessIdea.Id == ideaOtherRunningCost.IdeaId)
        {
          ideaOtherRunningCost.Idea = businessIdea;
          break;
        }
      }
    }

    public async Task GetBusinessIdeaAsync(IdeaOtherRunningCost ideaOtherRunningCost)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdea(ideaOtherRunningCost)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessIdeas(
      IEnumerable<IdeaOtherRunningCost> ideaOtherRunningCosts)
    {
      foreach (IdeaOtherRunningCost otherRunningCost in ideaOtherRunningCosts)
        this.GetBusinessIdea(otherRunningCost);
    }

    public async Task GetBusinessIdeasAsync(
      IEnumerable<IdeaOtherRunningCost> ideaOtherRunningCosts)
    {
      foreach (IdeaOtherRunningCost ideaOtherRunningCost in ideaOtherRunningCosts)
        await this.GetBusinessIdeaAsync(ideaOtherRunningCost);
    }

    public void GetBusinessOtherRunningCost(IdeaOtherRunningCost ideaOtherRunningCost)
    {
      if (ideaOtherRunningCost == null)
        return;
      foreach (OtherRunningCost otherRunningCost in (List<OtherRunningCost>) _dataSet.BusinessOtherRunningCosts.ToList())
      {
        if (ideaOtherRunningCost.OtherRunningCostId != null && otherRunningCost.Id == ideaOtherRunningCost.OtherRunningCostId)
        {
          ideaOtherRunningCost.OtherRunningCost = otherRunningCost;
          break;
        }
      }
    }

    public async Task GetBusinessOtherRunningCostAsync(IdeaOtherRunningCost ideaOtherRunningCost)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessOtherRunningCost(ideaOtherRunningCost)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessOtherRunningCosts(
      IEnumerable<IdeaOtherRunningCost> ideaOtherRunningCosts)
    {
      foreach (IdeaOtherRunningCost otherRunningCost in ideaOtherRunningCosts)
        this.GetBusinessOtherRunningCost(otherRunningCost);
    }

    public async Task GetBusinessOtherRunningCostsAsync(
      IEnumerable<IdeaOtherRunningCost> ideaOtherRunningCosts)
    {
      foreach (IdeaOtherRunningCost ideaOtherRunningCost in ideaOtherRunningCosts)
        await this.GetBusinessOtherRunningCostAsync(ideaOtherRunningCost);
    }

    public string Validate(IdeaRunningCost core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(IdeaRunningCost core)
    {
      string messages = "";
      if (core.Client == null)
      {
        if (string.IsNullOrWhiteSpace(core.ClientId))
        {
          messages += "Business.IdeaRunningCost.ClientId: Client missing; ";
        }
        else
        {
          Client parent = _dataSet.BusinessClients.SingleOrDefault<Client>((Func<Client, bool>) (x => x.Id == core.ClientId));
          if (parent == null)
            messages += "Business.IdeaRunningCost.ClientId: Client invalid; ";
          parent = (Client) null;
        }
      }
      if (core.Idea == null)
      {
        if (string.IsNullOrWhiteSpace(core.IdeaId))
        {
          messages += "Business.IdeaRunningCost.IdeaId: Idea missing; ";
        }
        else
        {
          Idea parent = _dataSet.BusinessIdeas.SingleOrDefault<Idea>((Func<Idea, bool>) (x => x.Id == core.IdeaId));
          if (parent == null)
            messages += "Business.IdeaRunningCost.IdeaId: Idea invalid; ";
          parent = (Idea) null;
        }
      }
      if (core.RunningCost == null)
      {
        if (string.IsNullOrWhiteSpace(core.RunningCostId))
        {
          messages += "Business.IdeaRunningCost.RunningCostId: Running Cost missing; ";
        }
        else
        {
          RunningCost parent = _dataSet.BusinessRunningCosts.SingleOrDefault<RunningCost>((Func<RunningCost, bool>) (x => x.Id == core.RunningCostId));
          if (parent == null)
            messages += "Business.IdeaRunningCost.RunningCostId: Running Cost invalid; ";
          parent = (RunningCost) null;
        }
      }
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(IdeaRunningCost core)
    {
      string str = "";
      if (_dataSet.BusinessIdeaRunningCosts.ToList<IdeaRunningCost>().FirstOrDefault<IdeaRunningCost>((Func<IdeaRunningCost, bool>) (x => x.Id != (core.Id ?? "") && x.ClientId == core.ClientId && x.IdeaId == core.IdeaId && x.RunningCostId == core.RunningCostId)) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this client and idea and running Cost.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(IdeaRunningCost core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<IdeaRunningCost> ideaRunningCosts)
    {
      try
      {
        foreach (IdeaRunningCost ideaRunningCost in ideaRunningCosts)
          this.Add(ideaRunningCost);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<IdeaRunningCost> ideaRunningCosts)
    {
      try
      {
        foreach (IdeaRunningCost ideaRunningCost in ideaRunningCosts)
          await this.AddAsync(ideaRunningCost);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IdeaRunningCost core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          IdeaRunningCost ideaRunningCost = (IdeaRunningCost) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            ideaRunningCost = _dataSet.BusinessIdeaRunningCosts.SingleOrDefault<IdeaRunningCost>((Func<IdeaRunningCost, bool>) (x => x.Id == core.Id));
          if (ideaRunningCost == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessIdeaRunningCosts.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////ideaRunningCost.Update(core);
                        ///

                        _dataSet.Entry(ideaRunningCost).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        ideaRunningCost.Update(core);
                        _dataSet.BusinessIdeaRunningCosts.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          ideaRunningCost = (IdeaRunningCost) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(IdeaRunningCost core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(IdeaRunningCost ideaRunningCost, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(ideaRunningCost, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IdeaRunningCost ideaRunningCost,
      bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(ideaRunningCost, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<IdeaRunningCost> ideaRunningCosts, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (ideaRunningCosts == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (IdeaRunningCost ideaRunningCost in ideaRunningCosts.ToList<IdeaRunningCost>())
        {
          dataStoreResult = this.Delete(ideaRunningCost, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<IdeaRunningCost> ideaRunningCosts,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (ideaRunningCosts == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<IdeaRunningCost> lst = ideaRunningCosts.ToList<IdeaRunningCost>();
        foreach (IdeaRunningCost ideaRunningCost in lst)
        {
          IdeaRunningCost item = ideaRunningCost;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (IdeaRunningCost) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(IdeaRunningCost ideaRunningCost, Transaction transaction)
    {
      try
      {
        if (ideaRunningCost.Id == null)
          return DataStoreResult.Success;
        IdeaRunningCost entity = _dataSet.BusinessIdeaRunningCosts.SingleOrDefault<IdeaRunningCost>((Func<IdeaRunningCost, bool>) (x => x.Id == ideaRunningCost.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(ideaRunningCost, transaction);
        if (!ideaRunningCost.CanDelete)
          throw new ChildDependencyException("The idea running cost (" + ideaRunningCost.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.BusinessIdeaRunningCosts.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      IdeaRunningCost ideaRunningCost,
      Transaction transaction)
    {
      try
      {
        if (ideaRunningCost.Id == null)
          return DataStoreResult.Success;
        IdeaRunningCost core = _dataSet.BusinessIdeaRunningCosts.SingleOrDefault<IdeaRunningCost>((Func<IdeaRunningCost, bool>) (x => x.Id == ideaRunningCost.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(ideaRunningCost, transaction);
        if (ideaRunningCost.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessIdeaRunningCosts.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The idea running cost (" + ideaRunningCost.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessIdeaRunningCost(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessIdeaRunningCosts.SingleOrDefault<IdeaRunningCost>((Func<IdeaRunningCost, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The ideaRunningCost is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncBusinessIdeaRunningCost(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        IdeaRunningCost ideaRunningCost = _dataSet.BusinessIdeaRunningCosts.SingleOrDefault<IdeaRunningCost>((Func<IdeaRunningCost, bool>) (x => x.Id == Id));
        if (ideaRunningCost == null)
          throw new NotFoundException("The ideaRunningCost is not found");
        dataStoreResult = await this.DeleteAsync(ideaRunningCost, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    IdeaRunningCost ideaRunningCost, Transaction transaction)
    {
      if (ideaRunningCost == null)
        return;
      ideaRunningCost.CanDelete = true;
    }

    internal async Task RefreshCanDeleteAsync(
      IdeaRunningCost ideaRunningCost,
      Transaction transaction)
    {
      if (ideaRunningCost == null)
        return;
      ideaRunningCost.CanDelete = true;
    }

    public IdeaRunningCost FindBusinessIdeaRunningCost(
    
    string Id) => Id == null ? (IdeaRunningCost) null : _dataSet.BusinessIdeaRunningCosts.SingleOrDefault<IdeaRunningCost>((Func<IdeaRunningCost, bool>) (x => x.Id == Id));

    public async 
    
    Task<IdeaRunningCost> FindBusinessIdeaRunningCostAsync(string Id)
    {
      IdeaRunningCost runningCostAsync;
      try
      {
        runningCostAsync = await Task.Run<IdeaRunningCost>((Func<IdeaRunningCost>) (() => this.FindBusinessIdeaRunningCost(Id)));
      }
      catch
      {
        throw;
      }
      return runningCostAsync;
    }

    public List<IdeaRunningCost> GetBusinessIdeaRunningCostByDate(DateTime date) => _dataSet.BusinessIdeaRunningCosts.Where<IdeaRunningCost>((Func<IdeaRunningCost, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<IdeaRunningCost>();

    public async Task<List<IdeaRunningCost>> GetBusinessIdeaRunningCostByDateAsync(DateTime date)
    {
      List<IdeaRunningCost> runningCostByDateAsync;
      try
      {
        runningCostByDateAsync = await Task.Run<List<IdeaRunningCost>>((Func<List<IdeaRunningCost>>) (() => this.GetBusinessIdeaRunningCostByDate(date)));
      }
      catch
      {
        throw;
      }
      return runningCostByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<IdeaRunningCost> cores)
    {
      try
      {
        foreach (IdeaRunningCost core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<IdeaRunningCost> cores)
    {
      try
      {
        foreach (IdeaRunningCost core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(IdeaRunningCost ideaRunningCost)
    {
      if (ideaRunningCost == null)
        return;
      if (ideaRunningCost.CreatedById != null && ideaRunningCost.CreatedBy == null)
        ideaRunningCost.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == ideaRunningCost.CreatedById));
      if (ideaRunningCost.UpdatedById == null || ideaRunningCost.UpdatedBy != null)
        return;
      ideaRunningCost.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == ideaRunningCost.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(IdeaRunningCost ideaRunningCost)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(ideaRunningCost)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClient(IdeaRunningCost ideaRunningCost)
    {
      if (ideaRunningCost == null)
        return;
      foreach (Client businessClient in (List<Client>) _dataSet.BusinessClients.ToList())
      {
        if (ideaRunningCost.ClientId != null && businessClient.Id == ideaRunningCost.ClientId)
        {
          ideaRunningCost.Client = businessClient;
          break;
        }
      }
    }

    public async Task GetBusinessClientAsync(IdeaRunningCost ideaRunningCost)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClient(ideaRunningCost)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClients(IEnumerable<IdeaRunningCost> ideaRunningCosts)
    {
      foreach (IdeaRunningCost ideaRunningCost in ideaRunningCosts)
        this.GetBusinessClient(ideaRunningCost);
    }

    public async Task GetBusinessClientsAsync(IEnumerable<IdeaRunningCost> ideaRunningCosts)
    {
      foreach (IdeaRunningCost ideaRunningCost in ideaRunningCosts)
        await this.GetBusinessClientAsync(ideaRunningCost);
    }

    public void GetBusinessIdea(IdeaRunningCost ideaRunningCost)
    {
      if (ideaRunningCost == null)
        return;
      foreach (Idea businessIdea in (List<Idea>) _dataSet.BusinessIdeas.ToList())
      {
        if (ideaRunningCost.IdeaId != null && businessIdea.Id == ideaRunningCost.IdeaId)
        {
          ideaRunningCost.Idea = businessIdea;
          break;
        }
      }
    }

    public async Task GetBusinessIdeaAsync(IdeaRunningCost ideaRunningCost)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdea(ideaRunningCost)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessIdeas(IEnumerable<IdeaRunningCost> ideaRunningCosts)
    {
      foreach (IdeaRunningCost ideaRunningCost in ideaRunningCosts)
        this.GetBusinessIdea(ideaRunningCost);
    }

    public async Task GetBusinessIdeasAsync(IEnumerable<IdeaRunningCost> ideaRunningCosts)
    {
      foreach (IdeaRunningCost ideaRunningCost in ideaRunningCosts)
        await this.GetBusinessIdeaAsync(ideaRunningCost);
    }

    public void GetBusinessRunningCost(IdeaRunningCost ideaRunningCost)
    {
      if (ideaRunningCost == null)
        return;
      foreach (RunningCost businessRunningCost in (List<RunningCost>) _dataSet.BusinessRunningCosts.ToList())
      {
        if (ideaRunningCost.RunningCostId != null && businessRunningCost.Id == ideaRunningCost.RunningCostId)
        {
          ideaRunningCost.RunningCost = businessRunningCost;
          break;
        }
      }
    }

    public async Task GetBusinessRunningCostAsync(IdeaRunningCost ideaRunningCost)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessRunningCost(ideaRunningCost)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessRunningCosts(IEnumerable<IdeaRunningCost> ideaRunningCosts)
    {
      foreach (IdeaRunningCost ideaRunningCost in ideaRunningCosts)
        this.GetBusinessRunningCost(ideaRunningCost);
    }

    public async Task GetBusinessRunningCostsAsync(IEnumerable<IdeaRunningCost> ideaRunningCosts)
    {
      foreach (IdeaRunningCost ideaRunningCost in ideaRunningCosts)
        await this.GetBusinessRunningCostAsync(ideaRunningCost);
    }

    public string Validate(IdeaStage core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(IdeaStage core)
    {
      string messages = "";
      if (core.DateStartEstimate == DateTime.MinValue)
        messages += "Business.IdeaStage.DateStartEstimate: Date Start Estimate missing; ";
      if (core.Idea == null)
      {
        if (string.IsNullOrWhiteSpace(core.IdeaId))
        {
          messages += "Business.IdeaStage.IdeaId: Idea missing; ";
        }
        else
        {
          Idea parent = _dataSet.BusinessIdeas.SingleOrDefault<Idea>((Func<Idea, bool>) (x => x.Id == core.IdeaId));
          if (parent == null)
            messages += "Business.IdeaStage.IdeaId: Idea invalid; ";
          parent = (Idea) null;
        }
      }
      if (core.Stage == null)
      {
        if (string.IsNullOrWhiteSpace(core.StageId))
        {
          messages += "Business.IdeaStage.StageId: Stage missing; ";
        }
        else
        {
          Stage parent = _dataSet.SharedStages.SingleOrDefault<Stage>((Func<Stage, bool>) (x => x.Id == core.StageId));
          if (parent == null)
            messages += "Business.IdeaStage.StageId: Stage invalid; ";
          parent = (Stage) null;
        }
      }
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(IdeaStage core)
    {
      string str = "";
      if (_dataSet.BusinessIdeaStages.ToList<IdeaStage>().FirstOrDefault<IdeaStage>((Func<IdeaStage, bool>) (x => x.Id != (core.Id ?? "") && x.DateStartEstimate == core.DateStartEstimate && x.IdeaId == core.IdeaId && x.StageId == core.StageId)) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this date Start Estimate and idea and stage.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(IdeaStage core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<IdeaStage> ideaStages)
    {
      try
      {
        foreach (IdeaStage ideaStage in ideaStages)
          this.Add(ideaStage);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<IdeaStage> ideaStages)
    {
      try
      {
        foreach (IdeaStage ideaStage in ideaStages)
          await this.AddAsync(ideaStage);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IdeaStage core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          IdeaStage ideaStage = (IdeaStage) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            ideaStage = _dataSet.BusinessIdeaStages.SingleOrDefault<IdeaStage>((Func<IdeaStage, bool>) (x => x.Id == core.Id));
          if (ideaStage == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessIdeaStages.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////ideaStage.Update(core);
                        ///

                        _dataSet.Entry(ideaStage).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        ideaStage.Update(core);
                        _dataSet.BusinessIdeaStages.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          ideaStage = (IdeaStage) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(IdeaStage core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(IdeaStage ideaStage, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(ideaStage, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IdeaStage ideaStage, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(ideaStage, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<IdeaStage> ideaStages, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (ideaStages == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (IdeaStage ideaStage in ideaStages.ToList<IdeaStage>())
        {
          dataStoreResult = this.Delete(ideaStage, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<IdeaStage> ideaStages,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (ideaStages == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<IdeaStage> lst = ideaStages.ToList<IdeaStage>();
        foreach (IdeaStage ideaStage in lst)
        {
          IdeaStage item = ideaStage;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (IdeaStage) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(IdeaStage ideaStage, Transaction transaction)
    {
      try
      {
        if (ideaStage.Id == null)
          return DataStoreResult.Success;
        IdeaStage entity = _dataSet.BusinessIdeaStages.SingleOrDefault<IdeaStage>((Func<IdeaStage, bool>) (x => x.Id == ideaStage.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.GetBusinessIdeaStageStatuses(ideaStage);
        foreach (IdeaStageStatus ideaStageStatuse in ideaStage.IdeaStageStatuses)
        {
          int num = (int) this.Delete(ideaStageStatuse, transaction);
        }
        this.RefreshCanDelete(ideaStage, transaction);
        if (ideaStage.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessIdeaStages.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The idea stage (" + ideaStage.ToString() + ") contains ";
        if (ideaStage.ImplementationCosts.Count > 0)
          str += "implementation costs, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(IdeaStage ideaStage, Transaction transaction)
    {
      try
      {
        if (ideaStage.Id == null)
          return DataStoreResult.Success;
        IdeaStage core = _dataSet.BusinessIdeaStages.SingleOrDefault<IdeaStage>((Func<IdeaStage, bool>) (x => x.Id == ideaStage.Id));
        if (core == null)
          return DataStoreResult.Success;
        this.GetBusinessIdeaStageStatuses(ideaStage);
        foreach (IdeaStageStatus m in ideaStage.IdeaStageStatuses)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        await this.RefreshCanDeleteAsync(ideaStage, transaction);
        if (ideaStage.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessIdeaStages.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The idea stage (" + ideaStage.ToString() + ") contains ";
        if (ideaStage.ImplementationCosts.Count > 0)
          erorrMessage += "implementation costs, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessIdeaStage(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessIdeaStages.SingleOrDefault<IdeaStage>((Func<IdeaStage, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The ideaStage is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncBusinessIdeaStage(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        IdeaStage ideaStage = _dataSet.BusinessIdeaStages.SingleOrDefault<IdeaStage>((Func<IdeaStage, bool>) (x => x.Id == Id));
        if (ideaStage == null)
          throw new NotFoundException("The ideaStage is not found");
        dataStoreResult = await this.DeleteAsync(ideaStage, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    IdeaStage ideaStage, Transaction transaction)
    {
      if (ideaStage == null)
        return;
      if (ideaStage.Id == null)
      {
        ideaStage.CanDelete = true;
      }
      else
      {
        this.GetBusinessIdeaStageStatuses(ideaStage, transaction);
        this.GetBusinessImplementationCosts(ideaStage, transaction);
        ideaStage.CanDelete = ideaStage.IdeaStageStatuses.Count + ideaStage.ImplementationCosts.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(IdeaStage ideaStage, Transaction transaction)
    {
      if (ideaStage == null)
        return;
      if (ideaStage.Id == null)
      {
        ideaStage.CanDelete = true;
      }
      else
      {
        await this.GetBusinessImplementationCostsAsync(ideaStage, transaction);
        ideaStage.CanDelete = ideaStage.ImplementationCosts.Count <= 0;
      }
    }

    public IdeaStage FindBusinessIdeaStage(
    
    string Id) => Id == null ? (IdeaStage) null : _dataSet.BusinessIdeaStages.SingleOrDefault<IdeaStage>((Func<IdeaStage, bool>) (x => x.Id == Id));

    public async 
    
    Task<IdeaStage> FindBusinessIdeaStageAsync(string Id)
    {
      IdeaStage businessIdeaStageAsync;
      try
      {
        businessIdeaStageAsync = await Task.Run<IdeaStage>((Func<IdeaStage>) (() => this.FindBusinessIdeaStage(Id)));
      }
      catch
      {
        throw;
      }
      return businessIdeaStageAsync;
    }

    public List<IdeaStage> GetBusinessIdeaStageByDate(DateTime date) => _dataSet.BusinessIdeaStages.Where<IdeaStage>((Func<IdeaStage, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<IdeaStage>();

    public async Task<List<IdeaStage>> GetBusinessIdeaStageByDateAsync(DateTime date)
    {
      List<IdeaStage> stageByDateAsync;
      try
      {
        stageByDateAsync = await Task.Run<List<IdeaStage>>((Func<List<IdeaStage>>) (() => this.GetBusinessIdeaStageByDate(date)));
      }
      catch
      {
        throw;
      }
      return stageByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<IdeaStage> cores)
    {
      try
      {
        foreach (IdeaStage core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<IdeaStage> cores)
    {
      try
      {
        foreach (IdeaStage core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(IdeaStage ideaStage)
    {
      if (ideaStage == null)
        return;
      if (ideaStage.CreatedById != null && ideaStage.CreatedBy == null)
        ideaStage.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == ideaStage.CreatedById));
      if (ideaStage.UpdatedById == null || ideaStage.UpdatedBy != null)
        return;
      ideaStage.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == ideaStage.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(IdeaStage ideaStage)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(ideaStage)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeaStageStatuses(IdeaStage ideaStage) => this.GetBusinessIdeaStageStatuses(ideaStage, (Transaction) null);

    internal async Task GetBusinessIdeaStageStatusesAsync(IdeaStage ideaStage) => await this.GetBusinessIdeaStageStatusesAsync(ideaStage, (Transaction) null);

    internal void GetBusinessIdeaStageStatuses(IdeaStage ideaStage, Transaction transaction)
    {
      if (ideaStage != null)
        ideaStage.IdeaStageStatuses = _dataSet.BusinessIdeaStageStatuses.Where<IdeaStageStatus>((Func<IdeaStageStatus, bool>) (m => m.IdeaStageId == ideaStage.Id)).ToList<IdeaStageStatus>();
      if (transaction == null)
        return;
      for (int index = ideaStage.IdeaStageStatuses.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) ideaStage.IdeaStageStatuses[index]) == Action.Delete)
          ideaStage.IdeaStageStatuses.Remove(ideaStage.IdeaStageStatuses[index]);
      }
    }

    internal async Task GetBusinessIdeaStageStatusesAsync(
      IdeaStage ideaStage,
      Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeaStageStatuses(ideaStage, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessImplementationCosts(IdeaStage ideaStage) => this.GetBusinessImplementationCosts(ideaStage, (Transaction) null);

    internal async Task GetBusinessImplementationCostsAsync(IdeaStage ideaStage) => await this.GetBusinessImplementationCostsAsync(ideaStage, (Transaction) null);

    internal void GetBusinessImplementationCosts(IdeaStage ideaStage, Transaction transaction)
    {
      if (ideaStage != null)
        ideaStage.ImplementationCosts = _dataSet.BusinessImplementationCosts.Where<ImplementationCost>((Func<ImplementationCost, bool>) (m => m.IdeaStageId == ideaStage.Id)).ToList<ImplementationCost>();
      if (transaction == null)
        return;
      for (int index = ideaStage.ImplementationCosts.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) ideaStage.ImplementationCosts[index]) == Action.Delete)
          ideaStage.ImplementationCosts.Remove(ideaStage.ImplementationCosts[index]);
      }
    }

    internal async Task GetBusinessImplementationCostsAsync(
      IdeaStage ideaStage,
      Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessImplementationCosts(ideaStage, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessIdea(IdeaStage ideaStage)
    {
      if (ideaStage == null)
        return;
      foreach (Idea businessIdea in (List<Idea>) _dataSet.BusinessIdeas.ToList())
      {
        if (ideaStage.IdeaId != null && businessIdea.Id == ideaStage.IdeaId)
        {
          ideaStage.Idea = businessIdea;
          break;
        }
      }
    }

    public async Task GetBusinessIdeaAsync(IdeaStage ideaStage)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdea(ideaStage)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessIdeas(IEnumerable<IdeaStage> ideaStages)
    {
      foreach (IdeaStage ideaStage in ideaStages)
        this.GetBusinessIdea(ideaStage);
    }

    public async Task GetBusinessIdeasAsync(IEnumerable<IdeaStage> ideaStages)
    {
      foreach (IdeaStage ideaStage in ideaStages)
        await this.GetBusinessIdeaAsync(ideaStage);
    }

    public void GetSharedStage(IdeaStage ideaStage)
    {
      if (ideaStage == null)
        return;
      foreach (Stage sharedStage in (List<Stage>) _dataSet.SharedStages.ToList())
      {
        if (ideaStage.StageId != null && sharedStage.Id == ideaStage.StageId)
        {
          ideaStage.Stage = sharedStage;
          break;
        }
      }
    }

    public async Task GetSharedStageAsync(IdeaStage ideaStage)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedStage(ideaStage)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedStages(IEnumerable<IdeaStage> ideaStages)
    {
      foreach (IdeaStage ideaStage in ideaStages)
        this.GetSharedStage(ideaStage);
    }

    public async Task GetSharedStagesAsync(IEnumerable<IdeaStage> ideaStages)
    {
      foreach (IdeaStage ideaStage in ideaStages)
        await this.GetSharedStageAsync(ideaStage);
    }

    public string Validate(IdeaStageStatus core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(IdeaStageStatus core)
    {
      string messages = "";
      if (core.Date == DateTime.MinValue)
        messages += "Business.IdeaStageStatus.Date: Date missing; ";
      if (core.IdeaStage == null)
      {
        if (string.IsNullOrWhiteSpace(core.IdeaStageId))
        {
          messages += "Business.IdeaStageStatus.IdeaStageId: Idea Stage missing; ";
        }
        else
        {
          IdeaStage parent = _dataSet.BusinessIdeaStages.SingleOrDefault<IdeaStage>((Func<IdeaStage, bool>) (x => x.Id == core.IdeaStageId));
          if (parent == null)
            messages += "Business.IdeaStageStatus.IdeaStageId: Idea Stage invalid; ";
          parent = (IdeaStage) null;
        }
      }
      if (core.Status == null)
      {
        if (string.IsNullOrWhiteSpace(core.StatusId))
        {
          messages += "Business.IdeaStageStatus.StatusId: Status missing; ";
        }
        else
        {
          IdeaStatus parent = _dataSet.SharedIdeaStatuses.SingleOrDefault<IdeaStatus>((Func<IdeaStatus, bool>) (x => x.Id == core.StatusId));
          if (parent == null)
            messages += "Business.IdeaStageStatus.StatusId: Status invalid; ";
          parent = (IdeaStatus) null;
        }
      }
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(IdeaStageStatus core)
    {
      string str = "";
      if (_dataSet.BusinessIdeaStageStatuses.ToList<IdeaStageStatus>().FirstOrDefault<IdeaStageStatus>((Func<IdeaStageStatus, bool>) (x => x.Id != (core.Id ?? "") && x.Date == core.Date && x.IdeaStageId == core.IdeaStageId)) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this date and idea Stage.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(IdeaStageStatus core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<IdeaStageStatus> ideaStageStatuses)
    {
      try
      {
        foreach (IdeaStageStatus ideaStageStatuse in ideaStageStatuses)
          this.Add(ideaStageStatuse);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<IdeaStageStatus> ideaStageStatuses)
    {
      try
      {
        foreach (IdeaStageStatus ideaStageStatus in ideaStageStatuses)
          await this.AddAsync(ideaStageStatus);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IdeaStageStatus core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          IdeaStageStatus ideaStageStatus = (IdeaStageStatus) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            ideaStageStatus = _dataSet.BusinessIdeaStageStatuses.SingleOrDefault<IdeaStageStatus>((Func<IdeaStageStatus, bool>) (x => x.Id == core.Id));
          if (ideaStageStatus == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessIdeaStageStatuses.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////ideaStageStatus.Update(core);
                        ///

                        _dataSet.Entry(ideaStageStatus).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        ideaStageStatus.Update(core);
                        _dataSet.BusinessIdeaStageStatuses.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          ideaStageStatus = (IdeaStageStatus) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(IdeaStageStatus core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(IdeaStageStatus ideaStageStatus, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(ideaStageStatus, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IdeaStageStatus ideaStageStatus,
      bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(ideaStageStatus, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(
      IEnumerable<IdeaStageStatus> ideaStageStatuses,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (ideaStageStatuses == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (IdeaStageStatus ideaStageStatus in ideaStageStatuses.ToList<IdeaStageStatus>())
        {
          dataStoreResult = this.Delete(ideaStageStatus, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<IdeaStageStatus> ideaStageStatuses,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (ideaStageStatuses == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<IdeaStageStatus> lst = ideaStageStatuses.ToList<IdeaStageStatus>();
        foreach (IdeaStageStatus ideaStageStatus in lst)
        {
          IdeaStageStatus item = ideaStageStatus;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (IdeaStageStatus) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(IdeaStageStatus ideaStageStatus, Transaction transaction)
    {
      try
      {
        if (ideaStageStatus.Id == null)
          return DataStoreResult.Success;
        IdeaStageStatus entity = _dataSet.BusinessIdeaStageStatuses.SingleOrDefault<IdeaStageStatus>((Func<IdeaStageStatus, bool>) (x => x.Id == ideaStageStatus.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(ideaStageStatus, transaction);
        if (!ideaStageStatus.CanDelete)
          throw new ChildDependencyException("The status (" + ideaStageStatus.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.BusinessIdeaStageStatuses.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      IdeaStageStatus ideaStageStatus,
      Transaction transaction)
    {
      try
      {
        if (ideaStageStatus.Id == null)
          return DataStoreResult.Success;
        IdeaStageStatus core = _dataSet.BusinessIdeaStageStatuses.SingleOrDefault<IdeaStageStatus>((Func<IdeaStageStatus, bool>) (x => x.Id == ideaStageStatus.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(ideaStageStatus, transaction);
        if (ideaStageStatus.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessIdeaStageStatuses.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The status (" + ideaStageStatus.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessIdeaStageStatus(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessIdeaStageStatuses.SingleOrDefault<IdeaStageStatus>((Func<IdeaStageStatus, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The ideaStageStatus is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncBusinessIdeaStageStatus(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        IdeaStageStatus ideaStageStatus = _dataSet.BusinessIdeaStageStatuses.SingleOrDefault<IdeaStageStatus>((Func<IdeaStageStatus, bool>) (x => x.Id == Id));
        if (ideaStageStatus == null)
          throw new NotFoundException("The ideaStageStatus is not found");
        dataStoreResult = await this.DeleteAsync(ideaStageStatus, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    IdeaStageStatus ideaStageStatus, Transaction transaction)
    {
      if (ideaStageStatus == null)
        return;
      ideaStageStatus.CanDelete = true;
    }

    internal async Task RefreshCanDeleteAsync(
      IdeaStageStatus ideaStageStatus,
      Transaction transaction)
    {
      if (ideaStageStatus == null)
        return;
      ideaStageStatus.CanDelete = true;
    }

    public IdeaStageStatus FindBusinessIdeaStageStatus(
    
    string Id) => Id == null ? (IdeaStageStatus) null : _dataSet.BusinessIdeaStageStatuses.SingleOrDefault<IdeaStageStatus>((Func<IdeaStageStatus, bool>) (x => x.Id == Id));

    public async 
    
    Task<IdeaStageStatus> FindBusinessIdeaStageStatusAsync(string Id)
    {
      IdeaStageStatus stageStatusAsync;
      try
      {
        stageStatusAsync = await Task.Run<IdeaStageStatus>((Func<IdeaStageStatus>) (() => this.FindBusinessIdeaStageStatus(Id)));
      }
      catch
      {
        throw;
      }
      return stageStatusAsync;
    }

    public List<IdeaStageStatus> GetBusinessIdeaStageStatusByDate(DateTime date) => _dataSet.BusinessIdeaStageStatuses.Where<IdeaStageStatus>((Func<IdeaStageStatus, bool>) (m => m.Date == date.Date)).ToList<IdeaStageStatus>();

    public async Task<List<IdeaStageStatus>> GetBusinessIdeaStageStatusByDateAsync(DateTime date)
    {
      List<IdeaStageStatus> statusByDateAsync;
      try
      {
        statusByDateAsync = await Task.Run<List<IdeaStageStatus>>((Func<List<IdeaStageStatus>>) (() => this.GetBusinessIdeaStageStatusByDate(date)));
      }
      catch
      {
        throw;
      }
      return statusByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<IdeaStageStatus> cores)
    {
      try
      {
        foreach (IdeaStageStatus core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<IdeaStageStatus> cores)
    {
      try
      {
        foreach (IdeaStageStatus core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(IdeaStageStatus ideaStageStatus)
    {
      if (ideaStageStatus == null)
        return;
      if (ideaStageStatus.CreatedById != null && ideaStageStatus.CreatedBy == null)
        ideaStageStatus.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == ideaStageStatus.CreatedById));
      if (ideaStageStatus.UpdatedById == null || ideaStageStatus.UpdatedBy != null)
        return;
      ideaStageStatus.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == ideaStageStatus.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(IdeaStageStatus ideaStageStatus)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(ideaStageStatus)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessIdeaStage(IdeaStageStatus ideaStageStatus)
    {
      if (ideaStageStatus == null)
        return;
      foreach (IdeaStage businessIdeaStage in (List<IdeaStage>) _dataSet.BusinessIdeaStages.ToList())
      {
        if (ideaStageStatus.IdeaStageId != null && businessIdeaStage.Id == ideaStageStatus.IdeaStageId)
        {
          ideaStageStatus.IdeaStage = businessIdeaStage;
          break;
        }
      }
    }

    public async Task GetBusinessIdeaStageAsync(IdeaStageStatus ideaStageStatus)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeaStage(ideaStageStatus)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessIdeaStages(IEnumerable<IdeaStageStatus> ideaStageStatuses)
    {
      foreach (IdeaStageStatus ideaStageStatuse in ideaStageStatuses)
        this.GetBusinessIdeaStage(ideaStageStatuse);
    }

    public async Task GetBusinessIdeaStagesAsync(IEnumerable<IdeaStageStatus> ideaStageStatuses)
    {
      foreach (IdeaStageStatus ideaStageStatus in ideaStageStatuses)
        await this.GetBusinessIdeaStageAsync(ideaStageStatus);
    }

    public void GetSharedStatus(IdeaStageStatus ideaStageStatus)
    {
      if (ideaStageStatus == null)
        return;
      foreach (IdeaStatus sharedIdeaStatuse in (List<IdeaStatus>) _dataSet.SharedIdeaStatuses.ToList())
      {
        if (ideaStageStatus.StatusId != null && sharedIdeaStatuse.Id == ideaStageStatus.StatusId)
        {
          ideaStageStatus.Status = sharedIdeaStatuse;
          break;
        }
      }
    }

    public async Task GetSharedStatusAsync(IdeaStageStatus ideaStageStatus)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedStatus(ideaStageStatus)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedStatuses(IEnumerable<IdeaStageStatus> ideaStageStatuses)
    {
      foreach (IdeaStageStatus ideaStageStatuse in ideaStageStatuses)
        this.GetSharedStatus(ideaStageStatuse);
    }

    public async Task GetSharedStatusesAsync(IEnumerable<IdeaStageStatus> ideaStageStatuses)
    {
      foreach (IdeaStageStatus ideaStageStatus in ideaStageStatuses)
        await this.GetSharedStatusAsync(ideaStageStatus);
    }

    public string Validate(ImplementationCost core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(ImplementationCost core)
    {
      string messages = "";
      if (core.Client == null)
      {
        if (string.IsNullOrWhiteSpace(core.ClientId))
        {
          messages += "Business.ImplementationCost.ClientId: Client missing; ";
        }
        else
        {
          Client parent = _dataSet.BusinessClients.SingleOrDefault<Client>((Func<Client, bool>) (x => x.Id == core.ClientId));
          if (parent == null)
            messages += "Business.ImplementationCost.ClientId: Client invalid; ";
          parent = (Client) null;
        }
      }
      if (core.IdeaStage == null)
      {
        if (string.IsNullOrWhiteSpace(core.IdeaStageId))
        {
          messages += "Business.ImplementationCost.IdeaStageId: Idea Stage missing; ";
        }
        else
        {
          IdeaStage parent = _dataSet.BusinessIdeaStages.SingleOrDefault<IdeaStage>((Func<IdeaStage, bool>) (x => x.Id == core.IdeaStageId));
          if (parent == null)
            messages += "Business.ImplementationCost.IdeaStageId: Idea Stage invalid; ";
          parent = (IdeaStage) null;
        }
      }
      if (core.Role == null)
      {
        if (string.IsNullOrWhiteSpace(core.RoleId))
        {
          messages += "Business.ImplementationCost.RoleId: Role missing; ";
        }
        else
        {
          SilkFlo.Data.Core.Domain.Business.BusinessRole parent = _dataSet.BusinessRoles.SingleOrDefault<SilkFlo.Data.Core.Domain.Business.BusinessRole>((Func<SilkFlo.Data.Core.Domain.Business.BusinessRole, bool>) (x => x.Id == core.RoleId));
          if (parent == null)
            messages += "Business.ImplementationCost.RoleId: Role invalid; ";
          parent = (SilkFlo.Data.Core.Domain.Business.BusinessRole) null;
        }
      }
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public void Add(
      IEnumerable<ImplementationCost> implementationCosts)
    {
      try
      {
        foreach (ImplementationCost implementationCost in implementationCosts)
          this.Add(implementationCost);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(
      IEnumerable<ImplementationCost> implementationCosts)
    {
      try
      {
        foreach (ImplementationCost implementationCost in implementationCosts)
          await this.AddAsync(implementationCost);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(ImplementationCost core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          ImplementationCost implementationCost = (ImplementationCost) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            implementationCost = _dataSet.BusinessImplementationCosts.SingleOrDefault<ImplementationCost>((Func<ImplementationCost, bool>) (x => x.Id == core.Id));
          if (implementationCost == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessImplementationCosts.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////implementationCost.Update(core);
                        ///

                        _dataSet.Entry(implementationCost).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        implementationCost.Update(core);
                        _dataSet.BusinessImplementationCosts.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          implementationCost = (ImplementationCost) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(ImplementationCost core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(ImplementationCost implementationCost, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(implementationCost, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      ImplementationCost implementationCost,
      bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(implementationCost, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(
      IEnumerable<ImplementationCost> implementationCosts,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (implementationCosts == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (ImplementationCost implementationCost in implementationCosts.ToList<ImplementationCost>())
        {
          dataStoreResult = this.Delete(implementationCost, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<ImplementationCost> implementationCosts,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (implementationCosts == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<ImplementationCost> lst = implementationCosts.ToList<ImplementationCost>();
        foreach (ImplementationCost implementationCost in lst)
        {
          ImplementationCost item = implementationCost;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (ImplementationCost) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(ImplementationCost implementationCost, Transaction transaction)
    {
      try
      {
        if (implementationCost.Id == null)
          return DataStoreResult.Success;
        ImplementationCost entity = _dataSet.BusinessImplementationCosts.SingleOrDefault<ImplementationCost>((Func<ImplementationCost, bool>) (x => x.Id == implementationCost.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(implementationCost, transaction);
        if (!implementationCost.CanDelete)
          throw new ChildDependencyException("The implementation cost (" + implementationCost.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.BusinessImplementationCosts.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      ImplementationCost implementationCost,
      Transaction transaction)
    {
      try
      {
        if (implementationCost.Id == null)
          return DataStoreResult.Success;
        ImplementationCost core = _dataSet.BusinessImplementationCosts.SingleOrDefault<ImplementationCost>((Func<ImplementationCost, bool>) (x => x.Id == implementationCost.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(implementationCost, transaction);
        if (implementationCost.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessImplementationCosts.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The implementation cost (" + implementationCost.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessImplementationCost(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessImplementationCosts.SingleOrDefault<ImplementationCost>((Func<ImplementationCost, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The implementationCost is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncBusinessImplementationCost(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        ImplementationCost implementationCost = _dataSet.BusinessImplementationCosts.SingleOrDefault<ImplementationCost>((Func<ImplementationCost, bool>) (x => x.Id == Id));
        if (implementationCost == null)
          throw new NotFoundException("The implementationCost is not found");
        dataStoreResult = await this.DeleteAsync(implementationCost, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    ImplementationCost implementationCost, Transaction transaction)
    {
      if (implementationCost == null)
        return;
      implementationCost.CanDelete = true;
    }

    internal async Task RefreshCanDeleteAsync(
      ImplementationCost implementationCost,
      Transaction transaction)
    {
      if (implementationCost == null)
        return;
      implementationCost.CanDelete = true;
    }

    public ImplementationCost FindBusinessImplementationCost(
    
    string Id) => Id == null ? (ImplementationCost) null : _dataSet.BusinessImplementationCosts.SingleOrDefault<ImplementationCost>((Func<ImplementationCost, bool>) (x => x.Id == Id));

    public async 
    
    Task<ImplementationCost> FindBusinessImplementationCostAsync(string Id)
    {
      ImplementationCost implementationCostAsync;
      try
      {
        implementationCostAsync = await Task.Run<ImplementationCost>((Func<ImplementationCost>) (() => this.FindBusinessImplementationCost(Id)));
      }
      catch
      {
        throw;
      }
      return implementationCostAsync;
    }

    public List<ImplementationCost> GetBusinessImplementationCostByDate(DateTime date) => _dataSet.BusinessImplementationCosts.Where<ImplementationCost>((Func<ImplementationCost, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<ImplementationCost>();

    public async Task<List<ImplementationCost>> GetBusinessImplementationCostByDateAsync(
      DateTime date)
    {
      List<ImplementationCost> implementationCostByDateAsync;
      try
      {
        implementationCostByDateAsync = await Task.Run<List<ImplementationCost>>((Func<List<ImplementationCost>>) (() => this.GetBusinessImplementationCostByDate(date)));
      }
      catch
      {
        throw;
      }
      return implementationCostByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<ImplementationCost> cores)
    {
      try
      {
        foreach (ImplementationCost core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<ImplementationCost> cores)
    {
      try
      {
        foreach (ImplementationCost core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(ImplementationCost implementationCost)
    {
      if (implementationCost == null)
        return;
      if (implementationCost.CreatedById != null && implementationCost.CreatedBy == null)
        implementationCost.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == implementationCost.CreatedById));
      if (implementationCost.UpdatedById == null || implementationCost.UpdatedBy != null)
        return;
      implementationCost.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == implementationCost.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(ImplementationCost implementationCost)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(implementationCost)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClient(ImplementationCost implementationCost)
    {
      if (implementationCost == null)
        return;
      foreach (Client businessClient in (List<Client>) _dataSet.BusinessClients.ToList())
      {
        if (implementationCost.ClientId != null && businessClient.Id == implementationCost.ClientId)
        {
          implementationCost.Client = businessClient;
          break;
        }
      }
    }

    public async Task GetBusinessClientAsync(ImplementationCost implementationCost)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClient(implementationCost)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClients(
      IEnumerable<ImplementationCost> implementationCosts)
    {
      foreach (ImplementationCost implementationCost in implementationCosts)
        this.GetBusinessClient(implementationCost);
    }

    public async Task GetBusinessClientsAsync(
      IEnumerable<ImplementationCost> implementationCosts)
    {
      foreach (ImplementationCost implementationCost in implementationCosts)
        await this.GetBusinessClientAsync(implementationCost);
    }

    public void GetBusinessIdeaStage(ImplementationCost implementationCost)
    {
      if (implementationCost == null)
        return;
      foreach (IdeaStage businessIdeaStage in (List<IdeaStage>) _dataSet.BusinessIdeaStages.ToList())
      {
        if (implementationCost.IdeaStageId != null && businessIdeaStage.Id == implementationCost.IdeaStageId)
        {
          implementationCost.IdeaStage = businessIdeaStage;
          break;
        }
      }
    }

    public async Task GetBusinessIdeaStageAsync(ImplementationCost implementationCost)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeaStage(implementationCost)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessIdeaStages(
      IEnumerable<ImplementationCost> implementationCosts)
    {
      foreach (ImplementationCost implementationCost in implementationCosts)
        this.GetBusinessIdeaStage(implementationCost);
    }

    public async Task GetBusinessIdeaStagesAsync(
      IEnumerable<ImplementationCost> implementationCosts)
    {
      foreach (ImplementationCost implementationCost in implementationCosts)
        await this.GetBusinessIdeaStageAsync(implementationCost);
    }

    public void GetBusinessRole(ImplementationCost implementationCost)
    {
      if (implementationCost == null)
        return;
      foreach (SilkFlo.Data.Core.Domain.Business.BusinessRole businessRole in (List<SilkFlo.Data.Core.Domain.Business.BusinessRole>) _dataSet.BusinessRoles.ToList())
      {
        if (implementationCost.RoleId != null && businessRole.Id == implementationCost.RoleId)
        {
          implementationCost.Role = businessRole;
          break;
        }
      }
    }

    public async Task GetBusinessRoleAsync(ImplementationCost implementationCost)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessRole(implementationCost)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessRoles(
      IEnumerable<ImplementationCost> implementationCosts)
    {
      foreach (ImplementationCost implementationCost in implementationCosts)
        this.GetBusinessRole(implementationCost);
    }

    public async Task GetBusinessRolesAsync(
      IEnumerable<ImplementationCost> implementationCosts)
    {
      foreach (ImplementationCost implementationCost in implementationCosts)
        await this.GetBusinessRoleAsync(implementationCost);
    }

    public string Validate(Location core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(Location core)
    {
      string messages = "";
      if (core.Client == null)
      {
        if (string.IsNullOrWhiteSpace(core.ClientId))
        {
          messages += "Business.Location.ClientId: Client missing; ";
        }
        else
        {
          Client parent = _dataSet.BusinessClients.SingleOrDefault<Client>((Func<Client, bool>) (x => x.Id == core.ClientId));
          if (parent == null)
            messages += "Business.Location.ClientId: Client invalid; ";
          parent = (Client) null;
        }
      }
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Business.Location.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(Location core)
    {
      string str = "";
      if (_dataSet.BusinessLocations.ToList<Location>().FirstOrDefault<Location>((Func<Location, bool>) (x => x.Id != (core.Id ?? "") && x.ClientId == core.ClientId && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this client and name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(Location core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<Location> locations)
    {
      try
      {
        foreach (Location location in locations)
          this.Add(location);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Location> locations)
    {
      try
      {
        foreach (Location location in locations)
          await this.AddAsync(location);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Location core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          Location location = (Location) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            location = _dataSet.BusinessLocations.SingleOrDefault<Location>((Func<Location, bool>) (x => x.Id == core.Id));
          if (location == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessLocations.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////location.Update(core);
                        ///

                        _dataSet.Entry(location).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        location.Update(core);
                        _dataSet.BusinessLocations.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          location = (Location) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Location core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Location location, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(location, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Location location, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(location, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Location> locations, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (locations == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Location location in locations.ToList<Location>())
        {
          dataStoreResult = this.Delete(location, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<Location> locations,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (locations == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Location> lst = locations.ToList<Location>();
        foreach (Location location in lst)
        {
          Location item = location;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Location) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Location location, Transaction transaction)
    {
      try
      {
        if (location.Id == null)
          return DataStoreResult.Success;
        Location entity = _dataSet.BusinessLocations.SingleOrDefault<Location>((Func<Location, bool>) (x => x.Id == location.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(location, transaction);
        if (location.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessLocations.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The location (" + location.ToString() + ") contains ";
        if (location.Users.Count > 0)
          str += "users, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Location location, Transaction transaction)
    {
      try
      {
        if (location.Id == null)
          return DataStoreResult.Success;
        Location core = _dataSet.BusinessLocations.SingleOrDefault<Location>((Func<Location, bool>) (x => x.Id == location.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(location, transaction);
        if (location.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessLocations.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The location (" + location.ToString() + ") contains ";
        if (location.Users.Count > 0)
          erorrMessage += "users, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessLocation(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessLocations.SingleOrDefault<Location>((Func<Location, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The location is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncBusinessLocation(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Location location = _dataSet.BusinessLocations.SingleOrDefault<Location>((Func<Location, bool>) (x => x.Id == Id));
        if (location == null)
          throw new NotFoundException("The location is not found");
        dataStoreResult = await this.DeleteAsync(location, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    Location location, Transaction transaction)
    {
      if (location == null)
        return;
      if (location.Id == null)
      {
        location.CanDelete = true;
      }
      else
      {
        this.GetUsers(location, transaction);
        location.CanDelete = location.Users.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(Location location, Transaction transaction)
    {
      if (location == null)
        return;
      if (location.Id == null)
      {
        location.CanDelete = true;
      }
      else
      {
        await this.GetUsersAsync(location, transaction);
        location.CanDelete = location.Users.Count <= 0;
      }
    }

    public Location FindBusinessLocation(
    
    string Id) => Id == null ? (Location) null : _dataSet.BusinessLocations.SingleOrDefault<Location>((Func<Location, bool>) (x => x.Id == Id));

    public async 
    
    Task<Location> FindBusinessLocationAsync(string Id)
    {
      Location businessLocationAsync;
      try
      {
        businessLocationAsync = await Task.Run<Location>((Func<Location>) (() => this.FindBusinessLocation(Id)));
      }
      catch
      {
        throw;
      }
      return businessLocationAsync;
    }

    public List<Location> GetBusinessLocationByDate(DateTime date) => _dataSet.BusinessLocations.Where<Location>((Func<Location, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Location>();

    public async Task<List<Location>> GetBusinessLocationByDateAsync(DateTime date)
    {
      List<Location> locationByDateAsync;
      try
      {
        locationByDateAsync = await Task.Run<List<Location>>((Func<List<Location>>) (() => this.GetBusinessLocationByDate(date)));
      }
      catch
      {
        throw;
      }
      return locationByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Location> cores)
    {
      try
      {
        foreach (Location core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Location> cores)
    {
      try
      {
        foreach (Location core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Location location)
    {
      if (location == null)
        return;
      if (location.CreatedById != null && location.CreatedBy == null)
        location.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == location.CreatedById));
      if (location.UpdatedById == null || location.UpdatedBy != null)
        return;
      location.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == location.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Location location)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(location)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetUsers(Location location) => this.GetUsers(location, (Transaction) null);

    internal async Task GetUsersAsync(Location location) => await this.GetUsersAsync(location, (Transaction) null);

    internal void GetUsers(Location location, Transaction transaction)
    {
      if (location != null)
        location.Users = _dataSet.Users.Where<User>((Func<User, bool>) (m => m.LocationId == location.Id)).ToList<User>();
      if (transaction == null)
        return;
      for (int index = location.Users.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) location.Users[index]) == Action.Delete)
          location.Users.Remove(location.Users[index]);
      }
    }

    internal async Task GetUsersAsync(Location location, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetUsers(location, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClient(Location location)
    {
      if (location == null)
        return;
      foreach (Client businessClient in (List<Client>) _dataSet.BusinessClients.ToList())
      {
        if (location.ClientId != null && businessClient.Id == location.ClientId)
        {
          location.Client = businessClient;
          break;
        }
      }
    }

    public async Task GetBusinessClientAsync(Location location)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClient(location)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClients(IEnumerable<Location> locations)
    {
      foreach (Location location in locations)
        this.GetBusinessClient(location);
    }

    public async Task GetBusinessClientsAsync(IEnumerable<Location> locations)
    {
      foreach (Location location in locations)
        await this.GetBusinessClientAsync(location);
    }

    public string Validate(OtherRunningCost core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(OtherRunningCost core)
    {
      string messages = "";
      if (core.Client == null)
      {
        if (string.IsNullOrWhiteSpace(core.ClientId))
        {
          messages += "Business.OtherRunningCost.ClientId: Client missing; ";
        }
        else
        {
          Client parent = _dataSet.BusinessClients.SingleOrDefault<Client>((Func<Client, bool>) (x => x.Id == core.ClientId));
          if (parent == null)
            messages += "Business.OtherRunningCost.ClientId: Client invalid; ";
          parent = (Client) null;
        }
      }
      if (core.CostType == null)
      {
        if (string.IsNullOrWhiteSpace(core.CostTypeId))
        {
          messages += "Business.OtherRunningCost.CostTypeId: Cost Type missing; ";
        }
        else
        {
          CostType parent = _dataSet.SharedCostTypes.SingleOrDefault<CostType>((Func<CostType, bool>) (x => x.Id == core.CostTypeId));
          if (parent == null)
            messages += "Business.OtherRunningCost.CostTypeId: Cost Type invalid; ";
          parent = (CostType) null;
        }
      }
      if (string.IsNullOrWhiteSpace(core.Description))
        messages += "Business.OtherRunningCost.Description: Description missing; ";
      if (core.Frequency == null)
      {
        if (string.IsNullOrWhiteSpace(core.FrequencyId))
        {
          messages += "Business.OtherRunningCost.FrequencyId: Frequency missing; ";
        }
        else
        {
          Period parent = _dataSet.SharedPeriods.SingleOrDefault<Period>((Func<Period, bool>) (x => x.Id == core.FrequencyId));
          if (parent == null)
            messages += "Business.OtherRunningCost.FrequencyId: Frequency invalid; ";
          parent = (Period) null;
        }
      }
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Business.OtherRunningCost.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(OtherRunningCost core)
    {
      string str = "";
      if (_dataSet.BusinessOtherRunningCosts.ToList<OtherRunningCost>().FirstOrDefault<OtherRunningCost>((Func<OtherRunningCost, bool>) (x => x.Id != (core.Id ?? "") && x.ClientId == core.ClientId && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this client and name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(OtherRunningCost core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<OtherRunningCost> otherRunningCosts)
    {
      try
      {
        foreach (OtherRunningCost otherRunningCost in otherRunningCosts)
          this.Add(otherRunningCost);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<OtherRunningCost> otherRunningCosts)
    {
      try
      {
        foreach (OtherRunningCost otherRunningCost in otherRunningCosts)
          await this.AddAsync(otherRunningCost);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(OtherRunningCost core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          OtherRunningCost otherRunningCost = (OtherRunningCost) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            otherRunningCost = _dataSet.BusinessOtherRunningCosts.SingleOrDefault<OtherRunningCost>((Func<OtherRunningCost, bool>) (x => x.Id == core.Id));
          if (otherRunningCost == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessOtherRunningCosts.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////otherRunningCost.Update(core);
                        ///

                        _dataSet.Entry(otherRunningCost).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        otherRunningCost.Update(core);
                        _dataSet.BusinessOtherRunningCosts.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          otherRunningCost = (OtherRunningCost) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(OtherRunningCost core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(OtherRunningCost otherRunningCost, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(otherRunningCost, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      OtherRunningCost otherRunningCost,
      bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(otherRunningCost, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(
      IEnumerable<OtherRunningCost> otherRunningCosts,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (otherRunningCosts == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (OtherRunningCost otherRunningCost in otherRunningCosts.ToList<OtherRunningCost>())
        {
          dataStoreResult = this.Delete(otherRunningCost, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<OtherRunningCost> otherRunningCosts,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (otherRunningCosts == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<OtherRunningCost> lst = otherRunningCosts.ToList<OtherRunningCost>();
        foreach (OtherRunningCost otherRunningCost in lst)
        {
          OtherRunningCost item = otherRunningCost;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (OtherRunningCost) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(OtherRunningCost otherRunningCost, Transaction transaction)
    {
      try
      {
        if (otherRunningCost.Id == null)
          return DataStoreResult.Success;
        OtherRunningCost entity = _dataSet.BusinessOtherRunningCosts.SingleOrDefault<OtherRunningCost>((Func<OtherRunningCost, bool>) (x => x.Id == otherRunningCost.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(otherRunningCost, transaction);
        if (otherRunningCost.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessOtherRunningCosts.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The other running cost (" + otherRunningCost.ToString() + ") contains ";
        if (otherRunningCost.IdeaOtherRunningCosts.Count > 0)
          str += "other running costs, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      OtherRunningCost otherRunningCost,
      Transaction transaction)
    {
      try
      {
        if (otherRunningCost.Id == null)
          return DataStoreResult.Success;
        OtherRunningCost core = _dataSet.BusinessOtherRunningCosts.SingleOrDefault<OtherRunningCost>((Func<OtherRunningCost, bool>) (x => x.Id == otherRunningCost.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(otherRunningCost, transaction);
        if (otherRunningCost.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessOtherRunningCosts.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The other running cost (" + otherRunningCost.ToString() + ") contains ";
        if (otherRunningCost.IdeaOtherRunningCosts.Count > 0)
          erorrMessage += "other running costs, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessOtherRunningCost(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessOtherRunningCosts.SingleOrDefault<OtherRunningCost>((Func<OtherRunningCost, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The otherRunningCost is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncBusinessOtherRunningCost(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        OtherRunningCost otherRunningCost = _dataSet.BusinessOtherRunningCosts.SingleOrDefault<OtherRunningCost>((Func<OtherRunningCost, bool>) (x => x.Id == Id));
        if (otherRunningCost == null)
          throw new NotFoundException("The otherRunningCost is not found");
        dataStoreResult = await this.DeleteAsync(otherRunningCost, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    OtherRunningCost otherRunningCost, Transaction transaction)
    {
      if (otherRunningCost == null)
        return;
      if (otherRunningCost.Id == null)
      {
        otherRunningCost.CanDelete = true;
      }
      else
      {
        this.GetBusinessIdeaOtherRunningCosts(otherRunningCost, transaction);
        otherRunningCost.CanDelete = otherRunningCost.IdeaOtherRunningCosts.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(
      OtherRunningCost otherRunningCost,
      Transaction transaction)
    {
      if (otherRunningCost == null)
        return;
      if (otherRunningCost.Id == null)
      {
        otherRunningCost.CanDelete = true;
      }
      else
      {
        await this.GetBusinessIdeaOtherRunningCostsAsync(otherRunningCost, transaction);
        otherRunningCost.CanDelete = otherRunningCost.IdeaOtherRunningCosts.Count <= 0;
      }
    }

    public OtherRunningCost FindBusinessOtherRunningCost(
    
    string Id) => Id == null ? (OtherRunningCost) null : _dataSet.BusinessOtherRunningCosts.SingleOrDefault<OtherRunningCost>((Func<OtherRunningCost, bool>) (x => x.Id == Id));

    public async 
    
    Task<OtherRunningCost> FindBusinessOtherRunningCostAsync(string Id)
    {
      OtherRunningCost runningCostAsync;
      try
      {
        runningCostAsync = await Task.Run<OtherRunningCost>((Func<OtherRunningCost>) (() => this.FindBusinessOtherRunningCost(Id)));
      }
      catch
      {
        throw;
      }
      return runningCostAsync;
    }

    public List<OtherRunningCost> GetBusinessOtherRunningCostByDate(DateTime date) => _dataSet.BusinessOtherRunningCosts.Where<OtherRunningCost>((Func<OtherRunningCost, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<OtherRunningCost>();

    public async Task<List<OtherRunningCost>> GetBusinessOtherRunningCostByDateAsync(DateTime date)
    {
      List<OtherRunningCost> runningCostByDateAsync;
      try
      {
        runningCostByDateAsync = await Task.Run<List<OtherRunningCost>>((Func<List<OtherRunningCost>>) (() => this.GetBusinessOtherRunningCostByDate(date)));
      }
      catch
      {
        throw;
      }
      return runningCostByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<OtherRunningCost> cores)
    {
      try
      {
        foreach (OtherRunningCost core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<OtherRunningCost> cores)
    {
      try
      {
        foreach (OtherRunningCost core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(OtherRunningCost otherRunningCost)
    {
      if (otherRunningCost == null)
        return;
      if (otherRunningCost.CreatedById != null && otherRunningCost.CreatedBy == null)
        otherRunningCost.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == otherRunningCost.CreatedById));
      if (otherRunningCost.UpdatedById == null || otherRunningCost.UpdatedBy != null)
        return;
      otherRunningCost.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == otherRunningCost.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(OtherRunningCost otherRunningCost)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(otherRunningCost)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeaOtherRunningCosts(OtherRunningCost otherRunningCost) => this.GetBusinessIdeaOtherRunningCosts(otherRunningCost, (Transaction) null);

    internal async Task GetBusinessIdeaOtherRunningCostsAsync(OtherRunningCost otherRunningCost) => await this.GetBusinessIdeaOtherRunningCostsAsync(otherRunningCost, (Transaction) null);

    internal void GetBusinessIdeaOtherRunningCosts(
      OtherRunningCost otherRunningCost,
      Transaction transaction)
    {
      if (otherRunningCost != null)
        otherRunningCost.IdeaOtherRunningCosts = _dataSet.BusinessIdeaOtherRunningCosts.Where<IdeaOtherRunningCost>((Func<IdeaOtherRunningCost, bool>) (m => m.OtherRunningCostId == otherRunningCost.Id)).ToList<IdeaOtherRunningCost>();
      if (transaction == null)
        return;
      for (int index = otherRunningCost.IdeaOtherRunningCosts.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) otherRunningCost.IdeaOtherRunningCosts[index]) == Action.Delete)
          otherRunningCost.IdeaOtherRunningCosts.Remove(otherRunningCost.IdeaOtherRunningCosts[index]);
      }
    }

    internal async Task GetBusinessIdeaOtherRunningCostsAsync(
      OtherRunningCost otherRunningCost,
      Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeaOtherRunningCosts(otherRunningCost, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClient(OtherRunningCost otherRunningCost)
    {
      if (otherRunningCost == null)
        return;
      foreach (Client businessClient in (List<Client>) _dataSet.BusinessClients.ToList())
      {
        if (otherRunningCost.ClientId != null && businessClient.Id == otherRunningCost.ClientId)
        {
          otherRunningCost.Client = businessClient;
          break;
        }
      }
    }

    public async Task GetBusinessClientAsync(OtherRunningCost otherRunningCost)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClient(otherRunningCost)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClients(IEnumerable<OtherRunningCost> otherRunningCosts)
    {
      foreach (OtherRunningCost otherRunningCost in otherRunningCosts)
        this.GetBusinessClient(otherRunningCost);
    }

    public async Task GetBusinessClientsAsync(IEnumerable<OtherRunningCost> otherRunningCosts)
    {
      foreach (OtherRunningCost otherRunningCost in otherRunningCosts)
        await this.GetBusinessClientAsync(otherRunningCost);
    }

    public void GetSharedCostType(OtherRunningCost otherRunningCost)
    {
      if (otherRunningCost == null)
        return;
      foreach (CostType sharedCostType in (List<CostType>) _dataSet.SharedCostTypes.ToList())
      {
        if (otherRunningCost.CostTypeId != null && sharedCostType.Id == otherRunningCost.CostTypeId)
        {
          otherRunningCost.CostType = sharedCostType;
          break;
        }
      }
    }

    public async Task GetSharedCostTypeAsync(OtherRunningCost otherRunningCost)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedCostType(otherRunningCost)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedCostTypes(IEnumerable<OtherRunningCost> otherRunningCosts)
    {
      foreach (OtherRunningCost otherRunningCost in otherRunningCosts)
        this.GetSharedCostType(otherRunningCost);
    }

    public async Task GetSharedCostTypesAsync(IEnumerable<OtherRunningCost> otherRunningCosts)
    {
      foreach (OtherRunningCost otherRunningCost in otherRunningCosts)
        await this.GetSharedCostTypeAsync(otherRunningCost);
    }

    public void GetSharedFrequency(OtherRunningCost otherRunningCost)
    {
      if (otherRunningCost == null)
        return;
      foreach (Period sharedPeriod in (List<Period>) _dataSet.SharedPeriods.ToList())
      {
        if (otherRunningCost.FrequencyId != null && sharedPeriod.Id == otherRunningCost.FrequencyId)
        {
          otherRunningCost.Frequency = sharedPeriod;
          break;
        }
      }
    }

    public async Task GetSharedFrequencyAsync(OtherRunningCost otherRunningCost)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedFrequency(otherRunningCost)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedFrequencies(IEnumerable<OtherRunningCost> otherRunningCosts)
    {
      foreach (OtherRunningCost otherRunningCost in otherRunningCosts)
        this.GetSharedFrequency(otherRunningCost);
    }

    public async Task GetSharedFrequenciesAsync(IEnumerable<OtherRunningCost> otherRunningCosts)
    {
      foreach (OtherRunningCost otherRunningCost in otherRunningCosts)
        await this.GetSharedFrequencyAsync(otherRunningCost);
    }

    public string Validate(Process core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(Process core)
    {
      string messages = "";
      if (core.Client == null)
      {
        if (string.IsNullOrWhiteSpace(core.ClientId))
        {
          messages += "Business.Process.ClientId: Client missing; ";
        }
        else
        {
          Client parent = _dataSet.BusinessClients.SingleOrDefault<Client>((Func<Client, bool>) (x => x.Id == core.ClientId));
          if (parent == null)
            messages += "Business.Process.ClientId: Client invalid; ";
          parent = (Client) null;
        }
      }
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Business.Process.Name: Name missing; ";
      if (core.Team == null)
      {
        if (string.IsNullOrWhiteSpace(core.TeamId))
        {
          messages += "Business.Process.TeamId: Area missing; ";
        }
        else
        {
          Team parent = _dataSet.BusinessTeams.SingleOrDefault<Team>((Func<Team, bool>) (x => x.Id == core.TeamId));
          if (parent == null)
            messages += "Business.Process.TeamId: Area invalid; ";
          parent = (Team) null;
        }
      }
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(Process core)
    {
      string str = "";
      if (_dataSet.BusinessProcesses.ToList<Process>().FirstOrDefault<Process>((Func<Process, bool>) (x => x.Id != (core.Id ?? "") && x.ClientId == core.ClientId && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this client and name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(Process core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<Process> processes)
    {
      try
      {
        foreach (Process process in processes)
          this.Add(process);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Process> processes)
    {
      try
      {
        foreach (Process process in processes)
          await this.AddAsync(process);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Process core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          Process process = (Process) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            process = _dataSet.BusinessProcesses.SingleOrDefault<Process>((Func<Process, bool>) (x => x.Id == core.Id));
          if (process == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessProcesses.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////process.Update(core);
                        ///

                        _dataSet.Entry(process).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        process.Update(core);
                        _dataSet.BusinessProcesses.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          process = (Process) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Process core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Process process, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(process, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Process process, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(process, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Process> processes, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (processes == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Process process in processes.ToList<Process>())
        {
          dataStoreResult = this.Delete(process, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<Process> processes,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (processes == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Process> lst = processes.ToList<Process>();
        foreach (Process process in lst)
        {
          Process item = process;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Process) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Process process, Transaction transaction)
    {
      try
      {
        if (process.Id == null)
          return DataStoreResult.Success;
        Process entity = _dataSet.BusinessProcesses.SingleOrDefault<Process>((Func<Process, bool>) (x => x.Id == process.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(process, transaction);
        if (process.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessProcesses.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The business sub-area (" + process.ToString() + ") contains ";
        if (process.Ideas.Count > 0)
          str += "ideas, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Process process, Transaction transaction)
    {
      try
      {
        if (process.Id == null)
          return DataStoreResult.Success;
        Process core = _dataSet.BusinessProcesses.SingleOrDefault<Process>((Func<Process, bool>) (x => x.Id == process.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(process, transaction);
        if (process.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessProcesses.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The business sub-area (" + process.ToString() + ") contains ";
        if (process.Ideas.Count > 0)
          erorrMessage += "ideas, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessProcess(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessProcesses.SingleOrDefault<Process>((Func<Process, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The process is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncBusinessProcess(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Process process = _dataSet.BusinessProcesses.SingleOrDefault<Process>((Func<Process, bool>) (x => x.Id == Id));
        if (process == null)
          throw new NotFoundException("The process is not found");
        dataStoreResult = await this.DeleteAsync(process, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    Process process, Transaction transaction)
    {
      if (process == null)
        return;
      if (process.Id == null)
      {
        process.CanDelete = true;
      }
      else
      {
        this.GetBusinessIdeas(process, transaction);
        process.CanDelete = process.Ideas.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(Process process, Transaction transaction)
    {
      if (process == null)
        return;
      if (process.Id == null)
      {
        process.CanDelete = true;
      }
      else
      {
        await this.GetBusinessIdeasAsync(process, transaction);
        process.CanDelete = process.Ideas.Count <= 0;
      }
    }

    public Process FindBusinessProcess(
    
    string Id) => Id == null ? (Process) null : _dataSet.BusinessProcesses.SingleOrDefault<Process>((Func<Process, bool>) (x => x.Id == Id));

    public async 
    
    Task<Process> FindBusinessProcessAsync(string Id)
    {
      Process businessProcessAsync;
      try
      {
        businessProcessAsync = await Task.Run<Process>((Func<Process>) (() => this.FindBusinessProcess(Id)));
      }
      catch
      {
        throw;
      }
      return businessProcessAsync;
    }

    public List<Process> GetBusinessProcessByDate(DateTime date) => _dataSet.BusinessProcesses.Where<Process>((Func<Process, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Process>();

    public async Task<List<Process>> GetBusinessProcessByDateAsync(DateTime date)
    {
      List<Process> processByDateAsync;
      try
      {
        processByDateAsync = await Task.Run<List<Process>>((Func<List<Process>>) (() => this.GetBusinessProcessByDate(date)));
      }
      catch
      {
        throw;
      }
      return processByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Process> cores)
    {
      try
      {
        foreach (Process core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Process> cores)
    {
      try
      {
        foreach (Process core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Process process)
    {
      if (process == null)
        return;
      if (process.CreatedById != null && process.CreatedBy == null)
        process.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == process.CreatedById));
      if (process.UpdatedById == null || process.UpdatedBy != null)
        return;
      process.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == process.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Process process)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(process)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeas(Process process) => this.GetBusinessIdeas(process, (Transaction) null);

    internal async Task GetBusinessIdeasAsync(Process process) => await this.GetBusinessIdeasAsync(process, (Transaction) null);

    internal void GetBusinessIdeas(Process process, Transaction transaction)
    {
      if (process != null)
        process.Ideas = _dataSet.BusinessIdeas.Where<Idea>((Func<Idea, bool>) (m => m.ProcessId == process.Id)).ToList<Idea>();
      if (transaction == null)
        return;
      for (int index = process.Ideas.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) process.Ideas[index]) == Action.Delete)
          process.Ideas.Remove(process.Ideas[index]);
      }
    }

    internal async Task GetBusinessIdeasAsync(Process process, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeas(process, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClient(Process process)
    {
      if (process == null)
        return;
      foreach (Client businessClient in (List<Client>) _dataSet.BusinessClients.ToList())
      {
        if (process.ClientId != null && businessClient.Id == process.ClientId)
        {
          process.Client = businessClient;
          break;
        }
      }
    }

    public async Task GetBusinessClientAsync(Process process)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClient(process)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClients(IEnumerable<Process> processes)
    {
      foreach (Process process in processes)
        this.GetBusinessClient(process);
    }

    public async Task GetBusinessClientsAsync(IEnumerable<Process> processes)
    {
      foreach (Process process in processes)
        await this.GetBusinessClientAsync(process);
    }

    public void GetBusinessTeam(Process process)
    {
      if (process == null)
        return;
      foreach (Team businessTeam in (List<Team>) _dataSet.BusinessTeams.ToList())
      {
        if (process.TeamId != null && businessTeam.Id == process.TeamId)
        {
          process.Team = businessTeam;
          break;
        }
      }
    }

    public async Task GetBusinessTeamAsync(Process process)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessTeam(process)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessTeams(IEnumerable<Process> processes)
    {
      foreach (Process process in processes)
        this.GetBusinessTeam(process);
    }

    public async Task GetBusinessTeamsAsync(IEnumerable<Process> processes)
    {
      foreach (Process process in processes)
        await this.GetBusinessTeamAsync(process);
    }

    public string Validate(Recipient core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(Recipient core)
    {
      string messages = "";
      if (core.Comment == null)
      {
        if (string.IsNullOrWhiteSpace(core.CommentId))
        {
          messages += "Business.Recipient.CommentId: CommentId missing; ";
        }
        else
        {
          Comment parent = _dataSet.BusinessComments.SingleOrDefault<Comment>((Func<Comment, bool>) (x => x.Id == core.CommentId));
          if (parent == null)
            messages += "Business.Recipient.CommentId: CommentId invalid; ";
          parent = (Comment) null;
        }
      }
      if (core.User == null)
      {
        if (string.IsNullOrWhiteSpace(core.UserId))
        {
          messages += "Business.Recipient.UserId: User missing; ";
        }
        else
        {
          User parent = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (x => x.Id == core.UserId));
          if (parent == null)
            messages += "Business.Recipient.UserId: User invalid; ";
          parent = (User) null;
        }
      }
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public void Add(IEnumerable<Recipient> recipients)
    {
      try
      {
        foreach (Recipient recipient in recipients)
          this.Add(recipient);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Recipient> recipients)
    {
      try
      {
        foreach (Recipient recipient in recipients)
          await this.AddAsync(recipient);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Recipient core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          Recipient recipient = (Recipient) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            recipient = _dataSet.BusinessRecipients.SingleOrDefault<Recipient>((Func<Recipient, bool>) (x => x.Id == core.Id));
          if (recipient == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessRecipients.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////recipient.Update(core);
                        ///

                        _dataSet.Entry(recipient).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        recipient.Update(core);
                        _dataSet.BusinessRecipients.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          recipient = (Recipient) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Recipient core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Recipient recipient, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(recipient, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Recipient recipient, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(recipient, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Recipient> recipients, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (recipients == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Recipient recipient in recipients.ToList<Recipient>())
        {
          dataStoreResult = this.Delete(recipient, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<Recipient> recipients,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (recipients == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Recipient> lst = recipients.ToList<Recipient>();
        foreach (Recipient recipient in lst)
        {
          Recipient item = recipient;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Recipient) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Recipient recipient, Transaction transaction)
    {
      try
      {
        if (recipient.Id == null)
          return DataStoreResult.Success;
        Recipient entity = _dataSet.BusinessRecipients.SingleOrDefault<Recipient>((Func<Recipient, bool>) (x => x.Id == recipient.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(recipient, transaction);
        if (!recipient.CanDelete)
          throw new ChildDependencyException("The recipient (" + recipient.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.BusinessRecipients.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Recipient recipient, Transaction transaction)
    {
      try
      {
        if (recipient.Id == null)
          return DataStoreResult.Success;
        Recipient core = _dataSet.BusinessRecipients.SingleOrDefault<Recipient>((Func<Recipient, bool>) (x => x.Id == recipient.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(recipient, transaction);
        if (recipient.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessRecipients.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The recipient (" + recipient.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessRecipient(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessRecipients.SingleOrDefault<Recipient>((Func<Recipient, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The recipient is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncBusinessRecipient(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Recipient recipient = _dataSet.BusinessRecipients.SingleOrDefault<Recipient>((Func<Recipient, bool>) (x => x.Id == Id));
        if (recipient == null)
          throw new NotFoundException("The recipient is not found");
        dataStoreResult = await this.DeleteAsync(recipient, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    Recipient recipient, Transaction transaction)
    {
      if (recipient == null)
        return;
      recipient.CanDelete = true;
    }

    internal async Task RefreshCanDeleteAsync(Recipient recipient, Transaction transaction)
    {
      if (recipient == null)
        return;
      recipient.CanDelete = true;
    }

    public Recipient FindBusinessRecipient(
    
    string Id) => Id == null ? (Recipient) null : _dataSet.BusinessRecipients.SingleOrDefault<Recipient>((Func<Recipient, bool>) (x => x.Id == Id));

    public async 
    
    Task<Recipient> FindBusinessRecipientAsync(string Id)
    {
      Recipient businessRecipientAsync;
      try
      {
        businessRecipientAsync = await Task.Run<Recipient>((Func<Recipient>) (() => this.FindBusinessRecipient(Id)));
      }
      catch
      {
        throw;
      }
      return businessRecipientAsync;
    }

    public List<Recipient> GetBusinessRecipientByDate(DateTime date) => _dataSet.BusinessRecipients.Where<Recipient>((Func<Recipient, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Recipient>();

    public async Task<List<Recipient>> GetBusinessRecipientByDateAsync(DateTime date)
    {
      List<Recipient> recipientByDateAsync;
      try
      {
        recipientByDateAsync = await Task.Run<List<Recipient>>((Func<List<Recipient>>) (() => this.GetBusinessRecipientByDate(date)));
      }
      catch
      {
        throw;
      }
      return recipientByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Recipient> cores)
    {
      try
      {
        foreach (Recipient core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Recipient> cores)
    {
      try
      {
        foreach (Recipient core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Recipient recipient)
    {
      if (recipient == null)
        return;
      if (recipient.CreatedById != null && recipient.CreatedBy == null)
        recipient.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == recipient.CreatedById));
      if (recipient.UpdatedById == null || recipient.UpdatedBy != null)
        return;
      recipient.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == recipient.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Recipient recipient)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(recipient)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessComment(Recipient recipient)
    {
      if (recipient == null)
        return;
      foreach (Comment businessComment in (List<Comment>) _dataSet.BusinessComments.ToList())
      {
        if (recipient.CommentId != null && businessComment.Id == recipient.CommentId)
        {
          recipient.Comment = businessComment;
          break;
        }
      }
    }

    public async Task GetBusinessCommentAsync(Recipient recipient)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessComment(recipient)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessComments(IEnumerable<Recipient> recipients)
    {
      foreach (Recipient recipient in recipients)
        this.GetBusinessComment(recipient);
    }

    public async Task GetBusinessCommentsAsync(IEnumerable<Recipient> recipients)
    {
      foreach (Recipient recipient in recipients)
        await this.GetBusinessCommentAsync(recipient);
    }

    public void GetUser(Recipient recipient)
    {
      if (recipient == null)
        return;
      foreach (User user in (List<User>) _dataSet.Users.ToList())
      {
        if (recipient.UserId != null && user.Id == recipient.UserId)
        {
          recipient.User = user;
          break;
        }
      }
    }

    public async Task GetUserAsync(Recipient recipient)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetUser(recipient)));
      }
      catch
      {
        throw;
      }
    }

    public void GetUsers(IEnumerable<Recipient> recipients)
    {
      foreach (Recipient recipient in recipients)
        this.GetUser(recipient);
    }

    public async Task GetUsersAsync(IEnumerable<Recipient> recipients)
    {
      foreach (Recipient recipient in recipients)
        await this.GetUserAsync(recipient);
    }

    public string Validate(SilkFlo.Data.Core.Domain.Business.BusinessRole core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(SilkFlo.Data.Core.Domain.Business.BusinessRole core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Business.Role.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(SilkFlo.Data.Core.Domain.Business.BusinessRole core)
    {
      string str = "";
      if (_dataSet.BusinessRoles.ToList<SilkFlo.Data.Core.Domain.Business.BusinessRole>().FirstOrDefault<SilkFlo.Data.Core.Domain.Business.BusinessRole>((Func<SilkFlo.Data.Core.Domain.Business.BusinessRole, bool>) (x => x.Id != (core.Id ?? "") && x.ClientId == core.ClientId && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this client and name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(SilkFlo.Data.Core.Domain.Business.BusinessRole core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<SilkFlo.Data.Core.Domain.Business.BusinessRole> roles)
    {
      try
      {
        foreach (SilkFlo.Data.Core.Domain.Business.BusinessRole role in roles)
          this.Add(role);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<SilkFlo.Data.Core.Domain.Business.BusinessRole> roles)
    {
      try
      {
        foreach (SilkFlo.Data.Core.Domain.Business.BusinessRole role in roles)
          await this.AddAsync(role);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(SilkFlo.Data.Core.Domain.Business.BusinessRole core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          SilkFlo.Data.Core.Domain.Business.BusinessRole role = (SilkFlo.Data.Core.Domain.Business.BusinessRole) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            role = _dataSet.BusinessRoles.SingleOrDefault<SilkFlo.Data.Core.Domain.Business.BusinessRole>((Func<SilkFlo.Data.Core.Domain.Business.BusinessRole, bool>) (x => x.Id == core.Id));
          if (role == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessRoles.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////role.Update(core);
                        ///

                        _dataSet.Entry(role).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        role.Update(core);
                        _dataSet.BusinessRoles.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          role = (SilkFlo.Data.Core.Domain.Business.BusinessRole) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(SilkFlo.Data.Core.Domain.Business.BusinessRole core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(SilkFlo.Data.Core.Domain.Business.BusinessRole role, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(role, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(SilkFlo.Data.Core.Domain.Business.BusinessRole role, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(role, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<SilkFlo.Data.Core.Domain.Business.BusinessRole> roles, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (roles == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (SilkFlo.Data.Core.Domain.Business.BusinessRole role in roles.ToList<SilkFlo.Data.Core.Domain.Business.BusinessRole>())
        {
          dataStoreResult = this.Delete(role, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<SilkFlo.Data.Core.Domain.Business.BusinessRole> roles, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (roles == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<SilkFlo.Data.Core.Domain.Business.BusinessRole> lst = roles.ToList<SilkFlo.Data.Core.Domain.Business.BusinessRole>();
        foreach (SilkFlo.Data.Core.Domain.Business.BusinessRole role in lst)
        {
          SilkFlo.Data.Core.Domain.Business.BusinessRole item = role;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (SilkFlo.Data.Core.Domain.Business.BusinessRole) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(SilkFlo.Data.Core.Domain.Business.BusinessRole role, Transaction transaction)
    {
      try
      {
        if (role.Id == null)
          return DataStoreResult.Success;
        SilkFlo.Data.Core.Domain.Business.BusinessRole entity = _dataSet.BusinessRoles.SingleOrDefault<SilkFlo.Data.Core.Domain.Business.BusinessRole>((Func<SilkFlo.Data.Core.Domain.Business.BusinessRole, bool>) (x => x.Id == role.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.GetBusinessCollaboratorRoles(role);
        foreach (CollaboratorRole collaboratorRole in role.CollaboratorRoles)
        {
          int num = (int) this.Delete(collaboratorRole, transaction);
        }
        this.GetBusinessRoleCosts(role);
        foreach (RoleCost roleCost in role.RoleCosts)
        {
          int num = (int) this.Delete(roleCost, transaction);
        }
        this.GetBusinessRoleIdeaAuthorisations(role);
        foreach (RoleIdeaAuthorisation ideaAuthorisation in role.RoleIdeaAuthorisations)
        {
          int num = (int) this.Delete(ideaAuthorisation, transaction);
        }
        this.RefreshCanDelete(role, transaction);
        if (role.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessRoles.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The role (" + role.ToString() + ") contains ";
        if (role.ImplementationCosts.Count > 0)
          str += "implementation costs, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(SilkFlo.Data.Core.Domain.Business.BusinessRole role, Transaction transaction)
    {
      try
      {
        if (role.Id == null)
          return DataStoreResult.Success;
        SilkFlo.Data.Core.Domain.Business.BusinessRole core = _dataSet.BusinessRoles.SingleOrDefault<SilkFlo.Data.Core.Domain.Business.BusinessRole>((Func<SilkFlo.Data.Core.Domain.Business.BusinessRole, bool>) (x => x.Id == role.Id));
        if (core == null)
          return DataStoreResult.Success;
        this.GetBusinessCollaboratorRoles(role);
        foreach (CollaboratorRole m in role.CollaboratorRoles)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessRoleCosts(role);
        foreach (RoleCost m in role.RoleCosts)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessRoleIdeaAuthorisations(role);
        foreach (RoleIdeaAuthorisation m in role.RoleIdeaAuthorisations)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        await this.RefreshCanDeleteAsync(role, transaction);
        if (role.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessRoles.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The role (" + role.ToString() + ") contains ";
        if (role.ImplementationCosts.Count > 0)
          erorrMessage += "implementation costs, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessRole(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessRoles.SingleOrDefault<SilkFlo.Data.Core.Domain.Business.BusinessRole>((Func<SilkFlo.Data.Core.Domain.Business.BusinessRole, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The role is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncBusinessRole(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        SilkFlo.Data.Core.Domain.Business.BusinessRole role = _dataSet.BusinessRoles.SingleOrDefault<SilkFlo.Data.Core.Domain.Business.BusinessRole>((Func<SilkFlo.Data.Core.Domain.Business.BusinessRole, bool>) (x => x.Id == Id));
        if (role == null)
          throw new NotFoundException("The role is not found");
        dataStoreResult = await this.DeleteAsync(role, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(SilkFlo.Data.Core.Domain.Business.BusinessRole role, Transaction transaction)
    {
      if (role == null)
        return;
      if (role.Id == null)
      {
        role.CanDelete = true;
      }
      else
      {
        this.GetBusinessCollaboratorRoles(role, transaction);
        this.GetBusinessImplementationCosts(role, transaction);
        this.GetBusinessRoleCosts(role, transaction);
        this.GetBusinessRoleIdeaAuthorisations(role, transaction);
        role.CanDelete = role.CollaboratorRoles.Count + role.ImplementationCosts.Count + role.RoleCosts.Count + role.RoleIdeaAuthorisations.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(SilkFlo.Data.Core.Domain.Business.BusinessRole role, Transaction transaction)
    {
      if (role == null)
        return;
      if (role.Id == null)
      {
        role.CanDelete = true;
      }
      else
      {
        await this.GetBusinessImplementationCostsAsync(role, transaction);
        role.CanDelete = role.ImplementationCosts.Count <= 0;
      }
    }

    public SilkFlo.Data.Core.Domain.Business.BusinessRole FindBusinessRole(string Id) => Id == null ? (SilkFlo.Data.Core.Domain.Business.BusinessRole) null : _dataSet.BusinessRoles.SingleOrDefault<SilkFlo.Data.Core.Domain.Business.BusinessRole>((Func<SilkFlo.Data.Core.Domain.Business.BusinessRole, bool>) (x => x.Id == Id));

    public async Task<SilkFlo.Data.Core.Domain.Business.BusinessRole> FindBusinessRoleAsync(string Id)
    {
      SilkFlo.Data.Core.Domain.Business.BusinessRole businessRoleAsync;
      try
      {
        businessRoleAsync = await Task.Run<SilkFlo.Data.Core.Domain.Business.BusinessRole>((Func<SilkFlo.Data.Core.Domain.Business.BusinessRole>) (() => this.FindBusinessRole(Id)));
      }
      catch
      {
        throw;
      }
      return businessRoleAsync;
    }

    public List<SilkFlo.Data.Core.Domain.Business.BusinessRole> GetBusinessRoleByDate(DateTime date) => _dataSet.BusinessRoles.Where<SilkFlo.Data.Core.Domain.Business.BusinessRole>((Func<SilkFlo.Data.Core.Domain.Business.BusinessRole, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<SilkFlo.Data.Core.Domain.Business.BusinessRole>();

    public async Task<List<SilkFlo.Data.Core.Domain.Business.BusinessRole>> GetBusinessRoleByDateAsync(
      DateTime date)
    {
      List<SilkFlo.Data.Core.Domain.Business.BusinessRole> businessRoleByDateAsync;
      try
      {
        businessRoleByDateAsync = await Task.Run<List<SilkFlo.Data.Core.Domain.Business.BusinessRole>>((Func<List<SilkFlo.Data.Core.Domain.Business.BusinessRole>>) (() => this.GetBusinessRoleByDate(date)));
      }
      catch
      {
        throw;
      }
      return businessRoleByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<SilkFlo.Data.Core.Domain.Business.BusinessRole> cores)
    {
      try
      {
        foreach (SilkFlo.Data.Core.Domain.Business.BusinessRole core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<SilkFlo.Data.Core.Domain.Business.BusinessRole> cores)
    {
      try
      {
        foreach (SilkFlo.Data.Core.Domain.Business.BusinessRole core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(SilkFlo.Data.Core.Domain.Business.BusinessRole role)
    {
      if (role == null)
        return;
      if (role.CreatedById != null && role.CreatedBy == null)
        role.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == role.CreatedById));
      if (role.UpdatedById == null || role.UpdatedBy != null)
        return;
      role.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == role.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(SilkFlo.Data.Core.Domain.Business.BusinessRole role)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(role)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessCollaboratorRoles(SilkFlo.Data.Core.Domain.Business.BusinessRole role) => this.GetBusinessCollaboratorRoles(role, (Transaction) null);

    internal async Task GetBusinessCollaboratorRolesAsync(SilkFlo.Data.Core.Domain.Business.BusinessRole role) => await this.GetBusinessCollaboratorRolesAsync(role, (Transaction) null);

    internal void GetBusinessCollaboratorRoles(SilkFlo.Data.Core.Domain.Business.BusinessRole role, Transaction transaction)
    {
      if (role != null)
        role.CollaboratorRoles = _dataSet.BusinessCollaboratorRoles.Where<CollaboratorRole>((Func<CollaboratorRole, bool>) (m => m.RoleId == role.Id)).ToList<CollaboratorRole>();
      if (transaction == null)
        return;
      for (int index = role.CollaboratorRoles.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) role.CollaboratorRoles[index]) == Action.Delete)
          role.CollaboratorRoles.Remove(role.CollaboratorRoles[index]);
      }
    }

    internal async Task GetBusinessCollaboratorRolesAsync(SilkFlo.Data.Core.Domain.Business.BusinessRole role, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessCollaboratorRoles(role, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessImplementationCosts(SilkFlo.Data.Core.Domain.Business.BusinessRole role) => this.GetBusinessImplementationCosts(role, (Transaction) null);

    internal async Task GetBusinessImplementationCostsAsync(SilkFlo.Data.Core.Domain.Business.BusinessRole role) => await this.GetBusinessImplementationCostsAsync(role, (Transaction) null);

    internal void GetBusinessImplementationCosts(SilkFlo.Data.Core.Domain.Business.BusinessRole role, Transaction transaction)
    {
      if (role != null)
        role.ImplementationCosts = _dataSet.BusinessImplementationCosts.Where<ImplementationCost>((Func<ImplementationCost, bool>) (m => m.RoleId == role.Id)).ToList<ImplementationCost>();
      if (transaction == null)
        return;
      for (int index = role.ImplementationCosts.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) role.ImplementationCosts[index]) == Action.Delete)
          role.ImplementationCosts.Remove(role.ImplementationCosts[index]);
      }
    }

    internal async Task GetBusinessImplementationCostsAsync(SilkFlo.Data.Core.Domain.Business.BusinessRole role, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessImplementationCosts(role, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessRoleCosts(SilkFlo.Data.Core.Domain.Business.BusinessRole role) => this.GetBusinessRoleCosts(role, (Transaction) null);

    internal async Task GetBusinessRoleCostsAsync(SilkFlo.Data.Core.Domain.Business.BusinessRole role) => await this.GetBusinessRoleCostsAsync(role, (Transaction) null);

    internal void GetBusinessRoleCosts(SilkFlo.Data.Core.Domain.Business.BusinessRole role, Transaction transaction)
    {
      if (role != null)
        role.RoleCosts = _dataSet.BusinessRoleCosts.Where<RoleCost>((Func<RoleCost, bool>) (m => m.RoleId == role.Id)).ToList<RoleCost>();
      if (transaction == null)
        return;
      for (int index = role.RoleCosts.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) role.RoleCosts[index]) == Action.Delete)
          role.RoleCosts.Remove(role.RoleCosts[index]);
      }
    }

    internal async Task GetBusinessRoleCostsAsync(SilkFlo.Data.Core.Domain.Business.BusinessRole role, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessRoleCosts(role, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessRoleIdeaAuthorisations(SilkFlo.Data.Core.Domain.Business.BusinessRole role) => this.GetBusinessRoleIdeaAuthorisations(role, (Transaction) null);

    internal async Task GetBusinessRoleIdeaAuthorisationsAsync(SilkFlo.Data.Core.Domain.Business.BusinessRole role) => await this.GetBusinessRoleIdeaAuthorisationsAsync(role, (Transaction) null);

    internal void GetBusinessRoleIdeaAuthorisations(SilkFlo.Data.Core.Domain.Business.BusinessRole role, Transaction transaction)
    {
      if (role != null)
        role.RoleIdeaAuthorisations = _dataSet.BusinessRoleIdeaAuthorisations.Where<RoleIdeaAuthorisation>((Func<RoleIdeaAuthorisation, bool>) (m => m.RoleId == role.Id)).ToList<RoleIdeaAuthorisation>();
      if (transaction == null)
        return;
      for (int index = role.RoleIdeaAuthorisations.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) role.RoleIdeaAuthorisations[index]) == Action.Delete)
          role.RoleIdeaAuthorisations.Remove(role.RoleIdeaAuthorisations[index]);
      }
    }

    internal async Task GetBusinessRoleIdeaAuthorisationsAsync(SilkFlo.Data.Core.Domain.Business.BusinessRole role, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessRoleIdeaAuthorisations(role, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClient(SilkFlo.Data.Core.Domain.Business.BusinessRole role)
    {
      if (role == null)
        return;
      foreach (Client businessClient in (List<Client>) _dataSet.BusinessClients.ToList())
      {
        if (role.ClientId != null && businessClient.Id == role.ClientId)
        {
          role.Client = businessClient;
          break;
        }
      }
    }

    public async Task GetBusinessClientAsync(SilkFlo.Data.Core.Domain.Business.BusinessRole role)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClient(role)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClients(IEnumerable<SilkFlo.Data.Core.Domain.Business.BusinessRole> roles)
    {
      foreach (SilkFlo.Data.Core.Domain.Business.BusinessRole role in roles)
        this.GetBusinessClient(role);
    }

    public async Task GetBusinessClientsAsync(IEnumerable<SilkFlo.Data.Core.Domain.Business.BusinessRole> roles)
    {
      foreach (SilkFlo.Data.Core.Domain.Business.BusinessRole role in roles)
        await this.GetBusinessClientAsync(role);
    }

    public string Validate(RoleCost core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(RoleCost core)
    {
      string messages = "";
      if (core.Client == null)
      {
        if (string.IsNullOrWhiteSpace(core.ClientId))
        {
          messages += "Business.RoleCost.ClientId: Client missing; ";
        }
        else
        {
          Client parent = _dataSet.BusinessClients.SingleOrDefault<Client>((Func<Client, bool>) (x => x.Id == core.ClientId));
          if (parent == null)
            messages += "Business.RoleCost.ClientId: Client invalid; ";
          parent = (Client) null;
        }
      }
      if (core.Role == null)
      {
        if (string.IsNullOrWhiteSpace(core.RoleId))
        {
          messages += "Business.RoleCost.RoleId: Role missing; ";
        }
        else
        {
          SilkFlo.Data.Core.Domain.Business.BusinessRole parent = _dataSet.BusinessRoles.SingleOrDefault<SilkFlo.Data.Core.Domain.Business.BusinessRole>((Func<SilkFlo.Data.Core.Domain.Business.BusinessRole, bool>) (x => x.Id == core.RoleId));
          if (parent == null)
            messages += "Business.RoleCost.RoleId: Role invalid; ";
          parent = (SilkFlo.Data.Core.Domain.Business.BusinessRole) null;
        }
      }
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(RoleCost core)
    {
      string str = "";
      if (_dataSet.BusinessRoleCosts.ToList<RoleCost>().FirstOrDefault<RoleCost>((Func<RoleCost, bool>) (x => x.Id != (core.Id ?? "") && x.ClientId == core.ClientId && x.RoleId == core.RoleId)) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this client and role.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(RoleCost core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<RoleCost> roleCosts)
    {
      try
      {
        foreach (RoleCost roleCost in roleCosts)
          this.Add(roleCost);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<RoleCost> roleCosts)
    {
      try
      {
        foreach (RoleCost roleCost in roleCosts)
          await this.AddAsync(roleCost);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(RoleCost core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          RoleCost roleCost = (RoleCost) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            roleCost = _dataSet.BusinessRoleCosts.SingleOrDefault<RoleCost>((Func<RoleCost, bool>) (x => x.Id == core.Id));
          if (roleCost == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessRoleCosts.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////roleCost.Update(core);
                        ///

                        _dataSet.Entry(roleCost).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        roleCost.Update(core);
                        _dataSet.BusinessRoleCosts.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          roleCost = (RoleCost) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(RoleCost core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(RoleCost roleCost, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(roleCost, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(RoleCost roleCost, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(roleCost, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<RoleCost> roleCosts, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (roleCosts == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (RoleCost roleCost in roleCosts.ToList<RoleCost>())
        {
          dataStoreResult = this.Delete(roleCost, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<RoleCost> roleCosts,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (roleCosts == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<RoleCost> lst = roleCosts.ToList<RoleCost>();
        foreach (RoleCost roleCost in lst)
        {
          RoleCost item = roleCost;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (RoleCost) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(RoleCost roleCost, Transaction transaction)
    {
      try
      {
        if (roleCost.Id == null)
          return DataStoreResult.Success;
        RoleCost entity = _dataSet.BusinessRoleCosts.SingleOrDefault<RoleCost>((Func<RoleCost, bool>) (x => x.Id == roleCost.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(roleCost, transaction);
        if (!roleCost.CanDelete)
          throw new ChildDependencyException("The role cost (" + roleCost.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.BusinessRoleCosts.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(RoleCost roleCost, Transaction transaction)
    {
      try
      {
        if (roleCost.Id == null)
          return DataStoreResult.Success;
        RoleCost core = _dataSet.BusinessRoleCosts.SingleOrDefault<RoleCost>((Func<RoleCost, bool>) (x => x.Id == roleCost.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(roleCost, transaction);
        if (roleCost.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessRoleCosts.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The role cost (" + roleCost.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessRoleCost(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessRoleCosts.SingleOrDefault<RoleCost>((Func<RoleCost, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The roleCost is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncBusinessRoleCost(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        RoleCost roleCost = _dataSet.BusinessRoleCosts.SingleOrDefault<RoleCost>((Func<RoleCost, bool>) (x => x.Id == Id));
        if (roleCost == null)
          throw new NotFoundException("The roleCost is not found");
        dataStoreResult = await this.DeleteAsync(roleCost, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    RoleCost roleCost, Transaction transaction)
    {
      if (roleCost == null)
        return;
      roleCost.CanDelete = true;
    }

    internal async Task RefreshCanDeleteAsync(RoleCost roleCost, Transaction transaction)
    {
      if (roleCost == null)
        return;
      roleCost.CanDelete = true;
    }

    public RoleCost FindBusinessRoleCost(
    
    string Id) => Id == null ? (RoleCost) null : _dataSet.BusinessRoleCosts.SingleOrDefault<RoleCost>((Func<RoleCost, bool>) (x => x.Id == Id));

    public async 
    
    Task<RoleCost> FindBusinessRoleCostAsync(string Id)
    {
      RoleCost businessRoleCostAsync;
      try
      {
        businessRoleCostAsync = await Task.Run<RoleCost>((Func<RoleCost>) (() => this.FindBusinessRoleCost(Id)));
      }
      catch
      {
        throw;
      }
      return businessRoleCostAsync;
    }

    public List<RoleCost> GetBusinessRoleCostByDate(DateTime date) => _dataSet.BusinessRoleCosts.Where<RoleCost>((Func<RoleCost, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<RoleCost>();

    public async Task<List<RoleCost>> GetBusinessRoleCostByDateAsync(DateTime date)
    {
      List<RoleCost> roleCostByDateAsync;
      try
      {
        roleCostByDateAsync = await Task.Run<List<RoleCost>>((Func<List<RoleCost>>) (() => this.GetBusinessRoleCostByDate(date)));
      }
      catch
      {
        throw;
      }
      return roleCostByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<RoleCost> cores)
    {
      try
      {
        foreach (RoleCost core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<RoleCost> cores)
    {
      try
      {
        foreach (RoleCost core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(RoleCost roleCost)
    {
      if (roleCost == null)
        return;
      if (roleCost.CreatedById != null && roleCost.CreatedBy == null)
        roleCost.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == roleCost.CreatedById));
      if (roleCost.UpdatedById == null || roleCost.UpdatedBy != null)
        return;
      roleCost.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == roleCost.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(RoleCost roleCost)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(roleCost)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClient(RoleCost roleCost)
    {
      if (roleCost == null)
        return;
      foreach (Client businessClient in (List<Client>) _dataSet.BusinessClients.ToList())
      {
        if (roleCost.ClientId != null && businessClient.Id == roleCost.ClientId)
        {
          roleCost.Client = businessClient;
          break;
        }
      }
    }

    public async Task GetBusinessClientAsync(RoleCost roleCost)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClient(roleCost)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClients(IEnumerable<RoleCost> roleCosts)
    {
      foreach (RoleCost roleCost in roleCosts)
        this.GetBusinessClient(roleCost);
    }

    public async Task GetBusinessClientsAsync(IEnumerable<RoleCost> roleCosts)
    {
      foreach (RoleCost roleCost in roleCosts)
        await this.GetBusinessClientAsync(roleCost);
    }

    public void GetBusinessRole(RoleCost roleCost)
    {
      if (roleCost == null)
        return;
      foreach (SilkFlo.Data.Core.Domain.Business.BusinessRole businessRole in (List<SilkFlo.Data.Core.Domain.Business.BusinessRole>) _dataSet.BusinessRoles.ToList())
      {
        if (roleCost.RoleId != null && businessRole.Id == roleCost.RoleId)
        {
          roleCost.Role = businessRole;
          break;
        }
      }
    }

    public async Task GetBusinessRoleAsync(RoleCost roleCost)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessRole(roleCost)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessRoles(IEnumerable<RoleCost> roleCosts)
    {
      foreach (RoleCost roleCost in roleCosts)
        this.GetBusinessRole(roleCost);
    }

    public async Task GetBusinessRolesAsync(IEnumerable<RoleCost> roleCosts)
    {
      foreach (RoleCost roleCost in roleCosts)
        await this.GetBusinessRoleAsync(roleCost);
    }

    public string Validate(RoleIdeaAuthorisation core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(RoleIdeaAuthorisation core)
    {
      string messages = "";
      if (core.Client == null)
      {
        if (string.IsNullOrWhiteSpace(core.ClientId))
        {
          messages += "Business.RoleIdeaAuthorisation.ClientId: Client missing; ";
        }
        else
        {
          Client parent = _dataSet.BusinessClients.SingleOrDefault<Client>((Func<Client, bool>) (x => x.Id == core.ClientId));
          if (parent == null)
            messages += "Business.RoleIdeaAuthorisation.ClientId: Client invalid; ";
          parent = (Client) null;
        }
      }
      if (core.IdeaAuthorisation == null)
      {
        if (string.IsNullOrWhiteSpace(core.IdeaAuthorisationId))
        {
          messages += "Business.RoleIdeaAuthorisation.IdeaAuthorisationId: Idea Authorisation missing; ";
        }
        else
        {
          IdeaAuthorisation parent = _dataSet.SharedIdeaAuthorisations.SingleOrDefault<IdeaAuthorisation>((Func<IdeaAuthorisation, bool>) (x => x.Id == core.IdeaAuthorisationId));
          if (parent == null)
            messages += "Business.RoleIdeaAuthorisation.IdeaAuthorisationId: Idea Authorisation invalid; ";
          parent = (IdeaAuthorisation) null;
        }
      }
      if (core.Role == null)
      {
        if (string.IsNullOrWhiteSpace(core.RoleId))
        {
          messages += "Business.RoleIdeaAuthorisation.RoleId: Role missing; ";
        }
        else
        {
          SilkFlo.Data.Core.Domain.Business.BusinessRole parent = _dataSet.BusinessRoles.SingleOrDefault<SilkFlo.Data.Core.Domain.Business.BusinessRole>((Func<SilkFlo.Data.Core.Domain.Business.BusinessRole, bool>) (x => x.Id == core.RoleId));
          if (parent == null)
            messages += "Business.RoleIdeaAuthorisation.RoleId: Role invalid; ";
          parent = (SilkFlo.Data.Core.Domain.Business.BusinessRole) null;
        }
      }
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(RoleIdeaAuthorisation core)
    {
      string str = "";
      if (_dataSet.BusinessRoleIdeaAuthorisations.ToList<RoleIdeaAuthorisation>().FirstOrDefault<RoleIdeaAuthorisation>((Func<RoleIdeaAuthorisation, bool>) (x => x.Id != (core.Id ?? "") && x.ClientId == core.ClientId && x.IdeaAuthorisationId == core.IdeaAuthorisationId && x.RoleId == core.RoleId)) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this client and idea Authorisation and role.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(RoleIdeaAuthorisation core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(
      IEnumerable<RoleIdeaAuthorisation> roleIdeaAuthorisations)
    {
      try
      {
        foreach (RoleIdeaAuthorisation ideaAuthorisation in roleIdeaAuthorisations)
          this.Add(ideaAuthorisation);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(
      IEnumerable<RoleIdeaAuthorisation> roleIdeaAuthorisations)
    {
      try
      {
        foreach (RoleIdeaAuthorisation roleIdeaAuthorisation in roleIdeaAuthorisations)
          await this.AddAsync(roleIdeaAuthorisation);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(RoleIdeaAuthorisation core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          RoleIdeaAuthorisation roleIdeaAuthorisation = (RoleIdeaAuthorisation) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            roleIdeaAuthorisation = _dataSet.BusinessRoleIdeaAuthorisations.SingleOrDefault<RoleIdeaAuthorisation>((Func<RoleIdeaAuthorisation, bool>) (x => x.Id == core.Id));
          if (roleIdeaAuthorisation == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessRoleIdeaAuthorisations.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////roleIdeaAuthorisation.Update(core);
                        ///

                        _dataSet.Entry(roleIdeaAuthorisation).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        roleIdeaAuthorisation.Update(core);
                        _dataSet.BusinessRoleIdeaAuthorisations.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          roleIdeaAuthorisation = (RoleIdeaAuthorisation) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(RoleIdeaAuthorisation core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(RoleIdeaAuthorisation roleIdeaAuthorisation, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(roleIdeaAuthorisation, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      RoleIdeaAuthorisation roleIdeaAuthorisation,
      bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(roleIdeaAuthorisation, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(
      IEnumerable<RoleIdeaAuthorisation> roleIdeaAuthorisations,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (roleIdeaAuthorisations == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (RoleIdeaAuthorisation roleIdeaAuthorisation in roleIdeaAuthorisations.ToList<RoleIdeaAuthorisation>())
        {
          dataStoreResult = this.Delete(roleIdeaAuthorisation, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<RoleIdeaAuthorisation> roleIdeaAuthorisations,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (roleIdeaAuthorisations == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<RoleIdeaAuthorisation> lst = roleIdeaAuthorisations.ToList<RoleIdeaAuthorisation>();
        foreach (RoleIdeaAuthorisation ideaAuthorisation in lst)
        {
          RoleIdeaAuthorisation item = ideaAuthorisation;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (RoleIdeaAuthorisation) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(
      RoleIdeaAuthorisation roleIdeaAuthorisation,
      Transaction transaction)
    {
      try
      {
        if (roleIdeaAuthorisation.Id == null)
          return DataStoreResult.Success;
        RoleIdeaAuthorisation entity = _dataSet.BusinessRoleIdeaAuthorisations.SingleOrDefault<RoleIdeaAuthorisation>((Func<RoleIdeaAuthorisation, bool>) (x => x.Id == roleIdeaAuthorisation.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(roleIdeaAuthorisation, transaction);
        if (!roleIdeaAuthorisation.CanDelete)
          throw new ChildDependencyException("The role idea authorisation (" + roleIdeaAuthorisation.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.BusinessRoleIdeaAuthorisations.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      RoleIdeaAuthorisation roleIdeaAuthorisation,
      Transaction transaction)
    {
      try
      {
        if (roleIdeaAuthorisation.Id == null)
          return DataStoreResult.Success;
        RoleIdeaAuthorisation core = _dataSet.BusinessRoleIdeaAuthorisations.SingleOrDefault<RoleIdeaAuthorisation>((Func<RoleIdeaAuthorisation, bool>) (x => x.Id == roleIdeaAuthorisation.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(roleIdeaAuthorisation, transaction);
        if (roleIdeaAuthorisation.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessRoleIdeaAuthorisations.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The role idea authorisation (" + roleIdeaAuthorisation.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessRoleIdeaAuthorisation(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessRoleIdeaAuthorisations.SingleOrDefault<RoleIdeaAuthorisation>((Func<RoleIdeaAuthorisation, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The roleIdeaAuthorisation is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncBusinessRoleIdeaAuthorisation(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        RoleIdeaAuthorisation roleIdeaAuthorisation = _dataSet.BusinessRoleIdeaAuthorisations.SingleOrDefault<RoleIdeaAuthorisation>((Func<RoleIdeaAuthorisation, bool>) (x => x.Id == Id));
        if (roleIdeaAuthorisation == null)
          throw new NotFoundException("The roleIdeaAuthorisation is not found");
        dataStoreResult = await this.DeleteAsync(roleIdeaAuthorisation, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(

      
      RoleIdeaAuthorisation roleIdeaAuthorisation,
      Transaction transaction)
    {
      if (roleIdeaAuthorisation == null)
        return;
      roleIdeaAuthorisation.CanDelete = true;
    }

    internal async Task RefreshCanDeleteAsync(
      RoleIdeaAuthorisation roleIdeaAuthorisation,
      Transaction transaction)
    {
      if (roleIdeaAuthorisation == null)
        return;
      roleIdeaAuthorisation.CanDelete = true;
    }

    public RoleIdeaAuthorisation FindBusinessRoleIdeaAuthorisation(
    
    string Id) => Id == null ? (RoleIdeaAuthorisation) null : _dataSet.BusinessRoleIdeaAuthorisations.SingleOrDefault<RoleIdeaAuthorisation>((Func<RoleIdeaAuthorisation, bool>) (x => x.Id == Id));

    public async 
    
    Task<RoleIdeaAuthorisation> FindBusinessRoleIdeaAuthorisationAsync(string Id)
    {
      RoleIdeaAuthorisation authorisationAsync;
      try
      {
        authorisationAsync = await Task.Run<RoleIdeaAuthorisation>((Func<RoleIdeaAuthorisation>) (() => this.FindBusinessRoleIdeaAuthorisation(Id)));
      }
      catch
      {
        throw;
      }
      return authorisationAsync;
    }

    public List<RoleIdeaAuthorisation> GetBusinessRoleIdeaAuthorisationByDate(DateTime date) => _dataSet.BusinessRoleIdeaAuthorisations.Where<RoleIdeaAuthorisation>((Func<RoleIdeaAuthorisation, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<RoleIdeaAuthorisation>();

    public async Task<List<RoleIdeaAuthorisation>> GetBusinessRoleIdeaAuthorisationByDateAsync(
      DateTime date)
    {
      List<RoleIdeaAuthorisation> authorisationByDateAsync;
      try
      {
        authorisationByDateAsync = await Task.Run<List<RoleIdeaAuthorisation>>((Func<List<RoleIdeaAuthorisation>>) (() => this.GetBusinessRoleIdeaAuthorisationByDate(date)));
      }
      catch
      {
        throw;
      }
      return authorisationByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<RoleIdeaAuthorisation> cores)
    {
      try
      {
        foreach (RoleIdeaAuthorisation core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<RoleIdeaAuthorisation> cores)
    {
      try
      {
        foreach (RoleIdeaAuthorisation core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(RoleIdeaAuthorisation roleIdeaAuthorisation)
    {
      if (roleIdeaAuthorisation == null)
        return;
      if (roleIdeaAuthorisation.CreatedById != null && roleIdeaAuthorisation.CreatedBy == null)
        roleIdeaAuthorisation.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == roleIdeaAuthorisation.CreatedById));
      if (roleIdeaAuthorisation.UpdatedById == null || roleIdeaAuthorisation.UpdatedBy != null)
        return;
      roleIdeaAuthorisation.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == roleIdeaAuthorisation.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(RoleIdeaAuthorisation roleIdeaAuthorisation)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(roleIdeaAuthorisation)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClient(RoleIdeaAuthorisation roleIdeaAuthorisation)
    {
      if (roleIdeaAuthorisation == null)
        return;
      foreach (Client businessClient in (List<Client>) _dataSet.BusinessClients.ToList())
      {
        if (roleIdeaAuthorisation.ClientId != null && businessClient.Id == roleIdeaAuthorisation.ClientId)
        {
          roleIdeaAuthorisation.Client = businessClient;
          break;
        }
      }
    }

    public async Task GetBusinessClientAsync(RoleIdeaAuthorisation roleIdeaAuthorisation)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClient(roleIdeaAuthorisation)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClients(
      IEnumerable<RoleIdeaAuthorisation> roleIdeaAuthorisations)
    {
      foreach (RoleIdeaAuthorisation ideaAuthorisation in roleIdeaAuthorisations)
        this.GetBusinessClient(ideaAuthorisation);
    }

    public async Task GetBusinessClientsAsync(
      IEnumerable<RoleIdeaAuthorisation> roleIdeaAuthorisations)
    {
      foreach (RoleIdeaAuthorisation roleIdeaAuthorisation in roleIdeaAuthorisations)
        await this.GetBusinessClientAsync(roleIdeaAuthorisation);
    }

    public void GetSharedIdeaAuthorisation(RoleIdeaAuthorisation roleIdeaAuthorisation)
    {
      if (roleIdeaAuthorisation == null)
        return;
      foreach (IdeaAuthorisation ideaAuthorisation in (List<IdeaAuthorisation>) _dataSet.SharedIdeaAuthorisations.ToList())
      {
        if (roleIdeaAuthorisation.IdeaAuthorisationId != null && ideaAuthorisation.Id == roleIdeaAuthorisation.IdeaAuthorisationId)
        {
          roleIdeaAuthorisation.IdeaAuthorisation = ideaAuthorisation;
          break;
        }
      }
    }

    public async Task GetSharedIdeaAuthorisationAsync(RoleIdeaAuthorisation roleIdeaAuthorisation)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedIdeaAuthorisation(roleIdeaAuthorisation)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedIdeaAuthorisations(
      IEnumerable<RoleIdeaAuthorisation> roleIdeaAuthorisations)
    {
      foreach (RoleIdeaAuthorisation ideaAuthorisation in roleIdeaAuthorisations)
        this.GetSharedIdeaAuthorisation(ideaAuthorisation);
    }

    public async Task GetSharedIdeaAuthorisationsAsync(
      IEnumerable<RoleIdeaAuthorisation> roleIdeaAuthorisations)
    {
      foreach (RoleIdeaAuthorisation roleIdeaAuthorisation in roleIdeaAuthorisations)
        await this.GetSharedIdeaAuthorisationAsync(roleIdeaAuthorisation);
    }

    public void GetBusinessRole(RoleIdeaAuthorisation roleIdeaAuthorisation)
    {
      if (roleIdeaAuthorisation == null)
        return;
      foreach (SilkFlo.Data.Core.Domain.Business.BusinessRole businessRole in (List<SilkFlo.Data.Core.Domain.Business.BusinessRole>) _dataSet.BusinessRoles.ToList())
      {
        if (roleIdeaAuthorisation.RoleId != null && businessRole.Id == roleIdeaAuthorisation.RoleId)
        {
          roleIdeaAuthorisation.Role = businessRole;
          break;
        }
      }
    }

    public async Task GetBusinessRoleAsync(RoleIdeaAuthorisation roleIdeaAuthorisation)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessRole(roleIdeaAuthorisation)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessRoles(
      IEnumerable<RoleIdeaAuthorisation> roleIdeaAuthorisations)
    {
      foreach (RoleIdeaAuthorisation ideaAuthorisation in roleIdeaAuthorisations)
        this.GetBusinessRole(ideaAuthorisation);
    }

    public async Task GetBusinessRolesAsync(
      IEnumerable<RoleIdeaAuthorisation> roleIdeaAuthorisations)
    {
      foreach (RoleIdeaAuthorisation roleIdeaAuthorisation in roleIdeaAuthorisations)
        await this.GetBusinessRoleAsync(roleIdeaAuthorisation);
    }

    public string Validate(RunningCost core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(RunningCost core)
    {
      string messages = "";
      if (core.AutomationType == null)
      {
        if (string.IsNullOrWhiteSpace(core.AutomationTypeId))
        {
          messages += "Business.RunningCost.AutomationTypeId: Automation Type missing; ";
        }
        else
        {
          AutomationType parent = _dataSet.SharedAutomationTypes.SingleOrDefault<AutomationType>((Func<AutomationType, bool>) (x => x.Id == core.AutomationTypeId));
          if (parent == null)
            messages += "Business.RunningCost.AutomationTypeId: Automation Type invalid; ";
          parent = (AutomationType) null;
        }
      }
      if (core.Client == null)
      {
        if (string.IsNullOrWhiteSpace(core.ClientId))
        {
          messages += "Business.RunningCost.ClientId: Client missing; ";
        }
        else
        {
          Client parent = _dataSet.BusinessClients.SingleOrDefault<Client>((Func<Client, bool>) (x => x.Id == core.ClientId));
          if (parent == null)
            messages += "Business.RunningCost.ClientId: Client invalid; ";
          parent = (Client) null;
        }
      }
      if (core.Frequency == null)
      {
        if (string.IsNullOrWhiteSpace(core.FrequencyId))
        {
          messages += "Business.RunningCost.FrequencyId: Frequency missing; ";
        }
        else
        {
          Period parent = _dataSet.SharedPeriods.SingleOrDefault<Period>((Func<Period, bool>) (x => x.Id == core.FrequencyId));
          if (parent == null)
            messages += "Business.RunningCost.FrequencyId: Frequency invalid; ";
          parent = (Period) null;
        }
      }
      if (string.IsNullOrWhiteSpace(core.LicenceType))
        messages += "Business.RunningCost.LicenceType: Licence Type missing; ";
      if (core.Vender == null)
      {
        if (string.IsNullOrWhiteSpace(core.VenderId))
        {
          messages += "Business.RunningCost.VenderId: Software Vender missing; ";
        }
        else
        {
          SoftwareVender parent = _dataSet.BusinessSoftwareVenders.SingleOrDefault<SoftwareVender>((Func<SoftwareVender, bool>) (x => x.Id == core.VenderId));
          if (parent == null)
            messages += "Business.RunningCost.VenderId: Software Vender invalid; ";
          parent = (SoftwareVender) null;
        }
      }
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(RunningCost core)
    {
      string str = "";
      if (_dataSet.BusinessRunningCosts.ToList<RunningCost>().FirstOrDefault<RunningCost>((Func<RunningCost, bool>) (x => x.Id != (core.Id ?? "") && x.AutomationTypeId == core.AutomationTypeId && x.ClientId == core.ClientId && x.VenderId == core.VenderId)) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this automation Type and client and software Vender.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(RunningCost core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<RunningCost> runningCosts)
    {
      try
      {
        foreach (RunningCost runningCost in runningCosts)
          this.Add(runningCost);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<RunningCost> runningCosts)
    {
      try
      {
        foreach (RunningCost runningCost in runningCosts)
          await this.AddAsync(runningCost);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(RunningCost core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          RunningCost runningCost = (RunningCost) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            runningCost = _dataSet.BusinessRunningCosts.SingleOrDefault<RunningCost>((Func<RunningCost, bool>) (x => x.Id == core.Id));
          if (runningCost == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessRunningCosts.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////runningCost.Update(core);
                        ///

                        _dataSet.Entry(runningCost).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        runningCost.Update(core);
                        _dataSet.BusinessRunningCosts.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          runningCost = (RunningCost) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(RunningCost core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(RunningCost runningCost, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(runningCost, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(RunningCost runningCost, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(runningCost, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<RunningCost> runningCosts, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (runningCosts == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (RunningCost runningCost in runningCosts.ToList<RunningCost>())
        {
          dataStoreResult = this.Delete(runningCost, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<RunningCost> runningCosts,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (runningCosts == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<RunningCost> lst = runningCosts.ToList<RunningCost>();
        foreach (RunningCost runningCost in lst)
        {
          RunningCost item = runningCost;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (RunningCost) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(RunningCost runningCost, Transaction transaction)
    {
      try
      {
        if (runningCost.Id == null)
          return DataStoreResult.Success;
        RunningCost entity = _dataSet.BusinessRunningCosts.SingleOrDefault<RunningCost>((Func<RunningCost, bool>) (x => x.Id == runningCost.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(runningCost, transaction);
        if (runningCost.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessRunningCosts.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The running cost (" + runningCost.ToString() + ") contains ";
        if (runningCost.Ideas.Count > 0)
          str += "ideas, ";
        if (runningCost.IdeaRunningCosts.Count > 0)
          str += "idea running costs, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      RunningCost runningCost,
      Transaction transaction)
    {
      try
      {
        if (runningCost.Id == null)
          return DataStoreResult.Success;
        RunningCost core = _dataSet.BusinessRunningCosts.SingleOrDefault<RunningCost>((Func<RunningCost, bool>) (x => x.Id == runningCost.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(runningCost, transaction);
        if (runningCost.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessRunningCosts.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The running cost (" + runningCost.ToString() + ") contains ";
        if (runningCost.Ideas.Count > 0)
          erorrMessage += "ideas, ";
        if (runningCost.IdeaRunningCosts.Count > 0)
          erorrMessage += "idea running costs, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessRunningCost(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessRunningCosts.SingleOrDefault<RunningCost>((Func<RunningCost, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The runningCost is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncBusinessRunningCost(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        RunningCost runningCost = _dataSet.BusinessRunningCosts.SingleOrDefault<RunningCost>((Func<RunningCost, bool>) (x => x.Id == Id));
        if (runningCost == null)
          throw new NotFoundException("The runningCost is not found");
        dataStoreResult = await this.DeleteAsync(runningCost, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    RunningCost runningCost, Transaction transaction)
    {
      if (runningCost == null)
        return;
      if (runningCost.Id == null)
      {
        runningCost.CanDelete = true;
      }
      else
      {
        this.GetBusinessIdeas(runningCost, transaction);
        this.GetBusinessIdeaRunningCosts(runningCost, transaction);
        runningCost.CanDelete = runningCost.Ideas.Count + runningCost.IdeaRunningCosts.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(RunningCost runningCost, Transaction transaction)
    {
      if (runningCost == null)
        return;
      if (runningCost.Id == null)
      {
        runningCost.CanDelete = true;
      }
      else
      {
        await this.GetBusinessIdeasAsync(runningCost, transaction);
        await this.GetBusinessIdeaRunningCostsAsync(runningCost, transaction);
        runningCost.CanDelete = runningCost.Ideas.Count + runningCost.IdeaRunningCosts.Count <= 0;
      }
    }

    public RunningCost FindBusinessRunningCost(
    
    string Id) => Id == null ? (RunningCost) null : _dataSet.BusinessRunningCosts.SingleOrDefault<RunningCost>((Func<RunningCost, bool>) (x => x.Id == Id));

    public async 
    
    Task<RunningCost> FindBusinessRunningCostAsync(string Id)
    {
      RunningCost runningCostAsync;
      try
      {
        runningCostAsync = await Task.Run<RunningCost>((Func<RunningCost>) (() => this.FindBusinessRunningCost(Id)));
      }
      catch
      {
        throw;
      }
      return runningCostAsync;
    }

    public List<RunningCost> GetBusinessRunningCostByDate(DateTime date) => _dataSet.BusinessRunningCosts.Where<RunningCost>((Func<RunningCost, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<RunningCost>();

    public async Task<List<RunningCost>> GetBusinessRunningCostByDateAsync(DateTime date)
    {
      List<RunningCost> runningCostByDateAsync;
      try
      {
        runningCostByDateAsync = await Task.Run<List<RunningCost>>((Func<List<RunningCost>>) (() => this.GetBusinessRunningCostByDate(date)));
      }
      catch
      {
        throw;
      }
      return runningCostByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<RunningCost> cores)
    {
      try
      {
        foreach (RunningCost core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<RunningCost> cores)
    {
      try
      {
        foreach (RunningCost core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(RunningCost runningCost)
    {
      if (runningCost == null)
        return;
      if (runningCost.CreatedById != null && runningCost.CreatedBy == null)
        runningCost.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == runningCost.CreatedById));
      if (runningCost.UpdatedById == null || runningCost.UpdatedBy != null)
        return;
      runningCost.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == runningCost.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(RunningCost runningCost)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(runningCost)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeas(RunningCost runningCost) => this.GetBusinessIdeas(runningCost, (Transaction) null);

    internal async Task GetBusinessIdeasAsync(RunningCost runningCost) => await this.GetBusinessIdeasAsync(runningCost, (Transaction) null);

    internal void GetBusinessIdeas(RunningCost runningCost, Transaction transaction)
    {
      if (runningCost != null)
        runningCost.Ideas = _dataSet.BusinessIdeas.Where<Idea>((Func<Idea, bool>) (m => m.RunningCostId == runningCost.Id)).ToList<Idea>();
      if (transaction == null)
        return;
      for (int index = runningCost.Ideas.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) runningCost.Ideas[index]) == Action.Delete)
          runningCost.Ideas.Remove(runningCost.Ideas[index]);
      }
    }

    internal async Task GetBusinessIdeasAsync(RunningCost runningCost, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeas(runningCost, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeaRunningCosts(RunningCost runningCost) => this.GetBusinessIdeaRunningCosts(runningCost, (Transaction) null);

    internal async Task GetBusinessIdeaRunningCostsAsync(RunningCost runningCost) => await this.GetBusinessIdeaRunningCostsAsync(runningCost, (Transaction) null);

    internal void GetBusinessIdeaRunningCosts(RunningCost runningCost, Transaction transaction)
    {
      if (runningCost != null)
        runningCost.IdeaRunningCosts = _dataSet.BusinessIdeaRunningCosts.Where<IdeaRunningCost>((Func<IdeaRunningCost, bool>) (m => m.RunningCostId == runningCost.Id)).ToList<IdeaRunningCost>();
      if (transaction == null)
        return;
      for (int index = runningCost.IdeaRunningCosts.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) runningCost.IdeaRunningCosts[index]) == Action.Delete)
          runningCost.IdeaRunningCosts.Remove(runningCost.IdeaRunningCosts[index]);
      }
    }

    internal async Task GetBusinessIdeaRunningCostsAsync(
      RunningCost runningCost,
      Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeaRunningCosts(runningCost, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedAutomationType(RunningCost runningCost)
    {
      if (runningCost == null)
        return;
      foreach (AutomationType sharedAutomationType in (List<AutomationType>) _dataSet.SharedAutomationTypes.ToList())
      {
        if (runningCost.AutomationTypeId != null && sharedAutomationType.Id == runningCost.AutomationTypeId)
        {
          runningCost.AutomationType = sharedAutomationType;
          break;
        }
      }
    }

    public async Task GetSharedAutomationTypeAsync(RunningCost runningCost)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedAutomationType(runningCost)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedAutomationTypes(IEnumerable<RunningCost> runningCosts)
    {
      foreach (RunningCost runningCost in runningCosts)
        this.GetSharedAutomationType(runningCost);
    }

    public async Task GetSharedAutomationTypesAsync(IEnumerable<RunningCost> runningCosts)
    {
      foreach (RunningCost runningCost in runningCosts)
        await this.GetSharedAutomationTypeAsync(runningCost);
    }

    public void GetBusinessClient(RunningCost runningCost)
    {
      if (runningCost == null)
        return;
      foreach (Client businessClient in (List<Client>) _dataSet.BusinessClients.ToList())
      {
        if (runningCost.ClientId != null && businessClient.Id == runningCost.ClientId)
        {
          runningCost.Client = businessClient;
          break;
        }
      }
    }

    public async Task GetBusinessClientAsync(RunningCost runningCost)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClient(runningCost)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClients(IEnumerable<RunningCost> runningCosts)
    {
      foreach (RunningCost runningCost in runningCosts)
        this.GetBusinessClient(runningCost);
    }

    public async Task GetBusinessClientsAsync(IEnumerable<RunningCost> runningCosts)
    {
      foreach (RunningCost runningCost in runningCosts)
        await this.GetBusinessClientAsync(runningCost);
    }

    public void GetSharedFrequency(RunningCost runningCost)
    {
      if (runningCost == null)
        return;
      foreach (Period sharedPeriod in (List<Period>) _dataSet.SharedPeriods.ToList())
      {
        if (runningCost.FrequencyId != null && sharedPeriod.Id == runningCost.FrequencyId)
        {
          runningCost.Frequency = sharedPeriod;
          break;
        }
      }
    }

    public async Task GetSharedFrequencyAsync(RunningCost runningCost)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedFrequency(runningCost)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedFrequencies(IEnumerable<RunningCost> runningCosts)
    {
      foreach (RunningCost runningCost in runningCosts)
        this.GetSharedFrequency(runningCost);
    }

    public async Task GetSharedFrequenciesAsync(IEnumerable<RunningCost> runningCosts)
    {
      foreach (RunningCost runningCost in runningCosts)
        await this.GetSharedFrequencyAsync(runningCost);
    }

    public void GetBusinessVender(RunningCost runningCost)
    {
      if (runningCost == null)
        return;
      foreach (SoftwareVender businessSoftwareVender in (List<SoftwareVender>) _dataSet.BusinessSoftwareVenders.ToList())
      {
        if (runningCost.VenderId != null && businessSoftwareVender.Id == runningCost.VenderId)
        {
          runningCost.Vender = businessSoftwareVender;
          break;
        }
      }
    }

    public async Task GetBusinessVenderAsync(RunningCost runningCost)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessVender(runningCost)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessVenders(IEnumerable<RunningCost> runningCosts)
    {
      foreach (RunningCost runningCost in runningCosts)
        this.GetBusinessVender(runningCost);
    }

    public async Task GetBusinessVendersAsync(IEnumerable<RunningCost> runningCosts)
    {
      foreach (RunningCost runningCost in runningCosts)
        await this.GetBusinessVenderAsync(runningCost);
    }

    public string Validate(SoftwareVender core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(SoftwareVender core)
    {
      string messages = "";
      if (core.Client == null)
      {
        if (string.IsNullOrWhiteSpace(core.ClientId))
        {
          messages += "Business.SoftwareVender.ClientId: Client missing; ";
        }
        else
        {
          Client parent = _dataSet.BusinessClients.SingleOrDefault<Client>((Func<Client, bool>) (x => x.Id == core.ClientId));
          if (parent == null)
            messages += "Business.SoftwareVender.ClientId: Client invalid; ";
          parent = (Client) null;
        }
      }
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Business.SoftwareVender.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(SoftwareVender core)
    {
      string str = "";
      if (_dataSet.BusinessSoftwareVenders.ToList<SoftwareVender>().FirstOrDefault<SoftwareVender>((Func<SoftwareVender, bool>) (x => x.Id != (core.Id ?? "") && x.ClientId == core.ClientId && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this client and name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(SoftwareVender core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<SoftwareVender> softwareVenders)
    {
      try
      {
        foreach (SoftwareVender softwareVender in softwareVenders)
          this.Add(softwareVender);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<SoftwareVender> softwareVenders)
    {
      try
      {
        foreach (SoftwareVender softwareVender in softwareVenders)
          await this.AddAsync(softwareVender);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(SoftwareVender core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          SoftwareVender softwareVender = (SoftwareVender) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            softwareVender = _dataSet.BusinessSoftwareVenders.SingleOrDefault<SoftwareVender>((Func<SoftwareVender, bool>) (x => x.Id == core.Id));
          if (softwareVender == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessSoftwareVenders.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////softwareVender.Update(core);
                        ///

                        _dataSet.Entry(softwareVender).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        softwareVender.Update(core);
                        _dataSet.BusinessSoftwareVenders.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          softwareVender = (SoftwareVender) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(SoftwareVender core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(SoftwareVender softwareVender, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(softwareVender, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      SoftwareVender softwareVender,
      bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(softwareVender, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<SoftwareVender> softwareVenders, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (softwareVenders == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (SoftwareVender softwareVender in softwareVenders.ToList<SoftwareVender>())
        {
          dataStoreResult = this.Delete(softwareVender, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<SoftwareVender> softwareVenders,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (softwareVenders == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<SoftwareVender> lst = softwareVenders.ToList<SoftwareVender>();
        foreach (SoftwareVender softwareVender in lst)
        {
          SoftwareVender item = softwareVender;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (SoftwareVender) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(SoftwareVender softwareVender, Transaction transaction)
    {
      try
      {
        if (softwareVender.Id == null)
          return DataStoreResult.Success;
        SoftwareVender entity = _dataSet.BusinessSoftwareVenders.SingleOrDefault<SoftwareVender>((Func<SoftwareVender, bool>) (x => x.Id == softwareVender.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(softwareVender, transaction);
        if (softwareVender.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessSoftwareVenders.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The software vender (" + softwareVender.ToString() + ") contains ";
        if (softwareVender.RunningCosts.Count > 0)
          str += "running costs, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      SoftwareVender softwareVender,
      Transaction transaction)
    {
      try
      {
        if (softwareVender.Id == null)
          return DataStoreResult.Success;
        SoftwareVender core = _dataSet.BusinessSoftwareVenders.SingleOrDefault<SoftwareVender>((Func<SoftwareVender, bool>) (x => x.Id == softwareVender.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(softwareVender, transaction);
        if (softwareVender.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessSoftwareVenders.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The software vender (" + softwareVender.ToString() + ") contains ";
        if (softwareVender.RunningCosts.Count > 0)
          erorrMessage += "running costs, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessSoftwareVender(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessSoftwareVenders.SingleOrDefault<SoftwareVender>((Func<SoftwareVender, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The softwareVender is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncBusinessSoftwareVender(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        SoftwareVender softwareVender = _dataSet.BusinessSoftwareVenders.SingleOrDefault<SoftwareVender>((Func<SoftwareVender, bool>) (x => x.Id == Id));
        if (softwareVender == null)
          throw new NotFoundException("The softwareVender is not found");
        dataStoreResult = await this.DeleteAsync(softwareVender, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    SoftwareVender softwareVender, Transaction transaction)
    {
      if (softwareVender == null)
        return;
      if (softwareVender.Id == null)
      {
        softwareVender.CanDelete = true;
      }
      else
      {
        this.GetBusinessRunningCosts(softwareVender, transaction);
        softwareVender.CanDelete = softwareVender.RunningCosts.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(
      SoftwareVender softwareVender,
      Transaction transaction)
    {
      if (softwareVender == null)
        return;
      if (softwareVender.Id == null)
      {
        softwareVender.CanDelete = true;
      }
      else
      {
        await this.GetBusinessRunningCostsAsync(softwareVender, transaction);
        softwareVender.CanDelete = softwareVender.RunningCosts.Count <= 0;
      }
    }

    public SoftwareVender FindBusinessSoftwareVender(
    
    string Id) => Id == null ? (SoftwareVender) null : _dataSet.BusinessSoftwareVenders.SingleOrDefault<SoftwareVender>((Func<SoftwareVender, bool>) (x => x.Id == Id));

    public async 
    
    Task<SoftwareVender> FindBusinessSoftwareVenderAsync(string Id)
    {
      SoftwareVender softwareVenderAsync;
      try
      {
        softwareVenderAsync = await Task.Run<SoftwareVender>((Func<SoftwareVender>) (() => this.FindBusinessSoftwareVender(Id)));
      }
      catch
      {
        throw;
      }
      return softwareVenderAsync;
    }

    public List<SoftwareVender> GetBusinessSoftwareVenderByDate(DateTime date) => _dataSet.BusinessSoftwareVenders.Where<SoftwareVender>((Func<SoftwareVender, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<SoftwareVender>();

    public async Task<List<SoftwareVender>> GetBusinessSoftwareVenderByDateAsync(DateTime date)
    {
      List<SoftwareVender> venderByDateAsync;
      try
      {
        venderByDateAsync = await Task.Run<List<SoftwareVender>>((Func<List<SoftwareVender>>) (() => this.GetBusinessSoftwareVenderByDate(date)));
      }
      catch
      {
        throw;
      }
      return venderByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<SoftwareVender> cores)
    {
      try
      {
        foreach (SoftwareVender core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<SoftwareVender> cores)
    {
      try
      {
        foreach (SoftwareVender core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(SoftwareVender softwareVender)
    {
      if (softwareVender == null)
        return;
      if (softwareVender.CreatedById != null && softwareVender.CreatedBy == null)
        softwareVender.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == softwareVender.CreatedById));
      if (softwareVender.UpdatedById == null || softwareVender.UpdatedBy != null)
        return;
      softwareVender.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == softwareVender.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(SoftwareVender softwareVender)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(softwareVender)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessRunningCosts(SoftwareVender vender) => this.GetBusinessRunningCosts(vender, (Transaction) null);

    internal async Task GetBusinessRunningCostsAsync(SoftwareVender vender) => await this.GetBusinessRunningCostsAsync(vender, (Transaction) null);

    internal void GetBusinessRunningCosts(SoftwareVender vender, Transaction transaction)
    {
      if (vender != null)
        vender.RunningCosts = _dataSet.BusinessRunningCosts.Where<RunningCost>((Func<RunningCost, bool>) (m => m.VenderId == vender.Id)).ToList<RunningCost>();
      if (transaction == null)
        return;
      for (int index = vender.RunningCosts.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) vender.RunningCosts[index]) == Action.Delete)
          vender.RunningCosts.Remove(vender.RunningCosts[index]);
      }
    }

    internal async Task GetBusinessRunningCostsAsync(SoftwareVender vender, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessRunningCosts(vender, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClient(SoftwareVender softwareVender)
    {
      if (softwareVender == null)
        return;
      foreach (Client businessClient in (List<Client>) _dataSet.BusinessClients.ToList())
      {
        if (softwareVender.ClientId != null && businessClient.Id == softwareVender.ClientId)
        {
          softwareVender.Client = businessClient;
          break;
        }
      }
    }

    public async Task GetBusinessClientAsync(SoftwareVender softwareVender)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClient(softwareVender)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClients(IEnumerable<SoftwareVender> softwareVenders)
    {
      foreach (SoftwareVender softwareVender in softwareVenders)
        this.GetBusinessClient(softwareVender);
    }

    public async Task GetBusinessClientsAsync(IEnumerable<SoftwareVender> softwareVenders)
    {
      foreach (SoftwareVender softwareVender in softwareVenders)
        await this.GetBusinessClientAsync(softwareVender);
    }

    public string Validate(Team core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(Team core)
    {
      string messages = "";
      if (core.Client == null)
      {
        if (string.IsNullOrWhiteSpace(core.ClientId))
        {
          messages += "Business.Team.ClientId: Client missing; ";
        }
        else
        {
          Client parent = _dataSet.BusinessClients.SingleOrDefault<Client>((Func<Client, bool>) (x => x.Id == core.ClientId));
          if (parent == null)
            messages += "Business.Team.ClientId: Client invalid; ";
          parent = (Client) null;
        }
      }
      if (core.Department == null)
      {
        if (string.IsNullOrWhiteSpace(core.DepartmentId))
        {
          messages += "Business.Team.DepartmentId: Department missing; ";
        }
        else
        {
          Department parent = _dataSet.BusinessDepartments.SingleOrDefault<Department>((Func<Department, bool>) (x => x.Id == core.DepartmentId));
          if (parent == null)
            messages += "Business.Team.DepartmentId: Department invalid; ";
          parent = (Department) null;
        }
      }
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Business.Team.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(Team core)
    {
      string str = "";
      if (_dataSet.BusinessTeams.ToList<Team>().FirstOrDefault<Team>((Func<Team, bool>) (x => x.Id != (core.Id ?? "") && x.ClientId == core.ClientId && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this client and name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(Team core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<Team> teams)
    {
      try
      {
        foreach (Team team in teams)
          this.Add(team);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Team> teams)
    {
      try
      {
        foreach (Team team in teams)
          await this.AddAsync(team);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Team core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          Team team = (Team) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            team = _dataSet.BusinessTeams.SingleOrDefault<Team>((Func<Team, bool>) (x => x.Id == core.Id));
          if (team == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessTeams.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////team.Update(core);
                        ///

                        _dataSet.Entry(team).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        team.Update(core);
                        _dataSet.BusinessTeams.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          team = (Team) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Team core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Team team, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(team, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Team team, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(team, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Team> teams, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (teams == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Team team in teams.ToList<Team>())
        {
          dataStoreResult = this.Delete(team, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<Team> teams, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (teams == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Team> lst = teams.ToList<Team>();
        foreach (Team team in lst)
        {
          Team item = team;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Team) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Team team, Transaction transaction)
    {
      try
      {
        if (team.Id == null)
          return DataStoreResult.Success;
        Team entity = _dataSet.BusinessTeams.SingleOrDefault<Team>((Func<Team, bool>) (x => x.Id == team.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.GetBusinessProcesses(team);
        foreach (Process process in team.Processes)
        {
          int num = (int) this.Delete(process, transaction);
        }
        this.RefreshCanDelete(team, transaction);
        if (team.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessTeams.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The business area (" + team.ToString() + ") contains ";
        if (team.Ideas.Count > 0)
          str += "ideas, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Team team, Transaction transaction)
    {
      try
      {
        if (team.Id == null)
          return DataStoreResult.Success;
        Team core = _dataSet.BusinessTeams.SingleOrDefault<Team>((Func<Team, bool>) (x => x.Id == team.Id));
        if (core == null)
          return DataStoreResult.Success;
        this.GetBusinessProcesses(team);
        foreach (Process m in team.Processes)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        await this.RefreshCanDeleteAsync(team, transaction);
        if (team.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessTeams.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The business area (" + team.ToString() + ") contains ";
        if (team.Ideas.Count > 0)
          erorrMessage += "ideas, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessTeam(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessTeams.SingleOrDefault<Team>((Func<Team, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The team is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncBusinessTeam(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Team team = _dataSet.BusinessTeams.SingleOrDefault<Team>((Func<Team, bool>) (x => x.Id == Id));
        if (team == null)
          throw new NotFoundException("The team is not found");
        dataStoreResult = await this.DeleteAsync(team, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    Team team, Transaction transaction)
    {
      if (team == null)
        return;
      if (team.Id == null)
      {
        team.CanDelete = true;
      }
      else
      {
        this.GetBusinessIdeas(team, transaction);
        this.GetBusinessProcesses(team, transaction);
        team.CanDelete = team.Ideas.Count + team.Processes.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(Team team, Transaction transaction)
    {
      if (team == null)
        return;
      if (team.Id == null)
      {
        team.CanDelete = true;
      }
      else
      {
        await this.GetBusinessIdeasAsync(team, transaction);
        team.CanDelete = team.Ideas.Count <= 0;
      }
    }

    public Team FindBusinessTeam(
    
    string Id) => Id == null ? (Team) null : _dataSet.BusinessTeams.SingleOrDefault<Team>((Func<Team, bool>) (x => x.Id == Id));

    public async 
    
    Task<Team> FindBusinessTeamAsync(string Id)
    {
      Team businessTeamAsync;
      try
      {
        businessTeamAsync = await Task.Run<Team>((Func<Team>) (() => this.FindBusinessTeam(Id)));
      }
      catch
      {
        throw;
      }
      return businessTeamAsync;
    }

    public List<Team> GetBusinessTeamByDate(DateTime date) => _dataSet.BusinessTeams.Where<Team>((Func<Team, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Team>();

    public async Task<List<Team>> GetBusinessTeamByDateAsync(DateTime date)
    {
      List<Team> businessTeamByDateAsync;
      try
      {
        businessTeamByDateAsync = await Task.Run<List<Team>>((Func<List<Team>>) (() => this.GetBusinessTeamByDate(date)));
      }
      catch
      {
        throw;
      }
      return businessTeamByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Team> cores)
    {
      try
      {
        foreach (Team core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Team> cores)
    {
      try
      {
        foreach (Team core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Team team)
    {
      if (team == null)
        return;
      if (team.CreatedById != null && team.CreatedBy == null)
        team.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == team.CreatedById));
      if (team.UpdatedById == null || team.UpdatedBy != null)
        return;
      team.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == team.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Team team)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(team)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeas(Team team) => this.GetBusinessIdeas(team, (Transaction) null);

    internal async Task GetBusinessIdeasAsync(Team team) => await this.GetBusinessIdeasAsync(team, (Transaction) null);

    internal void GetBusinessIdeas(Team team, Transaction transaction)
    {
      if (team != null)
        team.Ideas = _dataSet.BusinessIdeas.Where<Idea>((Func<Idea, bool>) (m => m.TeamId == team.Id)).ToList<Idea>();
      if (transaction == null)
        return;
      for (int index = team.Ideas.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) team.Ideas[index]) == Action.Delete)
          team.Ideas.Remove(team.Ideas[index]);
      }
    }

    internal async Task GetBusinessIdeasAsync(Team team, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeas(team, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessProcesses(Team team) => this.GetBusinessProcesses(team, (Transaction) null);

    internal async Task GetBusinessProcessesAsync(Team team) => await this.GetBusinessProcessesAsync(team, (Transaction) null);

    internal void GetBusinessProcesses(Team team, Transaction transaction)
    {
      if (team != null)
        team.Processes = _dataSet.BusinessProcesses.Where<Process>((Func<Process, bool>) (m => m.TeamId == team.Id)).ToList<Process>();
      if (transaction == null)
        return;
      for (int index = team.Processes.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) team.Processes[index]) == Action.Delete)
          team.Processes.Remove(team.Processes[index]);
      }
    }

    internal async Task GetBusinessProcessesAsync(Team team, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessProcesses(team, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClient(Team team)
    {
      if (team == null)
        return;
      foreach (Client businessClient in (List<Client>) _dataSet.BusinessClients.ToList())
      {
        if (team.ClientId != null && businessClient.Id == team.ClientId)
        {
          team.Client = businessClient;
          break;
        }
      }
    }

    public async Task GetBusinessClientAsync(Team team)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClient(team)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClients(IEnumerable<Team> teams)
    {
      foreach (Team team in teams)
        this.GetBusinessClient(team);
    }

    public async Task GetBusinessClientsAsync(IEnumerable<Team> teams)
    {
      foreach (Team team in teams)
        await this.GetBusinessClientAsync(team);
    }

    public void GetBusinessDepartment(Team team)
    {
      if (team == null)
        return;
      foreach (Department businessDepartment in (List<Department>) _dataSet.BusinessDepartments.ToList())
      {
        if (team.DepartmentId != null && businessDepartment.Id == team.DepartmentId)
        {
          team.Department = businessDepartment;
          break;
        }
      }
    }

    public async Task GetBusinessDepartmentAsync(Team team)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessDepartment(team)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessDepartments(IEnumerable<Team> teams)
    {
      foreach (Team team in teams)
        this.GetBusinessDepartment(team);
    }

    public async Task GetBusinessDepartmentsAsync(IEnumerable<Team> teams)
    {
      foreach (Team team in teams)
        await this.GetBusinessDepartmentAsync(team);
    }

    public string Validate(UserAuthorisation core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(UserAuthorisation core)
    {
      string messages = "";
      if (core.CollaboratorRole == null)
      {
        if (string.IsNullOrWhiteSpace(core.CollaboratorRoleId))
        {
          messages += "Business.UserAuthorisation.CollaboratorRoleId: Collaborator Role missing; ";
        }
        else
        {
          CollaboratorRole parent = _dataSet.BusinessCollaboratorRoles.SingleOrDefault<CollaboratorRole>((Func<CollaboratorRole, bool>) (x => x.Id == core.CollaboratorRoleId));
          if (parent == null)
            messages += "Business.UserAuthorisation.CollaboratorRoleId: Collaborator Role invalid; ";
          parent = (CollaboratorRole) null;
        }
      }
      if (core.IdeaAuthorisation == null)
      {
        if (string.IsNullOrWhiteSpace(core.IdeaAuthorisationId))
        {
          messages += "Business.UserAuthorisation.IdeaAuthorisationId: Idea Authorisation missing; ";
        }
        else
        {
          IdeaAuthorisation parent = _dataSet.SharedIdeaAuthorisations.SingleOrDefault<IdeaAuthorisation>((Func<IdeaAuthorisation, bool>) (x => x.Id == core.IdeaAuthorisationId));
          if (parent == null)
            messages += "Business.UserAuthorisation.IdeaAuthorisationId: Idea Authorisation invalid; ";
          parent = (IdeaAuthorisation) null;
        }
      }
      if (core.Idea == null)
      {
        if (string.IsNullOrWhiteSpace(core.IdeaId))
        {
          messages += "Business.UserAuthorisation.IdeaId: Idea missing; ";
        }
        else
        {
          Idea parent = _dataSet.BusinessIdeas.SingleOrDefault<Idea>((Func<Idea, bool>) (x => x.Id == core.IdeaId));
          if (parent == null)
            messages += "Business.UserAuthorisation.IdeaId: Idea invalid; ";
          parent = (Idea) null;
        }
      }
      if (core.User == null)
      {
        if (string.IsNullOrWhiteSpace(core.UserId))
        {
          messages += "Business.UserAuthorisation.UserId: User missing; ";
        }
        else
        {
          User parent = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (x => x.Id == core.UserId));
          if (parent == null)
            messages += "Business.UserAuthorisation.UserId: User invalid; ";
          parent = (User) null;
        }
      }
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(UserAuthorisation core)
    {
      string str = "";
      if (_dataSet.BusinessUserAuthorisations.ToList<UserAuthorisation>().FirstOrDefault<UserAuthorisation>((Func<UserAuthorisation, bool>) (x => x.Id != (core.Id ?? "") && x.IdeaAuthorisationId == core.IdeaAuthorisationId && x.IdeaId == core.IdeaId && x.UserId == core.UserId)) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this idea Authorisation and idea and user.";
      }
      if (_dataSet.BusinessUserAuthorisations.ToList<UserAuthorisation>().FirstOrDefault<UserAuthorisation>((Func<UserAuthorisation, bool>) (x => x.Id != (core.Id ?? "") && x.CollaboratorRoleId == core.CollaboratorRoleId)) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this collaborator Role.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(UserAuthorisation core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<UserAuthorisation> userAuthorisations)
    {
      try
      {
        foreach (UserAuthorisation userAuthorisation in userAuthorisations)
          this.Add(userAuthorisation);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<UserAuthorisation> userAuthorisations)
    {
      try
      {
        foreach (UserAuthorisation userAuthorisation in userAuthorisations)
          await this.AddAsync(userAuthorisation);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(UserAuthorisation core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str3 = messageIsUnique;
          string str4 = await IsUniqueAsync(core);
          messageIsUnique = str3 + str4;
          str3 = (string) null;
          str4 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          UserAuthorisation userAuthorisation = (UserAuthorisation) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            userAuthorisation = _dataSet.BusinessUserAuthorisations.SingleOrDefault<UserAuthorisation>((Func<UserAuthorisation, bool>) (x => x.Id == core.Id));
          if (userAuthorisation == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessUserAuthorisations.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////userAuthorisation.Update(core);
                        ///

                        _dataSet.Entry(userAuthorisation).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        userAuthorisation.Update(core);
                        _dataSet.BusinessUserAuthorisations.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          userAuthorisation = (UserAuthorisation) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(UserAuthorisation core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(UserAuthorisation userAuthorisation, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(userAuthorisation, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      UserAuthorisation userAuthorisation,
      bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(userAuthorisation, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(
      IEnumerable<UserAuthorisation> userAuthorisations,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (userAuthorisations == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (UserAuthorisation userAuthorisation in userAuthorisations.ToList<UserAuthorisation>())
        {
          dataStoreResult = this.Delete(userAuthorisation, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<UserAuthorisation> userAuthorisations,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (userAuthorisations == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<UserAuthorisation> lst = userAuthorisations.ToList<UserAuthorisation>();
        foreach (UserAuthorisation userAuthorisation in lst)
        {
          UserAuthorisation item = userAuthorisation;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (UserAuthorisation) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(UserAuthorisation userAuthorisation, Transaction transaction)
    {
      try
      {
        if (userAuthorisation.Id == null)
          return DataStoreResult.Success;
        UserAuthorisation entity = _dataSet.BusinessUserAuthorisations.SingleOrDefault<UserAuthorisation>((Func<UserAuthorisation, bool>) (x => x.Id == userAuthorisation.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(userAuthorisation, transaction);
        if (!userAuthorisation.CanDelete)
          throw new ChildDependencyException("The user authorisation (" + userAuthorisation.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.BusinessUserAuthorisations.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      UserAuthorisation userAuthorisation,
      Transaction transaction)
    {
      try
      {
        if (userAuthorisation.Id == null)
          return DataStoreResult.Success;
        UserAuthorisation core = _dataSet.BusinessUserAuthorisations.SingleOrDefault<UserAuthorisation>((Func<UserAuthorisation, bool>) (x => x.Id == userAuthorisation.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(userAuthorisation, transaction);
        if (userAuthorisation.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessUserAuthorisations.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The user authorisation (" + userAuthorisation.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessUserAuthorisation(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessUserAuthorisations.SingleOrDefault<UserAuthorisation>((Func<UserAuthorisation, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The userAuthorisation is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncBusinessUserAuthorisation(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        UserAuthorisation userAuthorisation = _dataSet.BusinessUserAuthorisations.SingleOrDefault<UserAuthorisation>((Func<UserAuthorisation, bool>) (x => x.Id == Id));
        if (userAuthorisation == null)
          throw new NotFoundException("The userAuthorisation is not found");
        dataStoreResult = await this.DeleteAsync(userAuthorisation, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    UserAuthorisation userAuthorisation, Transaction transaction)
    {
      if (userAuthorisation == null)
        return;
      userAuthorisation.CanDelete = true;
    }

    internal async Task RefreshCanDeleteAsync(
      UserAuthorisation userAuthorisation,
      Transaction transaction)
    {
      if (userAuthorisation == null)
        return;
      userAuthorisation.CanDelete = true;
    }

    public UserAuthorisation FindBusinessUserAuthorisation(
    
    string Id) => Id == null ? (UserAuthorisation) null : _dataSet.BusinessUserAuthorisations.SingleOrDefault<UserAuthorisation>((Func<UserAuthorisation, bool>) (x => x.Id == Id));

    public async 
    
    Task<UserAuthorisation> FindBusinessUserAuthorisationAsync(string Id)
    {
      UserAuthorisation authorisationAsync;
      try
      {
        authorisationAsync = await Task.Run<UserAuthorisation>((Func<UserAuthorisation>) (() => this.FindBusinessUserAuthorisation(Id)));
      }
      catch
      {
        throw;
      }
      return authorisationAsync;
    }

    public List<UserAuthorisation> GetBusinessUserAuthorisationByDate(DateTime date) => _dataSet.BusinessUserAuthorisations.Where<UserAuthorisation>((Func<UserAuthorisation, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<UserAuthorisation>();

    public async Task<List<UserAuthorisation>> GetBusinessUserAuthorisationByDateAsync(DateTime date)
    {
      List<UserAuthorisation> authorisationByDateAsync;
      try
      {
        authorisationByDateAsync = await Task.Run<List<UserAuthorisation>>((Func<List<UserAuthorisation>>) (() => this.GetBusinessUserAuthorisationByDate(date)));
      }
      catch
      {
        throw;
      }
      return authorisationByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<UserAuthorisation> cores)
    {
      try
      {
        foreach (UserAuthorisation core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<UserAuthorisation> cores)
    {
      try
      {
        foreach (UserAuthorisation core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(UserAuthorisation userAuthorisation)
    {
      if (userAuthorisation == null)
        return;
      if (userAuthorisation.CreatedById != null && userAuthorisation.CreatedBy == null)
        userAuthorisation.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == userAuthorisation.CreatedById));
      if (userAuthorisation.UpdatedById == null || userAuthorisation.UpdatedBy != null)
        return;
      userAuthorisation.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == userAuthorisation.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(UserAuthorisation userAuthorisation)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(userAuthorisation)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessCollaboratorRole(UserAuthorisation userAuthorisation)
    {
      if (userAuthorisation == null)
        return;
      foreach (CollaboratorRole collaboratorRole in (List<CollaboratorRole>) _dataSet.BusinessCollaboratorRoles.ToList())
      {
        if (userAuthorisation.CollaboratorRoleId != null && collaboratorRole.Id == userAuthorisation.CollaboratorRoleId)
        {
          userAuthorisation.CollaboratorRole = collaboratorRole;
          break;
        }
      }
    }

    public async Task GetBusinessCollaboratorRoleAsync(UserAuthorisation userAuthorisation)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessCollaboratorRole(userAuthorisation)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessCollaboratorRoles(IEnumerable<UserAuthorisation> userAuthorisations)
    {
      foreach (UserAuthorisation userAuthorisation in userAuthorisations)
        this.GetBusinessCollaboratorRole(userAuthorisation);
    }

    public async Task GetBusinessCollaboratorRolesAsync(
      IEnumerable<UserAuthorisation> userAuthorisations)
    {
      foreach (UserAuthorisation userAuthorisation in userAuthorisations)
        await this.GetBusinessCollaboratorRoleAsync(userAuthorisation);
    }

    public void GetSharedIdeaAuthorisation(UserAuthorisation userAuthorisation)
    {
      if (userAuthorisation == null)
        return;
      foreach (IdeaAuthorisation ideaAuthorisation in (List<IdeaAuthorisation>) _dataSet.SharedIdeaAuthorisations.ToList())
      {
        if (userAuthorisation.IdeaAuthorisationId != null && ideaAuthorisation.Id == userAuthorisation.IdeaAuthorisationId)
        {
          userAuthorisation.IdeaAuthorisation = ideaAuthorisation;
          break;
        }
      }
    }

    public async Task GetSharedIdeaAuthorisationAsync(UserAuthorisation userAuthorisation)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedIdeaAuthorisation(userAuthorisation)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedIdeaAuthorisations(IEnumerable<UserAuthorisation> userAuthorisations)
    {
      foreach (UserAuthorisation userAuthorisation in userAuthorisations)
        this.GetSharedIdeaAuthorisation(userAuthorisation);
    }

    public async Task GetSharedIdeaAuthorisationsAsync(
      IEnumerable<UserAuthorisation> userAuthorisations)
    {
      foreach (UserAuthorisation userAuthorisation in userAuthorisations)
        await this.GetSharedIdeaAuthorisationAsync(userAuthorisation);
    }

    public void GetBusinessIdea(UserAuthorisation userAuthorisation)
    {
      if (userAuthorisation == null)
        return;
      foreach (Idea businessIdea in (List<Idea>) _dataSet.BusinessIdeas.ToList())
      {
        if (userAuthorisation.IdeaId != null && businessIdea.Id == userAuthorisation.IdeaId)
        {
          userAuthorisation.Idea = businessIdea;
          break;
        }
      }
    }

    public async Task GetBusinessIdeaAsync(UserAuthorisation userAuthorisation)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdea(userAuthorisation)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessIdeas(IEnumerable<UserAuthorisation> userAuthorisations)
    {
      foreach (UserAuthorisation userAuthorisation in userAuthorisations)
        this.GetBusinessIdea(userAuthorisation);
    }

    public async Task GetBusinessIdeasAsync(IEnumerable<UserAuthorisation> userAuthorisations)
    {
      foreach (UserAuthorisation userAuthorisation in userAuthorisations)
        await this.GetBusinessIdeaAsync(userAuthorisation);
    }

    public void GetUser(UserAuthorisation userAuthorisation)
    {
      if (userAuthorisation == null)
        return;
      foreach (User user in (List<User>) _dataSet.Users.ToList())
      {
        if (userAuthorisation.UserId != null && user.Id == userAuthorisation.UserId)
        {
          userAuthorisation.User = user;
          break;
        }
      }
    }

    public async Task GetUserAsync(UserAuthorisation userAuthorisation)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetUser(userAuthorisation)));
      }
      catch
      {
        throw;
      }
    }

    public void GetUsers(IEnumerable<UserAuthorisation> userAuthorisations)
    {
      foreach (UserAuthorisation userAuthorisation in userAuthorisations)
        this.GetUser(userAuthorisation);
    }

    public async Task GetUsersAsync(IEnumerable<UserAuthorisation> userAuthorisations)
    {
      foreach (UserAuthorisation userAuthorisation in userAuthorisations)
        await this.GetUserAsync(userAuthorisation);
    }

    public string Validate(SilkFlo.Data.Core.Domain.Business.Version core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(SilkFlo.Data.Core.Domain.Business.Version core)
    {
      string messages = "";
      if (core.Application == null)
      {
        if (string.IsNullOrWhiteSpace(core.ApplicationId))
        {
          messages += "Business.Version.ApplicationId: Application missing; ";
        }
        else
        {
          SilkFlo.Data.Core.Domain.Business.Application parent = _dataSet.BusinessApplications.SingleOrDefault<SilkFlo.Data.Core.Domain.Business.Application>((Func<SilkFlo.Data.Core.Domain.Business.Application, bool>) (x => x.Id == core.ApplicationId));
          if (parent == null)
            messages += "Business.Version.ApplicationId: Application invalid; ";
          parent = (SilkFlo.Data.Core.Domain.Business.Application) null;
        }
      }
      if (core.Client == null)
      {
        if (string.IsNullOrWhiteSpace(core.ClientId))
        {
          messages += "Business.Version.ClientId: Client missing; ";
        }
        else
        {
          Client parent = _dataSet.BusinessClients.SingleOrDefault<Client>((Func<Client, bool>) (x => x.Id == core.ClientId));
          if (parent == null)
            messages += "Business.Version.ClientId: Client invalid; ";
          parent = (Client) null;
        }
      }
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Business.Version.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(SilkFlo.Data.Core.Domain.Business.Version core)
    {
      string str = "";
      if (_dataSet.BusinessVersions.ToList<SilkFlo.Data.Core.Domain.Business.Version>().FirstOrDefault<SilkFlo.Data.Core.Domain.Business.Version>((Func<SilkFlo.Data.Core.Domain.Business.Version, bool>) (x => x.Id != (core.Id ?? "") && x.ApplicationId == core.ApplicationId && x.ClientId == core.ClientId && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this application and client and name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(SilkFlo.Data.Core.Domain.Business.Version core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<SilkFlo.Data.Core.Domain.Business.Version> versions)
    {
      try
      {
        foreach (SilkFlo.Data.Core.Domain.Business.Version version in versions)
          this.Add(version);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<SilkFlo.Data.Core.Domain.Business.Version> versions)
    {
      try
      {
        foreach (SilkFlo.Data.Core.Domain.Business.Version version in versions)
          await this.AddAsync(version);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(SilkFlo.Data.Core.Domain.Business.Version core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          SilkFlo.Data.Core.Domain.Business.Version version = (SilkFlo.Data.Core.Domain.Business.Version) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            version = _dataSet.BusinessVersions.SingleOrDefault<SilkFlo.Data.Core.Domain.Business.Version>((Func<SilkFlo.Data.Core.Domain.Business.Version, bool>) (x => x.Id == core.Id));
          if (version == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessVersions.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////version.Update(core);
                        ///

                        _dataSet.Entry(version).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        version.Update(core);
                        _dataSet.BusinessVersions.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          version = (SilkFlo.Data.Core.Domain.Business.Version) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(SilkFlo.Data.Core.Domain.Business.Version core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(SilkFlo.Data.Core.Domain.Business.Version version, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(version, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(SilkFlo.Data.Core.Domain.Business.Version version, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(version, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<SilkFlo.Data.Core.Domain.Business.Version> versions, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (versions == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (SilkFlo.Data.Core.Domain.Business.Version version in versions.ToList<SilkFlo.Data.Core.Domain.Business.Version>())
        {
          dataStoreResult = this.Delete(version, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<SilkFlo.Data.Core.Domain.Business.Version> versions,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (versions == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<SilkFlo.Data.Core.Domain.Business.Version> lst = versions.ToList<SilkFlo.Data.Core.Domain.Business.Version>();
        foreach (SilkFlo.Data.Core.Domain.Business.Version version in lst)
        {
          SilkFlo.Data.Core.Domain.Business.Version item = version;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (SilkFlo.Data.Core.Domain.Business.Version) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(SilkFlo.Data.Core.Domain.Business.Version version, Transaction transaction)
    {
      try
      {
        if (version.Id == null)
          return DataStoreResult.Success;
        SilkFlo.Data.Core.Domain.Business.Version entity = _dataSet.BusinessVersions.SingleOrDefault<SilkFlo.Data.Core.Domain.Business.Version>((Func<SilkFlo.Data.Core.Domain.Business.Version, bool>) (x => x.Id == version.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.GetBusinessIdeaApplicationVersions(version);
        foreach (IdeaApplicationVersion applicationVersion in version.IdeaApplicationVersions)
        {
          int num = (int) this.Delete(applicationVersion, transaction);
        }
        this.RefreshCanDelete(version, transaction);
        if (!version.CanDelete)
          throw new ChildDependencyException("The version (" + version.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.BusinessVersions.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(SilkFlo.Data.Core.Domain.Business.Version version, Transaction transaction)
    {
      try
      {
        if (version.Id == null)
          return DataStoreResult.Success;
        SilkFlo.Data.Core.Domain.Business.Version core = _dataSet.BusinessVersions.SingleOrDefault<SilkFlo.Data.Core.Domain.Business.Version>((Func<SilkFlo.Data.Core.Domain.Business.Version, bool>) (x => x.Id == version.Id));
        if (core == null)
          return DataStoreResult.Success;
        this.GetBusinessIdeaApplicationVersions(version);
        foreach (IdeaApplicationVersion m in version.IdeaApplicationVersions)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        await this.RefreshCanDeleteAsync(version, transaction);
        if (version.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessVersions.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The version (" + version.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessVersion(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessVersions.SingleOrDefault<SilkFlo.Data.Core.Domain.Business.Version>((Func<SilkFlo.Data.Core.Domain.Business.Version, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The version is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncBusinessVersion(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        SilkFlo.Data.Core.Domain.Business.Version version = _dataSet.BusinessVersions.SingleOrDefault<SilkFlo.Data.Core.Domain.Business.Version>((Func<SilkFlo.Data.Core.Domain.Business.Version, bool>) (x => x.Id == Id));
        if (version == null)
          throw new NotFoundException("The version is not found");
        dataStoreResult = await this.DeleteAsync(version, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    SilkFlo.Data.Core.Domain.Business.Version version, Transaction transaction)
    {
      if (version == null)
        return;
      if (version.Id == null)
      {
        version.CanDelete = true;
      }
      else
      {
        this.GetBusinessIdeaApplicationVersions(version, transaction);
        version.CanDelete = version.IdeaApplicationVersions.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(SilkFlo.Data.Core.Domain.Business.Version version, Transaction transaction)
    {
      if (version == null)
        return;
      version.CanDelete = true;
    }

    public SilkFlo.Data.Core.Domain.Business.Version FindBusinessVersion(
    
    string Id) => Id == null ? (SilkFlo.Data.Core.Domain.Business.Version) null : _dataSet.BusinessVersions.SingleOrDefault<SilkFlo.Data.Core.Domain.Business.Version>((Func<SilkFlo.Data.Core.Domain.Business.Version, bool>) (x => x.Id == Id));

    public async 
    
    Task<SilkFlo.Data.Core.Domain.Business.Version> FindBusinessVersionAsync(string Id)
    {
      SilkFlo.Data.Core.Domain.Business.Version businessVersionAsync;
      try
      {
        businessVersionAsync = await Task.Run<SilkFlo.Data.Core.Domain.Business.Version>((Func<SilkFlo.Data.Core.Domain.Business.Version>) (() => this.FindBusinessVersion(Id)));
      }
      catch
      {
        throw;
      }
      return businessVersionAsync;
    }

    public List<SilkFlo.Data.Core.Domain.Business.Version> GetBusinessVersionByDate(DateTime date) => _dataSet.BusinessVersions.Where<SilkFlo.Data.Core.Domain.Business.Version>((Func<SilkFlo.Data.Core.Domain.Business.Version, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<SilkFlo.Data.Core.Domain.Business.Version>();

    public async Task<List<SilkFlo.Data.Core.Domain.Business.Version>> GetBusinessVersionByDateAsync(
      DateTime date)
    {
      List<SilkFlo.Data.Core.Domain.Business.Version> versionByDateAsync;
      try
      {
        versionByDateAsync = await Task.Run<List<SilkFlo.Data.Core.Domain.Business.Version>>((Func<List<SilkFlo.Data.Core.Domain.Business.Version>>) (() => this.GetBusinessVersionByDate(date)));
      }
      catch
      {
        throw;
      }
      return versionByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<SilkFlo.Data.Core.Domain.Business.Version> cores)
    {
      try
      {
        foreach (SilkFlo.Data.Core.Domain.Business.Version core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<SilkFlo.Data.Core.Domain.Business.Version> cores)
    {
      try
      {
        foreach (SilkFlo.Data.Core.Domain.Business.Version core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(SilkFlo.Data.Core.Domain.Business.Version version)
    {
      if (version == null)
        return;
      if (version.CreatedById != null && version.CreatedBy == null)
        version.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == version.CreatedById));
      if (version.UpdatedById == null || version.UpdatedBy != null)
        return;
      version.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == version.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(SilkFlo.Data.Core.Domain.Business.Version version)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(version)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeaApplicationVersions(SilkFlo.Data.Core.Domain.Business.Version version) => this.GetBusinessIdeaApplicationVersions(version, (Transaction) null);

    internal async Task GetBusinessIdeaApplicationVersionsAsync(SilkFlo.Data.Core.Domain.Business.Version version) => await this.GetBusinessIdeaApplicationVersionsAsync(version, (Transaction) null);

    internal void GetBusinessIdeaApplicationVersions(SilkFlo.Data.Core.Domain.Business.Version version, Transaction transaction)
    {
      if (version != null)
        version.IdeaApplicationVersions = _dataSet.BusinessIdeaApplicationVersions.Where<IdeaApplicationVersion>((Func<IdeaApplicationVersion, bool>) (m => m.VersionId == version.Id)).ToList<IdeaApplicationVersion>();
      if (transaction == null)
        return;
      for (int index = version.IdeaApplicationVersions.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) version.IdeaApplicationVersions[index]) == Action.Delete)
          version.IdeaApplicationVersions.Remove(version.IdeaApplicationVersions[index]);
      }
    }

    internal async Task GetBusinessIdeaApplicationVersionsAsync(
      SilkFlo.Data.Core.Domain.Business.Version version,
      Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeaApplicationVersions(version, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessApplication(SilkFlo.Data.Core.Domain.Business.Version version)
    {
      if (version == null)
        return;
      foreach (SilkFlo.Data.Core.Domain.Business.Application businessApplication in (List<SilkFlo.Data.Core.Domain.Business.Application>) _dataSet.BusinessApplications.ToList())
      {
        if (version.ApplicationId != null && businessApplication.Id == version.ApplicationId)
        {
          version.Application = businessApplication;
          break;
        }
      }
    }

    public async Task GetBusinessApplicationAsync(SilkFlo.Data.Core.Domain.Business.Version version)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessApplication(version)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessApplications(IEnumerable<SilkFlo.Data.Core.Domain.Business.Version> versions)
    {
      foreach (SilkFlo.Data.Core.Domain.Business.Version version in versions)
        this.GetBusinessApplication(version);
    }

    public async Task GetBusinessApplicationsAsync(IEnumerable<SilkFlo.Data.Core.Domain.Business.Version> versions)
    {
      foreach (SilkFlo.Data.Core.Domain.Business.Version version in versions)
        await this.GetBusinessApplicationAsync(version);
    }

    public void GetBusinessClient(SilkFlo.Data.Core.Domain.Business.Version version)
    {
      if (version == null)
        return;
      foreach (Client businessClient in (List<Client>) _dataSet.BusinessClients.ToList())
      {
        if (version.ClientId != null && businessClient.Id == version.ClientId)
        {
          version.Client = businessClient;
          break;
        }
      }
    }

    public async Task GetBusinessClientAsync(SilkFlo.Data.Core.Domain.Business.Version version)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClient(version)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessClients(IEnumerable<SilkFlo.Data.Core.Domain.Business.Version> versions)
    {
      foreach (SilkFlo.Data.Core.Domain.Business.Version version in versions)
        this.GetBusinessClient(version);
    }

    public async Task GetBusinessClientsAsync(IEnumerable<SilkFlo.Data.Core.Domain.Business.Version> versions)
    {
      foreach (SilkFlo.Data.Core.Domain.Business.Version version in versions)
        await this.GetBusinessClientAsync(version);
    }

    public string Validate(Vote core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(Vote core)
    {
      string messages = "";
      if (core.Idea == null)
      {
        if (string.IsNullOrWhiteSpace(core.IdeaId))
        {
          messages += "Business.Vote.IdeaId: Vote missing; ";
        }
        else
        {
          Idea parent = _dataSet.BusinessIdeas.SingleOrDefault<Idea>((Func<Idea, bool>) (x => x.Id == core.IdeaId));
          if (parent == null)
            messages += "Business.Vote.IdeaId: Vote invalid; ";
          parent = (Idea) null;
        }
      }
      if (core.User == null)
      {
        if (string.IsNullOrWhiteSpace(core.UserId))
        {
          messages += "Business.Vote.UserId: UserId missing; ";
        }
        else
        {
          User parent = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (x => x.Id == core.UserId));
          if (parent == null)
            messages += "Business.Vote.UserId: UserId invalid; ";
          parent = (User) null;
        }
      }
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public void Add(IEnumerable<Vote> votes)
    {
      try
      {
        foreach (Vote vote in votes)
          this.Add(vote);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Vote> votes)
    {
      try
      {
        foreach (Vote vote in votes)
          await this.AddAsync(vote);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Vote core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          Vote vote = (Vote) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            vote = _dataSet.BusinessVotes.SingleOrDefault<Vote>((Func<Vote, bool>) (x => x.Id == core.Id));
          if (vote == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.BusinessVotes.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////vote.Update(core);
                        ///

                        _dataSet.Entry(vote).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        vote.Update(core);
                        _dataSet.BusinessVotes.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          vote = (Vote) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Vote core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Vote vote, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(vote, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Vote vote, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(vote, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Vote> votes, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (votes == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Vote vote in votes.ToList<Vote>())
        {
          dataStoreResult = this.Delete(vote, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<Vote> votes, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (votes == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Vote> lst = votes.ToList<Vote>();
        foreach (Vote vote in lst)
        {
          Vote item = vote;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Vote) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Vote vote, Transaction transaction)
    {
      try
      {
        if (vote.Id == null)
          return DataStoreResult.Success;
        Vote entity = _dataSet.BusinessVotes.SingleOrDefault<Vote>((Func<Vote, bool>) (x => x.Id == vote.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(vote, transaction);
        if (!vote.CanDelete)
          throw new ChildDependencyException("The ideas voted for (" + vote.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.BusinessVotes.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Vote vote, Transaction transaction)
    {
      try
      {
        if (vote.Id == null)
          return DataStoreResult.Success;
        Vote core = _dataSet.BusinessVotes.SingleOrDefault<Vote>((Func<Vote, bool>) (x => x.Id == vote.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(vote, transaction);
        if (vote.CanDelete)
        {
          if (transaction == null)
            _dataSet.BusinessVotes.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The ideas voted for (" + vote.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteBusinessVote(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.BusinessVotes.SingleOrDefault<Vote>((Func<Vote, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The vote is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncBusinessVote(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Vote vote = _dataSet.BusinessVotes.SingleOrDefault<Vote>((Func<Vote, bool>) (x => x.Id == Id));
        if (vote == null)
          throw new NotFoundException("The vote is not found");
        dataStoreResult = await this.DeleteAsync(vote, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    Vote vote, Transaction transaction)
    {
      if (vote == null)
        return;
      vote.CanDelete = true;
    }

    internal async Task RefreshCanDeleteAsync(Vote vote, Transaction transaction)
    {
      if (vote == null)
        return;
      vote.CanDelete = true;
    }

    public Vote FindBusinessVote(
    
    string Id) => Id == null ? (Vote) null : _dataSet.BusinessVotes.SingleOrDefault<Vote>((Func<Vote, bool>) (x => x.Id == Id));

    public async 
    
    Task<Vote> FindBusinessVoteAsync(string Id)
    {
      Vote businessVoteAsync;
      try
      {
        businessVoteAsync = await Task.Run<Vote>((Func<Vote>) (() => this.FindBusinessVote(Id)));
      }
      catch
      {
        throw;
      }
      return businessVoteAsync;
    }

    public List<Vote> GetBusinessVoteByDate(DateTime date) => _dataSet.BusinessVotes.Where<Vote>((Func<Vote, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Vote>();

    public async Task<List<Vote>> GetBusinessVoteByDateAsync(DateTime date)
    {
      List<Vote> businessVoteByDateAsync;
      try
      {
        businessVoteByDateAsync = await Task.Run<List<Vote>>((Func<List<Vote>>) (() => this.GetBusinessVoteByDate(date)));
      }
      catch
      {
        throw;
      }
      return businessVoteByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Vote> cores)
    {
      try
      {
        foreach (Vote core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Vote> cores)
    {
      try
      {
        foreach (Vote core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Vote vote)
    {
      if (vote == null)
        return;
      if (vote.CreatedById != null && vote.CreatedBy == null)
        vote.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == vote.CreatedById));
      if (vote.UpdatedById == null || vote.UpdatedBy != null)
        return;
      vote.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == vote.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Vote vote)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(vote)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessIdea(Vote vote)
    {
      if (vote == null)
        return;
      foreach (Idea businessIdea in (List<Idea>) _dataSet.BusinessIdeas.ToList())
      {
        if (vote.IdeaId != null && businessIdea.Id == vote.IdeaId)
        {
          vote.Idea = businessIdea;
          break;
        }
      }
    }

    public async Task GetBusinessIdeaAsync(Vote vote)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdea(vote)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessIdeas(IEnumerable<Vote> votes)
    {
      foreach (Vote vote in votes)
        this.GetBusinessIdea(vote);
    }

    public async Task GetBusinessIdeasAsync(IEnumerable<Vote> votes)
    {
      foreach (Vote vote in votes)
        await this.GetBusinessIdeaAsync(vote);
    }

    public void GetUser(Vote vote)
    {
      if (vote == null)
        return;
      foreach (User user in (List<User>) _dataSet.Users.ToList())
      {
        if (vote.UserId != null && user.Id == vote.UserId)
        {
          vote.User = user;
          break;
        }
      }
    }

    public async Task GetUserAsync(Vote vote)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetUser(vote)));
      }
      catch
      {
        throw;
      }
    }

    public void GetUsers(IEnumerable<Vote> votes)
    {
      foreach (Vote vote in votes)
        this.GetUser(vote);
    }

    public async Task GetUsersAsync(IEnumerable<Vote> votes)
    {
      foreach (Vote vote in votes)
        await this.GetUserAsync(vote);
    }

    public string Validate(CompanySize core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(CompanySize core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "CRM.CompanySize.Name: Company Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(CompanySize core)
    {
      string str = "";
      if (_dataSet.CRMCompanySizes.ToList<CompanySize>().FirstOrDefault<CompanySize>((Func<CompanySize, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this company Name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(CompanySize core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<CompanySize> companySizes)
    {
      try
      {
        foreach (CompanySize companySiz in companySizes)
          this.Add(companySiz);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<CompanySize> companySizes)
    {
      try
      {
        foreach (CompanySize companySize in companySizes)
          await this.AddAsync(companySize);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(CompanySize core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          CompanySize companySize = (CompanySize) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            companySize = _dataSet.CRMCompanySizes.SingleOrDefault<CompanySize>((Func<CompanySize, bool>) (x => x.Id == core.Id));
          if (companySize == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.CRMCompanySizes.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////companySize.Update(core);
                        ///

                        _dataSet.Entry(companySize).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        companySize.Update(core);
                        _dataSet.CRMCompanySizes.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          companySize = (CompanySize) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(CompanySize core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(CompanySize companySize, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(companySize, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(CompanySize companySize, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(companySize, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<CompanySize> companySizes, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (companySizes == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (CompanySize companySize in companySizes.ToList<CompanySize>())
        {
          dataStoreResult = this.Delete(companySize, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<CompanySize> companySizes,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (companySizes == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<CompanySize> lst = companySizes.ToList<CompanySize>();
        foreach (CompanySize companySize in lst)
        {
          CompanySize item = companySize;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (CompanySize) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(CompanySize companySize, Transaction transaction)
    {
      try
      {
        if (companySize.Id == null)
          return DataStoreResult.Success;
        CompanySize entity = _dataSet.CRMCompanySizes.SingleOrDefault<CompanySize>((Func<CompanySize, bool>) (x => x.Id == companySize.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(companySize, transaction);
        if (companySize.CanDelete)
        {
          if (transaction == null)
            _dataSet.CRMCompanySizes.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The company size (" + companySize.ToString() + ") contains ";
        if (companySize.Prospects.Count > 0)
          str += "prospects, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      CompanySize companySize,
      Transaction transaction)
    {
      try
      {
        if (companySize.Id == null)
          return DataStoreResult.Success;
        CompanySize core = _dataSet.CRMCompanySizes.SingleOrDefault<CompanySize>((Func<CompanySize, bool>) (x => x.Id == companySize.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(companySize, transaction);
        if (companySize.CanDelete)
        {
          if (transaction == null)
            _dataSet.CRMCompanySizes.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The company size (" + companySize.ToString() + ") contains ";
        if (companySize.Prospects.Count > 0)
          erorrMessage += "prospects, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteCRMCompanySize(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.CRMCompanySizes.SingleOrDefault<CompanySize>((Func<CompanySize, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The companySize is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncCRMCompanySize(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        CompanySize companySize = _dataSet.CRMCompanySizes.SingleOrDefault<CompanySize>((Func<CompanySize, bool>) (x => x.Id == Id));
        if (companySize == null)
          throw new NotFoundException("The companySize is not found");
        dataStoreResult = await this.DeleteAsync(companySize, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    CompanySize companySize, Transaction transaction)
    {
      if (companySize == null)
        return;
      if (companySize.Id == null)
      {
        companySize.CanDelete = true;
      }
      else
      {
        this.GetCRMProspects(companySize, transaction);
        companySize.CanDelete = companySize.Prospects.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(CompanySize companySize, Transaction transaction)
    {
      if (companySize == null)
        return;
      if (companySize.Id == null)
      {
        companySize.CanDelete = true;
      }
      else
      {
        await this.GetCRMProspectsAsync(companySize, transaction);
        companySize.CanDelete = companySize.Prospects.Count <= 0;
      }
    }

    public CompanySize FindCRMCompanySize(
    
    string Id) => Id == null ? (CompanySize) null : _dataSet.CRMCompanySizes.SingleOrDefault<CompanySize>((Func<CompanySize, bool>) (x => x.Id == Id));

    public async 
    
    Task<CompanySize> FindCRMCompanySizeAsync(string Id)
    {
      CompanySize companySizeAsync;
      try
      {
        companySizeAsync = await Task.Run<CompanySize>((Func<CompanySize>) (() => this.FindCRMCompanySize(Id)));
      }
      catch
      {
        throw;
      }
      return companySizeAsync;
    }

    public List<CompanySize> GetCRMCompanySizeByDate(DateTime date) => _dataSet.CRMCompanySizes.Where<CompanySize>((Func<CompanySize, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<CompanySize>();

    public async Task<List<CompanySize>> GetCRMCompanySizeByDateAsync(DateTime date)
    {
      List<CompanySize> companySizeByDateAsync;
      try
      {
        companySizeByDateAsync = await Task.Run<List<CompanySize>>((Func<List<CompanySize>>) (() => this.GetCRMCompanySizeByDate(date)));
      }
      catch
      {
        throw;
      }
      return companySizeByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<CompanySize> cores)
    {
      try
      {
        foreach (CompanySize core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<CompanySize> cores)
    {
      try
      {
        foreach (CompanySize core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(CompanySize companySize)
    {
      if (companySize == null)
        return;
      if (companySize.CreatedById != null && companySize.CreatedBy == null)
        companySize.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == companySize.CreatedById));
      if (companySize.UpdatedById == null || companySize.UpdatedBy != null)
        return;
      companySize.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == companySize.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(CompanySize companySize)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(companySize)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetCRMProspects(CompanySize companySize) => this.GetCRMProspects(companySize, (Transaction) null);

    internal async Task GetCRMProspectsAsync(CompanySize companySize) => await this.GetCRMProspectsAsync(companySize, (Transaction) null);

    internal void GetCRMProspects(CompanySize companySize, Transaction transaction)
    {
      if (companySize != null)
        companySize.Prospects = _dataSet.CRMProspects.Where<Prospect>((Func<Prospect, bool>) (m => m.CompanySizeId == companySize.Id)).ToList<Prospect>();
      if (transaction == null)
        return;
      for (int index = companySize.Prospects.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) companySize.Prospects[index]) == Action.Delete)
          companySize.Prospects.Remove(companySize.Prospects[index]);
      }
    }

    internal async Task GetCRMProspectsAsync(CompanySize companySize, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCRMProspects(companySize, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(JobLevel core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(JobLevel core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "CRM.JobLevel.Name: Company Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(JobLevel core)
    {
      string str = "";
      if (_dataSet.CRMJobLevels.ToList<JobLevel>().FirstOrDefault<JobLevel>((Func<JobLevel, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this company Name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(JobLevel core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<JobLevel> jobLevels)
    {
      try
      {
        foreach (JobLevel jobLevel in jobLevels)
          this.Add(jobLevel);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<JobLevel> jobLevels)
    {
      try
      {
        foreach (JobLevel jobLevel in jobLevels)
          await this.AddAsync(jobLevel);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(JobLevel core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          JobLevel jobLevel = (JobLevel) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            jobLevel = _dataSet.CRMJobLevels.SingleOrDefault<JobLevel>((Func<JobLevel, bool>) (x => x.Id == core.Id));
          if (jobLevel == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.CRMJobLevels.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////jobLevel.Update(core);
                        ///

                        _dataSet.Entry(jobLevel).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        jobLevel.Update(core);
                        _dataSet.CRMJobLevels.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          jobLevel = (JobLevel) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(JobLevel core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(JobLevel jobLevel, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(jobLevel, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(JobLevel jobLevel, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(jobLevel, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<JobLevel> jobLevels, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (jobLevels == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (JobLevel jobLevel in jobLevels.ToList<JobLevel>())
        {
          dataStoreResult = this.Delete(jobLevel, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<JobLevel> jobLevels,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (jobLevels == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<JobLevel> lst = jobLevels.ToList<JobLevel>();
        foreach (JobLevel jobLevel in lst)
        {
          JobLevel item = jobLevel;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (JobLevel) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(JobLevel jobLevel, Transaction transaction)
    {
      try
      {
        if (jobLevel.Id == null)
          return DataStoreResult.Success;
        JobLevel entity = _dataSet.CRMJobLevels.SingleOrDefault<JobLevel>((Func<JobLevel, bool>) (x => x.Id == jobLevel.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(jobLevel, transaction);
        if (jobLevel.CanDelete)
        {
          if (transaction == null)
            _dataSet.CRMJobLevels.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The job level (" + jobLevel.ToString() + ") contains ";
        if (jobLevel.TeamMembers.Count > 0)
          str += "prospects, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(JobLevel jobLevel, Transaction transaction)
    {
      try
      {
        if (jobLevel.Id == null)
          return DataStoreResult.Success;
        JobLevel core = _dataSet.CRMJobLevels.SingleOrDefault<JobLevel>((Func<JobLevel, bool>) (x => x.Id == jobLevel.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(jobLevel, transaction);
        if (jobLevel.CanDelete)
        {
          if (transaction == null)
            _dataSet.CRMJobLevels.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The job level (" + jobLevel.ToString() + ") contains ";
        if (jobLevel.TeamMembers.Count > 0)
          erorrMessage += "prospects, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteCRMJobLevel(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.CRMJobLevels.SingleOrDefault<JobLevel>((Func<JobLevel, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The jobLevel is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncCRMJobLevel(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        JobLevel jobLevel = _dataSet.CRMJobLevels.SingleOrDefault<JobLevel>((Func<JobLevel, bool>) (x => x.Id == Id));
        if (jobLevel == null)
          throw new NotFoundException("The jobLevel is not found");
        dataStoreResult = await this.DeleteAsync(jobLevel, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    JobLevel jobLevel, Transaction transaction)
    {
      if (jobLevel == null)
        return;
      if (jobLevel.Id == null)
      {
        jobLevel.CanDelete = true;
      }
      else
      {
        this.GetCRMTeamMembers(jobLevel, transaction);
        jobLevel.CanDelete = jobLevel.TeamMembers.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(JobLevel jobLevel, Transaction transaction)
    {
      if (jobLevel == null)
        return;
      if (jobLevel.Id == null)
      {
        jobLevel.CanDelete = true;
      }
      else
      {
        await this.GetCRMTeamMembersAsync(jobLevel, transaction);
        jobLevel.CanDelete = jobLevel.TeamMembers.Count <= 0;
      }
    }

    public JobLevel FindCRMJobLevel(
    
    string Id) => Id == null ? (JobLevel) null : _dataSet.CRMJobLevels.SingleOrDefault<JobLevel>((Func<JobLevel, bool>) (x => x.Id == Id));

    public async 
    
    Task<JobLevel> FindCRMJobLevelAsync(string Id)
    {
      JobLevel crmJobLevelAsync;
      try
      {
        crmJobLevelAsync = await Task.Run<JobLevel>((Func<JobLevel>) (() => this.FindCRMJobLevel(Id)));
      }
      catch
      {
        throw;
      }
      return crmJobLevelAsync;
    }

    public List<JobLevel> GetCRMJobLevelByDate(DateTime date) => _dataSet.CRMJobLevels.Where<JobLevel>((Func<JobLevel, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<JobLevel>();

    public async Task<List<JobLevel>> GetCRMJobLevelByDateAsync(DateTime date)
    {
      List<JobLevel> levelByDateAsync;
      try
      {
        levelByDateAsync = await Task.Run<List<JobLevel>>((Func<List<JobLevel>>) (() => this.GetCRMJobLevelByDate(date)));
      }
      catch
      {
        throw;
      }
      return levelByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<JobLevel> cores)
    {
      try
      {
        foreach (JobLevel core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<JobLevel> cores)
    {
      try
      {
        foreach (JobLevel core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(JobLevel jobLevel)
    {
      if (jobLevel == null)
        return;
      if (jobLevel.CreatedById != null && jobLevel.CreatedBy == null)
        jobLevel.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == jobLevel.CreatedById));
      if (jobLevel.UpdatedById == null || jobLevel.UpdatedBy != null)
        return;
      jobLevel.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == jobLevel.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(JobLevel jobLevel)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(jobLevel)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetCRMTeamMembers(JobLevel jobLevel) => this.GetCRMTeamMembers(jobLevel, (Transaction) null);

    internal async Task GetCRMTeamMembersAsync(JobLevel jobLevel) => await this.GetCRMTeamMembersAsync(jobLevel, (Transaction) null);

    internal void GetCRMTeamMembers(JobLevel jobLevel, Transaction transaction)
    {
      if (jobLevel != null)
        jobLevel.TeamMembers = _dataSet.CRMProspects.Where<Prospect>((Func<Prospect, bool>) (m => m.JobLevelId == jobLevel.Id)).ToList<Prospect>();
      if (transaction == null)
        return;
      for (int index = jobLevel.TeamMembers.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) jobLevel.TeamMembers[index]) == Action.Delete)
          jobLevel.TeamMembers.Remove(jobLevel.TeamMembers[index]);
      }
    }

    internal async Task GetCRMTeamMembersAsync(JobLevel jobLevel, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCRMTeamMembers(jobLevel, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(Prospect core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(Prospect core)
    {
      string messages = "";
      if (core.ClientType == null)
      {
        if (string.IsNullOrWhiteSpace(core.ClientTypeId))
        {
          messages += "CRM.Prospect.ClientTypeId: ClientTypeId missing; ";
        }
        else
        {
          ClientType parent = _dataSet.SharedClientTypes.SingleOrDefault<ClientType>((Func<ClientType, bool>) (x => x.Id == core.ClientTypeId));
          if (parent == null)
            messages += "CRM.Prospect.ClientTypeId: ClientTypeId invalid; ";
          parent = (ClientType) null;
        }
      }
      if (string.IsNullOrWhiteSpace(core.CompanyName))
        messages += "CRM.Prospect.CompanyName: Company Name missing; ";
      if (core.CompanySize == null)
      {
        if (string.IsNullOrWhiteSpace(core.CompanySizeId))
        {
          messages += "CRM.Prospect.CompanySizeId: Company Size missing; ";
        }
        else
        {
          CompanySize parent = _dataSet.CRMCompanySizes.SingleOrDefault<CompanySize>((Func<CompanySize, bool>) (x => x.Id == core.CompanySizeId));
          if (parent == null)
            messages += "CRM.Prospect.CompanySizeId: Company Size invalid; ";
          parent = (CompanySize) null;
        }
      }
      if (core.Country == null)
      {
        if (string.IsNullOrWhiteSpace(core.CountryId))
        {
          messages += "CRM.Prospect.CountryId: Country missing; ";
        }
        else
        {
          Country parent = _dataSet.SharedCountries.SingleOrDefault<Country>((Func<Country, bool>) (x => x.Id == core.CountryId));
          if (parent == null)
            messages += "CRM.Prospect.CountryId: Country invalid; ";
          parent = (Country) null;
        }
      }
      if (string.IsNullOrWhiteSpace(core.Email))
        messages += "CRM.Prospect.Email: Email Address missing; ";
      if (string.IsNullOrWhiteSpace(core.FirstName))
        messages += "CRM.Prospect.FirstName: First Name missing; ";
      if (core.JobLevel == null)
      {
        if (string.IsNullOrWhiteSpace(core.JobLevelId))
        {
          messages += "CRM.Prospect.JobLevelId: Job Title missing; ";
        }
        else
        {
          JobLevel parent = _dataSet.CRMJobLevels.SingleOrDefault<JobLevel>((Func<JobLevel, bool>) (x => x.Id == core.JobLevelId));
          if (parent == null)
            messages += "CRM.Prospect.JobLevelId: Job Title invalid; ";
          parent = (JobLevel) null;
        }
      }
      if (string.IsNullOrWhiteSpace(core.LastName))
        messages += "CRM.Prospect.LastName: Last Name missing; ";
      if (string.IsNullOrWhiteSpace(core.PhoneNumber))
        messages += "CRM.Prospect.PhoneNumber: Phone Number missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public void Add(IEnumerable<Prospect> prospects)
    {
      try
      {
        foreach (Prospect prospect in prospects)
          this.Add(prospect);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Prospect> prospects)
    {
      try
      {
        foreach (Prospect prospect in prospects)
          await this.AddAsync(prospect);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Prospect core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          Prospect prospect = (Prospect) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            prospect = _dataSet.CRMProspects.SingleOrDefault<Prospect>((Func<Prospect, bool>) (x => x.Id == core.Id));
          if (prospect == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.CRMProspects.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////prospect.Update(core);
                        ///

                        _dataSet.Entry(prospect).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        prospect.Update(core);
                        _dataSet.CRMProspects.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          prospect = (Prospect) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Prospect core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Prospect prospect, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(prospect, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Prospect prospect, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(prospect, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Prospect> prospects, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (prospects == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Prospect prospect in prospects.ToList<Prospect>())
        {
          dataStoreResult = this.Delete(prospect, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<Prospect> prospects,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (prospects == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Prospect> lst = prospects.ToList<Prospect>();
        foreach (Prospect prospect in lst)
        {
          Prospect item = prospect;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Prospect) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Prospect prospect, Transaction transaction)
    {
      try
      {
        if (prospect.Id == null)
          return DataStoreResult.Success;
        Prospect entity = _dataSet.CRMProspects.SingleOrDefault<Prospect>((Func<Prospect, bool>) (x => x.Id == prospect.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(prospect, transaction);
        if (!prospect.CanDelete)
          throw new ChildDependencyException("The prospect (" + prospect.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.CRMProspects.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Prospect prospect, Transaction transaction)
    {
      try
      {
        if (prospect.Id == null)
          return DataStoreResult.Success;
        Prospect core = _dataSet.CRMProspects.SingleOrDefault<Prospect>((Func<Prospect, bool>) (x => x.Id == prospect.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(prospect, transaction);
        if (prospect.CanDelete)
        {
          if (transaction == null)
            _dataSet.CRMProspects.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The prospect (" + prospect.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteCRMProspect(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.CRMProspects.SingleOrDefault<Prospect>((Func<Prospect, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The prospect is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncCRMProspect(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Prospect prospect = _dataSet.CRMProspects.SingleOrDefault<Prospect>((Func<Prospect, bool>) (x => x.Id == Id));
        if (prospect == null)
          throw new NotFoundException("The prospect is not found");
        dataStoreResult = await this.DeleteAsync(prospect, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    Prospect prospect, Transaction transaction)
    {
      if (prospect == null)
        return;
      prospect.CanDelete = true;
    }

    internal async Task RefreshCanDeleteAsync(Prospect prospect, Transaction transaction)
    {
      if (prospect == null)
        return;
      prospect.CanDelete = true;
    }

    public Prospect FindCRMProspect(
    
    string Id) => Id == null ? (Prospect) null : _dataSet.CRMProspects.SingleOrDefault<Prospect>((Func<Prospect, bool>) (x => x.Id == Id));

    public async 
    
    Task<Prospect> FindCRMProspectAsync(string Id)
    {
      Prospect crmProspectAsync;
      try
      {
        crmProspectAsync = await Task.Run<Prospect>((Func<Prospect>) (() => this.FindCRMProspect(Id)));
      }
      catch
      {
        throw;
      }
      return crmProspectAsync;
    }

    public List<Prospect> GetCRMProspectByDate(DateTime date) => _dataSet.CRMProspects.Where<Prospect>((Func<Prospect, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Prospect>();

    public async Task<List<Prospect>> GetCRMProspectByDateAsync(DateTime date)
    {
      List<Prospect> prospectByDateAsync;
      try
      {
        prospectByDateAsync = await Task.Run<List<Prospect>>((Func<List<Prospect>>) (() => this.GetCRMProspectByDate(date)));
      }
      catch
      {
        throw;
      }
      return prospectByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Prospect> cores)
    {
      try
      {
        foreach (Prospect core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Prospect> cores)
    {
      try
      {
        foreach (Prospect core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Prospect prospect)
    {
      if (prospect == null)
        return;
      if (prospect.CreatedById != null && prospect.CreatedBy == null)
        prospect.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == prospect.CreatedById));
      if (prospect.UpdatedById == null || prospect.UpdatedBy != null)
        return;
      prospect.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == prospect.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Prospect prospect)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(prospect)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedClientType(Prospect prospect)
    {
      if (prospect == null)
        return;
      foreach (ClientType sharedClientType in (List<ClientType>) _dataSet.SharedClientTypes.ToList())
      {
        if (prospect.ClientTypeId != null && sharedClientType.Id == prospect.ClientTypeId)
        {
          prospect.ClientType = sharedClientType;
          break;
        }
      }
    }

    public async Task GetSharedClientTypeAsync(Prospect prospect)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedClientType(prospect)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedClientTypes(IEnumerable<Prospect> prospects)
    {
      foreach (Prospect prospect in prospects)
        this.GetSharedClientType(prospect);
    }

    public async Task GetSharedClientTypesAsync(IEnumerable<Prospect> prospects)
    {
      foreach (Prospect prospect in prospects)
        await this.GetSharedClientTypeAsync(prospect);
    }

    public void GetCRMCompanySize(Prospect prospect)
    {
      if (prospect == null)
        return;
      foreach (CompanySize crmCompanySiz in (List<CompanySize>) _dataSet.CRMCompanySizes.ToList())
      {
        if (prospect.CompanySizeId != null && crmCompanySiz.Id == prospect.CompanySizeId)
        {
          prospect.CompanySize = crmCompanySiz;
          break;
        }
      }
    }

    public async Task GetCRMCompanySizeAsync(Prospect prospect)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCRMCompanySize(prospect)));
      }
      catch
      {
        throw;
      }
    }

    public void GetCRMCompanySizes(IEnumerable<Prospect> prospects)
    {
      foreach (Prospect prospect in prospects)
        this.GetCRMCompanySize(prospect);
    }

    public async Task GetCRMCompanySizesAsync(IEnumerable<Prospect> prospects)
    {
      foreach (Prospect prospect in prospects)
        await this.GetCRMCompanySizeAsync(prospect);
    }

    public void GetSharedCountry(Prospect prospect)
    {
      if (prospect == null)
        return;
      foreach (Country sharedCountry in (List<Country>) _dataSet.SharedCountries.ToList())
      {
        if (prospect.CountryId != null && sharedCountry.Id == prospect.CountryId)
        {
          prospect.Country = sharedCountry;
          break;
        }
      }
    }

    public async Task GetSharedCountryAsync(Prospect prospect)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedCountry(prospect)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedCountries(IEnumerable<Prospect> prospects)
    {
      foreach (Prospect prospect in prospects)
        this.GetSharedCountry(prospect);
    }

    public async Task GetSharedCountriesAsync(IEnumerable<Prospect> prospects)
    {
      foreach (Prospect prospect in prospects)
        await this.GetSharedCountryAsync(prospect);
    }

    public void GetCRMJobLevel(Prospect prospect)
    {
      if (prospect == null)
        return;
      foreach (JobLevel crmJobLevel in (List<JobLevel>) _dataSet.CRMJobLevels.ToList())
      {
        if (prospect.JobLevelId != null && crmJobLevel.Id == prospect.JobLevelId)
        {
          prospect.JobLevel = crmJobLevel;
          break;
        }
      }
    }

    public async Task GetCRMJobLevelAsync(Prospect prospect)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCRMJobLevel(prospect)));
      }
      catch
      {
        throw;
      }
    }

    public void GetCRMJobLevels(IEnumerable<Prospect> prospects)
    {
      foreach (Prospect prospect in prospects)
        this.GetCRMJobLevel(prospect);
    }

    public async Task GetCRMJobLevelsAsync(IEnumerable<Prospect> prospects)
    {
      foreach (Prospect prospect in prospects)
        await this.GetCRMJobLevelAsync(prospect);
    }

    public string Validate(Achievement core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(Achievement core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.Achievement.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(Achievement core)
    {
      string str = "";
      if (_dataSet.SharedAchievements.ToList<Achievement>().FirstOrDefault<Achievement>((Func<Achievement, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(Achievement core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<Achievement> achievements)
    {
      try
      {
        foreach (Achievement achievement in achievements)
          this.Add(achievement);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Achievement> achievements)
    {
      try
      {
        foreach (Achievement achievement in achievements)
          await this.AddAsync(achievement);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Achievement core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          Achievement achievement = (Achievement) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            achievement = _dataSet.SharedAchievements.SingleOrDefault<Achievement>((Func<Achievement, bool>) (x => x.Id == core.Id));
          if (achievement == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedAchievements.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////achievement.Update(core);
                        ///

                        _dataSet.Entry(achievement).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        achievement.Update(core);
                        _dataSet.SharedAchievements.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          achievement = (Achievement) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Achievement core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Achievement achievement, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(achievement, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Achievement achievement, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(achievement, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Achievement> achievements, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (achievements == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Achievement achievement in achievements.ToList<Achievement>())
        {
          dataStoreResult = this.Delete(achievement, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<Achievement> achievements,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (achievements == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Achievement> lst = achievements.ToList<Achievement>();
        foreach (Achievement achievement in lst)
        {
          Achievement item = achievement;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Achievement) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Achievement achievement, Transaction transaction)
    {
      try
      {
        if (achievement.Id == null)
          return DataStoreResult.Success;
        Achievement entity = _dataSet.SharedAchievements.SingleOrDefault<Achievement>((Func<Achievement, bool>) (x => x.Id == achievement.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.GetUserAchievements(achievement);
        foreach (UserAchievement userAchievement in achievement.UserAchievements)
        {
          int num = (int) this.Delete(userAchievement, transaction);
        }
        this.RefreshCanDelete(achievement, transaction);
        if (!achievement.CanDelete)
          throw new ChildDependencyException("The achievement (" + achievement.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.SharedAchievements.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      Achievement achievement,
      Transaction transaction)
    {
      try
      {
        if (achievement.Id == null)
          return DataStoreResult.Success;
        Achievement core = _dataSet.SharedAchievements.SingleOrDefault<Achievement>((Func<Achievement, bool>) (x => x.Id == achievement.Id));
        if (core == null)
          return DataStoreResult.Success;
        this.GetUserAchievements(achievement);
        foreach (UserAchievement m in achievement.UserAchievements)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        await this.RefreshCanDeleteAsync(achievement, transaction);
        if (achievement.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedAchievements.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The achievement (" + achievement.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedAchievement(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedAchievements.SingleOrDefault<Achievement>((Func<Achievement, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The achievement is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedAchievement(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Achievement achievement = _dataSet.SharedAchievements.SingleOrDefault<Achievement>((Func<Achievement, bool>) (x => x.Id == Id));
        if (achievement == null)
          throw new NotFoundException("The achievement is not found");
        dataStoreResult = await this.DeleteAsync(achievement, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    Achievement achievement, Transaction transaction)
    {
      if (achievement == null)
        return;
      if (achievement.Id == null)
      {
        achievement.CanDelete = true;
      }
      else
      {
        this.GetUserAchievements(achievement, transaction);
        achievement.CanDelete = achievement.UserAchievements.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(Achievement achievement, Transaction transaction)
    {
      if (achievement == null)
        return;
      achievement.CanDelete = true;
    }

    public Achievement FindSharedAchievement(
    
    string Id) => Id == null ? (Achievement) null : _dataSet.SharedAchievements.SingleOrDefault<Achievement>((Func<Achievement, bool>) (x => x.Id == Id));

    public async 
    
    Task<Achievement> FindSharedAchievementAsync(string Id)
    {
      Achievement achievementAsync;
      try
      {
        achievementAsync = await Task.Run<Achievement>((Func<Achievement>) (() => this.FindSharedAchievement(Id)));
      }
      catch
      {
        throw;
      }
      return achievementAsync;
    }

    public List<Achievement> GetSharedAchievementByDate(DateTime date) => _dataSet.SharedAchievements.Where<Achievement>((Func<Achievement, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Achievement>();

    public async Task<List<Achievement>> GetSharedAchievementByDateAsync(DateTime date)
    {
      List<Achievement> achievementByDateAsync;
      try
      {
        achievementByDateAsync = await Task.Run<List<Achievement>>((Func<List<Achievement>>) (() => this.GetSharedAchievementByDate(date)));
      }
      catch
      {
        throw;
      }
      return achievementByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Achievement> cores)
    {
      try
      {
        foreach (Achievement core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Achievement> cores)
    {
      try
      {
        foreach (Achievement core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Achievement achievement)
    {
      if (achievement == null)
        return;
      if (achievement.CreatedById != null && achievement.CreatedBy == null)
        achievement.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == achievement.CreatedById));
      if (achievement.UpdatedById == null || achievement.UpdatedBy != null)
        return;
      achievement.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == achievement.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Achievement achievement)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(achievement)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetUserAchievements(Achievement achievement) => this.GetUserAchievements(achievement, (Transaction) null);

    internal async Task GetUserAchievementsAsync(Achievement achievement) => await this.GetUserAchievementsAsync(achievement, (Transaction) null);

    internal void GetUserAchievements(Achievement achievement, Transaction transaction)
    {
      if (achievement != null)
        achievement.UserAchievements = _dataSet.UserAchievements.Where<UserAchievement>((Func<UserAchievement, bool>) (m => m.AchievementId == achievement.Id)).ToList<UserAchievement>();
      if (transaction == null)
        return;
      for (int index = achievement.UserAchievements.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) achievement.UserAchievements[index]) == Action.Delete)
          achievement.UserAchievements.Remove(achievement.UserAchievements[index]);
      }
    }

    internal async Task GetUserAchievementsAsync(Achievement achievement, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetUserAchievements(achievement, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(ApplicationStability core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(ApplicationStability core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Colour))
        messages += "Shared.ApplicationStability.Colour: Colour missing; ";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.ApplicationStability.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(ApplicationStability core)
    {
      string str = "";
      if (_dataSet.SharedApplicationStabilities.ToList<ApplicationStability>().FirstOrDefault<ApplicationStability>((Func<ApplicationStability, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(ApplicationStability core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(
      IEnumerable<ApplicationStability> applicationStabilities)
    {
      try
      {
        foreach (ApplicationStability applicationStability in applicationStabilities)
          this.Add(applicationStability);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(
      IEnumerable<ApplicationStability> applicationStabilities)
    {
      try
      {
        foreach (ApplicationStability applicationStability in applicationStabilities)
          await this.AddAsync(applicationStability);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(ApplicationStability core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          ApplicationStability applicationStability = (ApplicationStability) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            applicationStability = _dataSet.SharedApplicationStabilities.SingleOrDefault<ApplicationStability>((Func<ApplicationStability, bool>) (x => x.Id == core.Id));
          if (applicationStability == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedApplicationStabilities.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////applicationStability.Update(core);
                        ///

                        _dataSet.Entry(applicationStability).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        applicationStability.Update(core);
                        _dataSet.SharedApplicationStabilities.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          applicationStability = (ApplicationStability) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(ApplicationStability core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(ApplicationStability applicationStability, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(applicationStability, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      ApplicationStability applicationStability,
      bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(applicationStability, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(
      IEnumerable<ApplicationStability> applicationStabilities,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (applicationStabilities == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (ApplicationStability applicationStability in applicationStabilities.ToList<ApplicationStability>())
        {
          dataStoreResult = this.Delete(applicationStability, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<ApplicationStability> applicationStabilities,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (applicationStabilities == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<ApplicationStability> lst = applicationStabilities.ToList<ApplicationStability>();
        foreach (ApplicationStability applicationStability in lst)
        {
          ApplicationStability item = applicationStability;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (ApplicationStability) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(
      ApplicationStability applicationStability,
      Transaction transaction)
    {
      try
      {
        if (applicationStability.Id == null)
          return DataStoreResult.Success;
        ApplicationStability entity = _dataSet.SharedApplicationStabilities.SingleOrDefault<ApplicationStability>((Func<ApplicationStability, bool>) (x => x.Id == applicationStability.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(applicationStability, transaction);
        if (applicationStability.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedApplicationStabilities.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The application stability (" + applicationStability.ToString() + ") contains ";
        if (applicationStability.Ideas.Count > 0)
          str += "ideas, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      ApplicationStability applicationStability,
      Transaction transaction)
    {
      try
      {
        if (applicationStability.Id == null)
          return DataStoreResult.Success;
        ApplicationStability core = _dataSet.SharedApplicationStabilities.SingleOrDefault<ApplicationStability>((Func<ApplicationStability, bool>) (x => x.Id == applicationStability.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(applicationStability, transaction);
        if (applicationStability.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedApplicationStabilities.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The application stability (" + applicationStability.ToString() + ") contains ";
        if (applicationStability.Ideas.Count > 0)
          erorrMessage += "ideas, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedApplicationStability(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedApplicationStabilities.SingleOrDefault<ApplicationStability>((Func<ApplicationStability, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The applicationStability is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedApplicationStability(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        ApplicationStability applicationStability = _dataSet.SharedApplicationStabilities.SingleOrDefault<ApplicationStability>((Func<ApplicationStability, bool>) (x => x.Id == Id));
        if (applicationStability == null)
          throw new NotFoundException("The applicationStability is not found");
        dataStoreResult = await this.DeleteAsync(applicationStability, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(

      
      ApplicationStability applicationStability,
      Transaction transaction)
    {
      if (applicationStability == null)
        return;
      if (applicationStability.Id == null)
      {
        applicationStability.CanDelete = true;
      }
      else
      {
        this.GetBusinessIdeas(applicationStability, transaction);
        applicationStability.CanDelete = applicationStability.Ideas.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(
      ApplicationStability applicationStability,
      Transaction transaction)
    {
      if (applicationStability == null)
        return;
      if (applicationStability.Id == null)
      {
        applicationStability.CanDelete = true;
      }
      else
      {
        await this.GetBusinessIdeasAsync(applicationStability, transaction);
        applicationStability.CanDelete = applicationStability.Ideas.Count <= 0;
      }
    }

    public ApplicationStability FindSharedApplicationStability(
    
    string Id) => Id == null ? (ApplicationStability) null : _dataSet.SharedApplicationStabilities.SingleOrDefault<ApplicationStability>((Func<ApplicationStability, bool>) (x => x.Id == Id));

    public async 
    
    Task<ApplicationStability> FindSharedApplicationStabilityAsync(string Id)
    {
      ApplicationStability applicationStabilityAsync;
      try
      {
        applicationStabilityAsync = await Task.Run<ApplicationStability>((Func<ApplicationStability>) (() => this.FindSharedApplicationStability(Id)));
      }
      catch
      {
        throw;
      }
      return applicationStabilityAsync;
    }

    public List<ApplicationStability> GetSharedApplicationStabilityByDate(DateTime date) => _dataSet.SharedApplicationStabilities.Where<ApplicationStability>((Func<ApplicationStability, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<ApplicationStability>();

    public async Task<List<ApplicationStability>> GetSharedApplicationStabilityByDateAsync(
      DateTime date)
    {
      List<ApplicationStability> stabilityByDateAsync;
      try
      {
        stabilityByDateAsync = await Task.Run<List<ApplicationStability>>((Func<List<ApplicationStability>>) (() => this.GetSharedApplicationStabilityByDate(date)));
      }
      catch
      {
        throw;
      }
      return stabilityByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<ApplicationStability> cores)
    {
      try
      {
        foreach (ApplicationStability core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<ApplicationStability> cores)
    {
      try
      {
        foreach (ApplicationStability core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(ApplicationStability applicationStability)
    {
      if (applicationStability == null)
        return;
      if (applicationStability.CreatedById != null && applicationStability.CreatedBy == null)
        applicationStability.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == applicationStability.CreatedById));
      if (applicationStability.UpdatedById == null || applicationStability.UpdatedBy != null)
        return;
      applicationStability.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == applicationStability.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(ApplicationStability applicationStability)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(applicationStability)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeas(ApplicationStability applicationStability) => this.GetBusinessIdeas(applicationStability, (Transaction) null);

    internal async Task GetBusinessIdeasAsync(ApplicationStability applicationStability) => await this.GetBusinessIdeasAsync(applicationStability, (Transaction) null);

    internal void GetBusinessIdeas(
      ApplicationStability applicationStability,
      Transaction transaction)
    {
      if (applicationStability != null)
        applicationStability.Ideas = _dataSet.BusinessIdeas.Where<Idea>((Func<Idea, bool>) (m => m.ApplicationStabilityId == applicationStability.Id)).ToList<Idea>();
      if (transaction == null)
        return;
      for (int index = applicationStability.Ideas.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) applicationStability.Ideas[index]) == Action.Delete)
          applicationStability.Ideas.Remove(applicationStability.Ideas[index]);
      }
    }

    internal async Task GetBusinessIdeasAsync(
      ApplicationStability applicationStability,
      Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeas(applicationStability, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(AutomationGoal core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(AutomationGoal core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.AutomationGoal.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(AutomationGoal core)
    {
      string str = "";
      if (_dataSet.SharedAutomationGoals.ToList<AutomationGoal>().FirstOrDefault<AutomationGoal>((Func<AutomationGoal, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(AutomationGoal core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<AutomationGoal> automationGoals)
    {
      try
      {
        foreach (AutomationGoal automationGoal in automationGoals)
          this.Add(automationGoal);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<AutomationGoal> automationGoals)
    {
      try
      {
        foreach (AutomationGoal automationGoal in automationGoals)
          await this.AddAsync(automationGoal);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(AutomationGoal core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          AutomationGoal automationGoal = (AutomationGoal) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            automationGoal = _dataSet.SharedAutomationGoals.SingleOrDefault<AutomationGoal>((Func<AutomationGoal, bool>) (x => x.Id == core.Id));
          if (automationGoal == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedAutomationGoals.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////automationGoal.Update(core);
                        ///

                        _dataSet.Entry(automationGoal).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        automationGoal.Update(core);
                        _dataSet.SharedAutomationGoals.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          automationGoal = (AutomationGoal) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(AutomationGoal core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(AutomationGoal automationGoal, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(automationGoal, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      AutomationGoal automationGoal,
      bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(automationGoal, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<AutomationGoal> automationGoals, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (automationGoals == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (AutomationGoal automationGoal in automationGoals.ToList<AutomationGoal>())
        {
          dataStoreResult = this.Delete(automationGoal, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<AutomationGoal> automationGoals,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (automationGoals == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<AutomationGoal> lst = automationGoals.ToList<AutomationGoal>();
        foreach (AutomationGoal automationGoal in lst)
        {
          AutomationGoal item = automationGoal;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (AutomationGoal) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(AutomationGoal automationGoal, Transaction transaction)
    {
      try
      {
        if (automationGoal.Id == null)
          return DataStoreResult.Success;
        AutomationGoal entity = _dataSet.SharedAutomationGoals.SingleOrDefault<AutomationGoal>((Func<AutomationGoal, bool>) (x => x.Id == automationGoal.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(automationGoal, transaction);
        if (automationGoal.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedAutomationGoals.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The automation goal (" + automationGoal.ToString() + ") contains ";
        if (automationGoal.Ideas.Count > 0)
          str += "ideas, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      AutomationGoal automationGoal,
      Transaction transaction)
    {
      try
      {
        if (automationGoal.Id == null)
          return DataStoreResult.Success;
        AutomationGoal core = _dataSet.SharedAutomationGoals.SingleOrDefault<AutomationGoal>((Func<AutomationGoal, bool>) (x => x.Id == automationGoal.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(automationGoal, transaction);
        if (automationGoal.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedAutomationGoals.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The automation goal (" + automationGoal.ToString() + ") contains ";
        if (automationGoal.Ideas.Count > 0)
          erorrMessage += "ideas, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedAutomationGoal(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedAutomationGoals.SingleOrDefault<AutomationGoal>((Func<AutomationGoal, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The automationGoal is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedAutomationGoal(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        AutomationGoal automationGoal = _dataSet.SharedAutomationGoals.SingleOrDefault<AutomationGoal>((Func<AutomationGoal, bool>) (x => x.Id == Id));
        if (automationGoal == null)
          throw new NotFoundException("The automationGoal is not found");
        dataStoreResult = await this.DeleteAsync(automationGoal, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    AutomationGoal automationGoal, Transaction transaction)
    {
      if (automationGoal == null)
        return;
      if (automationGoal.Id == null)
      {
        automationGoal.CanDelete = true;
      }
      else
      {
        this.GetBusinessIdeas(automationGoal, transaction);
        automationGoal.CanDelete = automationGoal.Ideas.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(
      AutomationGoal automationGoal,
      Transaction transaction)
    {
      if (automationGoal == null)
        return;
      if (automationGoal.Id == null)
      {
        automationGoal.CanDelete = true;
      }
      else
      {
        await this.GetBusinessIdeasAsync(automationGoal, transaction);
        automationGoal.CanDelete = automationGoal.Ideas.Count <= 0;
      }
    }

    public AutomationGoal FindSharedAutomationGoal(
    
    string Id) => Id == null ? (AutomationGoal) null : _dataSet.SharedAutomationGoals.SingleOrDefault<AutomationGoal>((Func<AutomationGoal, bool>) (x => x.Id == Id));

    public async 
    
    Task<AutomationGoal> FindSharedAutomationGoalAsync(string Id)
    {
      AutomationGoal automationGoalAsync;
      try
      {
        automationGoalAsync = await Task.Run<AutomationGoal>((Func<AutomationGoal>) (() => this.FindSharedAutomationGoal(Id)));
      }
      catch
      {
        throw;
      }
      return automationGoalAsync;
    }

    public List<AutomationGoal> GetSharedAutomationGoalByDate(DateTime date) => _dataSet.SharedAutomationGoals.Where<AutomationGoal>((Func<AutomationGoal, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<AutomationGoal>();

    public async Task<List<AutomationGoal>> GetSharedAutomationGoalByDateAsync(DateTime date)
    {
      List<AutomationGoal> automationGoalByDateAsync;
      try
      {
        automationGoalByDateAsync = await Task.Run<List<AutomationGoal>>((Func<List<AutomationGoal>>) (() => this.GetSharedAutomationGoalByDate(date)));
      }
      catch
      {
        throw;
      }
      return automationGoalByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<AutomationGoal> cores)
    {
      try
      {
        foreach (AutomationGoal core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<AutomationGoal> cores)
    {
      try
      {
        foreach (AutomationGoal core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(AutomationGoal automationGoal)
    {
      if (automationGoal == null)
        return;
      if (automationGoal.CreatedById != null && automationGoal.CreatedBy == null)
        automationGoal.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == automationGoal.CreatedById));
      if (automationGoal.UpdatedById == null || automationGoal.UpdatedBy != null)
        return;
      automationGoal.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == automationGoal.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(AutomationGoal automationGoal)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(automationGoal)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeas(AutomationGoal automationGoal) => this.GetBusinessIdeas(automationGoal, (Transaction) null);

    internal async Task GetBusinessIdeasAsync(AutomationGoal automationGoal) => await this.GetBusinessIdeasAsync(automationGoal, (Transaction) null);

    internal void GetBusinessIdeas(AutomationGoal automationGoal, Transaction transaction)
    {
      if (automationGoal != null)
        automationGoal.Ideas = _dataSet.BusinessIdeas.Where<Idea>((Func<Idea, bool>) (m => m.AutomationGoalId == automationGoal.Id)).ToList<Idea>();
      if (transaction == null)
        return;
      for (int index = automationGoal.Ideas.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) automationGoal.Ideas[index]) == Action.Delete)
          automationGoal.Ideas.Remove(automationGoal.Ideas[index]);
      }
    }

    internal async Task GetBusinessIdeasAsync(
      AutomationGoal automationGoal,
      Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeas(automationGoal, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(AutomationType core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(AutomationType core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.AutomationType.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(AutomationType core)
    {
      string str = "";
      if (_dataSet.SharedAutomationTypes.ToList<AutomationType>().FirstOrDefault<AutomationType>((Func<AutomationType, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(AutomationType core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<AutomationType> automationTypes)
    {
      try
      {
        foreach (AutomationType automationType in automationTypes)
          this.Add(automationType);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<AutomationType> automationTypes)
    {
      try
      {
        foreach (AutomationType automationType in automationTypes)
          await this.AddAsync(automationType);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(AutomationType core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          AutomationType automationType = (AutomationType) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            automationType = _dataSet.SharedAutomationTypes.SingleOrDefault<AutomationType>((Func<AutomationType, bool>) (x => x.Id == core.Id));
          if (automationType == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedAutomationTypes.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////automationType.Update(core);
                        ///

                        _dataSet.Entry(automationType).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        automationType.Update(core);
                        _dataSet.SharedAutomationTypes.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          automationType = (AutomationType) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(AutomationType core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(AutomationType automationType, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(automationType, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      AutomationType automationType,
      bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(automationType, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<AutomationType> automationTypes, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (automationTypes == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (AutomationType automationType in automationTypes.ToList<AutomationType>())
        {
          dataStoreResult = this.Delete(automationType, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<AutomationType> automationTypes,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (automationTypes == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<AutomationType> lst = automationTypes.ToList<AutomationType>();
        foreach (AutomationType automationType in lst)
        {
          AutomationType item = automationType;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (AutomationType) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(AutomationType automationType, Transaction transaction)
    {
      try
      {
        if (automationType.Id == null)
          return DataStoreResult.Success;
        AutomationType entity = _dataSet.SharedAutomationTypes.SingleOrDefault<AutomationType>((Func<AutomationType, bool>) (x => x.Id == automationType.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(automationType, transaction);
        if (automationType.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedAutomationTypes.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The automation type (" + automationType.ToString() + ") contains ";
        if (automationType.RunningCosts.Count > 0)
          str += "running costs, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      AutomationType automationType,
      Transaction transaction)
    {
      try
      {
        if (automationType.Id == null)
          return DataStoreResult.Success;
        AutomationType core = _dataSet.SharedAutomationTypes.SingleOrDefault<AutomationType>((Func<AutomationType, bool>) (x => x.Id == automationType.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(automationType, transaction);
        if (automationType.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedAutomationTypes.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The automation type (" + automationType.ToString() + ") contains ";
        if (automationType.RunningCosts.Count > 0)
          erorrMessage += "running costs, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedAutomationType(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedAutomationTypes.SingleOrDefault<AutomationType>((Func<AutomationType, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The automationType is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedAutomationType(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        AutomationType automationType = _dataSet.SharedAutomationTypes.SingleOrDefault<AutomationType>((Func<AutomationType, bool>) (x => x.Id == Id));
        if (automationType == null)
          throw new NotFoundException("The automationType is not found");
        dataStoreResult = await this.DeleteAsync(automationType, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    AutomationType automationType, Transaction transaction)
    {
      if (automationType == null)
        return;
      if (automationType.Id == null)
      {
        automationType.CanDelete = true;
      }
      else
      {
        this.GetBusinessRunningCosts(automationType, transaction);
        automationType.CanDelete = automationType.RunningCosts.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(
      AutomationType automationType,
      Transaction transaction)
    {
      if (automationType == null)
        return;
      if (automationType.Id == null)
      {
        automationType.CanDelete = true;
      }
      else
      {
        await this.GetBusinessRunningCostsAsync(automationType, transaction);
        automationType.CanDelete = automationType.RunningCosts.Count <= 0;
      }
    }

    public AutomationType FindSharedAutomationType(
    
    string Id) => Id == null ? (AutomationType) null : _dataSet.SharedAutomationTypes.SingleOrDefault<AutomationType>((Func<AutomationType, bool>) (x => x.Id == Id));

    public async 
    
    Task<AutomationType> FindSharedAutomationTypeAsync(string Id)
    {
      AutomationType automationTypeAsync;
      try
      {
        automationTypeAsync = await Task.Run<AutomationType>((Func<AutomationType>) (() => this.FindSharedAutomationType(Id)));
      }
      catch
      {
        throw;
      }
      return automationTypeAsync;
    }

    public List<AutomationType> GetSharedAutomationTypeByDate(DateTime date) => _dataSet.SharedAutomationTypes.Where<AutomationType>((Func<AutomationType, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<AutomationType>();

    public async Task<List<AutomationType>> GetSharedAutomationTypeByDateAsync(DateTime date)
    {
      List<AutomationType> automationTypeByDateAsync;
      try
      {
        automationTypeByDateAsync = await Task.Run<List<AutomationType>>((Func<List<AutomationType>>) (() => this.GetSharedAutomationTypeByDate(date)));
      }
      catch
      {
        throw;
      }
      return automationTypeByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<AutomationType> cores)
    {
      try
      {
        foreach (AutomationType core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<AutomationType> cores)
    {
      try
      {
        foreach (AutomationType core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(AutomationType automationType)
    {
      if (automationType == null)
        return;
      if (automationType.CreatedById != null && automationType.CreatedBy == null)
        automationType.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == automationType.CreatedById));
      if (automationType.UpdatedById == null || automationType.UpdatedBy != null)
        return;
      automationType.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == automationType.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(AutomationType automationType)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(automationType)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessRunningCosts(AutomationType automationType) => this.GetBusinessRunningCosts(automationType, (Transaction) null);

    internal async Task GetBusinessRunningCostsAsync(AutomationType automationType) => await this.GetBusinessRunningCostsAsync(automationType, (Transaction) null);

    internal void GetBusinessRunningCosts(AutomationType automationType, Transaction transaction)
    {
      if (automationType != null)
        automationType.RunningCosts = _dataSet.BusinessRunningCosts.Where<RunningCost>((Func<RunningCost, bool>) (m => m.AutomationTypeId == automationType.Id)).ToList<RunningCost>();
      if (transaction == null)
        return;
      for (int index = automationType.RunningCosts.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) automationType.RunningCosts[index]) == Action.Delete)
          automationType.RunningCosts.Remove(automationType.RunningCosts[index]);
      }
    }

    internal async Task GetBusinessRunningCostsAsync(
      AutomationType automationType,
      Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessRunningCosts(automationType, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(AverageNumberOfStep core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(AverageNumberOfStep core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Colour))
        messages += "Shared.AverageNumberOfStep.Colour: Colour missing; ";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.AverageNumberOfStep.Name: Name missing; ";
      if (string.IsNullOrWhiteSpace(core.ShortName))
        messages += "Shared.AverageNumberOfStep.ShortName: Short Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(AverageNumberOfStep core)
    {
      string str = "";
      if (_dataSet.SharedAverageNumberOfSteps.ToList<AverageNumberOfStep>().FirstOrDefault<AverageNumberOfStep>((Func<AverageNumberOfStep, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(AverageNumberOfStep core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(
      IEnumerable<AverageNumberOfStep> averageNumberOfSteps)
    {
      try
      {
        foreach (AverageNumberOfStep averageNumberOfStep in averageNumberOfSteps)
          this.Add(averageNumberOfStep);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(
      IEnumerable<AverageNumberOfStep> averageNumberOfSteps)
    {
      try
      {
        foreach (AverageNumberOfStep averageNumberOfStep in averageNumberOfSteps)
          await this.AddAsync(averageNumberOfStep);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(AverageNumberOfStep core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          AverageNumberOfStep averageNumberOfStep = (AverageNumberOfStep) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            averageNumberOfStep = _dataSet.SharedAverageNumberOfSteps.SingleOrDefault<AverageNumberOfStep>((Func<AverageNumberOfStep, bool>) (x => x.Id == core.Id));
          if (averageNumberOfStep == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedAverageNumberOfSteps.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////averageNumberOfStep.Update(core);
                        ///

                        _dataSet.Entry(averageNumberOfStep).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        averageNumberOfStep.Update(core);
                        _dataSet.SharedAverageNumberOfSteps.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          averageNumberOfStep = (AverageNumberOfStep) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(AverageNumberOfStep core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(AverageNumberOfStep averageNumberOfStep, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(averageNumberOfStep, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      AverageNumberOfStep averageNumberOfStep,
      bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(averageNumberOfStep, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(
      IEnumerable<AverageNumberOfStep> averageNumberOfSteps,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (averageNumberOfSteps == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (AverageNumberOfStep averageNumberOfStep in averageNumberOfSteps.ToList<AverageNumberOfStep>())
        {
          dataStoreResult = this.Delete(averageNumberOfStep, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<AverageNumberOfStep> averageNumberOfSteps,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (averageNumberOfSteps == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<AverageNumberOfStep> lst = averageNumberOfSteps.ToList<AverageNumberOfStep>();
        foreach (AverageNumberOfStep averageNumberOfStep in lst)
        {
          AverageNumberOfStep item = averageNumberOfStep;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (AverageNumberOfStep) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(AverageNumberOfStep averageNumberOfStep, Transaction transaction)
    {
      try
      {
        if (averageNumberOfStep.Id == null)
          return DataStoreResult.Success;
        AverageNumberOfStep entity = _dataSet.SharedAverageNumberOfSteps.SingleOrDefault<AverageNumberOfStep>((Func<AverageNumberOfStep, bool>) (x => x.Id == averageNumberOfStep.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(averageNumberOfStep, transaction);
        if (averageNumberOfStep.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedAverageNumberOfSteps.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The average number of step (" + averageNumberOfStep.ToString() + ") contains ";
        if (averageNumberOfStep.Ideas.Count > 0)
          str += "ideas, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      AverageNumberOfStep averageNumberOfStep,
      Transaction transaction)
    {
      try
      {
        if (averageNumberOfStep.Id == null)
          return DataStoreResult.Success;
        AverageNumberOfStep core = _dataSet.SharedAverageNumberOfSteps.SingleOrDefault<AverageNumberOfStep>((Func<AverageNumberOfStep, bool>) (x => x.Id == averageNumberOfStep.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(averageNumberOfStep, transaction);
        if (averageNumberOfStep.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedAverageNumberOfSteps.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The average number of step (" + averageNumberOfStep.ToString() + ") contains ";
        if (averageNumberOfStep.Ideas.Count > 0)
          erorrMessage += "ideas, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedAverageNumberOfStep(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedAverageNumberOfSteps.SingleOrDefault<AverageNumberOfStep>((Func<AverageNumberOfStep, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The averageNumberOfStep is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedAverageNumberOfStep(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        AverageNumberOfStep averageNumberOfStep = _dataSet.SharedAverageNumberOfSteps.SingleOrDefault<AverageNumberOfStep>((Func<AverageNumberOfStep, bool>) (x => x.Id == Id));
        if (averageNumberOfStep == null)
          throw new NotFoundException("The averageNumberOfStep is not found");
        dataStoreResult = await this.DeleteAsync(averageNumberOfStep, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    AverageNumberOfStep averageNumberOfStep, Transaction transaction)
    {
      if (averageNumberOfStep == null)
        return;
      if (averageNumberOfStep.Id == null)
      {
        averageNumberOfStep.CanDelete = true;
      }
      else
      {
        this.GetBusinessIdeas(averageNumberOfStep, transaction);
        averageNumberOfStep.CanDelete = averageNumberOfStep.Ideas.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(
      AverageNumberOfStep averageNumberOfStep,
      Transaction transaction)
    {
      if (averageNumberOfStep == null)
        return;
      if (averageNumberOfStep.Id == null)
      {
        averageNumberOfStep.CanDelete = true;
      }
      else
      {
        await this.GetBusinessIdeasAsync(averageNumberOfStep, transaction);
        averageNumberOfStep.CanDelete = averageNumberOfStep.Ideas.Count <= 0;
      }
    }

    public AverageNumberOfStep FindSharedAverageNumberOfStep(
    
    string Id) => Id == null ? (AverageNumberOfStep) null : _dataSet.SharedAverageNumberOfSteps.SingleOrDefault<AverageNumberOfStep>((Func<AverageNumberOfStep, bool>) (x => x.Id == Id));

    public async 
    
    Task<AverageNumberOfStep> FindSharedAverageNumberOfStepAsync(string Id)
    {
      AverageNumberOfStep numberOfStepAsync;
      try
      {
        numberOfStepAsync = await Task.Run<AverageNumberOfStep>((Func<AverageNumberOfStep>) (() => this.FindSharedAverageNumberOfStep(Id)));
      }
      catch
      {
        throw;
      }
      return numberOfStepAsync;
    }

    public List<AverageNumberOfStep> GetSharedAverageNumberOfStepByDate(DateTime date) => _dataSet.SharedAverageNumberOfSteps.Where<AverageNumberOfStep>((Func<AverageNumberOfStep, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<AverageNumberOfStep>();

    public async Task<List<AverageNumberOfStep>> GetSharedAverageNumberOfStepByDateAsync(
      DateTime date)
    {
      List<AverageNumberOfStep> ofStepByDateAsync;
      try
      {
        ofStepByDateAsync = await Task.Run<List<AverageNumberOfStep>>((Func<List<AverageNumberOfStep>>) (() => this.GetSharedAverageNumberOfStepByDate(date)));
      }
      catch
      {
        throw;
      }
      return ofStepByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<AverageNumberOfStep> cores)
    {
      try
      {
        foreach (AverageNumberOfStep core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<AverageNumberOfStep> cores)
    {
      try
      {
        foreach (AverageNumberOfStep core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(AverageNumberOfStep averageNumberOfStep)
    {
      if (averageNumberOfStep == null)
        return;
      if (averageNumberOfStep.CreatedById != null && averageNumberOfStep.CreatedBy == null)
        averageNumberOfStep.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == averageNumberOfStep.CreatedById));
      if (averageNumberOfStep.UpdatedById == null || averageNumberOfStep.UpdatedBy != null)
        return;
      averageNumberOfStep.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == averageNumberOfStep.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(AverageNumberOfStep averageNumberOfStep)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(averageNumberOfStep)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeas(AverageNumberOfStep averageNumberOfStep) => this.GetBusinessIdeas(averageNumberOfStep, (Transaction) null);

    internal async Task GetBusinessIdeasAsync(AverageNumberOfStep averageNumberOfStep) => await this.GetBusinessIdeasAsync(averageNumberOfStep, (Transaction) null);

    internal void GetBusinessIdeas(AverageNumberOfStep averageNumberOfStep, Transaction transaction)
    {
      if (averageNumberOfStep != null)
        averageNumberOfStep.Ideas = _dataSet.BusinessIdeas.Where<Idea>((Func<Idea, bool>) (m => m.AverageNumberOfStepId == averageNumberOfStep.Id)).ToList<Idea>();
      if (transaction == null)
        return;
      for (int index = averageNumberOfStep.Ideas.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) averageNumberOfStep.Ideas[index]) == Action.Delete)
          averageNumberOfStep.Ideas.Remove(averageNumberOfStep.Ideas[index]);
      }
    }

    internal async Task GetBusinessIdeasAsync(
      AverageNumberOfStep averageNumberOfStep,
      Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeas(averageNumberOfStep, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(Badge core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(Badge core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.Badge.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(Badge core)
    {
      string str = "";
      if (_dataSet.SharedBadges.ToList<Badge>().FirstOrDefault<Badge>((Func<Badge, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(Badge core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<Badge> badges)
    {
      try
      {
        foreach (Badge badge in badges)
          this.Add(badge);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Badge> badges)
    {
      try
      {
        foreach (Badge badge in badges)
          await this.AddAsync(badge);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Badge core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          Badge badge = (Badge) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            badge = _dataSet.SharedBadges.SingleOrDefault<Badge>((Func<Badge, bool>) (x => x.Id == core.Id));
          if (badge == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedBadges.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////badge.Update(core);
                        ///

                        _dataSet.Entry(badge).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        badge.Update(core);
                        _dataSet.SharedBadges.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          badge = (Badge) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Badge core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Badge badge, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(badge, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Badge badge, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(badge, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Badge> badges, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (badges == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Badge badge in badges.ToList<Badge>())
        {
          dataStoreResult = this.Delete(badge, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<Badge> badges, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (badges == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Badge> lst = badges.ToList<Badge>();
        foreach (Badge badge in lst)
        {
          Badge item = badge;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Badge) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Badge badge, Transaction transaction)
    {
      try
      {
        if (badge.Id == null)
          return DataStoreResult.Success;
        Badge entity = _dataSet.SharedBadges.SingleOrDefault<Badge>((Func<Badge, bool>) (x => x.Id == badge.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.GetUserBadges(badge);
        foreach (UserBadge userBadge in badge.UserBadges)
        {
          int num = (int) this.Delete(userBadge, transaction);
        }
        this.RefreshCanDelete(badge, transaction);
        if (!badge.CanDelete)
          throw new ChildDependencyException("The badge (" + badge.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.SharedBadges.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Badge badge, Transaction transaction)
    {
      try
      {
        if (badge.Id == null)
          return DataStoreResult.Success;
        Badge core = _dataSet.SharedBadges.SingleOrDefault<Badge>((Func<Badge, bool>) (x => x.Id == badge.Id));
        if (core == null)
          return DataStoreResult.Success;
        this.GetUserBadges(badge);
        foreach (UserBadge m in badge.UserBadges)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        await this.RefreshCanDeleteAsync(badge, transaction);
        if (badge.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedBadges.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The badge (" + badge.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedBadge(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedBadges.SingleOrDefault<Badge>((Func<Badge, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The badge is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedBadge(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Badge badge = _dataSet.SharedBadges.SingleOrDefault<Badge>((Func<Badge, bool>) (x => x.Id == Id));
        if (badge == null)
          throw new NotFoundException("The badge is not found");
        dataStoreResult = await this.DeleteAsync(badge, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    Badge badge, Transaction transaction)
    {
      if (badge == null)
        return;
      if (badge.Id == null)
      {
        badge.CanDelete = true;
      }
      else
      {
        this.GetUserBadges(badge, transaction);
        badge.CanDelete = badge.UserBadges.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(Badge badge, Transaction transaction)
    {
      if (badge == null)
        return;
      badge.CanDelete = true;
    }

    public Badge FindSharedBadge(
    
    string Id) => Id == null ? (Badge) null : _dataSet.SharedBadges.SingleOrDefault<Badge>((Func<Badge, bool>) (x => x.Id == Id));

    public async 
    
    Task<Badge> FindSharedBadgeAsync(string Id)
    {
      Badge sharedBadgeAsync;
      try
      {
        sharedBadgeAsync = await Task.Run<Badge>((Func<Badge>) (() => this.FindSharedBadge(Id)));
      }
      catch
      {
        throw;
      }
      return sharedBadgeAsync;
    }

    public List<Badge> GetSharedBadgeByDate(DateTime date) => _dataSet.SharedBadges.Where<Badge>((Func<Badge, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Badge>();

    public async Task<List<Badge>> GetSharedBadgeByDateAsync(DateTime date)
    {
      List<Badge> badgeByDateAsync;
      try
      {
        badgeByDateAsync = await Task.Run<List<Badge>>((Func<List<Badge>>) (() => this.GetSharedBadgeByDate(date)));
      }
      catch
      {
        throw;
      }
      return badgeByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Badge> cores)
    {
      try
      {
        foreach (Badge core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Badge> cores)
    {
      try
      {
        foreach (Badge core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Badge badge)
    {
      if (badge == null)
        return;
      if (badge.CreatedById != null && badge.CreatedBy == null)
        badge.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == badge.CreatedById));
      if (badge.UpdatedById == null || badge.UpdatedBy != null)
        return;
      badge.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == badge.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Badge badge)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(badge)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetUserBadges(Badge badge) => this.GetUserBadges(badge, (Transaction) null);

    internal async Task GetUserBadgesAsync(Badge badge) => await this.GetUserBadgesAsync(badge, (Transaction) null);

    internal void GetUserBadges(Badge badge, Transaction transaction)
    {
      if (badge != null)
        badge.UserBadges = _dataSet.UserBadges.Where<UserBadge>((Func<UserBadge, bool>) (m => m.BadgeId == badge.Id)).ToList<UserBadge>();
      if (transaction == null)
        return;
      for (int index = badge.UserBadges.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) badge.UserBadges[index]) == Action.Delete)
          badge.UserBadges.Remove(badge.UserBadges[index]);
      }
    }

    internal async Task GetUserBadgesAsync(Badge badge, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetUserBadges(badge, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(ClientType core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(ClientType core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.ClientType.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public void Add(IEnumerable<ClientType> clientTypes)
    {
      try
      {
        foreach (ClientType clientType in clientTypes)
          this.Add(clientType);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<ClientType> clientTypes)
    {
      try
      {
        foreach (ClientType clientType in clientTypes)
          await this.AddAsync(clientType);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(ClientType core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          ClientType clientType = (ClientType) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            clientType = _dataSet.SharedClientTypes.SingleOrDefault<ClientType>((Func<ClientType, bool>) (x => x.Id == core.Id));
          if (clientType == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedClientTypes.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////clientType.Update(core);
                        ///

                        _dataSet.Entry(clientType).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        clientType.Update(core);
                        _dataSet.SharedClientTypes.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          clientType = (ClientType) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(ClientType core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(ClientType clientType, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(clientType, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(ClientType clientType, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(clientType, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<ClientType> clientTypes, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (clientTypes == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (ClientType clientType in clientTypes.ToList<ClientType>())
        {
          dataStoreResult = this.Delete(clientType, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<ClientType> clientTypes,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (clientTypes == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<ClientType> lst = clientTypes.ToList<ClientType>();
        foreach (ClientType clientType in lst)
        {
          ClientType item = clientType;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (ClientType) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(ClientType clientType, Transaction transaction)
    {
      try
      {
        if (clientType.Id == null)
          return DataStoreResult.Success;
        ClientType entity = _dataSet.SharedClientTypes.SingleOrDefault<ClientType>((Func<ClientType, bool>) (x => x.Id == clientType.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(clientType, transaction);
        if (clientType.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedClientTypes.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The clienttype (" + clientType.ToString() + ") contains ";
        if (clientType.Clients.Count > 0)
          str += "clients, ";
        if (clientType.Prospects.Count > 0)
          str += "prospects, ";
        if (clientType.Subscriptions.Count > 0)
          str += "subscriptions, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(ClientType clientType, Transaction transaction)
    {
      try
      {
        if (clientType.Id == null)
          return DataStoreResult.Success;
        ClientType core = _dataSet.SharedClientTypes.SingleOrDefault<ClientType>((Func<ClientType, bool>) (x => x.Id == clientType.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(clientType, transaction);
        if (clientType.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedClientTypes.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The clienttype (" + clientType.ToString() + ") contains ";
        if (clientType.Clients.Count > 0)
          erorrMessage += "clients, ";
        if (clientType.Prospects.Count > 0)
          erorrMessage += "prospects, ";
        if (clientType.Subscriptions.Count > 0)
          erorrMessage += "subscriptions, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedClientType(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedClientTypes.SingleOrDefault<ClientType>((Func<ClientType, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The clientType is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedClientType(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        ClientType clientType = _dataSet.SharedClientTypes.SingleOrDefault<ClientType>((Func<ClientType, bool>) (x => x.Id == Id));
        if (clientType == null)
          throw new NotFoundException("The clientType is not found");
        dataStoreResult = await this.DeleteAsync(clientType, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    ClientType clientType, Transaction transaction)
    {
      if (clientType == null)
        return;
      if (clientType.Id == null)
      {
        clientType.CanDelete = true;
      }
      else
      {
        this.GetBusinessClients(clientType, transaction);
        this.GetCRMProspects(clientType, transaction);
        this.GetShopSubscriptions(clientType, transaction);
        clientType.CanDelete = clientType.Clients.Count + clientType.Prospects.Count + clientType.Subscriptions.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(ClientType clientType, Transaction transaction)
    {
      if (clientType == null)
        return;
      if (clientType.Id == null)
      {
        clientType.CanDelete = true;
      }
      else
      {
        await this.GetBusinessClientsAsync(clientType, transaction);
        await this.GetCRMProspectsAsync(clientType, transaction);
        await this.GetShopSubscriptionsAsync(clientType, transaction);
        clientType.CanDelete = clientType.Clients.Count + clientType.Prospects.Count + clientType.Subscriptions.Count <= 0;
      }
    }

    public ClientType FindSharedClientType(
    
    string Id) => Id == null ? (ClientType) null : _dataSet.SharedClientTypes.SingleOrDefault<ClientType>((Func<ClientType, bool>) (x => x.Id == Id));

    public async 
    
    Task<ClientType> FindSharedClientTypeAsync(string Id)
    {
      ClientType sharedClientTypeAsync;
      try
      {
        sharedClientTypeAsync = await Task.Run<ClientType>((Func<ClientType>) (() => this.FindSharedClientType(Id)));
      }
      catch
      {
        throw;
      }
      return sharedClientTypeAsync;
    }

    public List<ClientType> GetSharedClientTypeByDate(DateTime date) => _dataSet.SharedClientTypes.Where<ClientType>((Func<ClientType, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<ClientType>();

    public async Task<List<ClientType>> GetSharedClientTypeByDateAsync(DateTime date)
    {
      List<ClientType> clientTypeByDateAsync;
      try
      {
        clientTypeByDateAsync = await Task.Run<List<ClientType>>((Func<List<ClientType>>) (() => this.GetSharedClientTypeByDate(date)));
      }
      catch
      {
        throw;
      }
      return clientTypeByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<ClientType> cores)
    {
      try
      {
        foreach (ClientType core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<ClientType> cores)
    {
      try
      {
        foreach (ClientType core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(ClientType clientType)
    {
      if (clientType == null)
        return;
      if (clientType.CreatedById != null && clientType.CreatedBy == null)
        clientType.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == clientType.CreatedById));
      if (clientType.UpdatedById == null || clientType.UpdatedBy != null)
        return;
      clientType.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == clientType.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(ClientType clientType)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(clientType)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessClients(ClientType type) => this.GetBusinessClients(type, (Transaction) null);

    internal async Task GetBusinessClientsAsync(ClientType type) => await this.GetBusinessClientsAsync(type, (Transaction) null);

    internal void GetBusinessClients(ClientType type, Transaction transaction)
    {
      if (type != null)
        type.Clients = _dataSet.BusinessClients.Where<Client>((Func<Client, bool>) (m => m.TypeId == type.Id)).ToList<Client>();
      if (transaction == null)
        return;
      for (int index = type.Clients.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) type.Clients[index]) == Action.Delete)
          type.Clients.Remove(type.Clients[index]);
      }
    }

    internal async Task GetBusinessClientsAsync(ClientType type, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClients(type, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetCRMProspects(ClientType clientType) => this.GetCRMProspects(clientType, (Transaction) null);

    internal async Task GetCRMProspectsAsync(ClientType clientType) => await this.GetCRMProspectsAsync(clientType, (Transaction) null);

    internal void GetCRMProspects(ClientType clientType, Transaction transaction)
    {
      if (clientType != null)
        clientType.Prospects = _dataSet.CRMProspects.Where<Prospect>((Func<Prospect, bool>) (m => m.ClientTypeId == clientType.Id)).ToList<Prospect>();
      if (transaction == null)
        return;
      for (int index = clientType.Prospects.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) clientType.Prospects[index]) == Action.Delete)
          clientType.Prospects.Remove(clientType.Prospects[index]);
      }
    }

    internal async Task GetCRMProspectsAsync(ClientType clientType, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCRMProspects(clientType, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetShopSubscriptions(ClientType agencyType) => this.GetShopSubscriptions(agencyType, (Transaction) null);

    internal async Task GetShopSubscriptionsAsync(ClientType agencyType) => await this.GetShopSubscriptionsAsync(agencyType, (Transaction) null);

    internal void GetShopSubscriptions(ClientType agencyType, Transaction transaction)
    {
      if (agencyType != null)
        agencyType.Subscriptions = _dataSet.ShopSubscriptions.Where<Subscription>((Func<Subscription, bool>) (m => m.AgencyTypeId == agencyType.Id)).ToList<Subscription>();
      if (transaction == null)
        return;
      for (int index = agencyType.Subscriptions.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) agencyType.Subscriptions[index]) == Action.Delete)
          agencyType.Subscriptions.Remove(agencyType.Subscriptions[index]);
      }
    }

    internal async Task GetShopSubscriptionsAsync(ClientType agencyType, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetShopSubscriptions(agencyType, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(CostType core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(CostType core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.CostType.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(CostType core)
    {
      string str = "";
      if (_dataSet.SharedCostTypes.ToList<CostType>().FirstOrDefault<CostType>((Func<CostType, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(CostType core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<CostType> costTypes)
    {
      try
      {
        foreach (CostType costType in costTypes)
          this.Add(costType);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<CostType> costTypes)
    {
      try
      {
        foreach (CostType costType in costTypes)
          await this.AddAsync(costType);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(CostType core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          CostType costType = (CostType) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            costType = _dataSet.SharedCostTypes.SingleOrDefault<CostType>((Func<CostType, bool>) (x => x.Id == core.Id));
          if (costType == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedCostTypes.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////costType.Update(core);
                        ///

                        _dataSet.Entry(costType).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        costType.Update(core);
                        _dataSet.SharedCostTypes.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          costType = (CostType) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(CostType core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(CostType costType, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(costType, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(CostType costType, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(costType, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<CostType> costTypes, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (costTypes == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (CostType costType in costTypes.ToList<CostType>())
        {
          dataStoreResult = this.Delete(costType, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<CostType> costTypes,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (costTypes == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<CostType> lst = costTypes.ToList<CostType>();
        foreach (CostType costType in lst)
        {
          CostType item = costType;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (CostType) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(CostType costType, Transaction transaction)
    {
      try
      {
        if (costType.Id == null)
          return DataStoreResult.Success;
        CostType entity = _dataSet.SharedCostTypes.SingleOrDefault<CostType>((Func<CostType, bool>) (x => x.Id == costType.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(costType, transaction);
        if (costType.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedCostTypes.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The cost type (" + costType.ToString() + ") contains ";
        if (costType.OtherRunningCosts.Count > 0)
          str += "other running costs, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(CostType costType, Transaction transaction)
    {
      try
      {
        if (costType.Id == null)
          return DataStoreResult.Success;
        CostType core = _dataSet.SharedCostTypes.SingleOrDefault<CostType>((Func<CostType, bool>) (x => x.Id == costType.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(costType, transaction);
        if (costType.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedCostTypes.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The cost type (" + costType.ToString() + ") contains ";
        if (costType.OtherRunningCosts.Count > 0)
          erorrMessage += "other running costs, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedCostType(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedCostTypes.SingleOrDefault<CostType>((Func<CostType, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The costType is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedCostType(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        CostType costType = _dataSet.SharedCostTypes.SingleOrDefault<CostType>((Func<CostType, bool>) (x => x.Id == Id));
        if (costType == null)
          throw new NotFoundException("The costType is not found");
        dataStoreResult = await this.DeleteAsync(costType, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    CostType costType, Transaction transaction)
    {
      if (costType == null)
        return;
      if (costType.Id == null)
      {
        costType.CanDelete = true;
      }
      else
      {
        this.GetBusinessOtherRunningCosts(costType, transaction);
        costType.CanDelete = costType.OtherRunningCosts.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(CostType costType, Transaction transaction)
    {
      if (costType == null)
        return;
      if (costType.Id == null)
      {
        costType.CanDelete = true;
      }
      else
      {
        await this.GetBusinessOtherRunningCostsAsync(costType, transaction);
        costType.CanDelete = costType.OtherRunningCosts.Count <= 0;
      }
    }

    public CostType FindSharedCostType(
    
    string Id) => Id == null ? (CostType) null : _dataSet.SharedCostTypes.SingleOrDefault<CostType>((Func<CostType, bool>) (x => x.Id == Id));

    public async 
    
    Task<CostType> FindSharedCostTypeAsync(string Id)
    {
      CostType sharedCostTypeAsync;
      try
      {
        sharedCostTypeAsync = await Task.Run<CostType>((Func<CostType>) (() => this.FindSharedCostType(Id)));
      }
      catch
      {
        throw;
      }
      return sharedCostTypeAsync;
    }

    public List<CostType> GetSharedCostTypeByDate(DateTime date) => _dataSet.SharedCostTypes.Where<CostType>((Func<CostType, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<CostType>();

    public async Task<List<CostType>> GetSharedCostTypeByDateAsync(DateTime date)
    {
      List<CostType> costTypeByDateAsync;
      try
      {
        costTypeByDateAsync = await Task.Run<List<CostType>>((Func<List<CostType>>) (() => this.GetSharedCostTypeByDate(date)));
      }
      catch
      {
        throw;
      }
      return costTypeByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<CostType> cores)
    {
      try
      {
        foreach (CostType core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<CostType> cores)
    {
      try
      {
        foreach (CostType core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(CostType costType)
    {
      if (costType == null)
        return;
      if (costType.CreatedById != null && costType.CreatedBy == null)
        costType.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == costType.CreatedById));
      if (costType.UpdatedById == null || costType.UpdatedBy != null)
        return;
      costType.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == costType.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(CostType costType)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(costType)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessOtherRunningCosts(CostType costType) => this.GetBusinessOtherRunningCosts(costType, (Transaction) null);

    internal async Task GetBusinessOtherRunningCostsAsync(CostType costType) => await this.GetBusinessOtherRunningCostsAsync(costType, (Transaction) null);

    internal void GetBusinessOtherRunningCosts(CostType costType, Transaction transaction)
    {
      if (costType != null)
        costType.OtherRunningCosts = _dataSet.BusinessOtherRunningCosts.Where<OtherRunningCost>((Func<OtherRunningCost, bool>) (m => m.CostTypeId == costType.Id)).ToList<OtherRunningCost>();
      if (transaction == null)
        return;
      for (int index = costType.OtherRunningCosts.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) costType.OtherRunningCosts[index]) == Action.Delete)
          costType.OtherRunningCosts.Remove(costType.OtherRunningCosts[index]);
      }
    }

    internal async Task GetBusinessOtherRunningCostsAsync(
      CostType costType,
      Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessOtherRunningCosts(costType, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(Country core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(Country core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.Country.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public void Add(IEnumerable<Country> countries)
    {
      try
      {
        foreach (Country country in countries)
          this.Add(country);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Country> countries)
    {
      try
      {
        foreach (Country country in countries)
          await this.AddAsync(country);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Country core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          Country country = (Country) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            country = _dataSet.SharedCountries.SingleOrDefault<Country>((Func<Country, bool>) (x => x.Id == core.Id));
          if (country == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedCountries.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////country.Update(core);
                        ///

                        _dataSet.Entry(country).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        country.Update(core);
                        _dataSet.SharedCountries.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          country = (Country) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Country core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Country country, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(country, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Country country, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(country, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Country> countries, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (countries == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Country country in countries.ToList<Country>())
        {
          dataStoreResult = this.Delete(country, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<Country> countries,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (countries == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Country> lst = countries.ToList<Country>();
        foreach (Country country in lst)
        {
          Country item = country;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Country) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Country country, Transaction transaction)
    {
      try
      {
        if (country.Id == null)
          return DataStoreResult.Success;
        Country entity = _dataSet.SharedCountries.SingleOrDefault<Country>((Func<Country, bool>) (x => x.Id == country.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(country, transaction);
        if (country.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedCountries.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The country (" + country.ToString() + ") contains ";
        if (country.Clients.Count > 0)
          str += "clients, ";
        if (country.Prospects.Count > 0)
          str += "prospects, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Country country, Transaction transaction)
    {
      try
      {
        if (country.Id == null)
          return DataStoreResult.Success;
        Country core = _dataSet.SharedCountries.SingleOrDefault<Country>((Func<Country, bool>) (x => x.Id == country.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(country, transaction);
        if (country.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedCountries.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The country (" + country.ToString() + ") contains ";
        if (country.Clients.Count > 0)
          erorrMessage += "clients, ";
        if (country.Prospects.Count > 0)
          erorrMessage += "prospects, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedCountry(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedCountries.SingleOrDefault<Country>((Func<Country, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The country is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedCountry(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Country country = _dataSet.SharedCountries.SingleOrDefault<Country>((Func<Country, bool>) (x => x.Id == Id));
        if (country == null)
          throw new NotFoundException("The country is not found");
        dataStoreResult = await this.DeleteAsync(country, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    Country country, Transaction transaction)
    {
      if (country == null)
        return;
      if (country.Id == null)
      {
        country.CanDelete = true;
      }
      else
      {
        this.GetBusinessClients(country, transaction);
        this.GetCRMProspects(country, transaction);
        country.CanDelete = country.Clients.Count + country.Prospects.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(Country country, Transaction transaction)
    {
      if (country == null)
        return;
      if (country.Id == null)
      {
        country.CanDelete = true;
      }
      else
      {
        await this.GetBusinessClientsAsync(country, transaction);
        await this.GetCRMProspectsAsync(country, transaction);
        country.CanDelete = country.Clients.Count + country.Prospects.Count <= 0;
      }
    }

    public Country FindSharedCountry(
    
    string Id) => Id == null ? (Country) null : _dataSet.SharedCountries.SingleOrDefault<Country>((Func<Country, bool>) (x => x.Id == Id));

    public async 
    
    Task<Country> FindSharedCountryAsync(string Id)
    {
      Country sharedCountryAsync;
      try
      {
        sharedCountryAsync = await Task.Run<Country>((Func<Country>) (() => this.FindSharedCountry(Id)));
      }
      catch
      {
        throw;
      }
      return sharedCountryAsync;
    }

    public List<Country> GetSharedCountryByDate(DateTime date) => _dataSet.SharedCountries.Where<Country>((Func<Country, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Country>();

    public async Task<List<Country>> GetSharedCountryByDateAsync(DateTime date)
    {
      List<Country> countryByDateAsync;
      try
      {
        countryByDateAsync = await Task.Run<List<Country>>((Func<List<Country>>) (() => this.GetSharedCountryByDate(date)));
      }
      catch
      {
        throw;
      }
      return countryByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Country> cores)
    {
      try
      {
        foreach (Country core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Country> cores)
    {
      try
      {
        foreach (Country core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Country country)
    {
      if (country == null)
        return;
      if (country.CreatedById != null && country.CreatedBy == null)
        country.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == country.CreatedById));
      if (country.UpdatedById == null || country.UpdatedBy != null)
        return;
      country.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == country.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Country country)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(country)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessClients(Country country) => this.GetBusinessClients(country, (Transaction) null);

    internal async Task GetBusinessClientsAsync(Country country) => await this.GetBusinessClientsAsync(country, (Transaction) null);

    internal void GetBusinessClients(Country country, Transaction transaction)
    {
      if (country != null)
        country.Clients = _dataSet.BusinessClients.Where<Client>((Func<Client, bool>) (m => m.CountryId == country.Id)).ToList<Client>();
      if (transaction == null)
        return;
      for (int index = country.Clients.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) country.Clients[index]) == Action.Delete)
          country.Clients.Remove(country.Clients[index]);
      }
    }

    internal async Task GetBusinessClientsAsync(Country country, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClients(country, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetCRMProspects(Country country) => this.GetCRMProspects(country, (Transaction) null);

    internal async Task GetCRMProspectsAsync(Country country) => await this.GetCRMProspectsAsync(country, (Transaction) null);

    internal void GetCRMProspects(Country country, Transaction transaction)
    {
      if (country != null)
        country.Prospects = _dataSet.CRMProspects.Where<Prospect>((Func<Prospect, bool>) (m => m.CountryId == country.Id)).ToList<Prospect>();
      if (transaction == null)
        return;
      for (int index = country.Prospects.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) country.Prospects[index]) == Action.Delete)
          country.Prospects.Remove(country.Prospects[index]);
      }
    }

    internal async Task GetCRMProspectsAsync(Country country, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCRMProspects(country, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(DataInputPercentOfStructured core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(DataInputPercentOfStructured core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Colour))
        messages += "Shared.DataInputPercentOfStructured.Colour: Colour missing; ";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.DataInputPercentOfStructured.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(DataInputPercentOfStructured core)
    {
      string str = "";
      if (_dataSet.SharedDataInputPercentOfStructureds.ToList<DataInputPercentOfStructured>().FirstOrDefault<DataInputPercentOfStructured>((Func<DataInputPercentOfStructured, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(DataInputPercentOfStructured core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(
      IEnumerable<DataInputPercentOfStructured> dataInputPercentOfStructureds)
    {
      try
      {
        foreach (DataInputPercentOfStructured percentOfStructured in dataInputPercentOfStructureds)
          this.Add(percentOfStructured);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(
      IEnumerable<DataInputPercentOfStructured> dataInputPercentOfStructureds)
    {
      try
      {
        foreach (DataInputPercentOfStructured dataInputPercentOfStructured in dataInputPercentOfStructureds)
          await this.AddAsync(dataInputPercentOfStructured);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(DataInputPercentOfStructured core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          DataInputPercentOfStructured dataInputPercentOfStructured = (DataInputPercentOfStructured) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            dataInputPercentOfStructured = _dataSet.SharedDataInputPercentOfStructureds.SingleOrDefault<DataInputPercentOfStructured>((Func<DataInputPercentOfStructured, bool>) (x => x.Id == core.Id));
          if (dataInputPercentOfStructured == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedDataInputPercentOfStructureds.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////dataInputPercentOfStructured.Update(core);
                        ///

                        _dataSet.Entry(dataInputPercentOfStructured).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        dataInputPercentOfStructured.Update(core);
                        _dataSet.SharedDataInputPercentOfStructureds.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          dataInputPercentOfStructured = (DataInputPercentOfStructured) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(DataInputPercentOfStructured core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(
      DataInputPercentOfStructured dataInputPercentOfStructured,
      bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(dataInputPercentOfStructured, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      DataInputPercentOfStructured dataInputPercentOfStructured,
      bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(dataInputPercentOfStructured, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(
      IEnumerable<DataInputPercentOfStructured> dataInputPercentOfStructureds,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (dataInputPercentOfStructureds == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (DataInputPercentOfStructured dataInputPercentOfStructured in dataInputPercentOfStructureds.ToList<DataInputPercentOfStructured>())
        {
          dataStoreResult = this.Delete(dataInputPercentOfStructured, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<DataInputPercentOfStructured> dataInputPercentOfStructureds,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (dataInputPercentOfStructureds == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<DataInputPercentOfStructured> lst = dataInputPercentOfStructureds.ToList<DataInputPercentOfStructured>();
        foreach (DataInputPercentOfStructured percentOfStructured in lst)
        {
          DataInputPercentOfStructured item = percentOfStructured;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (DataInputPercentOfStructured) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(
      DataInputPercentOfStructured dataInputPercentOfStructured,
      Transaction transaction)
    {
      try
      {
        if (dataInputPercentOfStructured.Id == null)
          return DataStoreResult.Success;
        DataInputPercentOfStructured entity = _dataSet.SharedDataInputPercentOfStructureds.SingleOrDefault<DataInputPercentOfStructured>((Func<DataInputPercentOfStructured, bool>) (x => x.Id == dataInputPercentOfStructured.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(dataInputPercentOfStructured, transaction);
        if (dataInputPercentOfStructured.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedDataInputPercentOfStructureds.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The % of structured digital data input (" + dataInputPercentOfStructured.ToString() + ") contains ";
        if (dataInputPercentOfStructured.Ideas.Count > 0)
          str += "ideas, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      DataInputPercentOfStructured dataInputPercentOfStructured,
      Transaction transaction)
    {
      try
      {
        if (dataInputPercentOfStructured.Id == null)
          return DataStoreResult.Success;
        DataInputPercentOfStructured core = _dataSet.SharedDataInputPercentOfStructureds.SingleOrDefault<DataInputPercentOfStructured>((Func<DataInputPercentOfStructured, bool>) (x => x.Id == dataInputPercentOfStructured.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(dataInputPercentOfStructured, transaction);
        if (dataInputPercentOfStructured.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedDataInputPercentOfStructureds.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The % of structured digital data input (" + dataInputPercentOfStructured.ToString() + ") contains ";
        if (dataInputPercentOfStructured.Ideas.Count > 0)
          erorrMessage += "ideas, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedDataInputPercentOfStructured(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedDataInputPercentOfStructureds.SingleOrDefault<DataInputPercentOfStructured>((Func<DataInputPercentOfStructured, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The dataInputPercentOfStructured is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedDataInputPercentOfStructured(

      
      string Id,
      bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        DataInputPercentOfStructured dataInputPercentOfStructured = _dataSet.SharedDataInputPercentOfStructureds.SingleOrDefault<DataInputPercentOfStructured>((Func<DataInputPercentOfStructured, bool>) (x => x.Id == Id));
        if (dataInputPercentOfStructured == null)
          throw new NotFoundException("The dataInputPercentOfStructured is not found");
        dataStoreResult = await this.DeleteAsync(dataInputPercentOfStructured, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(

      
      DataInputPercentOfStructured dataInputPercentOfStructured,
      Transaction transaction)
    {
      if (dataInputPercentOfStructured == null)
        return;
      if (dataInputPercentOfStructured.Id == null)
      {
        dataInputPercentOfStructured.CanDelete = true;
      }
      else
      {
        this.GetBusinessIdeas(dataInputPercentOfStructured, transaction);
        dataInputPercentOfStructured.CanDelete = dataInputPercentOfStructured.Ideas.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(
      DataInputPercentOfStructured dataInputPercentOfStructured,
      Transaction transaction)
    {
      if (dataInputPercentOfStructured == null)
        return;
      if (dataInputPercentOfStructured.Id == null)
      {
        dataInputPercentOfStructured.CanDelete = true;
      }
      else
      {
        await this.GetBusinessIdeasAsync(dataInputPercentOfStructured, transaction);
        dataInputPercentOfStructured.CanDelete = dataInputPercentOfStructured.Ideas.Count <= 0;
      }
    }

    public DataInputPercentOfStructured FindSharedDataInputPercentOfStructured(
    
    string Id) => Id == null ? (DataInputPercentOfStructured) null : _dataSet.SharedDataInputPercentOfStructureds.SingleOrDefault<DataInputPercentOfStructured>((Func<DataInputPercentOfStructured, bool>) (x => x.Id == Id));

    public async 
    
    Task<DataInputPercentOfStructured> FindSharedDataInputPercentOfStructuredAsync(string Id)
    {
      DataInputPercentOfStructured ofStructuredAsync;
      try
      {
        ofStructuredAsync = await Task.Run<DataInputPercentOfStructured>((Func<DataInputPercentOfStructured>) (() => this.FindSharedDataInputPercentOfStructured(Id)));
      }
      catch
      {
        throw;
      }
      return ofStructuredAsync;
    }

    public List<DataInputPercentOfStructured> GetSharedDataInputPercentOfStructuredByDate(
      DateTime date)
    {
      return _dataSet.SharedDataInputPercentOfStructureds.Where<DataInputPercentOfStructured>((Func<DataInputPercentOfStructured, bool>) (m =>
      {
        DateTime? date1 = m.Date;
        DateTime date2 = date.Date;
        if (!date1.HasValue)
          return false;
        return !date1.HasValue || date1.GetValueOrDefault() == date2;
      })).ToList<DataInputPercentOfStructured>();
    }

    public async Task<List<DataInputPercentOfStructured>> GetSharedDataInputPercentOfStructuredByDateAsync(
      DateTime date)
    {
      List<DataInputPercentOfStructured> structuredByDateAsync;
      try
      {
        structuredByDateAsync = await Task.Run<List<DataInputPercentOfStructured>>((Func<List<DataInputPercentOfStructured>>) (() => this.GetSharedDataInputPercentOfStructuredByDate(date)));
      }
      catch
      {
        throw;
      }
      return structuredByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<DataInputPercentOfStructured> cores)
    {
      try
      {
        foreach (DataInputPercentOfStructured core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<DataInputPercentOfStructured> cores)
    {
      try
      {
        foreach (DataInputPercentOfStructured core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(
      DataInputPercentOfStructured dataInputPercentOfStructured)
    {
      if (dataInputPercentOfStructured == null)
        return;
      if (dataInputPercentOfStructured.CreatedById != null && dataInputPercentOfStructured.CreatedBy == null)
        dataInputPercentOfStructured.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == dataInputPercentOfStructured.CreatedById));
      if (dataInputPercentOfStructured.UpdatedById == null || dataInputPercentOfStructured.UpdatedBy != null)
        return;
      dataInputPercentOfStructured.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == dataInputPercentOfStructured.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(
      DataInputPercentOfStructured dataInputPercentOfStructured)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(dataInputPercentOfStructured)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeas(
      DataInputPercentOfStructured dataInputPercentOfStructured)
    {
      this.GetBusinessIdeas(dataInputPercentOfStructured, (Transaction) null);
    }

    internal async Task GetBusinessIdeasAsync(
      DataInputPercentOfStructured dataInputPercentOfStructured)
    {
      await this.GetBusinessIdeasAsync(dataInputPercentOfStructured, (Transaction) null);
    }

    internal void GetBusinessIdeas(
      DataInputPercentOfStructured dataInputPercentOfStructured,
      Transaction transaction)
    {
      if (dataInputPercentOfStructured != null)
        dataInputPercentOfStructured.Ideas = _dataSet.BusinessIdeas.Where<Idea>((Func<Idea, bool>) (m => m.DataInputPercentOfStructuredId == dataInputPercentOfStructured.Id)).ToList<Idea>();
      if (transaction == null)
        return;
      for (int index = dataInputPercentOfStructured.Ideas.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) dataInputPercentOfStructured.Ideas[index]) == Action.Delete)
          dataInputPercentOfStructured.Ideas.Remove(dataInputPercentOfStructured.Ideas[index]);
      }
    }

    internal async Task GetBusinessIdeasAsync(
      DataInputPercentOfStructured dataInputPercentOfStructured,
      Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeas(dataInputPercentOfStructured, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(DecisionCount core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(DecisionCount core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Colour))
        messages += "Shared.DecisionCount.Colour: Colour missing; ";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.DecisionCount.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(DecisionCount core)
    {
      string str = "";
      if (_dataSet.SharedDecisionCounts.ToList<DecisionCount>().FirstOrDefault<DecisionCount>((Func<DecisionCount, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(DecisionCount core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<DecisionCount> decisionCounts)
    {
      try
      {
        foreach (DecisionCount decisionCount in decisionCounts)
          this.Add(decisionCount);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<DecisionCount> decisionCounts)
    {
      try
      {
        foreach (DecisionCount decisionCount in decisionCounts)
          await this.AddAsync(decisionCount);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(DecisionCount core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          DecisionCount decisionCount = (DecisionCount) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            decisionCount = _dataSet.SharedDecisionCounts.SingleOrDefault<DecisionCount>((Func<DecisionCount, bool>) (x => x.Id == core.Id));
          if (decisionCount == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedDecisionCounts.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////decisionCount.Update(core);
                        ///

                        _dataSet.Entry(decisionCount).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        decisionCount.Update(core);
                        _dataSet.SharedDecisionCounts.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          decisionCount = (DecisionCount) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(DecisionCount core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(DecisionCount decisionCount, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(decisionCount, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(DecisionCount decisionCount, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(decisionCount, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<DecisionCount> decisionCounts, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (decisionCounts == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (DecisionCount decisionCount in decisionCounts.ToList<DecisionCount>())
        {
          dataStoreResult = this.Delete(decisionCount, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<DecisionCount> decisionCounts,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (decisionCounts == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<DecisionCount> lst = decisionCounts.ToList<DecisionCount>();
        foreach (DecisionCount decisionCount in lst)
        {
          DecisionCount item = decisionCount;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (DecisionCount) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(DecisionCount decisionCount, Transaction transaction)
    {
      try
      {
        if (decisionCount.Id == null)
          return DataStoreResult.Success;
        DecisionCount entity = _dataSet.SharedDecisionCounts.SingleOrDefault<DecisionCount>((Func<DecisionCount, bool>) (x => x.Id == decisionCount.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(decisionCount, transaction);
        if (decisionCount.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedDecisionCounts.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The decision count (" + decisionCount.ToString() + ") contains ";
        if (decisionCount.Ideas.Count > 0)
          str += "ideas, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      DecisionCount decisionCount,
      Transaction transaction)
    {
      try
      {
        if (decisionCount.Id == null)
          return DataStoreResult.Success;
        DecisionCount core = _dataSet.SharedDecisionCounts.SingleOrDefault<DecisionCount>((Func<DecisionCount, bool>) (x => x.Id == decisionCount.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(decisionCount, transaction);
        if (decisionCount.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedDecisionCounts.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The decision count (" + decisionCount.ToString() + ") contains ";
        if (decisionCount.Ideas.Count > 0)
          erorrMessage += "ideas, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedDecisionCount(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedDecisionCounts.SingleOrDefault<DecisionCount>((Func<DecisionCount, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The decisionCount is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedDecisionCount(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        DecisionCount decisionCount = _dataSet.SharedDecisionCounts.SingleOrDefault<DecisionCount>((Func<DecisionCount, bool>) (x => x.Id == Id));
        if (decisionCount == null)
          throw new NotFoundException("The decisionCount is not found");
        dataStoreResult = await this.DeleteAsync(decisionCount, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    DecisionCount decisionCount, Transaction transaction)
    {
      if (decisionCount == null)
        return;
      if (decisionCount.Id == null)
      {
        decisionCount.CanDelete = true;
      }
      else
      {
        this.GetBusinessIdeas(decisionCount, transaction);
        decisionCount.CanDelete = decisionCount.Ideas.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(DecisionCount decisionCount, Transaction transaction)
    {
      if (decisionCount == null)
        return;
      if (decisionCount.Id == null)
      {
        decisionCount.CanDelete = true;
      }
      else
      {
        await this.GetBusinessIdeasAsync(decisionCount, transaction);
        decisionCount.CanDelete = decisionCount.Ideas.Count <= 0;
      }
    }

    public DecisionCount FindSharedDecisionCount(
    
    string Id) => Id == null ? (DecisionCount) null : _dataSet.SharedDecisionCounts.SingleOrDefault<DecisionCount>((Func<DecisionCount, bool>) (x => x.Id == Id));

    public async 
    
    Task<DecisionCount> FindSharedDecisionCountAsync(string Id)
    {
      DecisionCount decisionCountAsync;
      try
      {
        decisionCountAsync = await Task.Run<DecisionCount>((Func<DecisionCount>) (() => this.FindSharedDecisionCount(Id)));
      }
      catch
      {
        throw;
      }
      return decisionCountAsync;
    }

    public List<DecisionCount> GetSharedDecisionCountByDate(DateTime date) => _dataSet.SharedDecisionCounts.Where<DecisionCount>((Func<DecisionCount, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<DecisionCount>();

    public async Task<List<DecisionCount>> GetSharedDecisionCountByDateAsync(DateTime date)
    {
      List<DecisionCount> countByDateAsync;
      try
      {
        countByDateAsync = await Task.Run<List<DecisionCount>>((Func<List<DecisionCount>>) (() => this.GetSharedDecisionCountByDate(date)));
      }
      catch
      {
        throw;
      }
      return countByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<DecisionCount> cores)
    {
      try
      {
        foreach (DecisionCount core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<DecisionCount> cores)
    {
      try
      {
        foreach (DecisionCount core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(DecisionCount decisionCount)
    {
      if (decisionCount == null)
        return;
      if (decisionCount.CreatedById != null && decisionCount.CreatedBy == null)
        decisionCount.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == decisionCount.CreatedById));
      if (decisionCount.UpdatedById == null || decisionCount.UpdatedBy != null)
        return;
      decisionCount.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == decisionCount.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(DecisionCount decisionCount)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(decisionCount)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeas(DecisionCount decisionCount) => this.GetBusinessIdeas(decisionCount, (Transaction) null);

    internal async Task GetBusinessIdeasAsync(DecisionCount decisionCount) => await this.GetBusinessIdeasAsync(decisionCount, (Transaction) null);

    internal void GetBusinessIdeas(DecisionCount decisionCount, Transaction transaction)
    {
      if (decisionCount != null)
        decisionCount.Ideas = _dataSet.BusinessIdeas.Where<Idea>((Func<Idea, bool>) (m => m.DecisionCountId == decisionCount.Id)).ToList<Idea>();
      if (transaction == null)
        return;
      for (int index = decisionCount.Ideas.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) decisionCount.Ideas[index]) == Action.Delete)
          decisionCount.Ideas.Remove(decisionCount.Ideas[index]);
      }
    }

    internal async Task GetBusinessIdeasAsync(DecisionCount decisionCount, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeas(decisionCount, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(DecisionDifficulty core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(DecisionDifficulty core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Colour))
        messages += "Shared.DecisionDifficulty.Colour: Colour missing; ";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.DecisionDifficulty.Name: Name missing; ";
      if (string.IsNullOrWhiteSpace(core.ShortName))
        messages += "Shared.DecisionDifficulty.ShortName: Short Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(DecisionDifficulty core)
    {
      string str = "";
      if (_dataSet.SharedDecisionDifficulties.ToList<DecisionDifficulty>().FirstOrDefault<DecisionDifficulty>((Func<DecisionDifficulty, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(DecisionDifficulty core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(
      IEnumerable<DecisionDifficulty> decisionDifficulties)
    {
      try
      {
        foreach (DecisionDifficulty decisionDifficulty in decisionDifficulties)
          this.Add(decisionDifficulty);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(
      IEnumerable<DecisionDifficulty> decisionDifficulties)
    {
      try
      {
        foreach (DecisionDifficulty decisionDifficulty in decisionDifficulties)
          await this.AddAsync(decisionDifficulty);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(DecisionDifficulty core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          DecisionDifficulty decisionDifficulty = (DecisionDifficulty) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            decisionDifficulty = _dataSet.SharedDecisionDifficulties.SingleOrDefault<DecisionDifficulty>((Func<DecisionDifficulty, bool>) (x => x.Id == core.Id));
          if (decisionDifficulty == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedDecisionDifficulties.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////decisionDifficulty.Update(core);
                        ///

                        _dataSet.Entry(decisionDifficulty).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        decisionDifficulty.Update(core);
                        _dataSet.SharedDecisionDifficulties.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          decisionDifficulty = (DecisionDifficulty) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(DecisionDifficulty core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(DecisionDifficulty decisionDifficulty, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(decisionDifficulty, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      DecisionDifficulty decisionDifficulty,
      bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(decisionDifficulty, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(
      IEnumerable<DecisionDifficulty> decisionDifficulties,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (decisionDifficulties == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (DecisionDifficulty decisionDifficulty in decisionDifficulties.ToList<DecisionDifficulty>())
        {
          dataStoreResult = this.Delete(decisionDifficulty, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<DecisionDifficulty> decisionDifficulties,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (decisionDifficulties == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<DecisionDifficulty> lst = decisionDifficulties.ToList<DecisionDifficulty>();
        foreach (DecisionDifficulty decisionDifficulty in lst)
        {
          DecisionDifficulty item = decisionDifficulty;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (DecisionDifficulty) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(DecisionDifficulty decisionDifficulty, Transaction transaction)
    {
      try
      {
        if (decisionDifficulty.Id == null)
          return DataStoreResult.Success;
        DecisionDifficulty entity = _dataSet.SharedDecisionDifficulties.SingleOrDefault<DecisionDifficulty>((Func<DecisionDifficulty, bool>) (x => x.Id == decisionDifficulty.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(decisionDifficulty, transaction);
        if (decisionDifficulty.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedDecisionDifficulties.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The decision difficulty (" + decisionDifficulty.ToString() + ") contains ";
        if (decisionDifficulty.Ideas.Count > 0)
          str += "ideas, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      DecisionDifficulty decisionDifficulty,
      Transaction transaction)
    {
      try
      {
        if (decisionDifficulty.Id == null)
          return DataStoreResult.Success;
        DecisionDifficulty core = _dataSet.SharedDecisionDifficulties.SingleOrDefault<DecisionDifficulty>((Func<DecisionDifficulty, bool>) (x => x.Id == decisionDifficulty.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(decisionDifficulty, transaction);
        if (decisionDifficulty.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedDecisionDifficulties.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The decision difficulty (" + decisionDifficulty.ToString() + ") contains ";
        if (decisionDifficulty.Ideas.Count > 0)
          erorrMessage += "ideas, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedDecisionDifficulty(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedDecisionDifficulties.SingleOrDefault<DecisionDifficulty>((Func<DecisionDifficulty, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The decisionDifficulty is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedDecisionDifficulty(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        DecisionDifficulty decisionDifficulty = _dataSet.SharedDecisionDifficulties.SingleOrDefault<DecisionDifficulty>((Func<DecisionDifficulty, bool>) (x => x.Id == Id));
        if (decisionDifficulty == null)
          throw new NotFoundException("The decisionDifficulty is not found");
        dataStoreResult = await this.DeleteAsync(decisionDifficulty, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    DecisionDifficulty decisionDifficulty, Transaction transaction)
    {
      if (decisionDifficulty == null)
        return;
      if (decisionDifficulty.Id == null)
      {
        decisionDifficulty.CanDelete = true;
      }
      else
      {
        this.GetBusinessIdeas(decisionDifficulty, transaction);
        decisionDifficulty.CanDelete = decisionDifficulty.Ideas.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(
      DecisionDifficulty decisionDifficulty,
      Transaction transaction)
    {
      if (decisionDifficulty == null)
        return;
      if (decisionDifficulty.Id == null)
      {
        decisionDifficulty.CanDelete = true;
      }
      else
      {
        await this.GetBusinessIdeasAsync(decisionDifficulty, transaction);
        decisionDifficulty.CanDelete = decisionDifficulty.Ideas.Count <= 0;
      }
    }

    public DecisionDifficulty FindSharedDecisionDifficulty(
    
    string Id) => Id == null ? (DecisionDifficulty) null : _dataSet.SharedDecisionDifficulties.SingleOrDefault<DecisionDifficulty>((Func<DecisionDifficulty, bool>) (x => x.Id == Id));

    public async 
    
    Task<DecisionDifficulty> FindSharedDecisionDifficultyAsync(string Id)
    {
      DecisionDifficulty decisionDifficultyAsync;
      try
      {
        decisionDifficultyAsync = await Task.Run<DecisionDifficulty>((Func<DecisionDifficulty>) (() => this.FindSharedDecisionDifficulty(Id)));
      }
      catch
      {
        throw;
      }
      return decisionDifficultyAsync;
    }

    public List<DecisionDifficulty> GetSharedDecisionDifficultyByDate(DateTime date) => _dataSet.SharedDecisionDifficulties.Where<DecisionDifficulty>((Func<DecisionDifficulty, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<DecisionDifficulty>();

    public async Task<List<DecisionDifficulty>> GetSharedDecisionDifficultyByDateAsync(DateTime date)
    {
      List<DecisionDifficulty> difficultyByDateAsync;
      try
      {
        difficultyByDateAsync = await Task.Run<List<DecisionDifficulty>>((Func<List<DecisionDifficulty>>) (() => this.GetSharedDecisionDifficultyByDate(date)));
      }
      catch
      {
        throw;
      }
      return difficultyByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<DecisionDifficulty> cores)
    {
      try
      {
        foreach (DecisionDifficulty core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<DecisionDifficulty> cores)
    {
      try
      {
        foreach (DecisionDifficulty core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(DecisionDifficulty decisionDifficulty)
    {
      if (decisionDifficulty == null)
        return;
      if (decisionDifficulty.CreatedById != null && decisionDifficulty.CreatedBy == null)
        decisionDifficulty.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == decisionDifficulty.CreatedById));
      if (decisionDifficulty.UpdatedById == null || decisionDifficulty.UpdatedBy != null)
        return;
      decisionDifficulty.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == decisionDifficulty.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(DecisionDifficulty decisionDifficulty)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(decisionDifficulty)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeas(DecisionDifficulty decisionDifficulty) => this.GetBusinessIdeas(decisionDifficulty, (Transaction) null);

    internal async Task GetBusinessIdeasAsync(DecisionDifficulty decisionDifficulty) => await this.GetBusinessIdeasAsync(decisionDifficulty, (Transaction) null);

    internal void GetBusinessIdeas(DecisionDifficulty decisionDifficulty, Transaction transaction)
    {
      if (decisionDifficulty != null)
        decisionDifficulty.Ideas = _dataSet.BusinessIdeas.Where<Idea>((Func<Idea, bool>) (m => m.DecisionDifficultyId == decisionDifficulty.Id)).ToList<Idea>();
      if (transaction == null)
        return;
      for (int index = decisionDifficulty.Ideas.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) decisionDifficulty.Ideas[index]) == Action.Delete)
          decisionDifficulty.Ideas.Remove(decisionDifficulty.Ideas[index]);
      }
    }

    internal async Task GetBusinessIdeasAsync(
      DecisionDifficulty decisionDifficulty,
      Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeas(decisionDifficulty, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(DocumentationPresent core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(DocumentationPresent core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Colour))
        messages += "Shared.DocumentationPresent.Colour: Colour missing; ";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.DocumentationPresent.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(DocumentationPresent core)
    {
      string str = "";
      if (_dataSet.SharedDocumentationPresents.ToList<DocumentationPresent>().FirstOrDefault<DocumentationPresent>((Func<DocumentationPresent, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(DocumentationPresent core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(
      IEnumerable<DocumentationPresent> documentationPresents)
    {
      try
      {
        foreach (DocumentationPresent documentationPresent in documentationPresents)
          this.Add(documentationPresent);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(
      IEnumerable<DocumentationPresent> documentationPresents)
    {
      try
      {
        foreach (DocumentationPresent documentationPresent in documentationPresents)
          await this.AddAsync(documentationPresent);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(DocumentationPresent core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          DocumentationPresent documentationPresent = (DocumentationPresent) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            documentationPresent = _dataSet.SharedDocumentationPresents.SingleOrDefault<DocumentationPresent>((Func<DocumentationPresent, bool>) (x => x.Id == core.Id));
          if (documentationPresent == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedDocumentationPresents.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////documentationPresent.Update(core);
                        ///

                        _dataSet.Entry(documentationPresent).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        documentationPresent.Update(core);
                        _dataSet.SharedDocumentationPresents.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          documentationPresent = (DocumentationPresent) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(DocumentationPresent core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(DocumentationPresent documentationPresent, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(documentationPresent, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      DocumentationPresent documentationPresent,
      bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(documentationPresent, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(
      IEnumerable<DocumentationPresent> documentationPresents,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (documentationPresents == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (DocumentationPresent documentationPresent in documentationPresents.ToList<DocumentationPresent>())
        {
          dataStoreResult = this.Delete(documentationPresent, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<DocumentationPresent> documentationPresents,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (documentationPresents == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<DocumentationPresent> lst = documentationPresents.ToList<DocumentationPresent>();
        foreach (DocumentationPresent documentationPresent in lst)
        {
          DocumentationPresent item = documentationPresent;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (DocumentationPresent) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(
      DocumentationPresent documentationPresent,
      Transaction transaction)
    {
      try
      {
        if (documentationPresent.Id == null)
          return DataStoreResult.Success;
        DocumentationPresent entity = _dataSet.SharedDocumentationPresents.SingleOrDefault<DocumentationPresent>((Func<DocumentationPresent, bool>) (x => x.Id == documentationPresent.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(documentationPresent, transaction);
        if (documentationPresent.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedDocumentationPresents.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The documentation present (" + documentationPresent.ToString() + ") contains ";
        if (documentationPresent.Ideas.Count > 0)
          str += "ideas, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      DocumentationPresent documentationPresent,
      Transaction transaction)
    {
      try
      {
        if (documentationPresent.Id == null)
          return DataStoreResult.Success;
        DocumentationPresent core = _dataSet.SharedDocumentationPresents.SingleOrDefault<DocumentationPresent>((Func<DocumentationPresent, bool>) (x => x.Id == documentationPresent.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(documentationPresent, transaction);
        if (documentationPresent.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedDocumentationPresents.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The documentation present (" + documentationPresent.ToString() + ") contains ";
        if (documentationPresent.Ideas.Count > 0)
          erorrMessage += "ideas, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedDocumentationPresent(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedDocumentationPresents.SingleOrDefault<DocumentationPresent>((Func<DocumentationPresent, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The documentationPresent is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedDocumentationPresent(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        DocumentationPresent documentationPresent = _dataSet.SharedDocumentationPresents.SingleOrDefault<DocumentationPresent>((Func<DocumentationPresent, bool>) (x => x.Id == Id));
        if (documentationPresent == null)
          throw new NotFoundException("The documentationPresent is not found");
        dataStoreResult = await this.DeleteAsync(documentationPresent, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(

      
      DocumentationPresent documentationPresent,
      Transaction transaction)
    {
      if (documentationPresent == null)
        return;
      if (documentationPresent.Id == null)
      {
        documentationPresent.CanDelete = true;
      }
      else
      {
        this.GetBusinessIdeas(documentationPresent, transaction);
        documentationPresent.CanDelete = documentationPresent.Ideas.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(
      DocumentationPresent documentationPresent,
      Transaction transaction)
    {
      if (documentationPresent == null)
        return;
      if (documentationPresent.Id == null)
      {
        documentationPresent.CanDelete = true;
      }
      else
      {
        await this.GetBusinessIdeasAsync(documentationPresent, transaction);
        documentationPresent.CanDelete = documentationPresent.Ideas.Count <= 0;
      }
    }

    public DocumentationPresent FindSharedDocumentationPresent(
    
    string Id) => Id == null ? (DocumentationPresent) null : _dataSet.SharedDocumentationPresents.SingleOrDefault<DocumentationPresent>((Func<DocumentationPresent, bool>) (x => x.Id == Id));

    public async 
    
    Task<DocumentationPresent> FindSharedDocumentationPresentAsync(string Id)
    {
      DocumentationPresent documentationPresentAsync;
      try
      {
        documentationPresentAsync = await Task.Run<DocumentationPresent>((Func<DocumentationPresent>) (() => this.FindSharedDocumentationPresent(Id)));
      }
      catch
      {
        throw;
      }
      return documentationPresentAsync;
    }

    public List<DocumentationPresent> GetSharedDocumentationPresentByDate(DateTime date) => _dataSet.SharedDocumentationPresents.Where<DocumentationPresent>((Func<DocumentationPresent, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<DocumentationPresent>();

    public async Task<List<DocumentationPresent>> GetSharedDocumentationPresentByDateAsync(
      DateTime date)
    {
      List<DocumentationPresent> presentByDateAsync;
      try
      {
        presentByDateAsync = await Task.Run<List<DocumentationPresent>>((Func<List<DocumentationPresent>>) (() => this.GetSharedDocumentationPresentByDate(date)));
      }
      catch
      {
        throw;
      }
      return presentByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<DocumentationPresent> cores)
    {
      try
      {
        foreach (DocumentationPresent core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<DocumentationPresent> cores)
    {
      try
      {
        foreach (DocumentationPresent core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(DocumentationPresent documentationPresent)
    {
      if (documentationPresent == null)
        return;
      if (documentationPresent.CreatedById != null && documentationPresent.CreatedBy == null)
        documentationPresent.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == documentationPresent.CreatedById));
      if (documentationPresent.UpdatedById == null || documentationPresent.UpdatedBy != null)
        return;
      documentationPresent.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == documentationPresent.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(DocumentationPresent documentationPresent)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(documentationPresent)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeas(DocumentationPresent documentationPresent) => this.GetBusinessIdeas(documentationPresent, (Transaction) null);

    internal async Task GetBusinessIdeasAsync(DocumentationPresent documentationPresent) => await this.GetBusinessIdeasAsync(documentationPresent, (Transaction) null);

    internal void GetBusinessIdeas(
      DocumentationPresent documentationPresent,
      Transaction transaction)
    {
      if (documentationPresent != null)
        documentationPresent.Ideas = _dataSet.BusinessIdeas.Where<Idea>((Func<Idea, bool>) (m => m.DocumentationPresentId == documentationPresent.Id)).ToList<Idea>();
      if (transaction == null)
        return;
      for (int index = documentationPresent.Ideas.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) documentationPresent.Ideas[index]) == Action.Delete)
          documentationPresent.Ideas.Remove(documentationPresent.Ideas[index]);
      }
    }

    internal async Task GetBusinessIdeasAsync(
      DocumentationPresent documentationPresent,
      Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeas(documentationPresent, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(IdeaAuthorisation core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(IdeaAuthorisation core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.IdeaAuthorisation.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(IdeaAuthorisation core)
    {
      string str = "";
      if (_dataSet.SharedIdeaAuthorisations.ToList<IdeaAuthorisation>().FirstOrDefault<IdeaAuthorisation>((Func<IdeaAuthorisation, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(IdeaAuthorisation core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<IdeaAuthorisation> ideaAuthorisations)
    {
      try
      {
        foreach (IdeaAuthorisation ideaAuthorisation in ideaAuthorisations)
          this.Add(ideaAuthorisation);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<IdeaAuthorisation> ideaAuthorisations)
    {
      try
      {
        foreach (IdeaAuthorisation ideaAuthorisation in ideaAuthorisations)
          await this.AddAsync(ideaAuthorisation);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IdeaAuthorisation core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          IdeaAuthorisation ideaAuthorisation = (IdeaAuthorisation) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            ideaAuthorisation = _dataSet.SharedIdeaAuthorisations.SingleOrDefault<IdeaAuthorisation>((Func<IdeaAuthorisation, bool>) (x => x.Id == core.Id));
          if (ideaAuthorisation == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedIdeaAuthorisations.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////ideaAuthorisation.Update(core);
                        ///

                        _dataSet.Entry(ideaAuthorisation).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        ideaAuthorisation.Update(core);
                        _dataSet.SharedIdeaAuthorisations.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          ideaAuthorisation = (IdeaAuthorisation) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(IdeaAuthorisation core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(IdeaAuthorisation ideaAuthorisation, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(ideaAuthorisation, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IdeaAuthorisation ideaAuthorisation,
      bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(ideaAuthorisation, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(
      IEnumerable<IdeaAuthorisation> ideaAuthorisations,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (ideaAuthorisations == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (IdeaAuthorisation ideaAuthorisation in ideaAuthorisations.ToList<IdeaAuthorisation>())
        {
          dataStoreResult = this.Delete(ideaAuthorisation, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<IdeaAuthorisation> ideaAuthorisations,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (ideaAuthorisations == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<IdeaAuthorisation> lst = ideaAuthorisations.ToList<IdeaAuthorisation>();
        foreach (IdeaAuthorisation ideaAuthorisation in lst)
        {
          IdeaAuthorisation item = ideaAuthorisation;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (IdeaAuthorisation) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(IdeaAuthorisation ideaAuthorisation, Transaction transaction)
    {
      try
      {
        if (ideaAuthorisation.Id == null)
          return DataStoreResult.Success;
        IdeaAuthorisation entity = _dataSet.SharedIdeaAuthorisations.SingleOrDefault<IdeaAuthorisation>((Func<IdeaAuthorisation, bool>) (x => x.Id == ideaAuthorisation.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.GetBusinessRoleIdeaAuthorisations(ideaAuthorisation);
        foreach (RoleIdeaAuthorisation ideaAuthorisation1 in ideaAuthorisation.RoleIdeaAuthorisations)
        {
          int num = (int) this.Delete(ideaAuthorisation1, transaction);
        }
        this.GetBusinessUserAuthorisations(ideaAuthorisation);
        foreach (UserAuthorisation userAuthorisation in ideaAuthorisation.UserAuthorisations)
        {
          int num = (int) this.Delete(userAuthorisation, transaction);
        }
        this.RefreshCanDelete(ideaAuthorisation, transaction);
        if (!ideaAuthorisation.CanDelete)
          throw new ChildDependencyException("The idea authorisation (" + ideaAuthorisation.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.SharedIdeaAuthorisations.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      IdeaAuthorisation ideaAuthorisation,
      Transaction transaction)
    {
      try
      {
        if (ideaAuthorisation.Id == null)
          return DataStoreResult.Success;
        IdeaAuthorisation core = _dataSet.SharedIdeaAuthorisations.SingleOrDefault<IdeaAuthorisation>((Func<IdeaAuthorisation, bool>) (x => x.Id == ideaAuthorisation.Id));
        if (core == null)
          return DataStoreResult.Success;
        this.GetBusinessRoleIdeaAuthorisations(ideaAuthorisation);
        foreach (RoleIdeaAuthorisation m in ideaAuthorisation.RoleIdeaAuthorisations)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        this.GetBusinessUserAuthorisations(ideaAuthorisation);
        foreach (UserAuthorisation m in ideaAuthorisation.UserAuthorisations)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        await this.RefreshCanDeleteAsync(ideaAuthorisation, transaction);
        if (ideaAuthorisation.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedIdeaAuthorisations.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The idea authorisation (" + ideaAuthorisation.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedIdeaAuthorisation(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedIdeaAuthorisations.SingleOrDefault<IdeaAuthorisation>((Func<IdeaAuthorisation, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The ideaAuthorisation is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedIdeaAuthorisation(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        IdeaAuthorisation ideaAuthorisation = _dataSet.SharedIdeaAuthorisations.SingleOrDefault<IdeaAuthorisation>((Func<IdeaAuthorisation, bool>) (x => x.Id == Id));
        if (ideaAuthorisation == null)
          throw new NotFoundException("The ideaAuthorisation is not found");
        dataStoreResult = await this.DeleteAsync(ideaAuthorisation, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    IdeaAuthorisation ideaAuthorisation, Transaction transaction)
    {
      if (ideaAuthorisation == null)
        return;
      if (ideaAuthorisation.Id == null)
      {
        ideaAuthorisation.CanDelete = true;
      }
      else
      {
        this.GetBusinessRoleIdeaAuthorisations(ideaAuthorisation, transaction);
        this.GetBusinessUserAuthorisations(ideaAuthorisation, transaction);
        ideaAuthorisation.CanDelete = ideaAuthorisation.RoleIdeaAuthorisations.Count + ideaAuthorisation.UserAuthorisations.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(
      IdeaAuthorisation ideaAuthorisation,
      Transaction transaction)
    {
      if (ideaAuthorisation == null)
        return;
      ideaAuthorisation.CanDelete = true;
    }

    public IdeaAuthorisation FindSharedIdeaAuthorisation(
    
    string Id) => Id == null ? (IdeaAuthorisation) null : _dataSet.SharedIdeaAuthorisations.SingleOrDefault<IdeaAuthorisation>((Func<IdeaAuthorisation, bool>) (x => x.Id == Id));

    public async 
    
    Task<IdeaAuthorisation> FindSharedIdeaAuthorisationAsync(string Id)
    {
      IdeaAuthorisation authorisationAsync;
      try
      {
        authorisationAsync = await Task.Run<IdeaAuthorisation>((Func<IdeaAuthorisation>) (() => this.FindSharedIdeaAuthorisation(Id)));
      }
      catch
      {
        throw;
      }
      return authorisationAsync;
    }

    public List<IdeaAuthorisation> GetSharedIdeaAuthorisationByDate(DateTime date) => _dataSet.SharedIdeaAuthorisations.Where<IdeaAuthorisation>((Func<IdeaAuthorisation, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<IdeaAuthorisation>();

    public async Task<List<IdeaAuthorisation>> GetSharedIdeaAuthorisationByDateAsync(DateTime date)
    {
      List<IdeaAuthorisation> authorisationByDateAsync;
      try
      {
        authorisationByDateAsync = await Task.Run<List<IdeaAuthorisation>>((Func<List<IdeaAuthorisation>>) (() => this.GetSharedIdeaAuthorisationByDate(date)));
      }
      catch
      {
        throw;
      }
      return authorisationByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<IdeaAuthorisation> cores)
    {
      try
      {
        foreach (IdeaAuthorisation core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<IdeaAuthorisation> cores)
    {
      try
      {
        foreach (IdeaAuthorisation core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(IdeaAuthorisation ideaAuthorisation)
    {
      if (ideaAuthorisation == null)
        return;
      if (ideaAuthorisation.CreatedById != null && ideaAuthorisation.CreatedBy == null)
        ideaAuthorisation.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == ideaAuthorisation.CreatedById));
      if (ideaAuthorisation.UpdatedById == null || ideaAuthorisation.UpdatedBy != null)
        return;
      ideaAuthorisation.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == ideaAuthorisation.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(IdeaAuthorisation ideaAuthorisation)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(ideaAuthorisation)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessRoleIdeaAuthorisations(IdeaAuthorisation ideaAuthorisation) => this.GetBusinessRoleIdeaAuthorisations(ideaAuthorisation, (Transaction) null);

    internal async Task GetBusinessRoleIdeaAuthorisationsAsync(IdeaAuthorisation ideaAuthorisation) => await this.GetBusinessRoleIdeaAuthorisationsAsync(ideaAuthorisation, (Transaction) null);

    internal void GetBusinessRoleIdeaAuthorisations(
      IdeaAuthorisation ideaAuthorisation,
      Transaction transaction)
    {
      if (ideaAuthorisation != null)
        ideaAuthorisation.RoleIdeaAuthorisations = _dataSet.BusinessRoleIdeaAuthorisations.Where<RoleIdeaAuthorisation>((Func<RoleIdeaAuthorisation, bool>) (m => m.IdeaAuthorisationId == ideaAuthorisation.Id)).ToList<RoleIdeaAuthorisation>();
      if (transaction == null)
        return;
      for (int index = ideaAuthorisation.RoleIdeaAuthorisations.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) ideaAuthorisation.RoleIdeaAuthorisations[index]) == Action.Delete)
          ideaAuthorisation.RoleIdeaAuthorisations.Remove(ideaAuthorisation.RoleIdeaAuthorisations[index]);
      }
    }

    internal async Task GetBusinessRoleIdeaAuthorisationsAsync(
      IdeaAuthorisation ideaAuthorisation,
      Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessRoleIdeaAuthorisations(ideaAuthorisation, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessUserAuthorisations(IdeaAuthorisation ideaAuthorisation) => this.GetBusinessUserAuthorisations(ideaAuthorisation, (Transaction) null);

    internal async Task GetBusinessUserAuthorisationsAsync(IdeaAuthorisation ideaAuthorisation) => await this.GetBusinessUserAuthorisationsAsync(ideaAuthorisation, (Transaction) null);

    internal void GetBusinessUserAuthorisations(
      IdeaAuthorisation ideaAuthorisation,
      Transaction transaction)
    {
      if (ideaAuthorisation != null)
        ideaAuthorisation.UserAuthorisations = _dataSet.BusinessUserAuthorisations.Where<UserAuthorisation>((Func<UserAuthorisation, bool>) (m => m.IdeaAuthorisationId == ideaAuthorisation.Id)).ToList<UserAuthorisation>();
      if (transaction == null)
        return;
      for (int index = ideaAuthorisation.UserAuthorisations.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) ideaAuthorisation.UserAuthorisations[index]) == Action.Delete)
          ideaAuthorisation.UserAuthorisations.Remove(ideaAuthorisation.UserAuthorisations[index]);
      }
    }

    internal async Task GetBusinessUserAuthorisationsAsync(
      IdeaAuthorisation ideaAuthorisation,
      Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessUserAuthorisations(ideaAuthorisation, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(IdeaStatus core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(IdeaStatus core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.ButtonClass))
        messages += "Shared.IdeaStatus.ButtonClass: Button Class missing; ";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.IdeaStatus.Name: Name missing; ";
      if (core.Stage == null)
      {
        if (string.IsNullOrWhiteSpace(core.StageId))
        {
          messages += "Shared.IdeaStatus.StageId: Stage missing; ";
        }
        else
        {
          Stage parent = _dataSet.SharedStages.SingleOrDefault<Stage>((Func<Stage, bool>) (x => x.Id == core.StageId));
          if (parent == null)
            messages += "Shared.IdeaStatus.StageId: Stage invalid; ";
          parent = (Stage) null;
        }
      }
      if (string.IsNullOrWhiteSpace(core.TextClass))
        messages += "Shared.IdeaStatus.TextClass: Button Class missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(IdeaStatus core)
    {
      string str = "";
      if (_dataSet.SharedIdeaStatuses.ToList<IdeaStatus>().FirstOrDefault<IdeaStatus>((Func<IdeaStatus, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower() && x.StageId == core.StageId)) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name and stage.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(IdeaStatus core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<IdeaStatus> ideaStatuses)
    {
      try
      {
        foreach (IdeaStatus ideaStatuse in ideaStatuses)
          this.Add(ideaStatuse);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<IdeaStatus> ideaStatuses)
    {
      try
      {
        foreach (IdeaStatus ideaStatus in ideaStatuses)
          await this.AddAsync(ideaStatus);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IdeaStatus core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          IdeaStatus ideaStatus = (IdeaStatus) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            ideaStatus = _dataSet.SharedIdeaStatuses.SingleOrDefault<IdeaStatus>((Func<IdeaStatus, bool>) (x => x.Id == core.Id));
          if (ideaStatus == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedIdeaStatuses.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////ideaStatus.Update(core);
                        ///

                        _dataSet.Entry(ideaStatus).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        ideaStatus.Update(core);
                        _dataSet.SharedIdeaStatuses.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          ideaStatus = (IdeaStatus) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(IdeaStatus core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(IdeaStatus ideaStatus, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(ideaStatus, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IdeaStatus ideaStatus, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(ideaStatus, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<IdeaStatus> ideaStatuses, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (ideaStatuses == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (IdeaStatus ideaStatus in ideaStatuses.ToList<IdeaStatus>())
        {
          dataStoreResult = this.Delete(ideaStatus, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<IdeaStatus> ideaStatuses,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (ideaStatuses == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<IdeaStatus> lst = ideaStatuses.ToList<IdeaStatus>();
        foreach (IdeaStatus ideaStatus in lst)
        {
          IdeaStatus item = ideaStatus;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (IdeaStatus) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(IdeaStatus ideaStatus, Transaction transaction)
    {
      try
      {
        if (ideaStatus.Id == null)
          return DataStoreResult.Success;
        IdeaStatus entity = _dataSet.SharedIdeaStatuses.SingleOrDefault<IdeaStatus>((Func<IdeaStatus, bool>) (x => x.Id == ideaStatus.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(ideaStatus, transaction);
        if (ideaStatus.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedIdeaStatuses.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The idea status (" + ideaStatus.ToString() + ") contains ";
        if (ideaStatus.IdeaStageStatuses.Count > 0)
          str += "statuses, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(IdeaStatus ideaStatus, Transaction transaction)
    {
      try
      {
        if (ideaStatus.Id == null)
          return DataStoreResult.Success;
        IdeaStatus core = _dataSet.SharedIdeaStatuses.SingleOrDefault<IdeaStatus>((Func<IdeaStatus, bool>) (x => x.Id == ideaStatus.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(ideaStatus, transaction);
        if (ideaStatus.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedIdeaStatuses.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The idea status (" + ideaStatus.ToString() + ") contains ";
        if (ideaStatus.IdeaStageStatuses.Count > 0)
          erorrMessage += "statuses, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedIdeaStatus(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedIdeaStatuses.SingleOrDefault<IdeaStatus>((Func<IdeaStatus, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The ideaStatus is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedIdeaStatus(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        IdeaStatus ideaStatus = _dataSet.SharedIdeaStatuses.SingleOrDefault<IdeaStatus>((Func<IdeaStatus, bool>) (x => x.Id == Id));
        if (ideaStatus == null)
          throw new NotFoundException("The ideaStatus is not found");
        dataStoreResult = await this.DeleteAsync(ideaStatus, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    IdeaStatus ideaStatus, Transaction transaction)
    {
      if (ideaStatus == null)
        return;
      if (ideaStatus.Id == null)
      {
        ideaStatus.CanDelete = true;
      }
      else
      {
        this.GetBusinessIdeaStageStatuses(ideaStatus, transaction);
        ideaStatus.CanDelete = ideaStatus.IdeaStageStatuses.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(IdeaStatus ideaStatus, Transaction transaction)
    {
      if (ideaStatus == null)
        return;
      if (ideaStatus.Id == null)
      {
        ideaStatus.CanDelete = true;
      }
      else
      {
        await this.GetBusinessIdeaStageStatusesAsync(ideaStatus, transaction);
        ideaStatus.CanDelete = ideaStatus.IdeaStageStatuses.Count <= 0;
      }
    }

    public IdeaStatus FindSharedIdeaStatus(
    
    string Id) => Id == null ? (IdeaStatus) null : _dataSet.SharedIdeaStatuses.SingleOrDefault<IdeaStatus>((Func<IdeaStatus, bool>) (x => x.Id == Id));

    public async 
    
    Task<IdeaStatus> FindSharedIdeaStatusAsync(string Id)
    {
      IdeaStatus sharedIdeaStatusAsync;
      try
      {
        sharedIdeaStatusAsync = await Task.Run<IdeaStatus>((Func<IdeaStatus>) (() => this.FindSharedIdeaStatus(Id)));
      }
      catch
      {
        throw;
      }
      return sharedIdeaStatusAsync;
    }

    public List<IdeaStatus> GetSharedIdeaStatusByDate(DateTime date) => _dataSet.SharedIdeaStatuses.Where<IdeaStatus>((Func<IdeaStatus, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<IdeaStatus>();

    public async Task<List<IdeaStatus>> GetSharedIdeaStatusByDateAsync(DateTime date)
    {
      List<IdeaStatus> statusByDateAsync;
      try
      {
        statusByDateAsync = await Task.Run<List<IdeaStatus>>((Func<List<IdeaStatus>>) (() => this.GetSharedIdeaStatusByDate(date)));
      }
      catch
      {
        throw;
      }
      return statusByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<IdeaStatus> cores)
    {
      try
      {
        foreach (IdeaStatus core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<IdeaStatus> cores)
    {
      try
      {
        foreach (IdeaStatus core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(IdeaStatus ideaStatus)
    {
      if (ideaStatus == null)
        return;
      if (ideaStatus.CreatedById != null && ideaStatus.CreatedBy == null)
        ideaStatus.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == ideaStatus.CreatedById));
      if (ideaStatus.UpdatedById == null || ideaStatus.UpdatedBy != null)
        return;
      ideaStatus.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == ideaStatus.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(IdeaStatus ideaStatus)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(ideaStatus)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeaStageStatuses(IdeaStatus status) => this.GetBusinessIdeaStageStatuses(status, (Transaction) null);

    internal async Task GetBusinessIdeaStageStatusesAsync(IdeaStatus status) => await this.GetBusinessIdeaStageStatusesAsync(status, (Transaction) null);

    internal void GetBusinessIdeaStageStatuses(IdeaStatus status, Transaction transaction)
    {
      if (status != null)
        status.IdeaStageStatuses = _dataSet.BusinessIdeaStageStatuses.Where<IdeaStageStatus>((Func<IdeaStageStatus, bool>) (m => m.StatusId == status.Id)).ToList<IdeaStageStatus>();
      if (transaction == null)
        return;
      for (int index = status.IdeaStageStatuses.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) status.IdeaStageStatuses[index]) == Action.Delete)
          status.IdeaStageStatuses.Remove(status.IdeaStageStatuses[index]);
      }
    }

    internal async Task GetBusinessIdeaStageStatusesAsync(
      IdeaStatus status,
      Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeaStageStatuses(status, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedStage(IdeaStatus ideaStatus)
    {
      if (ideaStatus == null)
        return;
      foreach (Stage sharedStage in (List<Stage>) _dataSet.SharedStages.ToList())
      {
        if (ideaStatus.StageId != null && sharedStage.Id == ideaStatus.StageId)
        {
          ideaStatus.Stage = sharedStage;
          break;
        }
      }
    }

    public async Task GetSharedStageAsync(IdeaStatus ideaStatus)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedStage(ideaStatus)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedStages(IEnumerable<IdeaStatus> ideaStatuses)
    {
      foreach (IdeaStatus ideaStatuse in ideaStatuses)
        this.GetSharedStage(ideaStatuse);
    }

    public async Task GetSharedStagesAsync(IEnumerable<IdeaStatus> ideaStatuses)
    {
      foreach (IdeaStatus ideaStatus in ideaStatuses)
        await this.GetSharedStageAsync(ideaStatus);
    }

    public string Validate(Industry core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(Industry core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.Industry.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public void Add(IEnumerable<Industry> industries)
    {
      try
      {
        foreach (Industry industry in industries)
          this.Add(industry);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Industry> industries)
    {
      try
      {
        foreach (Industry industry in industries)
          await this.AddAsync(industry);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Industry core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          Industry industry = (Industry) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            industry = _dataSet.SharedIndustries.SingleOrDefault<Industry>((Func<Industry, bool>) (x => x.Id == core.Id));
          if (industry == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedIndustries.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////industry.Update(core);
                        ///

                        _dataSet.Entry(industry).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        industry.Update(core);
                        _dataSet.SharedIndustries.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          industry = (Industry) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Industry core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Industry industry, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(industry, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Industry industry, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(industry, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Industry> industries, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (industries == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Industry industry in industries.ToList<Industry>())
        {
          dataStoreResult = this.Delete(industry, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<Industry> industries,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (industries == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Industry> lst = industries.ToList<Industry>();
        foreach (Industry industry in lst)
        {
          Industry item = industry;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Industry) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Industry industry, Transaction transaction)
    {
      try
      {
        if (industry.Id == null)
          return DataStoreResult.Success;
        Industry entity = _dataSet.SharedIndustries.SingleOrDefault<Industry>((Func<Industry, bool>) (x => x.Id == industry.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(industry, transaction);
        if (industry.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedIndustries.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The industry (" + industry.ToString() + ") contains ";
        if (industry.Clients.Count > 0)
          str += "clients, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Industry industry, Transaction transaction)
    {
      try
      {
        if (industry.Id == null)
          return DataStoreResult.Success;
        Industry core = _dataSet.SharedIndustries.SingleOrDefault<Industry>((Func<Industry, bool>) (x => x.Id == industry.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(industry, transaction);
        if (industry.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedIndustries.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The industry (" + industry.ToString() + ") contains ";
        if (industry.Clients.Count > 0)
          erorrMessage += "clients, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedIndustry(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedIndustries.SingleOrDefault<Industry>((Func<Industry, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The industry is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedIndustry(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Industry industry = _dataSet.SharedIndustries.SingleOrDefault<Industry>((Func<Industry, bool>) (x => x.Id == Id));
        if (industry == null)
          throw new NotFoundException("The industry is not found");
        dataStoreResult = await this.DeleteAsync(industry, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    Industry industry, Transaction transaction)
    {
      if (industry == null)
        return;
      if (industry.Id == null)
      {
        industry.CanDelete = true;
      }
      else
      {
        this.GetBusinessClients(industry, transaction);
        industry.CanDelete = industry.Clients.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(Industry industry, Transaction transaction)
    {
      if (industry == null)
        return;
      if (industry.Id == null)
      {
        industry.CanDelete = true;
      }
      else
      {
        await this.GetBusinessClientsAsync(industry, transaction);
        industry.CanDelete = industry.Clients.Count <= 0;
      }
    }

    public Industry FindSharedIndustry(
    
    string Id) => Id == null ? (Industry) null : _dataSet.SharedIndustries.SingleOrDefault<Industry>((Func<Industry, bool>) (x => x.Id == Id));

    public async 
    
    Task<Industry> FindSharedIndustryAsync(string Id)
    {
      Industry sharedIndustryAsync;
      try
      {
        sharedIndustryAsync = await Task.Run<Industry>((Func<Industry>) (() => this.FindSharedIndustry(Id)));
      }
      catch
      {
        throw;
      }
      return sharedIndustryAsync;
    }

    public List<Industry> GetSharedIndustryByDate(DateTime date) => _dataSet.SharedIndustries.Where<Industry>((Func<Industry, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Industry>();

    public async Task<List<Industry>> GetSharedIndustryByDateAsync(DateTime date)
    {
      List<Industry> industryByDateAsync;
      try
      {
        industryByDateAsync = await Task.Run<List<Industry>>((Func<List<Industry>>) (() => this.GetSharedIndustryByDate(date)));
      }
      catch
      {
        throw;
      }
      return industryByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Industry> cores)
    {
      try
      {
        foreach (Industry core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Industry> cores)
    {
      try
      {
        foreach (Industry core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Industry industry)
    {
      if (industry == null)
        return;
      if (industry.CreatedById != null && industry.CreatedBy == null)
        industry.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == industry.CreatedById));
      if (industry.UpdatedById == null || industry.UpdatedBy != null)
        return;
      industry.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == industry.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Industry industry)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(industry)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessClients(Industry industry) => this.GetBusinessClients(industry, (Transaction) null);

    internal async Task GetBusinessClientsAsync(Industry industry) => await this.GetBusinessClientsAsync(industry, (Transaction) null);

    internal void GetBusinessClients(Industry industry, Transaction transaction)
    {
      if (industry != null)
        industry.Clients = _dataSet.BusinessClients.Where<Client>((Func<Client, bool>) (m => m.IndustryId == industry.Id)).ToList<Client>();
      if (transaction == null)
        return;
      for (int index = industry.Clients.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) industry.Clients[index]) == Action.Delete)
          industry.Clients.Remove(industry.Clients[index]);
      }
    }

    internal async Task GetBusinessClientsAsync(Industry industry, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClients(industry, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(Input core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(Input core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Colour))
        messages += "Shared.Input.Colour: Colour missing; ";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.Input.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(Input core)
    {
      string str = "";
      if (_dataSet.SharedInputs.ToList<Input>().FirstOrDefault<Input>((Func<Input, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(Input core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<Input> inputs)
    {
      try
      {
        foreach (Input input in inputs)
          this.Add(input);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Input> inputs)
    {
      try
      {
        foreach (Input input in inputs)
          await this.AddAsync(input);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Input core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          Input input = (Input) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            input = _dataSet.SharedInputs.SingleOrDefault<Input>((Func<Input, bool>) (x => x.Id == core.Id));
          if (input == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedInputs.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////input.Update(core);
                        ///

                        _dataSet.Entry(input).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        input.Update(core);
                        _dataSet.SharedInputs.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          input = (Input) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Input core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Input input, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(input, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Input input, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(input, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Input> inputs, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (inputs == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Input input in inputs.ToList<Input>())
        {
          dataStoreResult = this.Delete(input, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<Input> inputs, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (inputs == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Input> lst = inputs.ToList<Input>();
        foreach (Input input in lst)
        {
          Input item = input;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Input) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Input input, Transaction transaction)
    {
      try
      {
        if (input.Id == null)
          return DataStoreResult.Success;
        Input entity = _dataSet.SharedInputs.SingleOrDefault<Input>((Func<Input, bool>) (x => x.Id == input.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(input, transaction);
        if (input.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedInputs.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The input (" + input.ToString() + ") contains ";
        if (input.Ideas.Count > 0)
          str += "ideas, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Input input, Transaction transaction)
    {
      try
      {
        if (input.Id == null)
          return DataStoreResult.Success;
        Input core = _dataSet.SharedInputs.SingleOrDefault<Input>((Func<Input, bool>) (x => x.Id == input.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(input, transaction);
        if (input.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedInputs.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The input (" + input.ToString() + ") contains ";
        if (input.Ideas.Count > 0)
          erorrMessage += "ideas, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedInput(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedInputs.SingleOrDefault<Input>((Func<Input, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The input is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedInput(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Input input = _dataSet.SharedInputs.SingleOrDefault<Input>((Func<Input, bool>) (x => x.Id == Id));
        if (input == null)
          throw new NotFoundException("The input is not found");
        dataStoreResult = await this.DeleteAsync(input, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    Input input, Transaction transaction)
    {
      if (input == null)
        return;
      if (input.Id == null)
      {
        input.CanDelete = true;
      }
      else
      {
        this.GetBusinessIdeas(input, transaction);
        input.CanDelete = input.Ideas.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(Input input, Transaction transaction)
    {
      if (input == null)
        return;
      if (input.Id == null)
      {
        input.CanDelete = true;
      }
      else
      {
        await this.GetBusinessIdeasAsync(input, transaction);
        input.CanDelete = input.Ideas.Count <= 0;
      }
    }

    public Input FindSharedInput(
    
    string Id) => Id == null ? (Input) null : _dataSet.SharedInputs.SingleOrDefault<Input>((Func<Input, bool>) (x => x.Id == Id));

    public async 
    
    Task<Input> FindSharedInputAsync(string Id)
    {
      Input sharedInputAsync;
      try
      {
        sharedInputAsync = await Task.Run<Input>((Func<Input>) (() => this.FindSharedInput(Id)));
      }
      catch
      {
        throw;
      }
      return sharedInputAsync;
    }

    public List<Input> GetSharedInputByDate(DateTime date) => _dataSet.SharedInputs.Where<Input>((Func<Input, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Input>();

    public async Task<List<Input>> GetSharedInputByDateAsync(DateTime date)
    {
      List<Input> inputByDateAsync;
      try
      {
        inputByDateAsync = await Task.Run<List<Input>>((Func<List<Input>>) (() => this.GetSharedInputByDate(date)));
      }
      catch
      {
        throw;
      }
      return inputByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Input> cores)
    {
      try
      {
        foreach (Input core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Input> cores)
    {
      try
      {
        foreach (Input core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Input input)
    {
      if (input == null)
        return;
      if (input.CreatedById != null && input.CreatedBy == null)
        input.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == input.CreatedById));
      if (input.UpdatedById == null || input.UpdatedBy != null)
        return;
      input.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == input.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Input input)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(input)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeas(Input input) => this.GetBusinessIdeas(input, (Transaction) null);

    internal async Task GetBusinessIdeasAsync(Input input) => await this.GetBusinessIdeasAsync(input, (Transaction) null);

    internal void GetBusinessIdeas(Input input, Transaction transaction)
    {
      if (input != null)
        input.Ideas = _dataSet.BusinessIdeas.Where<Idea>((Func<Idea, bool>) (m => m.InputId == input.Id)).ToList<Idea>();
      if (transaction == null)
        return;
      for (int index = input.Ideas.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) input.Ideas[index]) == Action.Delete)
          input.Ideas.Remove(input.Ideas[index]);
      }
    }

    internal async Task GetBusinessIdeasAsync(Input input, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeas(input, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(InputDataStructure core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(InputDataStructure core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Colour))
        messages += "Shared.InputDataStructure.Colour: Colour missing; ";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.InputDataStructure.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(InputDataStructure core)
    {
      string str = "";
      if (_dataSet.SharedInputDataStructures.ToList<InputDataStructure>().FirstOrDefault<InputDataStructure>((Func<InputDataStructure, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(InputDataStructure core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(
      IEnumerable<InputDataStructure> inputDataStructures)
    {
      try
      {
        foreach (InputDataStructure inputDataStructure in inputDataStructures)
          this.Add(inputDataStructure);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(
      IEnumerable<InputDataStructure> inputDataStructures)
    {
      try
      {
        foreach (InputDataStructure inputDataStructure in inputDataStructures)
          await this.AddAsync(inputDataStructure);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(InputDataStructure core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          InputDataStructure inputDataStructure = (InputDataStructure) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            inputDataStructure = _dataSet.SharedInputDataStructures.SingleOrDefault<InputDataStructure>((Func<InputDataStructure, bool>) (x => x.Id == core.Id));
          if (inputDataStructure == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedInputDataStructures.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////inputDataStructure.Update(core);
                        ///

                        _dataSet.Entry(inputDataStructure).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        inputDataStructure.Update(core);
                        _dataSet.SharedInputDataStructures.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          inputDataStructure = (InputDataStructure) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(InputDataStructure core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(InputDataStructure inputDataStructure, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(inputDataStructure, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      InputDataStructure inputDataStructure,
      bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(inputDataStructure, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(
      IEnumerable<InputDataStructure> inputDataStructures,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (inputDataStructures == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (InputDataStructure inputDataStructure in inputDataStructures.ToList<InputDataStructure>())
        {
          dataStoreResult = this.Delete(inputDataStructure, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<InputDataStructure> inputDataStructures,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (inputDataStructures == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<InputDataStructure> lst = inputDataStructures.ToList<InputDataStructure>();
        foreach (InputDataStructure inputDataStructure in lst)
        {
          InputDataStructure item = inputDataStructure;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (InputDataStructure) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(InputDataStructure inputDataStructure, Transaction transaction)
    {
      try
      {
        if (inputDataStructure.Id == null)
          return DataStoreResult.Success;
        InputDataStructure entity = _dataSet.SharedInputDataStructures.SingleOrDefault<InputDataStructure>((Func<InputDataStructure, bool>) (x => x.Id == inputDataStructure.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(inputDataStructure, transaction);
        if (inputDataStructure.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedInputDataStructures.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The input data structure (" + inputDataStructure.ToString() + ") contains ";
        if (inputDataStructure.Ideas.Count > 0)
          str += "ideas, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      InputDataStructure inputDataStructure,
      Transaction transaction)
    {
      try
      {
        if (inputDataStructure.Id == null)
          return DataStoreResult.Success;
        InputDataStructure core = _dataSet.SharedInputDataStructures.SingleOrDefault<InputDataStructure>((Func<InputDataStructure, bool>) (x => x.Id == inputDataStructure.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(inputDataStructure, transaction);
        if (inputDataStructure.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedInputDataStructures.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The input data structure (" + inputDataStructure.ToString() + ") contains ";
        if (inputDataStructure.Ideas.Count > 0)
          erorrMessage += "ideas, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedInputDataStructure(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedInputDataStructures.SingleOrDefault<InputDataStructure>((Func<InputDataStructure, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The inputDataStructure is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedInputDataStructure(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        InputDataStructure inputDataStructure = _dataSet.SharedInputDataStructures.SingleOrDefault<InputDataStructure>((Func<InputDataStructure, bool>) (x => x.Id == Id));
        if (inputDataStructure == null)
          throw new NotFoundException("The inputDataStructure is not found");
        dataStoreResult = await this.DeleteAsync(inputDataStructure, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    InputDataStructure inputDataStructure, Transaction transaction)
    {
      if (inputDataStructure == null)
        return;
      if (inputDataStructure.Id == null)
      {
        inputDataStructure.CanDelete = true;
      }
      else
      {
        this.GetBusinessIdeas(inputDataStructure, transaction);
        inputDataStructure.CanDelete = inputDataStructure.Ideas.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(
      InputDataStructure inputDataStructure,
      Transaction transaction)
    {
      if (inputDataStructure == null)
        return;
      if (inputDataStructure.Id == null)
      {
        inputDataStructure.CanDelete = true;
      }
      else
      {
        await this.GetBusinessIdeasAsync(inputDataStructure, transaction);
        inputDataStructure.CanDelete = inputDataStructure.Ideas.Count <= 0;
      }
    }

    public InputDataStructure FindSharedInputDataStructure(
    
    string Id) => Id == null ? (InputDataStructure) null : _dataSet.SharedInputDataStructures.SingleOrDefault<InputDataStructure>((Func<InputDataStructure, bool>) (x => x.Id == Id));

    public async 
    
    Task<InputDataStructure> FindSharedInputDataStructureAsync(string Id)
    {
      InputDataStructure dataStructureAsync;
      try
      {
        dataStructureAsync = await Task.Run<InputDataStructure>((Func<InputDataStructure>) (() => this.FindSharedInputDataStructure(Id)));
      }
      catch
      {
        throw;
      }
      return dataStructureAsync;
    }

    public List<InputDataStructure> GetSharedInputDataStructureByDate(DateTime date) => _dataSet.SharedInputDataStructures.Where<InputDataStructure>((Func<InputDataStructure, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<InputDataStructure>();

    public async Task<List<InputDataStructure>> GetSharedInputDataStructureByDateAsync(DateTime date)
    {
      List<InputDataStructure> structureByDateAsync;
      try
      {
        structureByDateAsync = await Task.Run<List<InputDataStructure>>((Func<List<InputDataStructure>>) (() => this.GetSharedInputDataStructureByDate(date)));
      }
      catch
      {
        throw;
      }
      return structureByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<InputDataStructure> cores)
    {
      try
      {
        foreach (InputDataStructure core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<InputDataStructure> cores)
    {
      try
      {
        foreach (InputDataStructure core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(InputDataStructure inputDataStructure)
    {
      if (inputDataStructure == null)
        return;
      if (inputDataStructure.CreatedById != null && inputDataStructure.CreatedBy == null)
        inputDataStructure.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == inputDataStructure.CreatedById));
      if (inputDataStructure.UpdatedById == null || inputDataStructure.UpdatedBy != null)
        return;
      inputDataStructure.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == inputDataStructure.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(InputDataStructure inputDataStructure)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(inputDataStructure)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeas(InputDataStructure inputDataStructure) => this.GetBusinessIdeas(inputDataStructure, (Transaction) null);

    internal async Task GetBusinessIdeasAsync(InputDataStructure inputDataStructure) => await this.GetBusinessIdeasAsync(inputDataStructure, (Transaction) null);

    internal void GetBusinessIdeas(InputDataStructure inputDataStructure, Transaction transaction)
    {
      if (inputDataStructure != null)
        inputDataStructure.Ideas = _dataSet.BusinessIdeas.Where<Idea>((Func<Idea, bool>) (m => m.InputDataStructureId == inputDataStructure.Id)).ToList<Idea>();
      if (transaction == null)
        return;
      for (int index = inputDataStructure.Ideas.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) inputDataStructure.Ideas[index]) == Action.Delete)
          inputDataStructure.Ideas.Remove(inputDataStructure.Ideas[index]);
      }
    }

    internal async Task GetBusinessIdeasAsync(
      InputDataStructure inputDataStructure,
      Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeas(inputDataStructure, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(Language core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(Language core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Locale))
        messages += "Shared.Language.Locale: Locale missing; ";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.Language.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public void Add(IEnumerable<Language> languages)
    {
      try
      {
        foreach (Language language in languages)
          this.Add(language);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Language> languages)
    {
      try
      {
        foreach (Language language in languages)
          await this.AddAsync(language);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Language core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          Language language = (Language) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            language = _dataSet.SharedLanguages.SingleOrDefault<Language>((Func<Language, bool>) (x => x.Id == core.Id));
          if (language == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedLanguages.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////language.Update(core);
                        ///

                        _dataSet.Entry(language).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        language.Update(core);
                        _dataSet.SharedLanguages.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          language = (Language) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Language core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Language language, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(language, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Language language, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(language, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Language> languages, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (languages == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Language language in languages.ToList<Language>())
        {
          dataStoreResult = this.Delete(language, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<Language> languages,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (languages == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Language> lst = languages.ToList<Language>();
        foreach (Language language in lst)
        {
          Language item = language;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Language) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Language language, Transaction transaction)
    {
      try
      {
        if (language.Id == null)
          return DataStoreResult.Success;
        Language entity = _dataSet.SharedLanguages.SingleOrDefault<Language>((Func<Language, bool>) (x => x.Id == language.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(language, transaction);
        if (language.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedLanguages.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The language (" + language.ToString() + ") contains ";
        if (language.Clients.Count > 0)
          str += "clients, ";
        if (language.IdeaApplicationVersions.Count > 0)
          str += "idea applications, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Language language, Transaction transaction)
    {
      try
      {
        if (language.Id == null)
          return DataStoreResult.Success;
        Language core = _dataSet.SharedLanguages.SingleOrDefault<Language>((Func<Language, bool>) (x => x.Id == language.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(language, transaction);
        if (language.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedLanguages.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The language (" + language.ToString() + ") contains ";
        if (language.Clients.Count > 0)
          erorrMessage += "clients, ";
        if (language.IdeaApplicationVersions.Count > 0)
          erorrMessage += "idea applications, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedLanguage(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedLanguages.SingleOrDefault<Language>((Func<Language, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The language is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedLanguage(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Language language = _dataSet.SharedLanguages.SingleOrDefault<Language>((Func<Language, bool>) (x => x.Id == Id));
        if (language == null)
          throw new NotFoundException("The language is not found");
        dataStoreResult = await this.DeleteAsync(language, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    Language language, Transaction transaction)
    {
      if (language == null)
        return;
      if (language.Id == null)
      {
        language.CanDelete = true;
      }
      else
      {
        this.GetBusinessClients(language, transaction);
        this.GetBusinessIdeaApplicationVersions(language, transaction);
        language.CanDelete = language.Clients.Count + language.IdeaApplicationVersions.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(Language language, Transaction transaction)
    {
      if (language == null)
        return;
      if (language.Id == null)
      {
        language.CanDelete = true;
      }
      else
      {
        await this.GetBusinessClientsAsync(language, transaction);
        await this.GetBusinessIdeaApplicationVersionsAsync(language, transaction);
        language.CanDelete = language.Clients.Count + language.IdeaApplicationVersions.Count <= 0;
      }
    }

    public Language FindSharedLanguage(
    
    string Id) => Id == null ? (Language) null : _dataSet.SharedLanguages.SingleOrDefault<Language>((Func<Language, bool>) (x => x.Id == Id));

    public async 
    
    Task<Language> FindSharedLanguageAsync(string Id)
    {
      Language sharedLanguageAsync;
      try
      {
        sharedLanguageAsync = await Task.Run<Language>((Func<Language>) (() => this.FindSharedLanguage(Id)));
      }
      catch
      {
        throw;
      }
      return sharedLanguageAsync;
    }

    public List<Language> GetSharedLanguageByDate(DateTime date) => _dataSet.SharedLanguages.Where<Language>((Func<Language, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Language>();

    public async Task<List<Language>> GetSharedLanguageByDateAsync(DateTime date)
    {
      List<Language> languageByDateAsync;
      try
      {
        languageByDateAsync = await Task.Run<List<Language>>((Func<List<Language>>) (() => this.GetSharedLanguageByDate(date)));
      }
      catch
      {
        throw;
      }
      return languageByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Language> cores)
    {
      try
      {
        foreach (Language core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Language> cores)
    {
      try
      {
        foreach (Language core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Language language)
    {
      if (language == null)
        return;
      if (language.CreatedById != null && language.CreatedBy == null)
        language.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == language.CreatedById));
      if (language.UpdatedById == null || language.UpdatedBy != null)
        return;
      language.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == language.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Language language)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(language)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessClients(Language language) => this.GetBusinessClients(language, (Transaction) null);

    internal async Task GetBusinessClientsAsync(Language language) => await this.GetBusinessClientsAsync(language, (Transaction) null);

    internal void GetBusinessClients(Language language, Transaction transaction)
    {
      if (language != null)
        language.Clients = _dataSet.BusinessClients.Where<Client>((Func<Client, bool>) (m => m.LanguageId == language.Id)).ToList<Client>();
      if (transaction == null)
        return;
      for (int index = language.Clients.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) language.Clients[index]) == Action.Delete)
          language.Clients.Remove(language.Clients[index]);
      }
    }

    internal async Task GetBusinessClientsAsync(Language language, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClients(language, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeaApplicationVersions(Language language) => this.GetBusinessIdeaApplicationVersions(language, (Transaction) null);

    internal async Task GetBusinessIdeaApplicationVersionsAsync(Language language) => await this.GetBusinessIdeaApplicationVersionsAsync(language, (Transaction) null);

    internal void GetBusinessIdeaApplicationVersions(Language language, Transaction transaction)
    {
      if (language != null)
        language.IdeaApplicationVersions = _dataSet.BusinessIdeaApplicationVersions.Where<IdeaApplicationVersion>((Func<IdeaApplicationVersion, bool>) (m => m.LanguageId == language.Id)).ToList<IdeaApplicationVersion>();
      if (transaction == null)
        return;
      for (int index = language.IdeaApplicationVersions.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) language.IdeaApplicationVersions[index]) == Action.Delete)
          language.IdeaApplicationVersions.Remove(language.IdeaApplicationVersions[index]);
      }
    }

    internal async Task GetBusinessIdeaApplicationVersionsAsync(
      Language language,
      Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeaApplicationVersions(language, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(NumberOfWaysToCompleteProcess core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(NumberOfWaysToCompleteProcess core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Colour))
        messages += "Shared.NumberOfWaysToCompleteProcess.Colour: Colour missing; ";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.NumberOfWaysToCompleteProcess.Name: Name missing; ";
      if (string.IsNullOrWhiteSpace(core.ShortName))
        messages += "Shared.NumberOfWaysToCompleteProcess.ShortName: Short Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(NumberOfWaysToCompleteProcess core)
    {
      string str = "";
      if (_dataSet.SharedNumberOfWaysToCompleteProcesses.ToList<NumberOfWaysToCompleteProcess>().FirstOrDefault<NumberOfWaysToCompleteProcess>((Func<NumberOfWaysToCompleteProcess, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(NumberOfWaysToCompleteProcess core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(
      IEnumerable<NumberOfWaysToCompleteProcess> numberOfWaysToCompleteProcesses)
    {
      try
      {
        foreach (NumberOfWaysToCompleteProcess toCompleteProcess in numberOfWaysToCompleteProcesses)
          this.Add(toCompleteProcess);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(
      IEnumerable<NumberOfWaysToCompleteProcess> numberOfWaysToCompleteProcesses)
    {
      try
      {
        foreach (NumberOfWaysToCompleteProcess numberOfWaysToCompleteProcess in numberOfWaysToCompleteProcesses)
          await this.AddAsync(numberOfWaysToCompleteProcess);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(NumberOfWaysToCompleteProcess core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          NumberOfWaysToCompleteProcess numberOfWaysToCompleteProcess = (NumberOfWaysToCompleteProcess) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            numberOfWaysToCompleteProcess = _dataSet.SharedNumberOfWaysToCompleteProcesses.SingleOrDefault<NumberOfWaysToCompleteProcess>((Func<NumberOfWaysToCompleteProcess, bool>) (x => x.Id == core.Id));
          if (numberOfWaysToCompleteProcess == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedNumberOfWaysToCompleteProcesses.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////numberOfWaysToCompleteProcess.Update(core);
                        ///

                        _dataSet.Entry(numberOfWaysToCompleteProcess).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        numberOfWaysToCompleteProcess.Update(core);
                        _dataSet.SharedNumberOfWaysToCompleteProcesses.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          numberOfWaysToCompleteProcess = (NumberOfWaysToCompleteProcess) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(NumberOfWaysToCompleteProcess core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(
      NumberOfWaysToCompleteProcess numberOfWaysToCompleteProcess,
      bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(numberOfWaysToCompleteProcess, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      NumberOfWaysToCompleteProcess numberOfWaysToCompleteProcess,
      bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(numberOfWaysToCompleteProcess, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(
      IEnumerable<NumberOfWaysToCompleteProcess> numberOfWaysToCompleteProcesses,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (numberOfWaysToCompleteProcesses == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (NumberOfWaysToCompleteProcess numberOfWaysToCompleteProcess in numberOfWaysToCompleteProcesses.ToList<NumberOfWaysToCompleteProcess>())
        {
          dataStoreResult = this.Delete(numberOfWaysToCompleteProcess, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<NumberOfWaysToCompleteProcess> numberOfWaysToCompleteProcesses,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (numberOfWaysToCompleteProcesses == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<NumberOfWaysToCompleteProcess> lst = numberOfWaysToCompleteProcesses.ToList<NumberOfWaysToCompleteProcess>();
        foreach (NumberOfWaysToCompleteProcess toCompleteProcess in lst)
        {
          NumberOfWaysToCompleteProcess item = toCompleteProcess;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (NumberOfWaysToCompleteProcess) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(
      NumberOfWaysToCompleteProcess numberOfWaysToCompleteProcess,
      Transaction transaction)
    {
      try
      {
        if (numberOfWaysToCompleteProcess.Id == null)
          return DataStoreResult.Success;
        NumberOfWaysToCompleteProcess entity = _dataSet.SharedNumberOfWaysToCompleteProcesses.SingleOrDefault<NumberOfWaysToCompleteProcess>((Func<NumberOfWaysToCompleteProcess, bool>) (x => x.Id == numberOfWaysToCompleteProcess.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(numberOfWaysToCompleteProcess, transaction);
        if (numberOfWaysToCompleteProcess.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedNumberOfWaysToCompleteProcesses.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The number of ways to complete process (" + numberOfWaysToCompleteProcess.ToString() + ") contains ";
        if (numberOfWaysToCompleteProcess.Ideas.Count > 0)
          str += "ideas, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      NumberOfWaysToCompleteProcess numberOfWaysToCompleteProcess,
      Transaction transaction)
    {
      try
      {
        if (numberOfWaysToCompleteProcess.Id == null)
          return DataStoreResult.Success;
        NumberOfWaysToCompleteProcess core = _dataSet.SharedNumberOfWaysToCompleteProcesses.SingleOrDefault<NumberOfWaysToCompleteProcess>((Func<NumberOfWaysToCompleteProcess, bool>) (x => x.Id == numberOfWaysToCompleteProcess.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(numberOfWaysToCompleteProcess, transaction);
        if (numberOfWaysToCompleteProcess.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedNumberOfWaysToCompleteProcesses.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The number of ways to complete process (" + numberOfWaysToCompleteProcess.ToString() + ") contains ";
        if (numberOfWaysToCompleteProcess.Ideas.Count > 0)
          erorrMessage += "ideas, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedNumberOfWaysToCompleteProcess(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedNumberOfWaysToCompleteProcesses.SingleOrDefault<NumberOfWaysToCompleteProcess>((Func<NumberOfWaysToCompleteProcess, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The numberOfWaysToCompleteProcess is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedNumberOfWaysToCompleteProcess(

      
      string Id,
      bool cascadeDelete = false)
    {
      DataStoreResult completeProcess;
      try
      {
        NumberOfWaysToCompleteProcess numberOfWaysToCompleteProcess = _dataSet.SharedNumberOfWaysToCompleteProcesses.SingleOrDefault<NumberOfWaysToCompleteProcess>((Func<NumberOfWaysToCompleteProcess, bool>) (x => x.Id == Id));
        if (numberOfWaysToCompleteProcess == null)
          throw new NotFoundException("The numberOfWaysToCompleteProcess is not found");
        completeProcess = await this.DeleteAsync(numberOfWaysToCompleteProcess, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return completeProcess;
    }

    internal void RefreshCanDelete(

      
      NumberOfWaysToCompleteProcess numberOfWaysToCompleteProcess,
      Transaction transaction)
    {
      if (numberOfWaysToCompleteProcess == null)
        return;
      if (numberOfWaysToCompleteProcess.Id == null)
      {
        numberOfWaysToCompleteProcess.CanDelete = true;
      }
      else
      {
        this.GetBusinessIdeas(numberOfWaysToCompleteProcess, transaction);
        numberOfWaysToCompleteProcess.CanDelete = numberOfWaysToCompleteProcess.Ideas.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(
      NumberOfWaysToCompleteProcess numberOfWaysToCompleteProcess,
      Transaction transaction)
    {
      if (numberOfWaysToCompleteProcess == null)
        return;
      if (numberOfWaysToCompleteProcess.Id == null)
      {
        numberOfWaysToCompleteProcess.CanDelete = true;
      }
      else
      {
        await this.GetBusinessIdeasAsync(numberOfWaysToCompleteProcess, transaction);
        numberOfWaysToCompleteProcess.CanDelete = numberOfWaysToCompleteProcess.Ideas.Count <= 0;
      }
    }

    public NumberOfWaysToCompleteProcess FindSharedNumberOfWaysToCompleteProcess(
    
    string Id) => Id == null ? (NumberOfWaysToCompleteProcess) null : _dataSet.SharedNumberOfWaysToCompleteProcesses.SingleOrDefault<NumberOfWaysToCompleteProcess>((Func<NumberOfWaysToCompleteProcess, bool>) (x => x.Id == Id));

    public async 
    
    Task<NumberOfWaysToCompleteProcess> FindSharedNumberOfWaysToCompleteProcessAsync(string Id)
    {
      NumberOfWaysToCompleteProcess completeProcessAsync;
      try
      {
        completeProcessAsync = await Task.Run<NumberOfWaysToCompleteProcess>((Func<NumberOfWaysToCompleteProcess>) (() => this.FindSharedNumberOfWaysToCompleteProcess(Id)));
      }
      catch
      {
        throw;
      }
      return completeProcessAsync;
    }

    public List<NumberOfWaysToCompleteProcess> GetSharedNumberOfWaysToCompleteProcessByDate(
      DateTime date)
    {
      return _dataSet.SharedNumberOfWaysToCompleteProcesses.Where<NumberOfWaysToCompleteProcess>((Func<NumberOfWaysToCompleteProcess, bool>) (m =>
      {
        DateTime? date1 = m.Date;
        DateTime date2 = date.Date;
        if (!date1.HasValue)
          return false;
        return !date1.HasValue || date1.GetValueOrDefault() == date2;
      })).ToList<NumberOfWaysToCompleteProcess>();
    }

    public async Task<List<NumberOfWaysToCompleteProcess>> GetSharedNumberOfWaysToCompleteProcessByDateAsync(
      DateTime date)
    {
      List<NumberOfWaysToCompleteProcess> processByDateAsync;
      try
      {
        processByDateAsync = await Task.Run<List<NumberOfWaysToCompleteProcess>>((Func<List<NumberOfWaysToCompleteProcess>>) (() => this.GetSharedNumberOfWaysToCompleteProcessByDate(date)));
      }
      catch
      {
        throw;
      }
      return processByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<NumberOfWaysToCompleteProcess> cores)
    {
      try
      {
        foreach (NumberOfWaysToCompleteProcess core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<NumberOfWaysToCompleteProcess> cores)
    {
      try
      {
        foreach (NumberOfWaysToCompleteProcess core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(
      NumberOfWaysToCompleteProcess numberOfWaysToCompleteProcess)
    {
      if (numberOfWaysToCompleteProcess == null)
        return;
      if (numberOfWaysToCompleteProcess.CreatedById != null && numberOfWaysToCompleteProcess.CreatedBy == null)
        numberOfWaysToCompleteProcess.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == numberOfWaysToCompleteProcess.CreatedById));
      if (numberOfWaysToCompleteProcess.UpdatedById == null || numberOfWaysToCompleteProcess.UpdatedBy != null)
        return;
      numberOfWaysToCompleteProcess.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == numberOfWaysToCompleteProcess.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(
      NumberOfWaysToCompleteProcess numberOfWaysToCompleteProcess)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(numberOfWaysToCompleteProcess)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeas(
      NumberOfWaysToCompleteProcess numberOfWaysToCompleteProcess)
    {
      this.GetBusinessIdeas(numberOfWaysToCompleteProcess, (Transaction) null);
    }

    internal async Task GetBusinessIdeasAsync(
      NumberOfWaysToCompleteProcess numberOfWaysToCompleteProcess)
    {
      await this.GetBusinessIdeasAsync(numberOfWaysToCompleteProcess, (Transaction) null);
    }

    internal void GetBusinessIdeas(
      NumberOfWaysToCompleteProcess numberOfWaysToCompleteProcess,
      Transaction transaction)
    {
      if (numberOfWaysToCompleteProcess != null)
        numberOfWaysToCompleteProcess.Ideas = _dataSet.BusinessIdeas.Where<Idea>((Func<Idea, bool>) (m => m.NumberOfWaysToCompleteProcessId == numberOfWaysToCompleteProcess.Id)).ToList<Idea>();
      if (transaction == null)
        return;
      for (int index = numberOfWaysToCompleteProcess.Ideas.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) numberOfWaysToCompleteProcess.Ideas[index]) == Action.Delete)
          numberOfWaysToCompleteProcess.Ideas.Remove(numberOfWaysToCompleteProcess.Ideas[index]);
      }
    }

    internal async Task GetBusinessIdeasAsync(
      NumberOfWaysToCompleteProcess numberOfWaysToCompleteProcess,
      Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeas(numberOfWaysToCompleteProcess, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(Period core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(Period core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.Period.Name: Name missing; ";
      if (string.IsNullOrWhiteSpace(core.NamePlural))
        messages += "Shared.Period.NamePlural: Name Plural missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(Period core)
    {
      string str = "";
      if (_dataSet.SharedPeriods.ToList<Period>().FirstOrDefault<Period>((Func<Period, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower() && x.NamePlural.ToLower() == core.NamePlural?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name and name Plural.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(Period core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<Period> periods)
    {
      try
      {
        foreach (Period period in periods)
          this.Add(period);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Period> periods)
    {
      try
      {
        foreach (Period period in periods)
          await this.AddAsync(period);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Period core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          Period period = (Period) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            period = _dataSet.SharedPeriods.SingleOrDefault<Period>((Func<Period, bool>) (x => x.Id == core.Id));
          if (period == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedPeriods.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////period.Update(core);
                        ///

                        _dataSet.Entry(period).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        period.Update(core);
                        _dataSet.SharedPeriods.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          period = (Period) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Period core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Period period, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(period, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Period period, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(period, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Period> periods, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (periods == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Period period in periods.ToList<Period>())
        {
          dataStoreResult = this.Delete(period, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<Period> periods, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (periods == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Period> lst = periods.ToList<Period>();
        foreach (Period period in lst)
        {
          Period item = period;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Period) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Period period, Transaction transaction)
    {
      try
      {
        if (period.Id == null)
          return DataStoreResult.Success;
        Period entity = _dataSet.SharedPeriods.SingleOrDefault<Period>((Func<Period, bool>) (x => x.Id == period.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(period, transaction);
        if (period.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedPeriods.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The period (" + period.ToString() + ") contains ";
        if (period.OtherRunningCosts.Count > 0)
          str += "other running costs, ";
        if (period.Prices.Count > 0)
          str += "prices, ";
        if (period.RunningCosts.Count > 0)
          str += "running costs, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Period period, Transaction transaction)
    {
      try
      {
        if (period.Id == null)
          return DataStoreResult.Success;
        Period core = _dataSet.SharedPeriods.SingleOrDefault<Period>((Func<Period, bool>) (x => x.Id == period.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(period, transaction);
        if (period.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedPeriods.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The period (" + period.ToString() + ") contains ";
        if (period.OtherRunningCosts.Count > 0)
          erorrMessage += "other running costs, ";
        if (period.Prices.Count > 0)
          erorrMessage += "prices, ";
        if (period.RunningCosts.Count > 0)
          erorrMessage += "running costs, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedPeriod(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedPeriods.SingleOrDefault<Period>((Func<Period, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The period is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedPeriod(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Period period = _dataSet.SharedPeriods.SingleOrDefault<Period>((Func<Period, bool>) (x => x.Id == Id));
        if (period == null)
          throw new NotFoundException("The period is not found");
        dataStoreResult = await this.DeleteAsync(period, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    Period period, Transaction transaction)
    {
      if (period == null)
        return;
      if (period.Id == null)
      {
        period.CanDelete = true;
      }
      else
      {
        this.GetBusinessOtherRunningCosts(period, transaction);
        this.GetShopPrices(period, transaction);
        this.GetBusinessRunningCosts(period, transaction);
        period.CanDelete = period.OtherRunningCosts.Count + period.Prices.Count + period.RunningCosts.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(Period period, Transaction transaction)
    {
      if (period == null)
        return;
      if (period.Id == null)
      {
        period.CanDelete = true;
      }
      else
      {
        await this.GetBusinessOtherRunningCostsAsync(period, transaction);
        await this.GetShopPricesAsync(period, transaction);
        await this.GetBusinessRunningCostsAsync(period, transaction);
        period.CanDelete = period.OtherRunningCosts.Count + period.Prices.Count + period.RunningCosts.Count <= 0;
      }
    }

    public Period FindSharedPeriod(
    
    string Id) => Id == null ? (Period) null : _dataSet.SharedPeriods.SingleOrDefault<Period>((Func<Period, bool>) (x => x.Id == Id));

    public async 
    
    Task<Period> FindSharedPeriodAsync(string Id)
    {
      Period sharedPeriodAsync;
      try
      {
        sharedPeriodAsync = await Task.Run<Period>((Func<Period>) (() => this.FindSharedPeriod(Id)));
      }
      catch
      {
        throw;
      }
      return sharedPeriodAsync;
    }

    public List<Period> GetSharedPeriodByDate(DateTime date) => _dataSet.SharedPeriods.Where<Period>((Func<Period, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Period>();

    public async Task<List<Period>> GetSharedPeriodByDateAsync(DateTime date)
    {
      List<Period> periodByDateAsync;
      try
      {
        periodByDateAsync = await Task.Run<List<Period>>((Func<List<Period>>) (() => this.GetSharedPeriodByDate(date)));
      }
      catch
      {
        throw;
      }
      return periodByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Period> cores)
    {
      try
      {
        foreach (Period core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Period> cores)
    {
      try
      {
        foreach (Period core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Period period)
    {
      if (period == null)
        return;
      if (period.CreatedById != null && period.CreatedBy == null)
        period.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == period.CreatedById));
      if (period.UpdatedById == null || period.UpdatedBy != null)
        return;
      period.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == period.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Period period)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(period)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessOtherRunningCosts(Period frequency) => this.GetBusinessOtherRunningCosts(frequency, (Transaction) null);

    internal async Task GetBusinessOtherRunningCostsAsync(Period frequency) => await this.GetBusinessOtherRunningCostsAsync(frequency, (Transaction) null);

    internal void GetBusinessOtherRunningCosts(Period frequency, Transaction transaction)
    {
      if (frequency != null)
        frequency.OtherRunningCosts = _dataSet.BusinessOtherRunningCosts.Where<OtherRunningCost>((Func<OtherRunningCost, bool>) (m => m.FrequencyId == frequency.Id)).ToList<OtherRunningCost>();
      if (transaction == null)
        return;
      for (int index = frequency.OtherRunningCosts.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) frequency.OtherRunningCosts[index]) == Action.Delete)
          frequency.OtherRunningCosts.Remove(frequency.OtherRunningCosts[index]);
      }
    }

    internal async Task GetBusinessOtherRunningCostsAsync(Period frequency, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessOtherRunningCosts(frequency, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetShopPrices(Period period) => this.GetShopPrices(period, (Transaction) null);

    internal async Task GetShopPricesAsync(Period period) => await this.GetShopPricesAsync(period, (Transaction) null);

    internal void GetShopPrices(Period period, Transaction transaction)
    {
      if (period != null)
        period.Prices = _dataSet.ShopPrices.Where<Price>((Func<Price, bool>) (m => m.PeriodId == period.Id)).ToList<Price>();
      if (transaction == null)
        return;
      for (int index = period.Prices.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) period.Prices[index]) == Action.Delete)
          period.Prices.Remove(period.Prices[index]);
      }
    }

    internal async Task GetShopPricesAsync(Period period, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetShopPrices(period, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessRunningCosts(Period frequency) => this.GetBusinessRunningCosts(frequency, (Transaction) null);

    internal async Task GetBusinessRunningCostsAsync(Period frequency) => await this.GetBusinessRunningCostsAsync(frequency, (Transaction) null);

    internal void GetBusinessRunningCosts(Period frequency, Transaction transaction)
    {
      if (frequency != null)
        frequency.RunningCosts = _dataSet.BusinessRunningCosts.Where<RunningCost>((Func<RunningCost, bool>) (m => m.FrequencyId == frequency.Id)).ToList<RunningCost>();
      if (transaction == null)
        return;
      for (int index = frequency.RunningCosts.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) frequency.RunningCosts[index]) == Action.Delete)
          frequency.RunningCosts.Remove(frequency.RunningCosts[index]);
      }
    }

    internal async Task GetBusinessRunningCostsAsync(Period frequency, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessRunningCosts(frequency, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(ProcessPeak core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(ProcessPeak core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Colour))
        messages += "Shared.ProcessPeak.Colour: Colour missing; ";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.ProcessPeak.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(ProcessPeak core)
    {
      string str = "";
      if (_dataSet.SharedProcessPeaks.ToList<ProcessPeak>().FirstOrDefault<ProcessPeak>((Func<ProcessPeak, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(ProcessPeak core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<ProcessPeak> processPeaks)
    {
      try
      {
        foreach (ProcessPeak processPeak in processPeaks)
          this.Add(processPeak);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<ProcessPeak> processPeaks)
    {
      try
      {
        foreach (ProcessPeak processPeak in processPeaks)
          await this.AddAsync(processPeak);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(ProcessPeak core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          ProcessPeak processPeak = (ProcessPeak) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            processPeak = _dataSet.SharedProcessPeaks.SingleOrDefault<ProcessPeak>((Func<ProcessPeak, bool>) (x => x.Id == core.Id));
          if (processPeak == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedProcessPeaks.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////processPeak.Update(core);
                        ///

                        _dataSet.Entry(processPeak).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        processPeak.Update(core);
                        _dataSet.SharedProcessPeaks.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          processPeak = (ProcessPeak) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(ProcessPeak core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(ProcessPeak processPeak, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(processPeak, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(ProcessPeak processPeak, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(processPeak, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<ProcessPeak> processPeaks, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (processPeaks == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (ProcessPeak processPeak in processPeaks.ToList<ProcessPeak>())
        {
          dataStoreResult = this.Delete(processPeak, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<ProcessPeak> processPeaks,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (processPeaks == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<ProcessPeak> lst = processPeaks.ToList<ProcessPeak>();
        foreach (ProcessPeak processPeak in lst)
        {
          ProcessPeak item = processPeak;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (ProcessPeak) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(ProcessPeak processPeak, Transaction transaction)
    {
      try
      {
        if (processPeak.Id == null)
          return DataStoreResult.Success;
        ProcessPeak entity = _dataSet.SharedProcessPeaks.SingleOrDefault<ProcessPeak>((Func<ProcessPeak, bool>) (x => x.Id == processPeak.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(processPeak, transaction);
        if (processPeak.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedProcessPeaks.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The process peak (" + processPeak.ToString() + ") contains ";
        if (processPeak.Ideas.Count > 0)
          str += "ideas, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      ProcessPeak processPeak,
      Transaction transaction)
    {
      try
      {
        if (processPeak.Id == null)
          return DataStoreResult.Success;
        ProcessPeak core = _dataSet.SharedProcessPeaks.SingleOrDefault<ProcessPeak>((Func<ProcessPeak, bool>) (x => x.Id == processPeak.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(processPeak, transaction);
        if (processPeak.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedProcessPeaks.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The process peak (" + processPeak.ToString() + ") contains ";
        if (processPeak.Ideas.Count > 0)
          erorrMessage += "ideas, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedProcessPeak(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedProcessPeaks.SingleOrDefault<ProcessPeak>((Func<ProcessPeak, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The processPeak is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedProcessPeak(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        ProcessPeak processPeak = _dataSet.SharedProcessPeaks.SingleOrDefault<ProcessPeak>((Func<ProcessPeak, bool>) (x => x.Id == Id));
        if (processPeak == null)
          throw new NotFoundException("The processPeak is not found");
        dataStoreResult = await this.DeleteAsync(processPeak, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    ProcessPeak processPeak, Transaction transaction)
    {
      if (processPeak == null)
        return;
      if (processPeak.Id == null)
      {
        processPeak.CanDelete = true;
      }
      else
      {
        this.GetBusinessIdeas(processPeak, transaction);
        processPeak.CanDelete = processPeak.Ideas.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(ProcessPeak processPeak, Transaction transaction)
    {
      if (processPeak == null)
        return;
      if (processPeak.Id == null)
      {
        processPeak.CanDelete = true;
      }
      else
      {
        await this.GetBusinessIdeasAsync(processPeak, transaction);
        processPeak.CanDelete = processPeak.Ideas.Count <= 0;
      }
    }

    public ProcessPeak FindSharedProcessPeak(
    
    string Id) => Id == null ? (ProcessPeak) null : _dataSet.SharedProcessPeaks.SingleOrDefault<ProcessPeak>((Func<ProcessPeak, bool>) (x => x.Id == Id));

    public async 
    
    Task<ProcessPeak> FindSharedProcessPeakAsync(string Id)
    {
      ProcessPeak processPeakAsync;
      try
      {
        processPeakAsync = await Task.Run<ProcessPeak>((Func<ProcessPeak>) (() => this.FindSharedProcessPeak(Id)));
      }
      catch
      {
        throw;
      }
      return processPeakAsync;
    }

    public List<ProcessPeak> GetSharedProcessPeakByDate(DateTime date) => _dataSet.SharedProcessPeaks.Where<ProcessPeak>((Func<ProcessPeak, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<ProcessPeak>();

    public async Task<List<ProcessPeak>> GetSharedProcessPeakByDateAsync(DateTime date)
    {
      List<ProcessPeak> processPeakByDateAsync;
      try
      {
        processPeakByDateAsync = await Task.Run<List<ProcessPeak>>((Func<List<ProcessPeak>>) (() => this.GetSharedProcessPeakByDate(date)));
      }
      catch
      {
        throw;
      }
      return processPeakByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<ProcessPeak> cores)
    {
      try
      {
        foreach (ProcessPeak core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<ProcessPeak> cores)
    {
      try
      {
        foreach (ProcessPeak core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(ProcessPeak processPeak)
    {
      if (processPeak == null)
        return;
      if (processPeak.CreatedById != null && processPeak.CreatedBy == null)
        processPeak.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == processPeak.CreatedById));
      if (processPeak.UpdatedById == null || processPeak.UpdatedBy != null)
        return;
      processPeak.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == processPeak.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(ProcessPeak processPeak)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(processPeak)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeas(ProcessPeak processPeak) => this.GetBusinessIdeas(processPeak, (Transaction) null);

    internal async Task GetBusinessIdeasAsync(ProcessPeak processPeak) => await this.GetBusinessIdeasAsync(processPeak, (Transaction) null);

    internal void GetBusinessIdeas(ProcessPeak processPeak, Transaction transaction)
    {
      if (processPeak != null)
        processPeak.Ideas = _dataSet.BusinessIdeas.Where<Idea>((Func<Idea, bool>) (m => m.ProcessPeakId == processPeak.Id)).ToList<Idea>();
      if (transaction == null)
        return;
      for (int index = processPeak.Ideas.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) processPeak.Ideas[index]) == Action.Delete)
          processPeak.Ideas.Remove(processPeak.Ideas[index]);
      }
    }

    internal async Task GetBusinessIdeasAsync(ProcessPeak processPeak, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeas(processPeak, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(ProcessStability core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(ProcessStability core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Colour))
        messages += "Shared.ProcessStability.Colour: Colour missing; ";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.ProcessStability.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(ProcessStability core)
    {
      string str = "";
      if (_dataSet.SharedProcessStabilities.ToList<ProcessStability>().FirstOrDefault<ProcessStability>((Func<ProcessStability, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(ProcessStability core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<ProcessStability> processStabilities)
    {
      try
      {
        foreach (ProcessStability processStability in processStabilities)
          this.Add(processStability);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<ProcessStability> processStabilities)
    {
      try
      {
        foreach (ProcessStability processStability in processStabilities)
          await this.AddAsync(processStability);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(ProcessStability core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          ProcessStability processStability = (ProcessStability) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            processStability = _dataSet.SharedProcessStabilities.SingleOrDefault<ProcessStability>((Func<ProcessStability, bool>) (x => x.Id == core.Id));
          if (processStability == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedProcessStabilities.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////processStability.Update(core);
                        ///

                        _dataSet.Entry(processStability).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        processStability.Update(core);
                        _dataSet.SharedProcessStabilities.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          processStability = (ProcessStability) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(ProcessStability core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(ProcessStability processStability, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(processStability, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      ProcessStability processStability,
      bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(processStability, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(
      IEnumerable<ProcessStability> processStabilities,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (processStabilities == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (ProcessStability processStability in processStabilities.ToList<ProcessStability>())
        {
          dataStoreResult = this.Delete(processStability, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<ProcessStability> processStabilities,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (processStabilities == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<ProcessStability> lst = processStabilities.ToList<ProcessStability>();
        foreach (ProcessStability processStability in lst)
        {
          ProcessStability item = processStability;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (ProcessStability) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(ProcessStability processStability, Transaction transaction)
    {
      try
      {
        if (processStability.Id == null)
          return DataStoreResult.Success;
        ProcessStability entity = _dataSet.SharedProcessStabilities.SingleOrDefault<ProcessStability>((Func<ProcessStability, bool>) (x => x.Id == processStability.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(processStability, transaction);
        if (processStability.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedProcessStabilities.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The process stability (" + processStability.ToString() + ") contains ";
        if (processStability.Ideas.Count > 0)
          str += "ideas, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      ProcessStability processStability,
      Transaction transaction)
    {
      try
      {
        if (processStability.Id == null)
          return DataStoreResult.Success;
        ProcessStability core = _dataSet.SharedProcessStabilities.SingleOrDefault<ProcessStability>((Func<ProcessStability, bool>) (x => x.Id == processStability.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(processStability, transaction);
        if (processStability.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedProcessStabilities.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The process stability (" + processStability.ToString() + ") contains ";
        if (processStability.Ideas.Count > 0)
          erorrMessage += "ideas, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedProcessStability(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedProcessStabilities.SingleOrDefault<ProcessStability>((Func<ProcessStability, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The processStability is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedProcessStability(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        ProcessStability processStability = _dataSet.SharedProcessStabilities.SingleOrDefault<ProcessStability>((Func<ProcessStability, bool>) (x => x.Id == Id));
        if (processStability == null)
          throw new NotFoundException("The processStability is not found");
        dataStoreResult = await this.DeleteAsync(processStability, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    ProcessStability processStability, Transaction transaction)
    {
      if (processStability == null)
        return;
      if (processStability.Id == null)
      {
        processStability.CanDelete = true;
      }
      else
      {
        this.GetBusinessIdeas(processStability, transaction);
        processStability.CanDelete = processStability.Ideas.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(
      ProcessStability processStability,
      Transaction transaction)
    {
      if (processStability == null)
        return;
      if (processStability.Id == null)
      {
        processStability.CanDelete = true;
      }
      else
      {
        await this.GetBusinessIdeasAsync(processStability, transaction);
        processStability.CanDelete = processStability.Ideas.Count <= 0;
      }
    }

    public ProcessStability FindSharedProcessStability(
    
    string Id) => Id == null ? (ProcessStability) null : _dataSet.SharedProcessStabilities.SingleOrDefault<ProcessStability>((Func<ProcessStability, bool>) (x => x.Id == Id));

    public async 
    
    Task<ProcessStability> FindSharedProcessStabilityAsync(string Id)
    {
      ProcessStability processStabilityAsync;
      try
      {
        processStabilityAsync = await Task.Run<ProcessStability>((Func<ProcessStability>) (() => this.FindSharedProcessStability(Id)));
      }
      catch
      {
        throw;
      }
      return processStabilityAsync;
    }

    public List<ProcessStability> GetSharedProcessStabilityByDate(DateTime date) => _dataSet.SharedProcessStabilities.Where<ProcessStability>((Func<ProcessStability, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<ProcessStability>();

    public async Task<List<ProcessStability>> GetSharedProcessStabilityByDateAsync(DateTime date)
    {
      List<ProcessStability> stabilityByDateAsync;
      try
      {
        stabilityByDateAsync = await Task.Run<List<ProcessStability>>((Func<List<ProcessStability>>) (() => this.GetSharedProcessStabilityByDate(date)));
      }
      catch
      {
        throw;
      }
      return stabilityByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<ProcessStability> cores)
    {
      try
      {
        foreach (ProcessStability core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<ProcessStability> cores)
    {
      try
      {
        foreach (ProcessStability core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(ProcessStability processStability)
    {
      if (processStability == null)
        return;
      if (processStability.CreatedById != null && processStability.CreatedBy == null)
        processStability.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == processStability.CreatedById));
      if (processStability.UpdatedById == null || processStability.UpdatedBy != null)
        return;
      processStability.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == processStability.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(ProcessStability processStability)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(processStability)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeas(ProcessStability processStability) => this.GetBusinessIdeas(processStability, (Transaction) null);

    internal async Task GetBusinessIdeasAsync(ProcessStability processStability) => await this.GetBusinessIdeasAsync(processStability, (Transaction) null);

    internal void GetBusinessIdeas(ProcessStability processStability, Transaction transaction)
    {
      if (processStability != null)
        processStability.Ideas = _dataSet.BusinessIdeas.Where<Idea>((Func<Idea, bool>) (m => m.ProcessStabilityId == processStability.Id)).ToList<Idea>();
      if (transaction == null)
        return;
      for (int index = processStability.Ideas.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) processStability.Ideas[index]) == Action.Delete)
          processStability.Ideas.Remove(processStability.Ideas[index]);
      }
    }

    internal async Task GetBusinessIdeasAsync(
      ProcessStability processStability,
      Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeas(processStability, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(Rule core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(Rule core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Colour))
        messages += "Shared.Rule.Colour: Colour missing; ";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.Rule.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(Rule core)
    {
      string str = "";
      if (_dataSet.SharedRules.ToList<Rule>().FirstOrDefault<Rule>((Func<Rule, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(Rule core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<Rule> rules)
    {
      try
      {
        foreach (Rule rule in rules)
          this.Add(rule);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Rule> rules)
    {
      try
      {
        foreach (Rule rule in rules)
          await this.AddAsync(rule);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Rule core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          Rule rule = (Rule) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            rule = _dataSet.SharedRules.SingleOrDefault<Rule>((Func<Rule, bool>) (x => x.Id == core.Id));
          if (rule == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedRules.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////rule.Update(core);
                        ///

                        _dataSet.Entry(rule).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        rule.Update(core);
                        _dataSet.SharedRules.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          rule = (Rule) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Rule core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Rule rule, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(rule, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Rule rule, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(rule, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Rule> rules, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (rules == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Rule rule in rules.ToList<Rule>())
        {
          dataStoreResult = this.Delete(rule, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<Rule> rules, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (rules == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Rule> lst = rules.ToList<Rule>();
        foreach (Rule rule in lst)
        {
          Rule item = rule;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Rule) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Rule rule, Transaction transaction)
    {
      try
      {
        if (rule.Id == null)
          return DataStoreResult.Success;
        Rule entity = _dataSet.SharedRules.SingleOrDefault<Rule>((Func<Rule, bool>) (x => x.Id == rule.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(rule, transaction);
        if (rule.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedRules.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The rule (" + rule.ToString() + ") contains ";
        if (rule.Ideas.Count > 0)
          str += "ideas, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Rule rule, Transaction transaction)
    {
      try
      {
        if (rule.Id == null)
          return DataStoreResult.Success;
        Rule core = _dataSet.SharedRules.SingleOrDefault<Rule>((Func<Rule, bool>) (x => x.Id == rule.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(rule, transaction);
        if (rule.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedRules.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The rule (" + rule.ToString() + ") contains ";
        if (rule.Ideas.Count > 0)
          erorrMessage += "ideas, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedRule(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedRules.SingleOrDefault<Rule>((Func<Rule, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The rule is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedRule(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Rule rule = _dataSet.SharedRules.SingleOrDefault<Rule>((Func<Rule, bool>) (x => x.Id == Id));
        if (rule == null)
          throw new NotFoundException("The rule is not found");
        dataStoreResult = await this.DeleteAsync(rule, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    Rule rule, Transaction transaction)
    {
      if (rule == null)
        return;
      if (rule.Id == null)
      {
        rule.CanDelete = true;
      }
      else
      {
        this.GetBusinessIdeas(rule, transaction);
        rule.CanDelete = rule.Ideas.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(Rule rule, Transaction transaction)
    {
      if (rule == null)
        return;
      if (rule.Id == null)
      {
        rule.CanDelete = true;
      }
      else
      {
        await this.GetBusinessIdeasAsync(rule, transaction);
        rule.CanDelete = rule.Ideas.Count <= 0;
      }
    }

    public Rule FindSharedRule(
    
    string Id) => Id == null ? (Rule) null : _dataSet.SharedRules.SingleOrDefault<Rule>((Func<Rule, bool>) (x => x.Id == Id));

    public async 
    
    Task<Rule> FindSharedRuleAsync(string Id)
    {
      Rule sharedRuleAsync;
      try
      {
        sharedRuleAsync = await Task.Run<Rule>((Func<Rule>) (() => this.FindSharedRule(Id)));
      }
      catch
      {
        throw;
      }
      return sharedRuleAsync;
    }

    public List<Rule> GetSharedRuleByDate(DateTime date) => _dataSet.SharedRules.Where<Rule>((Func<Rule, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Rule>();

    public async Task<List<Rule>> GetSharedRuleByDateAsync(DateTime date)
    {
      List<Rule> sharedRuleByDateAsync;
      try
      {
        sharedRuleByDateAsync = await Task.Run<List<Rule>>((Func<List<Rule>>) (() => this.GetSharedRuleByDate(date)));
      }
      catch
      {
        throw;
      }
      return sharedRuleByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Rule> cores)
    {
      try
      {
        foreach (Rule core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Rule> cores)
    {
      try
      {
        foreach (Rule core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Rule rule)
    {
      if (rule == null)
        return;
      if (rule.CreatedById != null && rule.CreatedBy == null)
        rule.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == rule.CreatedById));
      if (rule.UpdatedById == null || rule.UpdatedBy != null)
        return;
      rule.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == rule.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Rule rule)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(rule)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeas(Rule rule) => this.GetBusinessIdeas(rule, (Transaction) null);

    internal async Task GetBusinessIdeasAsync(Rule rule) => await this.GetBusinessIdeasAsync(rule, (Transaction) null);

    internal void GetBusinessIdeas(Rule rule, Transaction transaction)
    {
      if (rule != null)
        rule.Ideas = _dataSet.BusinessIdeas.Where<Idea>((Func<Idea, bool>) (m => m.RuleId == rule.Id)).ToList<Idea>();
      if (transaction == null)
        return;
      for (int index = rule.Ideas.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) rule.Ideas[index]) == Action.Delete)
          rule.Ideas.Remove(rule.Ideas[index]);
      }
    }

    internal async Task GetBusinessIdeasAsync(Rule rule, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeas(rule, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(Stage core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(Stage core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.Stage.Name: Name missing; ";
      if (core.StageGroup == null)
      {
        if (string.IsNullOrWhiteSpace(core.StageGroupId))
        {
          messages += "Shared.Stage.StageGroupId: Stage Group missing; ";
        }
        else
        {
          StageGroup parent = _dataSet.SharedStageGroups.SingleOrDefault<StageGroup>((Func<StageGroup, bool>) (x => x.Id == core.StageGroupId));
          if (parent == null)
            messages += "Shared.Stage.StageGroupId: Stage Group invalid; ";
          parent = (StageGroup) null;
        }
      }
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(Stage core)
    {
      string str = "";
      if (_dataSet.SharedStages.ToList<Stage>().FirstOrDefault<Stage>((Func<Stage, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(Stage core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<Stage> stages)
    {
      try
      {
        foreach (Stage stage in stages)
          this.Add(stage);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Stage> stages)
    {
      try
      {
        foreach (Stage stage in stages)
          await this.AddAsync(stage);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Stage core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          Stage stage = (Stage) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            stage = _dataSet.SharedStages.SingleOrDefault<Stage>((Func<Stage, bool>) (x => x.Id == core.Id));
          if (stage == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedStages.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////stage.Update(core);
                        ///

                        _dataSet.Entry(stage).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        stage.Update(core);
                        _dataSet.SharedStages.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          stage = (Stage) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Stage core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Stage stage, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(stage, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Stage stage, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(stage, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Stage> stages, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (stages == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Stage stage in stages.ToList<Stage>())
        {
          dataStoreResult = this.Delete(stage, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<Stage> stages, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (stages == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Stage> lst = stages.ToList<Stage>();
        foreach (Stage stage in lst)
        {
          Stage item = stage;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Stage) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Stage stage, Transaction transaction)
    {
      try
      {
        if (stage.Id == null)
          return DataStoreResult.Success;
        Stage entity = _dataSet.SharedStages.SingleOrDefault<Stage>((Func<Stage, bool>) (x => x.Id == stage.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.GetBusinessIdeaStages(stage);
        foreach (IdeaStage ideaStage in stage.IdeaStages)
        {
          int num = (int) this.Delete(ideaStage, transaction);
        }
        this.RefreshCanDelete(stage, transaction);
        if (stage.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedStages.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The stage (" + stage.ToString() + ") contains ";
        if (stage.IdeaStatuses.Count > 0)
          str += "idea statuses, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Stage stage, Transaction transaction)
    {
      try
      {
        if (stage.Id == null)
          return DataStoreResult.Success;
        Stage core = _dataSet.SharedStages.SingleOrDefault<Stage>((Func<Stage, bool>) (x => x.Id == stage.Id));
        if (core == null)
          return DataStoreResult.Success;
        this.GetBusinessIdeaStages(stage);
        foreach (IdeaStage m in stage.IdeaStages)
        {
          int num = (int) await this.DeleteAsync(m, transaction);
        }
        await this.RefreshCanDeleteAsync(stage, transaction);
        if (stage.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedStages.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The stage (" + stage.ToString() + ") contains ";
        if (stage.IdeaStatuses.Count > 0)
          erorrMessage += "idea statuses, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedStage(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedStages.SingleOrDefault<Stage>((Func<Stage, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The stage is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedStage(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Stage stage = _dataSet.SharedStages.SingleOrDefault<Stage>((Func<Stage, bool>) (x => x.Id == Id));
        if (stage == null)
          throw new NotFoundException("The stage is not found");
        dataStoreResult = await this.DeleteAsync(stage, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    Stage stage, Transaction transaction)
    {
      if (stage == null)
        return;
      if (stage.Id == null)
      {
        stage.CanDelete = true;
      }
      else
      {
        this.GetBusinessIdeaStages(stage, transaction);
        this.GetSharedIdeaStatuses(stage, transaction);
        stage.CanDelete = stage.IdeaStages.Count + stage.IdeaStatuses.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(Stage stage, Transaction transaction)
    {
      if (stage == null)
        return;
      if (stage.Id == null)
      {
        stage.CanDelete = true;
      }
      else
      {
        await this.GetSharedIdeaStatusesAsync(stage, transaction);
        stage.CanDelete = stage.IdeaStatuses.Count <= 0;
      }
    }

    public Stage FindSharedStage(
    
    string Id) => Id == null ? (Stage) null : _dataSet.SharedStages.SingleOrDefault<Stage>((Func<Stage, bool>) (x => x.Id == Id));

    public async 
    
    Task<Stage> FindSharedStageAsync(string Id)
    {
      Stage sharedStageAsync;
      try
      {
        sharedStageAsync = await Task.Run<Stage>((Func<Stage>) (() => this.FindSharedStage(Id)));
      }
      catch
      {
        throw;
      }
      return sharedStageAsync;
    }

    public List<Stage> GetSharedStageByDate(DateTime date) => _dataSet.SharedStages.Where<Stage>((Func<Stage, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Stage>();

    public async Task<List<Stage>> GetSharedStageByDateAsync(DateTime date)
    {
      List<Stage> stageByDateAsync;
      try
      {
        stageByDateAsync = await Task.Run<List<Stage>>((Func<List<Stage>>) (() => this.GetSharedStageByDate(date)));
      }
      catch
      {
        throw;
      }
      return stageByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Stage> cores)
    {
      try
      {
        foreach (Stage core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Stage> cores)
    {
      try
      {
        foreach (Stage core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Stage stage)
    {
      if (stage == null)
        return;
      if (stage.CreatedById != null && stage.CreatedBy == null)
        stage.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == stage.CreatedById));
      if (stage.UpdatedById == null || stage.UpdatedBy != null)
        return;
      stage.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == stage.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Stage stage)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(stage)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeaStages(Stage stage) => this.GetBusinessIdeaStages(stage, (Transaction) null);

    internal async Task GetBusinessIdeaStagesAsync(Stage stage) => await this.GetBusinessIdeaStagesAsync(stage, (Transaction) null);

    internal void GetBusinessIdeaStages(Stage stage, Transaction transaction)
    {
      if (stage != null)
        stage.IdeaStages = _dataSet.BusinessIdeaStages.Where<IdeaStage>((Func<IdeaStage, bool>) (m => m.StageId == stage.Id)).ToList<IdeaStage>();
      if (transaction == null)
        return;
      for (int index = stage.IdeaStages.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) stage.IdeaStages[index]) == Action.Delete)
          stage.IdeaStages.Remove(stage.IdeaStages[index]);
      }
    }

    internal async Task GetBusinessIdeaStagesAsync(Stage stage, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeaStages(stage, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetSharedIdeaStatuses(Stage stage) => this.GetSharedIdeaStatuses(stage, (Transaction) null);

    internal async Task GetSharedIdeaStatusesAsync(Stage stage) => await this.GetSharedIdeaStatusesAsync(stage, (Transaction) null);

    internal void GetSharedIdeaStatuses(Stage stage, Transaction transaction)
    {
      if (stage != null)
        stage.IdeaStatuses = _dataSet.SharedIdeaStatuses.Where<IdeaStatus>((Func<IdeaStatus, bool>) (m => m.StageId == stage.Id)).ToList<IdeaStatus>();
      if (transaction == null)
        return;
      for (int index = stage.IdeaStatuses.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) stage.IdeaStatuses[index]) == Action.Delete)
          stage.IdeaStatuses.Remove(stage.IdeaStatuses[index]);
      }
    }

    internal async Task GetSharedIdeaStatusesAsync(Stage stage, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedIdeaStatuses(stage, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedStageGroup(Stage stage)
    {
      if (stage == null)
        return;
      foreach (StageGroup sharedStageGroup in (List<StageGroup>) _dataSet.SharedStageGroups.ToList())
      {
        if (stage.StageGroupId != null && sharedStageGroup.Id == stage.StageGroupId)
        {
          stage.StageGroup = sharedStageGroup;
          break;
        }
      }
    }

    public async Task GetSharedStageGroupAsync(Stage stage)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedStageGroup(stage)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedStageGroups(IEnumerable<Stage> stages)
    {
      foreach (Stage stage in stages)
        this.GetSharedStageGroup(stage);
    }

    public async Task GetSharedStageGroupsAsync(IEnumerable<Stage> stages)
    {
      foreach (Stage stage in stages)
        await this.GetSharedStageGroupAsync(stage);
    }

    public string Validate(StageGroup core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(StageGroup core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.StageGroup.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(StageGroup core)
    {
      string str = "";
      if (_dataSet.SharedStageGroups.ToList<StageGroup>().FirstOrDefault<StageGroup>((Func<StageGroup, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(StageGroup core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<StageGroup> stageGroups)
    {
      try
      {
        foreach (StageGroup stageGroup in stageGroups)
          this.Add(stageGroup);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<StageGroup> stageGroups)
    {
      try
      {
        foreach (StageGroup stageGroup in stageGroups)
          await this.AddAsync(stageGroup);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(StageGroup core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          StageGroup stageGroup = (StageGroup) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            stageGroup = _dataSet.SharedStageGroups.SingleOrDefault<StageGroup>((Func<StageGroup, bool>) (x => x.Id == core.Id));
          if (stageGroup == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedStageGroups.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////stageGroup.Update(core);
                        ///

                        _dataSet.Entry(stageGroup).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        stageGroup.Update(core);
                        _dataSet.SharedStageGroups.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          stageGroup = (StageGroup) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(StageGroup core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(StageGroup stageGroup, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(stageGroup, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(StageGroup stageGroup, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(stageGroup, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<StageGroup> stageGroups, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (stageGroups == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (StageGroup stageGroup in stageGroups.ToList<StageGroup>())
        {
          dataStoreResult = this.Delete(stageGroup, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<StageGroup> stageGroups,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (stageGroups == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<StageGroup> lst = stageGroups.ToList<StageGroup>();
        foreach (StageGroup stageGroup in lst)
        {
          StageGroup item = stageGroup;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (StageGroup) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(StageGroup stageGroup, Transaction transaction)
    {
      try
      {
        if (stageGroup.Id == null)
          return DataStoreResult.Success;
        StageGroup entity = _dataSet.SharedStageGroups.SingleOrDefault<StageGroup>((Func<StageGroup, bool>) (x => x.Id == stageGroup.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(stageGroup, transaction);
        if (stageGroup.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedStageGroups.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The stage group (" + stageGroup.ToString() + ") contains ";
        if (stageGroup.Stages.Count > 0)
          str += "stages, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(StageGroup stageGroup, Transaction transaction)
    {
      try
      {
        if (stageGroup.Id == null)
          return DataStoreResult.Success;
        StageGroup core = _dataSet.SharedStageGroups.SingleOrDefault<StageGroup>((Func<StageGroup, bool>) (x => x.Id == stageGroup.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(stageGroup, transaction);
        if (stageGroup.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedStageGroups.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The stage group (" + stageGroup.ToString() + ") contains ";
        if (stageGroup.Stages.Count > 0)
          erorrMessage += "stages, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedStageGroup(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedStageGroups.SingleOrDefault<StageGroup>((Func<StageGroup, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The stageGroup is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedStageGroup(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        StageGroup stageGroup = _dataSet.SharedStageGroups.SingleOrDefault<StageGroup>((Func<StageGroup, bool>) (x => x.Id == Id));
        if (stageGroup == null)
          throw new NotFoundException("The stageGroup is not found");
        dataStoreResult = await this.DeleteAsync(stageGroup, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    StageGroup stageGroup, Transaction transaction)
    {
      if (stageGroup == null)
        return;
      if (stageGroup.Id == null)
      {
        stageGroup.CanDelete = true;
      }
      else
      {
        this.GetSharedStages(stageGroup, transaction);
        stageGroup.CanDelete = stageGroup.Stages.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(StageGroup stageGroup, Transaction transaction)
    {
      if (stageGroup == null)
        return;
      if (stageGroup.Id == null)
      {
        stageGroup.CanDelete = true;
      }
      else
      {
        await this.GetSharedStagesAsync(stageGroup, transaction);
        stageGroup.CanDelete = stageGroup.Stages.Count <= 0;
      }
    }

    public StageGroup FindSharedStageGroup(
    
    string Id) => Id == null ? (StageGroup) null : _dataSet.SharedStageGroups.SingleOrDefault<StageGroup>((Func<StageGroup, bool>) (x => x.Id == Id));

    public async 
    
    Task<StageGroup> FindSharedStageGroupAsync(string Id)
    {
      StageGroup sharedStageGroupAsync;
      try
      {
        sharedStageGroupAsync = await Task.Run<StageGroup>((Func<StageGroup>) (() => this.FindSharedStageGroup(Id)));
      }
      catch
      {
        throw;
      }
      return sharedStageGroupAsync;
    }

    public List<StageGroup> GetSharedStageGroupByDate(DateTime date) => _dataSet.SharedStageGroups.Where<StageGroup>((Func<StageGroup, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<StageGroup>();

    public async Task<List<StageGroup>> GetSharedStageGroupByDateAsync(DateTime date)
    {
      List<StageGroup> groupByDateAsync;
      try
      {
        groupByDateAsync = await Task.Run<List<StageGroup>>((Func<List<StageGroup>>) (() => this.GetSharedStageGroupByDate(date)));
      }
      catch
      {
        throw;
      }
      return groupByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<StageGroup> cores)
    {
      try
      {
        foreach (StageGroup core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<StageGroup> cores)
    {
      try
      {
        foreach (StageGroup core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(StageGroup stageGroup)
    {
      if (stageGroup == null)
        return;
      if (stageGroup.CreatedById != null && stageGroup.CreatedBy == null)
        stageGroup.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == stageGroup.CreatedById));
      if (stageGroup.UpdatedById == null || stageGroup.UpdatedBy != null)
        return;
      stageGroup.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == stageGroup.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(StageGroup stageGroup)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(stageGroup)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetSharedStages(StageGroup stageGroup) => this.GetSharedStages(stageGroup, (Transaction) null);

    internal async Task GetSharedStagesAsync(StageGroup stageGroup) => await this.GetSharedStagesAsync(stageGroup, (Transaction) null);

    internal void GetSharedStages(StageGroup stageGroup, Transaction transaction)
    {
      if (stageGroup != null)
        stageGroup.Stages = _dataSet.SharedStages.Where<Stage>((Func<Stage, bool>) (m => m.StageGroupId == stageGroup.Id)).ToList<Stage>();
      if (transaction == null)
        return;
      for (int index = stageGroup.Stages.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) stageGroup.Stages[index]) == Action.Delete)
          stageGroup.Stages.Remove(stageGroup.Stages[index]);
      }
    }

    internal async Task GetSharedStagesAsync(StageGroup stageGroup, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedStages(stageGroup, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(SubmissionPath core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(SubmissionPath core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.SubmissionPath.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(SubmissionPath core)
    {
      string str = "";
      if (_dataSet.SharedSubmissionPaths.ToList<SubmissionPath>().FirstOrDefault<SubmissionPath>((Func<SubmissionPath, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(SubmissionPath core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<SubmissionPath> submissionPaths)
    {
      try
      {
        foreach (SubmissionPath submissionPath in submissionPaths)
          this.Add(submissionPath);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<SubmissionPath> submissionPaths)
    {
      try
      {
        foreach (SubmissionPath submissionPath in submissionPaths)
          await this.AddAsync(submissionPath);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(SubmissionPath core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          SubmissionPath submissionPath = (SubmissionPath) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            submissionPath = _dataSet.SharedSubmissionPaths.SingleOrDefault<SubmissionPath>((Func<SubmissionPath, bool>) (x => x.Id == core.Id));
          if (submissionPath == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedSubmissionPaths.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////submissionPath.Update(core);
                        ///

                        _dataSet.Entry(submissionPath).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        submissionPath.Update(core);
                        _dataSet.SharedSubmissionPaths.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          submissionPath = (SubmissionPath) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(SubmissionPath core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(SubmissionPath submissionPath, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(submissionPath, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      SubmissionPath submissionPath,
      bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(submissionPath, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<SubmissionPath> submissionPaths, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (submissionPaths == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (SubmissionPath submissionPath in submissionPaths.ToList<SubmissionPath>())
        {
          dataStoreResult = this.Delete(submissionPath, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<SubmissionPath> submissionPaths,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (submissionPaths == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<SubmissionPath> lst = submissionPaths.ToList<SubmissionPath>();
        foreach (SubmissionPath submissionPath in lst)
        {
          SubmissionPath item = submissionPath;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (SubmissionPath) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(SubmissionPath submissionPath, Transaction transaction)
    {
      try
      {
        if (submissionPath.Id == null)
          return DataStoreResult.Success;
        SubmissionPath entity = _dataSet.SharedSubmissionPaths.SingleOrDefault<SubmissionPath>((Func<SubmissionPath, bool>) (x => x.Id == submissionPath.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(submissionPath, transaction);
        if (submissionPath.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedSubmissionPaths.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The submission path (" + submissionPath.ToString() + ") contains ";
        if (submissionPath.Ideas.Count > 0)
          str += "ideas, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      SubmissionPath submissionPath,
      Transaction transaction)
    {
      try
      {
        if (submissionPath.Id == null)
          return DataStoreResult.Success;
        SubmissionPath core = _dataSet.SharedSubmissionPaths.SingleOrDefault<SubmissionPath>((Func<SubmissionPath, bool>) (x => x.Id == submissionPath.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(submissionPath, transaction);
        if (submissionPath.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedSubmissionPaths.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The submission path (" + submissionPath.ToString() + ") contains ";
        if (submissionPath.Ideas.Count > 0)
          erorrMessage += "ideas, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedSubmissionPath(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedSubmissionPaths.SingleOrDefault<SubmissionPath>((Func<SubmissionPath, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The submissionPath is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedSubmissionPath(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        SubmissionPath submissionPath = _dataSet.SharedSubmissionPaths.SingleOrDefault<SubmissionPath>((Func<SubmissionPath, bool>) (x => x.Id == Id));
        if (submissionPath == null)
          throw new NotFoundException("The submissionPath is not found");
        dataStoreResult = await this.DeleteAsync(submissionPath, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    SubmissionPath submissionPath, Transaction transaction)
    {
      if (submissionPath == null)
        return;
      if (submissionPath.Id == null)
      {
        submissionPath.CanDelete = true;
      }
      else
      {
        this.GetBusinessIdeas(submissionPath, transaction);
        submissionPath.CanDelete = submissionPath.Ideas.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(
      SubmissionPath submissionPath,
      Transaction transaction)
    {
      if (submissionPath == null)
        return;
      if (submissionPath.Id == null)
      {
        submissionPath.CanDelete = true;
      }
      else
      {
        await this.GetBusinessIdeasAsync(submissionPath, transaction);
        submissionPath.CanDelete = submissionPath.Ideas.Count <= 0;
      }
    }

    public SubmissionPath FindSharedSubmissionPath(
    
    string Id) => Id == null ? (SubmissionPath) null : _dataSet.SharedSubmissionPaths.SingleOrDefault<SubmissionPath>((Func<SubmissionPath, bool>) (x => x.Id == Id));

    public async 
    
    Task<SubmissionPath> FindSharedSubmissionPathAsync(string Id)
    {
      SubmissionPath submissionPathAsync;
      try
      {
        submissionPathAsync = await Task.Run<SubmissionPath>((Func<SubmissionPath>) (() => this.FindSharedSubmissionPath(Id)));
      }
      catch
      {
        throw;
      }
      return submissionPathAsync;
    }

    public List<SubmissionPath> GetSharedSubmissionPathByDate(DateTime date) => _dataSet.SharedSubmissionPaths.Where<SubmissionPath>((Func<SubmissionPath, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<SubmissionPath>();

    public async Task<List<SubmissionPath>> GetSharedSubmissionPathByDateAsync(DateTime date)
    {
      List<SubmissionPath> submissionPathByDateAsync;
      try
      {
        submissionPathByDateAsync = await Task.Run<List<SubmissionPath>>((Func<List<SubmissionPath>>) (() => this.GetSharedSubmissionPathByDate(date)));
      }
      catch
      {
        throw;
      }
      return submissionPathByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<SubmissionPath> cores)
    {
      try
      {
        foreach (SubmissionPath core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<SubmissionPath> cores)
    {
      try
      {
        foreach (SubmissionPath core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(SubmissionPath submissionPath)
    {
      if (submissionPath == null)
        return;
      if (submissionPath.CreatedById != null && submissionPath.CreatedBy == null)
        submissionPath.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == submissionPath.CreatedById));
      if (submissionPath.UpdatedById == null || submissionPath.UpdatedBy != null)
        return;
      submissionPath.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == submissionPath.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(SubmissionPath submissionPath)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(submissionPath)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeas(SubmissionPath submissionPath) => this.GetBusinessIdeas(submissionPath, (Transaction) null);

    internal async Task GetBusinessIdeasAsync(SubmissionPath submissionPath) => await this.GetBusinessIdeasAsync(submissionPath, (Transaction) null);

    internal void GetBusinessIdeas(SubmissionPath submissionPath, Transaction transaction)
    {
      if (submissionPath != null)
        submissionPath.Ideas = _dataSet.BusinessIdeas.Where<Idea>((Func<Idea, bool>) (m => m.SubmissionPathId == submissionPath.Id)).ToList<Idea>();
      if (transaction == null)
        return;
      for (int index = submissionPath.Ideas.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) submissionPath.Ideas[index]) == Action.Delete)
          submissionPath.Ideas.Remove(submissionPath.Ideas[index]);
      }
    }

    internal async Task GetBusinessIdeasAsync(
      SubmissionPath submissionPath,
      Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeas(submissionPath, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(TaskFrequency core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(TaskFrequency core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shared.TaskFrequency.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(TaskFrequency core)
    {
      string str = "";
      if (_dataSet.SharedTaskFrequencies.ToList<TaskFrequency>().FirstOrDefault<TaskFrequency>((Func<TaskFrequency, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(TaskFrequency core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<TaskFrequency> taskFrequencies)
    {
      try
      {
        foreach (TaskFrequency taskFrequency in taskFrequencies)
          this.Add(taskFrequency);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<TaskFrequency> taskFrequencies)
    {
      try
      {
        foreach (TaskFrequency taskFrequency in taskFrequencies)
          await this.AddAsync(taskFrequency);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(TaskFrequency core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          TaskFrequency taskFrequency = (TaskFrequency) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            taskFrequency = _dataSet.SharedTaskFrequencies.SingleOrDefault<TaskFrequency>((Func<TaskFrequency, bool>) (x => x.Id == core.Id));
          if (taskFrequency == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.SharedTaskFrequencies.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////taskFrequency.Update(core);
                        ///

                        _dataSet.Entry(taskFrequency).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        taskFrequency.Update(core);
                        _dataSet.SharedTaskFrequencies.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          taskFrequency = (TaskFrequency) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(TaskFrequency core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(TaskFrequency taskFrequency, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(taskFrequency, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(TaskFrequency taskFrequency, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(taskFrequency, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<TaskFrequency> taskFrequencies, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (taskFrequencies == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (TaskFrequency taskFrequency in taskFrequencies.ToList<TaskFrequency>())
        {
          dataStoreResult = this.Delete(taskFrequency, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<TaskFrequency> taskFrequencies,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (taskFrequencies == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<TaskFrequency> lst = taskFrequencies.ToList<TaskFrequency>();
        foreach (TaskFrequency taskFrequency in lst)
        {
          TaskFrequency item = taskFrequency;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (TaskFrequency) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(TaskFrequency taskFrequency, Transaction transaction)
    {
      try
      {
        if (taskFrequency.Id == null)
          return DataStoreResult.Success;
        TaskFrequency entity = _dataSet.SharedTaskFrequencies.SingleOrDefault<TaskFrequency>((Func<TaskFrequency, bool>) (x => x.Id == taskFrequency.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(taskFrequency, transaction);
        if (taskFrequency.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedTaskFrequencies.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The task frequency (" + taskFrequency.ToString() + ") contains ";
        if (taskFrequency.Ideas.Count > 0)
          str += "ideas, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      TaskFrequency taskFrequency,
      Transaction transaction)
    {
      try
      {
        if (taskFrequency.Id == null)
          return DataStoreResult.Success;
        TaskFrequency core = _dataSet.SharedTaskFrequencies.SingleOrDefault<TaskFrequency>((Func<TaskFrequency, bool>) (x => x.Id == taskFrequency.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(taskFrequency, transaction);
        if (taskFrequency.CanDelete)
        {
          if (transaction == null)
            _dataSet.SharedTaskFrequencies.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The task frequency (" + taskFrequency.ToString() + ") contains ";
        if (taskFrequency.Ideas.Count > 0)
          erorrMessage += "ideas, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteSharedTaskFrequency(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.SharedTaskFrequencies.SingleOrDefault<TaskFrequency>((Func<TaskFrequency, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The taskFrequency is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncSharedTaskFrequency(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        TaskFrequency taskFrequency = _dataSet.SharedTaskFrequencies.SingleOrDefault<TaskFrequency>((Func<TaskFrequency, bool>) (x => x.Id == Id));
        if (taskFrequency == null)
          throw new NotFoundException("The taskFrequency is not found");
        dataStoreResult = await this.DeleteAsync(taskFrequency, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    TaskFrequency taskFrequency, Transaction transaction)
    {
      if (taskFrequency == null)
        return;
      if (taskFrequency.Id == null)
      {
        taskFrequency.CanDelete = true;
      }
      else
      {
        this.GetBusinessIdeas(taskFrequency, transaction);
        taskFrequency.CanDelete = taskFrequency.Ideas.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(TaskFrequency taskFrequency, Transaction transaction)
    {
      if (taskFrequency == null)
        return;
      if (taskFrequency.Id == null)
      {
        taskFrequency.CanDelete = true;
      }
      else
      {
        await this.GetBusinessIdeasAsync(taskFrequency, transaction);
        taskFrequency.CanDelete = taskFrequency.Ideas.Count <= 0;
      }
    }

    public TaskFrequency FindSharedTaskFrequency(
    
    string Id) => Id == null ? (TaskFrequency) null : _dataSet.SharedTaskFrequencies.SingleOrDefault<TaskFrequency>((Func<TaskFrequency, bool>) (x => x.Id == Id));

    public async 
    
    Task<TaskFrequency> FindSharedTaskFrequencyAsync(string Id)
    {
      TaskFrequency taskFrequencyAsync;
      try
      {
        taskFrequencyAsync = await Task.Run<TaskFrequency>((Func<TaskFrequency>) (() => this.FindSharedTaskFrequency(Id)));
      }
      catch
      {
        throw;
      }
      return taskFrequencyAsync;
    }

    public List<TaskFrequency> GetSharedTaskFrequencyByDate(DateTime date) => _dataSet.SharedTaskFrequencies.Where<TaskFrequency>((Func<TaskFrequency, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<TaskFrequency>();

    public async Task<List<TaskFrequency>> GetSharedTaskFrequencyByDateAsync(DateTime date)
    {
      List<TaskFrequency> frequencyByDateAsync;
      try
      {
        frequencyByDateAsync = await Task.Run<List<TaskFrequency>>((Func<List<TaskFrequency>>) (() => this.GetSharedTaskFrequencyByDate(date)));
      }
      catch
      {
        throw;
      }
      return frequencyByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<TaskFrequency> cores)
    {
      try
      {
        foreach (TaskFrequency core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<TaskFrequency> cores)
    {
      try
      {
        foreach (TaskFrequency core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(TaskFrequency taskFrequency)
    {
      if (taskFrequency == null)
        return;
      if (taskFrequency.CreatedById != null && taskFrequency.CreatedBy == null)
        taskFrequency.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == taskFrequency.CreatedById));
      if (taskFrequency.UpdatedById == null || taskFrequency.UpdatedBy != null)
        return;
      taskFrequency.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == taskFrequency.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(TaskFrequency taskFrequency)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(taskFrequency)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessIdeas(TaskFrequency taskFrequency) => this.GetBusinessIdeas(taskFrequency, (Transaction) null);

    internal async Task GetBusinessIdeasAsync(TaskFrequency taskFrequency) => await this.GetBusinessIdeasAsync(taskFrequency, (Transaction) null);

    internal void GetBusinessIdeas(TaskFrequency taskFrequency, Transaction transaction)
    {
      if (taskFrequency != null)
        taskFrequency.Ideas = _dataSet.BusinessIdeas.Where<Idea>((Func<Idea, bool>) (m => m.TaskFrequencyId == taskFrequency.Id)).ToList<Idea>();
      if (transaction == null)
        return;
      for (int index = taskFrequency.Ideas.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) taskFrequency.Ideas[index]) == Action.Delete)
          taskFrequency.Ideas.Remove(taskFrequency.Ideas[index]);
      }
    }

    internal async Task GetBusinessIdeasAsync(TaskFrequency taskFrequency, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessIdeas(taskFrequency, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(Coupon core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(Coupon core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shop.Coupon.Name: Coupon Code missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(Coupon core)
    {
      string str = "";
      if (_dataSet.ShopCoupons.ToList<Coupon>().FirstOrDefault<Coupon>((Func<Coupon, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this coupon Code.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(Coupon core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<Coupon> coupons)
    {
      try
      {
        foreach (Coupon coupon in coupons)
          this.Add(coupon);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Coupon> coupons)
    {
      try
      {
        foreach (Coupon coupon in coupons)
          await this.AddAsync(coupon);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Coupon core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          Coupon coupon = (Coupon) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            coupon = _dataSet.ShopCoupons.SingleOrDefault<Coupon>((Func<Coupon, bool>) (x => x.Id == core.Id));
          if (coupon == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.ShopCoupons.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////coupon.Update(core);
                        ///

                        _dataSet.Entry(coupon).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        coupon.Update(core);
                        _dataSet.ShopCoupons.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          coupon = (Coupon) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Coupon core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Coupon coupon, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(coupon, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Coupon coupon, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(coupon, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Coupon> coupons, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (coupons == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Coupon coupon in coupons.ToList<Coupon>())
        {
          dataStoreResult = this.Delete(coupon, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<Coupon> coupons, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (coupons == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Coupon> lst = coupons.ToList<Coupon>();
        foreach (Coupon coupon in lst)
        {
          Coupon item = coupon;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Coupon) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Coupon coupon, Transaction transaction)
    {
      try
      {
        if (coupon.Id == null)
          return DataStoreResult.Success;
        Coupon entity = _dataSet.ShopCoupons.SingleOrDefault<Coupon>((Func<Coupon, bool>) (x => x.Id == coupon.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(coupon, transaction);
        if (coupon.CanDelete)
        {
          if (transaction == null)
            _dataSet.ShopCoupons.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The coupon (" + coupon.ToString() + ") contains ";
        if (coupon.Subscriptions.Count > 0)
          str += "subscriptions, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Coupon coupon, Transaction transaction)
    {
      try
      {
        if (coupon.Id == null)
          return DataStoreResult.Success;
        Coupon core = _dataSet.ShopCoupons.SingleOrDefault<Coupon>((Func<Coupon, bool>) (x => x.Id == coupon.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(coupon, transaction);
        if (coupon.CanDelete)
        {
          if (transaction == null)
            _dataSet.ShopCoupons.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The coupon (" + coupon.ToString() + ") contains ";
        if (coupon.Subscriptions.Count > 0)
          erorrMessage += "subscriptions, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteShopCoupon(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.ShopCoupons.SingleOrDefault<Coupon>((Func<Coupon, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The coupon is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncShopCoupon(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Coupon coupon = _dataSet.ShopCoupons.SingleOrDefault<Coupon>((Func<Coupon, bool>) (x => x.Id == Id));
        if (coupon == null)
          throw new NotFoundException("The coupon is not found");
        dataStoreResult = await this.DeleteAsync(coupon, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    Coupon coupon, Transaction transaction)
    {
      if (coupon == null)
        return;
      if (coupon.Id == null)
      {
        coupon.CanDelete = true;
      }
      else
      {
        this.GetShopSubscriptions(coupon, transaction);
        coupon.CanDelete = coupon.Subscriptions.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(Coupon coupon, Transaction transaction)
    {
      if (coupon == null)
        return;
      if (coupon.Id == null)
      {
        coupon.CanDelete = true;
      }
      else
      {
        await this.GetShopSubscriptionsAsync(coupon, transaction);
        coupon.CanDelete = coupon.Subscriptions.Count <= 0;
      }
    }

    public Coupon FindShopCoupon(
    
    string Id) => Id == null ? (Coupon) null : _dataSet.ShopCoupons.SingleOrDefault<Coupon>((Func<Coupon, bool>) (x => x.Id == Id));

    public async 
    
    Task<Coupon> FindShopCouponAsync(string Id)
    {
      Coupon shopCouponAsync;
      try
      {
        shopCouponAsync = await Task.Run<Coupon>((Func<Coupon>) (() => this.FindShopCoupon(Id)));
      }
      catch
      {
        throw;
      }
      return shopCouponAsync;
    }

    public List<Coupon> GetShopCouponByDate(DateTime date) => _dataSet.ShopCoupons.Where<Coupon>((Func<Coupon, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Coupon>();

    public async Task<List<Coupon>> GetShopCouponByDateAsync(DateTime date)
    {
      List<Coupon> couponByDateAsync;
      try
      {
        couponByDateAsync = await Task.Run<List<Coupon>>((Func<List<Coupon>>) (() => this.GetShopCouponByDate(date)));
      }
      catch
      {
        throw;
      }
      return couponByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Coupon> cores)
    {
      try
      {
        foreach (Coupon core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Coupon> cores)
    {
      try
      {
        foreach (Coupon core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Coupon coupon)
    {
      if (coupon == null)
        return;
      if (coupon.CreatedById != null && coupon.CreatedBy == null)
        coupon.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == coupon.CreatedById));
      if (coupon.UpdatedById == null || coupon.UpdatedBy != null)
        return;
      coupon.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == coupon.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Coupon coupon)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(coupon)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetShopSubscriptions(Coupon coupon) => this.GetShopSubscriptions(coupon, (Transaction) null);

    internal async Task GetShopSubscriptionsAsync(Coupon coupon) => await this.GetShopSubscriptionsAsync(coupon, (Transaction) null);

    internal void GetShopSubscriptions(Coupon coupon, Transaction transaction)
    {
      if (coupon != null)
        coupon.Subscriptions = _dataSet.ShopSubscriptions.Where<Subscription>((Func<Subscription, bool>) (m => m.CouponId == coupon.Id)).ToList<Subscription>();
      if (transaction == null)
        return;
      for (int index = coupon.Subscriptions.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) coupon.Subscriptions[index]) == Action.Delete)
          coupon.Subscriptions.Remove(coupon.Subscriptions[index]);
      }
    }

    internal async Task GetShopSubscriptionsAsync(Coupon coupon, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetShopSubscriptions(coupon, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(Currency core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(Currency core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Symbol))
        messages += "Shop.Currency.Symbol: Symbol missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(Currency core)
    {
      string str = "";
      if (_dataSet.ShopCurrencies.ToList<Currency>().FirstOrDefault<Currency>((Func<Currency, bool>) (x => x.Id != (core.Id ?? "") && x.Id.ToLower() == core.Id?.ToLower() && x.Symbol.ToLower() == core.Symbol?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this id and symbol.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(Currency core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<Currency> currencies)
    {
      try
      {
        foreach (Currency currency in currencies)
          this.Add(currency);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Currency> currencies)
    {
      try
      {
        foreach (Currency currency in currencies)
          await this.AddAsync(currency);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Currency core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          Currency currency = (Currency) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            currency = _dataSet.ShopCurrencies.SingleOrDefault<Currency>((Func<Currency, bool>) (x => x.Id == core.Id));
          if (currency == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.ShopCurrencies.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////currency.Update(core);
                        ///

                        _dataSet.Entry(currency).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        currency.Update(core);
                        _dataSet.ShopCurrencies.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          currency = (Currency) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Currency core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Currency currency, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(currency, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Currency currency, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(currency, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Currency> currencies, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (currencies == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Currency currency in currencies.ToList<Currency>())
        {
          dataStoreResult = this.Delete(currency, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<Currency> currencies,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (currencies == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Currency> lst = currencies.ToList<Currency>();
        foreach (Currency currency in lst)
        {
          Currency item = currency;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Currency) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Currency currency, Transaction transaction)
    {
      try
      {
        if (currency.Id == null)
          return DataStoreResult.Success;
        Currency entity = _dataSet.ShopCurrencies.SingleOrDefault<Currency>((Func<Currency, bool>) (x => x.Id == currency.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(currency, transaction);
        if (currency.CanDelete)
        {
          if (transaction == null)
            _dataSet.ShopCurrencies.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The currency (" + currency.ToString() + ") contains ";
        if (currency.Clients.Count > 0)
          str += "clients, ";
        if (currency.Prices.Count > 0)
          str += "prices, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Currency currency, Transaction transaction)
    {
      try
      {
        if (currency.Id == null)
          return DataStoreResult.Success;
        Currency core = _dataSet.ShopCurrencies.SingleOrDefault<Currency>((Func<Currency, bool>) (x => x.Id == currency.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(currency, transaction);
        if (currency.CanDelete)
        {
          if (transaction == null)
            _dataSet.ShopCurrencies.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The currency (" + currency.ToString() + ") contains ";
        if (currency.Clients.Count > 0)
          erorrMessage += "clients, ";
        if (currency.Prices.Count > 0)
          erorrMessage += "prices, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteShopCurrency(string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.ShopCurrencies.SingleOrDefault<Currency>((Func<Currency, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The currency is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsyncShopCurrency(string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Currency currency = _dataSet.ShopCurrencies.SingleOrDefault<Currency>((Func<Currency, bool>) (x => x.Id == Id));
        if (currency == null)
          throw new NotFoundException("The currency is not found");
        dataStoreResult = await this.DeleteAsync(currency, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(Currency currency, Transaction transaction)
    {
      if (currency == null)
        return;
      if (currency.Id == null)
      {
        currency.CanDelete = true;
      }
      else
      {
        this.GetBusinessClients(currency, transaction);
        this.GetShopPrices(currency, transaction);
        currency.CanDelete = currency.Clients.Count + currency.Prices.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(Currency currency, Transaction transaction)
    {
      if (currency == null)
        return;
      if (currency.Id == null)
      {
        currency.CanDelete = true;
      }
      else
      {
        await this.GetBusinessClientsAsync(currency, transaction);
        await this.GetShopPricesAsync(currency, transaction);
        currency.CanDelete = currency.Clients.Count + currency.Prices.Count <= 0;
      }
    }

    public Currency FindShopCurrency(string Id) => Id == null ? (Currency) null : _dataSet.ShopCurrencies.SingleOrDefault<Currency>((Func<Currency, bool>) (x => x.Id == Id));

    public async Task<Currency> FindShopCurrencyAsync(string Id)
    {
      Currency shopCurrencyAsync;
      try
      {
        shopCurrencyAsync = await Task.Run<Currency>((Func<Currency>) (() => this.FindShopCurrency(Id)));
      }
      catch
      {
        throw;
      }
      return shopCurrencyAsync;
    }

    public List<Currency> GetShopCurrencyByDate(DateTime date) => _dataSet.ShopCurrencies.Where<Currency>((Func<Currency, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Currency>();

    public async Task<List<Currency>> GetShopCurrencyByDateAsync(DateTime date)
    {
      List<Currency> currencyByDateAsync;
      try
      {
        currencyByDateAsync = await Task.Run<List<Currency>>((Func<List<Currency>>) (() => this.GetShopCurrencyByDate(date)));
      }
      catch
      {
        throw;
      }
      return currencyByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Currency> cores)
    {
      try
      {
        foreach (Currency core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Currency> cores)
    {
      try
      {
        foreach (Currency core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Currency currency)
    {
      if (currency == null)
        return;
      if (currency.CreatedById != null && currency.CreatedBy == null)
        currency.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == currency.CreatedById));
      if (currency.UpdatedById == null || currency.UpdatedBy != null)
        return;
      currency.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == currency.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Currency currency)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(currency)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessClients(Currency currency) => this.GetBusinessClients(currency, (Transaction) null);

    internal async Task GetBusinessClientsAsync(Currency currency) => await this.GetBusinessClientsAsync(currency, (Transaction) null);

    internal void GetBusinessClients(Currency currency, Transaction transaction)
    {
      if (currency != null)
        currency.Clients = _dataSet.BusinessClients.Where<Client>((Func<Client, bool>) (m => m.CurrencyId == currency.Id)).ToList<Client>();
      if (transaction == null)
        return;
      for (int index = currency.Clients.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) currency.Clients[index]) == Action.Delete)
          currency.Clients.Remove(currency.Clients[index]);
      }
    }

    internal async Task GetBusinessClientsAsync(Currency currency, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClients(currency, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetShopPrices(Currency currency) => this.GetShopPrices(currency, (Transaction) null);

    internal async Task GetShopPricesAsync(Currency currency) => await this.GetShopPricesAsync(currency, (Transaction) null);

    internal void GetShopPrices(Currency currency, Transaction transaction)
    {
      if (currency != null)
        currency.Prices = _dataSet.ShopPrices.Where<Price>((Func<Price, bool>) (m => m.CurrencyId == currency.Id)).ToList<Price>();
      if (transaction == null)
        return;
      for (int index = currency.Prices.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) currency.Prices[index]) == Action.Delete)
          currency.Prices.Remove(currency.Prices[index]);
      }
    }

    internal async Task GetShopPricesAsync(Currency currency, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetShopPrices(currency, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(Discount core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(Discount core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shop.Discount.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(Discount core)
    {
      string str = "";
      if (_dataSet.ShopDiscounts.ToList<Discount>().FirstOrDefault<Discount>((Func<Discount, bool>) (x => x.Id != (core.Id ?? "") && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(Discount core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<Discount> discounts)
    {
      try
      {
        foreach (Discount discount in discounts)
          this.Add(discount);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Discount> discounts)
    {
      try
      {
        foreach (Discount discount in discounts)
          await this.AddAsync(discount);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Discount core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          Discount discount = (Discount) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            discount = _dataSet.ShopDiscounts.SingleOrDefault<Discount>((Func<Discount, bool>) (x => x.Id == core.Id));
          if (discount == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.ShopDiscounts.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////discount.Update(core);
                        ///

                        _dataSet.Entry(discount).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        discount.Update(core);
                        _dataSet.ShopDiscounts.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          discount = (Discount) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Discount core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Discount discount, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(discount, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Discount discount, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(discount, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Discount> discounts, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (discounts == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Discount discount in discounts.ToList<Discount>())
        {
          dataStoreResult = this.Delete(discount, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<Discount> discounts,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (discounts == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Discount> lst = discounts.ToList<Discount>();
        foreach (Discount discount in lst)
        {
          Discount item = discount;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Discount) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Discount discount, Transaction transaction)
    {
      try
      {
        if (discount.Id == null)
          return DataStoreResult.Success;
        Discount entity = _dataSet.ShopDiscounts.SingleOrDefault<Discount>((Func<Discount, bool>) (x => x.Id == discount.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(discount, transaction);
        if (discount.CanDelete)
        {
          if (transaction == null)
            _dataSet.ShopDiscounts.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The discount (" + discount.ToString() + ") contains ";
        if (discount.Clients.Count > 0)
          str += "clients, ";
        if (discount.Subscriptions.Count > 0)
          str += "subscriptions, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Discount discount, Transaction transaction)
    {
      try
      {
        if (discount.Id == null)
          return DataStoreResult.Success;
        Discount core = _dataSet.ShopDiscounts.SingleOrDefault<Discount>((Func<Discount, bool>) (x => x.Id == discount.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(discount, transaction);
        if (discount.CanDelete)
        {
          if (transaction == null)
            _dataSet.ShopDiscounts.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The discount (" + discount.ToString() + ") contains ";
        if (discount.Clients.Count > 0)
          erorrMessage += "clients, ";
        if (discount.Subscriptions.Count > 0)
          erorrMessage += "subscriptions, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteShopDiscount(
    
    string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.ShopDiscounts.SingleOrDefault<Discount>((Func<Discount, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The discount is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async 
    
    Task<DataStoreResult> DeleteAsyncShopDiscount(
    
    string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Discount discount = _dataSet.ShopDiscounts.SingleOrDefault<Discount>((Func<Discount, bool>) (x => x.Id == Id));
        if (discount == null)
          throw new NotFoundException("The discount is not found");
        dataStoreResult = await this.DeleteAsync(discount, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(
    
    Discount discount, Transaction transaction)
    {
      if (discount == null)
        return;
      if (discount.Id == null)
      {
        discount.CanDelete = true;
      }
      else
      {
        this.GetBusinessClients(discount, transaction);
        this.GetShopSubscriptions(discount, transaction);
        discount.CanDelete = discount.Clients.Count + discount.Subscriptions.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(Discount discount, Transaction transaction)
    {
      if (discount == null)
        return;
      if (discount.Id == null)
      {
        discount.CanDelete = true;
      }
      else
      {
        await this.GetBusinessClientsAsync(discount, transaction);
        await this.GetShopSubscriptionsAsync(discount, transaction);
        discount.CanDelete = discount.Clients.Count + discount.Subscriptions.Count <= 0;
      }
    }

    public Discount FindShopDiscount(
    
    string Id) => Id == null ? (Discount) null : _dataSet.ShopDiscounts.SingleOrDefault<Discount>((Func<Discount, bool>) (x => x.Id == Id));

    public async 
    
    Task<Discount> FindShopDiscountAsync(string Id)
    {
      Discount shopDiscountAsync;
      try
      {
        shopDiscountAsync = await Task.Run<Discount>((Func<Discount>) (() => this.FindShopDiscount(Id)));
      }
      catch
      {
        throw;
      }
      return shopDiscountAsync;
    }

    public List<Discount> GetShopDiscountByDate(DateTime date) => _dataSet.ShopDiscounts.Where<Discount>((Func<Discount, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Discount>();

    public async Task<List<Discount>> GetShopDiscountByDateAsync(DateTime date)
    {
      List<Discount> discountByDateAsync;
      try
      {
        discountByDateAsync = await Task.Run<List<Discount>>((Func<List<Discount>>) (() => this.GetShopDiscountByDate(date)));
      }
      catch
      {
        throw;
      }
      return discountByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Discount> cores)
    {
      try
      {
        foreach (Discount core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Discount> cores)
    {
      try
      {
        foreach (Discount core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Discount discount)
    {
      if (discount == null)
        return;
      if (discount.CreatedById != null && discount.CreatedBy == null)
        discount.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == discount.CreatedById));
      if (discount.UpdatedById == null || discount.UpdatedBy != null)
        return;
      discount.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == discount.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Discount discount)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(discount)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetBusinessClients(Discount agencyDiscount) => this.GetBusinessClients(agencyDiscount, (Transaction) null);

    internal async Task GetBusinessClientsAsync(Discount agencyDiscount) => await this.GetBusinessClientsAsync(agencyDiscount, (Transaction) null);

    internal void GetBusinessClients(Discount agencyDiscount, Transaction transaction)
    {
      if (agencyDiscount != null)
        agencyDiscount.Clients = _dataSet.BusinessClients.Where<Client>((Func<Client, bool>) (m => m.AgencyDiscountId == agencyDiscount.Id)).ToList<Client>();
      if (transaction == null)
        return;
      for (int index = agencyDiscount.Clients.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) agencyDiscount.Clients[index]) == Action.Delete)
          agencyDiscount.Clients.Remove(agencyDiscount.Clients[index]);
      }
    }

    internal async Task GetBusinessClientsAsync(Discount agencyDiscount, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessClients(agencyDiscount, transaction)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetShopSubscriptions(Discount agencyDiscount) => this.GetShopSubscriptions(agencyDiscount, (Transaction) null);

    internal async Task GetShopSubscriptionsAsync(Discount agencyDiscount) => await this.GetShopSubscriptionsAsync(agencyDiscount, (Transaction) null);

    internal void GetShopSubscriptions(Discount agencyDiscount, Transaction transaction)
    {
      if (agencyDiscount != null)
        agencyDiscount.Subscriptions = _dataSet.ShopSubscriptions.Where<Subscription>((Func<Subscription, bool>) (m => m.AgencyDiscountId == agencyDiscount.Id)).ToList<Subscription>();
      if (transaction == null)
        return;
      for (int index = agencyDiscount.Subscriptions.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) agencyDiscount.Subscriptions[index]) == Action.Delete)
          agencyDiscount.Subscriptions.Remove(agencyDiscount.Subscriptions[index]);
      }
    }

    internal async Task GetShopSubscriptionsAsync(Discount agencyDiscount, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetShopSubscriptions(agencyDiscount, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(Price core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(Price core)
    {
      string messages = "";
      if (core.Product == null)
      {
        if (string.IsNullOrWhiteSpace(core.ProductId))
        {
          messages += "Shop.Price.ProductId: Product missing; ";
        }
        else
        {
          Product parent = _dataSet.ShopProducts.SingleOrDefault<Product>((Func<Product, bool>) (x => x.Id == core.ProductId));
          if (parent == null)
            messages += "Shop.Price.ProductId: Product invalid; ";
          parent = (Product) null;
        }
      }
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(Price core)
    {
      string str = "";
      if (_dataSet.ShopPrices.ToList<Price>().FirstOrDefault<Price>((Func<Price, bool>) (x => x.Id != (core.Id ?? "") && x.IsLive == core.IsLive && x.PeriodId == core.PeriodId && x.ProductId == core.ProductId)) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this is Live and period and product.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(Price core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<Price> prices)
    {
      try
      {
        foreach (Price price in prices)
          this.Add(price);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Price> prices)
    {
      try
      {
        foreach (Price price in prices)
          await this.AddAsync(price);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Price core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          Price price = (Price) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            price = _dataSet.ShopPrices.SingleOrDefault<Price>((Func<Price, bool>) (x => x.Id == core.Id));
          if (price == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.ShopPrices.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////price.Update(core);
                        ///

                        _dataSet.Entry(price).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        price.Update(core);
                        _dataSet.ShopPrices.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          price = (Price) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Price core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Price price, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(price, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Price price, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(price, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Price> prices, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (prices == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Price price in prices.ToList<Price>())
        {
          dataStoreResult = this.Delete(price, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(IEnumerable<Price> prices, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (prices == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Price> lst = prices.ToList<Price>();
        foreach (Price price in lst)
        {
          Price item = price;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Price) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Price price, Transaction transaction)
    {
      try
      {
        if (price.Id == null)
          return DataStoreResult.Success;
        Price entity = _dataSet.ShopPrices.SingleOrDefault<Price>((Func<Price, bool>) (x => x.Id == price.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(price, transaction);
        if (price.CanDelete)
        {
          if (transaction == null)
            _dataSet.ShopPrices.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The price (" + price.ToString() + ") contains ";
        if (price.Subscriptions.Count > 0)
          str += "subscriptions, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Price price, Transaction transaction)
    {
      try
      {
        if (price.Id == null)
          return DataStoreResult.Success;
        Price core = _dataSet.ShopPrices.SingleOrDefault<Price>((Func<Price, bool>) (x => x.Id == price.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(price, transaction);
        if (price.CanDelete)
        {
          if (transaction == null)
            _dataSet.ShopPrices.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The price (" + price.ToString() + ") contains ";
        if (price.Subscriptions.Count > 0)
          erorrMessage += "subscriptions, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteShopPrice(string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.ShopPrices.SingleOrDefault<Price>((Func<Price, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The price is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsyncShopPrice(string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Price price = _dataSet.ShopPrices.SingleOrDefault<Price>((Func<Price, bool>) (x => x.Id == Id));
        if (price == null)
          throw new NotFoundException("The price is not found");
        dataStoreResult = await this.DeleteAsync(price, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(Price price, Transaction transaction)
    {
      if (price == null)
        return;
      if (price.Id == null)
      {
        price.CanDelete = true;
      }
      else
      {
        this.GetShopSubscriptions(price, transaction);
        price.CanDelete = price.Subscriptions.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(Price price, Transaction transaction)
    {
      if (price == null)
        return;
      if (price.Id == null)
      {
        price.CanDelete = true;
      }
      else
      {
        await this.GetShopSubscriptionsAsync(price, transaction);
        price.CanDelete = price.Subscriptions.Count <= 0;
      }
    }

    public Price FindShopPrice(string Id) => Id == null ? (Price) null : _dataSet.ShopPrices.SingleOrDefault<Price>((Func<Price, bool>) (x => x.Id == Id));

    public async Task<Price> FindShopPriceAsync(string Id)
    {
      Price shopPriceAsync;
      try
      {
        shopPriceAsync = await Task.Run<Price>((Func<Price>) (() => this.FindShopPrice(Id)));
      }
      catch
      {
        throw;
      }
      return shopPriceAsync;
    }

    public List<Price> GetShopPriceByDate(DateTime date) => _dataSet.ShopPrices.Where<Price>((Func<Price, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Price>();

    public async Task<List<Price>> GetShopPriceByDateAsync(DateTime date)
    {
      List<Price> priceByDateAsync;
      try
      {
        priceByDateAsync = await Task.Run<List<Price>>((Func<List<Price>>) (() => this.GetShopPriceByDate(date)));
      }
      catch
      {
        throw;
      }
      return priceByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Price> cores)
    {
      try
      {
        foreach (Price core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Price> cores)
    {
      try
      {
        foreach (Price core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Price price)
    {
      if (price == null)
        return;
      if (price.CreatedById != null && price.CreatedBy == null)
        price.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == price.CreatedById));
      if (price.UpdatedById == null || price.UpdatedBy != null)
        return;
      price.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == price.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Price price)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(price)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetShopSubscriptions(Price price) => this.GetShopSubscriptions(price, (Transaction) null);

    internal async Task GetShopSubscriptionsAsync(Price price) => await this.GetShopSubscriptionsAsync(price, (Transaction) null);

    internal void GetShopSubscriptions(Price price, Transaction transaction)
    {
      if (price != null)
        price.Subscriptions = _dataSet.ShopSubscriptions.Where<Subscription>((Func<Subscription, bool>) (m => m.PriceId == price.Id)).ToList<Subscription>();
      if (transaction == null)
        return;
      for (int index = price.Subscriptions.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) price.Subscriptions[index]) == Action.Delete)
          price.Subscriptions.Remove(price.Subscriptions[index]);
      }
    }

    internal async Task GetShopSubscriptionsAsync(Price price, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetShopSubscriptions(price, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public void GetShopCurrency(Price price)
    {
      if (price == null)
        return;
      foreach (Currency shopCurrency in (List<Currency>) _dataSet.ShopCurrencies.ToList())
      {
        if (price.CurrencyId != null && shopCurrency.Id == price.CurrencyId)
        {
          price.Currency = shopCurrency;
          break;
        }
      }
    }

    public async Task GetShopCurrencyAsync(Price price)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetShopCurrency(price)));
      }
      catch
      {
        throw;
      }
    }

    public void GetShopCurrencies(IEnumerable<Price> prices)
    {
      foreach (Price price in prices)
        this.GetShopCurrency(price);
    }

    public async Task GetShopCurrenciesAsync(IEnumerable<Price> prices)
    {
      foreach (Price price in prices)
        await this.GetShopCurrencyAsync(price);
    }

    public void GetSharedPeriod(Price price)
    {
      if (price == null)
        return;
      foreach (Period sharedPeriod in (List<Period>) _dataSet.SharedPeriods.ToList())
      {
        if (price.PeriodId != null && sharedPeriod.Id == price.PeriodId)
        {
          price.Period = sharedPeriod;
          break;
        }
      }
    }

    public async Task GetSharedPeriodAsync(Price price)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedPeriod(price)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedPeriods(IEnumerable<Price> prices)
    {
      foreach (Price price in prices)
        this.GetSharedPeriod(price);
    }

    public async Task GetSharedPeriodsAsync(IEnumerable<Price> prices)
    {
      foreach (Price price in prices)
        await this.GetSharedPeriodAsync(price);
    }

    public void GetShopProduct(Price price)
    {
      if (price == null)
        return;
      foreach (Product shopProduct in (List<Product>) _dataSet.ShopProducts.ToList())
      {
        if (price.ProductId != null && shopProduct.Id == price.ProductId)
        {
          price.Product = shopProduct;
          break;
        }
      }
    }

    public async Task GetShopProductAsync(Price price)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetShopProduct(price)));
      }
      catch
      {
        throw;
      }
    }

    public void GetShopProducts(IEnumerable<Price> prices)
    {
      foreach (Price price in prices)
        this.GetShopProduct(price);
    }

    public async Task GetShopProductsAsync(IEnumerable<Price> prices)
    {
      foreach (Price price in prices)
        await this.GetShopProductAsync(price);
    }

    public string Validate(Product core) => ValidateAsync(core).Result;

    public static async Task<string> ValidateAsync(Product core)
    {
      string messages = "";
      if (string.IsNullOrWhiteSpace(core.Name))
        messages += "Shop.Product.Name: Name missing; ";
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public string IsUnique(Product core)
    {
      string str = "";
      if (_dataSet.ShopProducts.ToList<Product>().FirstOrDefault<Product>((Func<Product, bool>) (x => x.Id != (core.Id ?? "") && x.IsLive == core.IsLive && x.Name.ToLower() == core.Name?.ToLower())) != null)
      {
        if (!string.IsNullOrWhiteSpace(str))
          str += " ";
        str += "A record already exists with this is Live and name.";
      }
      return str;
    }

    public async Task<string> IsUniqueAsync(Product core)
    {
      string str;
      try
      {
        str = await Task.Run<string>((Func<string>) (() => IsUnique(core)));
      }
      catch
      {
        throw;
      }
      return str;
    }

    public void Add(IEnumerable<Product> products)
    {
      try
      {
        foreach (Product product in products)
          this.Add(product);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Product> products)
    {
      try
      {
        foreach (Product product in products)
          await this.AddAsync(product);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Product core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          string messageIsUnique = "";
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            messageIsUnique += " ";
          string str1 = messageIsUnique;
          string str2 = await IsUniqueAsync(core);
          messageIsUnique = str1 + str2;
          str1 = (string) null;
          str2 = (string) null;
          if (!string.IsNullOrWhiteSpace(messageIsUnique))
            throw new UniqueConstraintException(messageIsUnique);
          Product product = (Product) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            product = _dataSet.ShopProducts.SingleOrDefault<Product>((Func<Product, bool>) (x => x.Id == core.Id));
          if (product == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.ShopProducts.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////product.Update(core);
                        ///

                        _dataSet.Entry(product).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        product.Update(core);
                        _dataSet.ShopProducts.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          messageIsUnique = (string) null;
          product = (Product) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Product core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Product product, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(product, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Product product, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(product, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Product> products, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (products == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Product product in products.ToList<Product>())
        {
          dataStoreResult = this.Delete(product, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<Product> products,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (products == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Product> lst = products.ToList<Product>();
        foreach (Product product in lst)
        {
          Product item = product;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Product) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Product product, Transaction transaction)
    {
      try
      {
        if (product.Id == null)
          return DataStoreResult.Success;
        Product entity = _dataSet.ShopProducts.SingleOrDefault<Product>((Func<Product, bool>) (x => x.Id == product.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(product, transaction);
        if (product.CanDelete)
        {
          if (transaction == null)
            _dataSet.ShopProducts.Remove(entity);
          else
            transaction.Add((Abstract) entity, Action.Delete);
          return DataStoreResult.Success;
        }
        string str = "The product (" + product.ToString() + ") contains ";
        if (product.Prices.Count > 0)
          str += "prices, ";
        throw new ChildDependencyException(str + " therefore cannot be deleted.");
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(Product product, Transaction transaction)
    {
      try
      {
        if (product.Id == null)
          return DataStoreResult.Success;
        Product core = _dataSet.ShopProducts.SingleOrDefault<Product>((Func<Product, bool>) (x => x.Id == product.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(product, transaction);
        if (product.CanDelete)
        {
          if (transaction == null)
            _dataSet.ShopProducts.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The product (" + product.ToString() + ") contains ";
        if (product.Prices.Count > 0)
          erorrMessage += "prices, ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteShopProduct(string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.ShopProducts.SingleOrDefault<Product>((Func<Product, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The product is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsyncShopProduct(string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Product product = _dataSet.ShopProducts.SingleOrDefault<Product>((Func<Product, bool>) (x => x.Id == Id));
        if (product == null)
          throw new NotFoundException("The product is not found");
        dataStoreResult = await this.DeleteAsync(product, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(Product product, Transaction transaction)
    {
      if (product == null)
        return;
      if (product.Id == null)
      {
        product.CanDelete = true;
      }
      else
      {
        this.GetShopPrices(product, transaction);
        product.CanDelete = product.Prices.Count <= 0;
      }
    }

    internal async Task RefreshCanDeleteAsync(Product product, Transaction transaction)
    {
      if (product == null)
        return;
      if (product.Id == null)
      {
        product.CanDelete = true;
      }
      else
      {
        await this.GetShopPricesAsync(product, transaction);
        product.CanDelete = product.Prices.Count <= 0;
      }
    }

    public Product FindShopProduct(string Id) => Id == null ? (Product) null : _dataSet.ShopProducts.SingleOrDefault<Product>((Func<Product, bool>) (x => x.Id == Id));

    public async Task<Product> FindShopProductAsync(string Id)
    {
      Product shopProductAsync;
      try
      {
        shopProductAsync = await Task.Run<Product>((Func<Product>) (() => this.FindShopProduct(Id)));
      }
      catch
      {
        throw;
      }
      return shopProductAsync;
    }

    public List<Product> GetShopProductByDate(DateTime date) => _dataSet.ShopProducts.Where<Product>((Func<Product, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Product>();

    public async Task<List<Product>> GetShopProductByDateAsync(DateTime date)
    {
      List<Product> productByDateAsync;
      try
      {
        productByDateAsync = await Task.Run<List<Product>>((Func<List<Product>>) (() => this.GetShopProductByDate(date)));
      }
      catch
      {
        throw;
      }
      return productByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Product> cores)
    {
      try
      {
        foreach (Product core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Product> cores)
    {
      try
      {
        foreach (Product core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Product product)
    {
      if (product == null)
        return;
      if (product.CreatedById != null && product.CreatedBy == null)
        product.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == product.CreatedById));
      if (product.UpdatedById == null || product.UpdatedBy != null)
        return;
      product.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == product.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Product product)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(product)));
      }
      catch
      {
        throw;
      }
    }

    internal void GetShopPrices(Product product) => this.GetShopPrices(product, (Transaction) null);

    internal async Task GetShopPricesAsync(Product product) => await this.GetShopPricesAsync(product, (Transaction) null);

    internal void GetShopPrices(Product product, Transaction transaction)
    {
      if (product != null)
        product.Prices = _dataSet.ShopPrices.Where<Price>((Func<Price, bool>) (m => m.ProductId == product.Id)).ToList<Price>();
      if (transaction == null)
        return;
      for (int index = product.Prices.Count - 1; index >= 0; --index)
      {
        if (transaction.GetAction((Abstract) product.Prices[index]) == Action.Delete)
          product.Prices.Remove(product.Prices[index]);
      }
    }

    internal async Task GetShopPricesAsync(Product product, Transaction transaction)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetShopPrices(product, transaction)));
      }
      catch
      {
        throw;
      }
    }

    public string Validate(Subscription core) => ValidateAsync(core).Result;

    public async Task<string> ValidateAsync(Subscription core)
    {
      string messages = "";
      if (core.DateStart == DateTime.MinValue)
        messages += "Shop.Subscription.DateStart: Start Date missing; ";
      if (core.Tenant == null)
      {
        if (string.IsNullOrWhiteSpace(core.TenantId))
        {
          messages += "Shop.Subscription.TenantId: Tenant missing; ";
        }
        else
        {
          Client parent = _dataSet.BusinessClients.SingleOrDefault<Client>((Func<Client, bool>) (x => x.Id == core.TenantId));
          if (parent == null)
            messages += "Shop.Subscription.TenantId: Tenant invalid; ";
          parent = (Client) null;
        }
      }
      if (!string.IsNullOrWhiteSpace(messages))
        messages = messages.Substring(0, messages.Length - 2);
      string str = messages;
      messages = (string) null;
      return str;
    }

    public void Add(IEnumerable<Subscription> subscriptions)
    {
      try
      {
        foreach (Subscription subscription in subscriptions)
          this.Add(subscription);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(IEnumerable<Subscription> subscriptions)
    {
      try
      {
        foreach (Subscription subscription in subscriptions)
          await this.AddAsync(subscription);
      }
      catch
      {
        throw;
      }
    }

    public async Task AddAsync(Subscription core)
    {
      try
      {
        if (core == null)
          ;
        else
        {
          string messageValidate = await ValidateAsync(core);
          if (!string.IsNullOrWhiteSpace(messageValidate))
            throw new InvalidFieldsException(messageValidate);
          Subscription subscription = (Subscription) null;
          if (!string.IsNullOrWhiteSpace(core.Id))
            subscription = _dataSet.ShopSubscriptions.SingleOrDefault<Subscription>((Func<Subscription, bool>) (x => x.Id == core.Id));
          if (subscription == null)
          {
            core.CreatedDate = new DateTime?(DateTime.Now);
            core.CreatedById = this.UserId;
            if (string.IsNullOrWhiteSpace(core.Id))
              core.Id = Guid.NewGuid().ToString();
            _dataSet.ShopSubscriptions.Add(core);
          }
          else
          {
                        ////core.UpdatedDate = new DateTime?(DateTime.Now);
                        ////core.UpdatedById = this.UserId;
                        ////subscription.Update(core);
                        ///

                        _dataSet.Entry(subscription).State = EntityState.Detached;
                        core.UpdatedDate = new DateTime?(DateTime.Now);
                        core.UpdatedById = this.UserId;
                        subscription.Update(core);
                        _dataSet.ShopSubscriptions.Attach(core);
                        _dataSet.Entry(core).State = EntityState.Modified;
                    }
          messageValidate = (string) null;
          subscription = (Subscription) null;
        }
      }
      catch
      {
        throw;
      }
    }

    public void Add(Subscription core)
    {
      try
      {
        this.AddAsync(core).RunSynchronously();
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult Delete(Subscription subscription, bool cascadeDelete = false)
    {
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = this.Delete(subscription, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(Subscription subscription, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        DataStoreResult dataStoreResult = await this.DeleteAsync(subscription, transaction);
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public DataStoreResult Delete(IEnumerable<Subscription> subscriptions, bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (subscriptions == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        foreach (Subscription subscription in subscriptions.ToList<Subscription>())
        {
          dataStoreResult = this.Delete(subscription, transaction);
          if (dataStoreResult != DataStoreResult.Success)
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          transaction.Commit(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsync(
      IEnumerable<Subscription> subscriptions,
      bool cascadeDelete = false)
    {
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (subscriptions == null)
          return dataStoreResult;
        Transaction transaction = (Transaction) null;
        if (cascadeDelete)
          transaction = Transaction.Begin();
        List<Subscription> lst = subscriptions.ToList<Subscription>();
        foreach (Subscription subscription in lst)
        {
          Subscription item = subscription;
          dataStoreResult = await this.DeleteAsync(item, transaction);
          if (dataStoreResult == DataStoreResult.Success)
            item = (Subscription) null;
          else
            break;
        }
        if (dataStoreResult == DataStoreResult.Success && transaction != null)
          await transaction.CommitAsync(this);
        return dataStoreResult;
      }
      catch
      {
        throw;
      }
    }

    private DataStoreResult Delete(Subscription subscription, Transaction transaction)
    {
      try
      {
        if (subscription.Id == null)
          return DataStoreResult.Success;
        Subscription entity = _dataSet.ShopSubscriptions.SingleOrDefault<Subscription>((Func<Subscription, bool>) (x => x.Id == subscription.Id));
        if (entity == null)
          return DataStoreResult.Success;
        this.RefreshCanDelete(subscription, transaction);
        if (!subscription.CanDelete)
          throw new ChildDependencyException("The subscription (" + subscription.ToString() + ") contains " + " therefore cannot be deleted.");
        if (transaction == null)
          _dataSet.ShopSubscriptions.Remove(entity);
        else
          transaction.Add((Abstract) entity, Action.Delete);
        return DataStoreResult.Success;
      }
      catch
      {
        throw;
      }
    }

    private async Task<DataStoreResult> DeleteAsync(
      Subscription subscription,
      Transaction transaction)
    {
      try
      {
        if (subscription.Id == null)
          return DataStoreResult.Success;
        Subscription core = _dataSet.ShopSubscriptions.SingleOrDefault<Subscription>((Func<Subscription, bool>) (x => x.Id == subscription.Id));
        if (core == null)
          return DataStoreResult.Success;
        await this.RefreshCanDeleteAsync(subscription, transaction);
        if (subscription.CanDelete)
        {
          if (transaction == null)
            _dataSet.ShopSubscriptions.Remove(core);
          else
            transaction.Add((Abstract) core, Action.Delete);
          return DataStoreResult.Success;
        }
        string erorrMessage = "The subscription (" + subscription.ToString() + ") contains ";
        erorrMessage += " therefore cannot be deleted.";
        throw new ChildDependencyException(erorrMessage);
      }
      catch
      {
        throw;
      }
    }

    public DataStoreResult DeleteShopSubscription(string Id, bool cascadeDelete = false)
    {
      try
      {
        return this.Delete(_dataSet.ShopSubscriptions.SingleOrDefault<Subscription>((Func<Subscription, bool>) (x => x.Id == Id)) ?? throw new NotFoundException("The subscription is not found"), cascadeDelete);
      }
      catch
      {
        throw;
      }
    }

    public async Task<DataStoreResult> DeleteAsyncShopSubscription(string Id, bool cascadeDelete = false)
    {
      DataStoreResult dataStoreResult;
      try
      {
        Subscription subscription = _dataSet.ShopSubscriptions.SingleOrDefault<Subscription>((Func<Subscription, bool>) (x => x.Id == Id));
        if (subscription == null)
          throw new NotFoundException("The subscription is not found");
        dataStoreResult = await this.DeleteAsync(subscription, cascadeDelete);
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    internal void RefreshCanDelete(Subscription subscription, Transaction transaction)
    {
      if (subscription == null)
        return;
      subscription.CanDelete = true;
    }

    internal async Task RefreshCanDeleteAsync(Subscription subscription, Transaction transaction)
    {
      if (subscription == null)
        return;
      subscription.CanDelete = true;
    }

    public Subscription FindShopSubscription(string Id) => Id == null ? (Subscription) null : _dataSet.ShopSubscriptions.SingleOrDefault<Subscription>((Func<Subscription, bool>) (x => x.Id == Id));

    public async Task<Subscription> FindShopSubscriptionAsync(string Id)
    {
      Subscription subscriptionAsync;
      try
      {
        subscriptionAsync = await Task.Run<Subscription>((Func<Subscription>) (() => this.FindShopSubscription(Id)));
      }
      catch
      {
        throw;
      }
      return subscriptionAsync;
    }

    public List<Subscription> GetShopSubscriptionByDate(DateTime date) => _dataSet.ShopSubscriptions.Where<Subscription>((Func<Subscription, bool>) (m =>
    {
      DateTime? date1 = m.Date;
      DateTime date2 = date.Date;
      if (!date1.HasValue)
        return false;
      return !date1.HasValue || date1.GetValueOrDefault() == date2;
    })).ToList<Subscription>();

    public async Task<List<Subscription>> GetShopSubscriptionByDateAsync(DateTime date)
    {
      List<Subscription> subscriptionByDateAsync;
      try
      {
        subscriptionByDateAsync = await Task.Run<List<Subscription>>((Func<List<Subscription>>) (() => this.GetShopSubscriptionByDate(date)));
      }
      catch
      {
        throw;
      }
      return subscriptionByDateAsync;
    }

    public void GetCreatedUpdated(IEnumerable<Subscription> cores)
    {
      try
      {
        foreach (Subscription core in cores)
          this.GetCreatedUpdated(core);
      }
      catch
      {
        throw;
      }
    }

    public async Task GetCreatedUpdatedAsync(IEnumerable<Subscription> cores)
    {
      try
      {
        foreach (Subscription core in cores)
          await this.GetCreatedUpdatedAsync(core);
      }
      catch
      {
        throw;
      }
    }

    public void GetCreatedUpdated(Subscription subscription)
    {
      if (subscription == null)
        return;
      if (subscription.CreatedById != null && subscription.CreatedBy == null)
        subscription.CreatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == subscription.CreatedById));
      if (subscription.UpdatedById == null || subscription.UpdatedBy != null)
        return;
      subscription.UpdatedBy = _dataSet.Users.SingleOrDefault<User>((Func<User, bool>) (o => o.Id == subscription.UpdatedById));
    }

    public async Task GetCreatedUpdatedAsync(Subscription subscription)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetCreatedUpdated(subscription)));
      }
      catch
      {
        throw;
      }
    }

    public void GetShopAgencyDiscount(Subscription subscription)
    {
      if (subscription == null)
        return;
      foreach (Discount shopDiscount in (List<Discount>) _dataSet.ShopDiscounts.ToList())
      {
        if (subscription.AgencyDiscountId != null && shopDiscount.Id == subscription.AgencyDiscountId)
        {
          subscription.AgencyDiscount = shopDiscount;
          break;
        }
      }
    }

    public async Task GetShopAgencyDiscountAsync(Subscription subscription)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetShopAgencyDiscount(subscription)));
      }
      catch
      {
        throw;
      }
    }

    public void GetShopAgencyDiscounts(IEnumerable<Subscription> subscriptions)
    {
      foreach (Subscription subscription in subscriptions)
        this.GetShopAgencyDiscount(subscription);
    }

    public async Task GetShopAgencyDiscountsAsync(IEnumerable<Subscription> subscriptions)
    {
      foreach (Subscription subscription in subscriptions)
        await this.GetShopAgencyDiscountAsync(subscription);
    }

    public void GetBusinessAgency(Subscription subscription)
    {
      if (subscription == null)
        return;
      foreach (Client businessClient in (List<Client>) _dataSet.BusinessClients.ToList())
      {
        if (subscription.AgencyId != null && businessClient.Id == subscription.AgencyId)
        {
          subscription.Agency = businessClient;
          break;
        }
      }
    }

    public async Task GetBusinessAgencyAsync(Subscription subscription)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessAgency(subscription)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessAgencies(IEnumerable<Subscription> subscriptions)
    {
      foreach (Subscription subscription in subscriptions)
        this.GetBusinessAgency(subscription);
    }

    public async Task GetBusinessAgenciesAsync(IEnumerable<Subscription> subscriptions)
    {
      foreach (Subscription subscription in subscriptions)
        await this.GetBusinessAgencyAsync(subscription);
    }

    public void GetSharedAgencyType(Subscription subscription)
    {
      if (subscription == null)
        return;
      foreach (ClientType sharedClientType in (List<ClientType>) _dataSet.SharedClientTypes.ToList())
      {
        if (subscription.AgencyTypeId != null && sharedClientType.Id == subscription.AgencyTypeId)
        {
          subscription.AgencyType = sharedClientType;
          break;
        }
      }
    }

    public async Task GetSharedAgencyTypeAsync(Subscription subscription)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetSharedAgencyType(subscription)));
      }
      catch
      {
        throw;
      }
    }

    public void GetSharedAgencyTypes(IEnumerable<Subscription> subscriptions)
    {
      foreach (Subscription subscription in subscriptions)
        this.GetSharedAgencyType(subscription);
    }

    public async Task GetSharedAgencyTypesAsync(IEnumerable<Subscription> subscriptions)
    {
      foreach (Subscription subscription in subscriptions)
        await this.GetSharedAgencyTypeAsync(subscription);
    }

    public void GetShopCoupon(Subscription subscription)
    {
      if (subscription == null)
        return;
      foreach (Coupon shopCoupon in (List<Coupon>) _dataSet.ShopCoupons.ToList())
      {
        if (subscription.CouponId != null && shopCoupon.Id == subscription.CouponId)
        {
          subscription.Coupon = shopCoupon;
          break;
        }
      }
    }

    public async Task GetShopCouponAsync(Subscription subscription)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetShopCoupon(subscription)));
      }
      catch
      {
        throw;
      }
    }

    public void GetShopCoupons(IEnumerable<Subscription> subscriptions)
    {
      foreach (Subscription subscription in subscriptions)
        this.GetShopCoupon(subscription);
    }

    public async Task GetShopCouponsAsync(IEnumerable<Subscription> subscriptions)
    {
      foreach (Subscription subscription in subscriptions)
        await this.GetShopCouponAsync(subscription);
    }

    public void GetShopPrice(Subscription subscription)
    {
      if (subscription == null)
        return;
      foreach (Price shopPrice in (List<Price>) _dataSet.ShopPrices.ToList())
      {
        if (subscription.PriceId != null && shopPrice.Id == subscription.PriceId)
        {
          subscription.Price = shopPrice;
          break;
        }
      }
    }

    public async Task GetShopPriceAsync(Subscription subscription)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetShopPrice(subscription)));
      }
      catch
      {
        throw;
      }
    }

    public void GetShopPrices(IEnumerable<Subscription> subscriptions)
    {
      foreach (Subscription subscription in subscriptions)
        this.GetShopPrice(subscription);
    }

    public async Task GetShopPricesAsync(IEnumerable<Subscription> subscriptions)
    {
      foreach (Subscription subscription in subscriptions)
        await this.GetShopPriceAsync(subscription);
    }

    public void GetBusinessTenant(Subscription subscription)
    {
      if (subscription == null)
        return;
      foreach (Client businessClient in (List<Client>) _dataSet.BusinessClients.ToList())
      {
        if (subscription.TenantId != null && businessClient.Id == subscription.TenantId)
        {
          subscription.Tenant = businessClient;
          break;
        }
      }
    }

    public async Task GetBusinessTenantAsync(Subscription subscription)
    {
      try
      {
        await Task.Run((System.Action) (() => this.GetBusinessTenant(subscription)));
      }
      catch
      {
        throw;
      }
    }

    public void GetBusinessTenants(IEnumerable<Subscription> subscriptions)
    {
      foreach (Subscription subscription in subscriptions)
        this.GetBusinessTenant(subscription);
    }

    public async Task GetBusinessTenantsAsync(IEnumerable<Subscription> subscriptions)
    {
      foreach (Subscription subscription in subscriptions)
        await this.GetBusinessTenantAsync(subscription);
    }

    public User FindByEmail(string email) => _dataSet.Users.Where<User>((Func<User, bool>) (m => m.Email.ToLower() == email.ToLower())).FirstOrDefault<User>();

    public async Task<User> FindByEmailAsync(string email)
    {
      User byEmailAsync;
      try
      {
        byEmailAsync = await Task.Run<User>((Func<User>) (() => this.FindByEmail(email)));
      }
      catch
      {
        throw;
      }
      return byEmailAsync;
    }

    public string GeneratePasswordHash(string password) => Password.Hash(password);

    public string GeneratePasswordResetToken(User user) => this.GeneratePasswordResetTokenAsync(user).Result;

    public async Task<string> GeneratePasswordResetTokenAsync(User user)
    {
      string passwordResetTokenAsync;
      try
      {
        string token = Guid.NewGuid().ToString();
        user.PasswordResetToken = token;
        await this.AddAsync(user);
        passwordResetTokenAsync = token;
      }
      catch
      {
        throw;
      }
      return passwordResetTokenAsync;
    }

    public SignInResult ResetPassword(User user, string resetToken, string password)
    {
      try
      {
        return this.ResetPasswordAsync(user, resetToken, password).Result;
      }
      catch
      {
        throw;
      }
    }

    public async Task<SignInResult> ResetPasswordAsync(
      User user,
      string resetToken,
      string password)
    {
      try
      {
        if (!(user.PasswordResetToken == resetToken))
          return SignInResult.IsNotAllowed;
        user.PasswordHash = this.GeneratePasswordHash(password);
        await this.AddAsync(user);
        return SignInResult.Succeeded;
      }
      catch
      {
        throw;
      }
    }

    public SignInResult ValidateCredentials(string email, string password, out User user)
    {
      user = this.FindByEmail(email);
      if (user != null)
      {
        if (user.IsLockedOut)
          return SignInResult.IsLockedOut;
        if (!user.IsEmailConfirmed)
          return SignInResult.EmailNotConfirmed;
        if (user.PasswordHash != null)
          user.PasswordHash.Trim();
        if (string.IsNullOrEmpty(user.PasswordHash))
          return SignInResult.Failed;
        if (this.VerifyPassword(password, user.PasswordHash))
          return SignInResult.Succeeded;
      }
      user = (User) null;
      return SignInResult.Failed;
    }

    public SignInResult ValidateCredentials(
      string userId,
      string email,
      string password,
      out User user)
    {
      try
      {
        user = this.Users.SingleOrDefaultAsync((Func<User, bool>) (x => x.Email == email && x.Id == userId)).Result;
        if (user != null)
        {
          if (user.IsLockedOut)
            return SignInResult.IsLockedOut;
          if (!user.IsEmailConfirmed)
            return SignInResult.EmailNotConfirmed;
          if (user.PasswordHash != null)
            user.PasswordHash.Trim();
          if (string.IsNullOrEmpty(user.PasswordHash))
            return SignInResult.Failed;
          if (this.VerifyPassword(password, user.PasswordHash))
            return SignInResult.Succeeded;
        }
        user = (User) null;
        return SignInResult.Failed;
      }
      catch
      {
        throw;
      }
    }

    public SignInResult ValidatePasswordHash(string email, string passwordHash, out User user)
    {
      user = this.FindByEmail(email);
      if (user == null)
        return SignInResult.Failed;
      if (user.IsLockedOut)
        return SignInResult.IsLockedOut;
      return user.PasswordHash == passwordHash ? SignInResult.Succeeded : SignInResult.Failed;
    }

    public bool VerifyPassword(string password, string passwordHash) => Password.VerifyHashed(passwordHash, password);

        public async Task<ApplicationDbContext> GetDataSetAsync()
        {
            //if(_dataSet == null)
            //    _dataSet = new ApplicationDbContext();

            return _dataSet;
            //DataSet dataSet;
            //try
            //{
            //  if (_dataSet == null)
            //  {
            //    await Open();
            //    if (_dataSet != null)
            //      IsLoaded = true;
            //  }
            //  dataSet = _dataSet;
            //}
            //catch
            //{
            //  throw;
            //}
            //return dataSet;
        }

    //public static async Task Open()
    //{
    //  if (File.Exists(_fullname))
    //  {
    //    try
    //    {
    //      _dataSet = Open(_fullname);
    //    }
    //    catch (Exception ex1)
    //    {
    //      Tuple<bool, string> tuple1 = await Service.SendAsync(Service.Name, Service.Email, Service.Name + " - Could not Open Data File.data", ex1.ToString());
    //      if (File.Exists(_fullnameBackup))
    //      {
    //        try
    //        {
    //          if (IsOpening || _isSaving)
    //            return;
    //          _dataSet = Open(_fullnameBackup);
    //          int num = (int) await Save();
    //          Tuple<bool, string> tuple2 = await Service.SendAsync(Service.Name, Service.Email, Service.Name + " SUCCESS - Backup Opened Instead", "Backup opened Instead.");
    //        }
    //        catch (Exception ex2)
    //        {
    //          Tuple<bool, string> tuple3 = await Service.SendAsync(Service.Name, Service.Email, Service.Name + " ERROR - Could not Open Backup Data File.data", ex2.ToString());
    //        }
    //      }
    //    }
    //  }
    //  else
    //  {
    //    IsNewDataStore = true;
    //    _dataSet = new DataSet();
    //  }
    //}

    //private static DataSet Open(string fullname)
    //{
    //  try
    //  {
    //    if (IsOpening || _isSaving)
    //      return _dataSet;
    //    IsOpening = true;
    //    DataSet dataSet = (DataSet) null;
    //    using (ZipArchive zipArchive = ZipFile.OpenRead(fullname))
    //      dataSet = Open(zipArchive, _xmlFilename);
    //    return dataSet;
    //  }
    //  catch
    //  {
    //    throw;
    //  }
    //  finally
    //  {
    //    IsOpening = false;
    //  }
    //}

    //private static DataSet Open(ZipArchive zipArchive, string xmlFilename)
    //{
    //  try
    //  {
    //    DataSet dataSet = (DataSet) null;
    //    xmlFilename = xmlFilename.ToLower();
    //    if (zipArchive.Entries.Count != 0)
    //    {
    //      foreach (ZipArchiveEntry entry in zipArchive.Entries)
    //      {
    //        if (entry.FullName.ToLower() == xmlFilename)
    //        {
    //          dataSet = Open(entry.Open());
    //          break;
    //        }
    //      }
    //    }
    //    return dataSet;
    //  }
    //  catch
    //  {
    //    throw;
    //  }
    //}

    //private static DataSet Open(Stream stream)
    //{
    //  try
    //  {
    //    using (StreamReader input = new StreamReader(stream))
    //    {
    //      XmlReaderSettings settings = new XmlReaderSettings()
    //      {
    //        IgnoreWhitespace = false
    //      };
    //      return (DataSet) new XmlSerializer(typeof (DataSet)).Deserialize(XmlReader.Create((TextReader) input, settings));
    //    }
    //  }
    //  catch
    //  {
    //    throw;
    //  }
    //}

    public async Task<DataStoreResult> Save(string userId)
    {
      //_userId = userId;
      DataStoreResult dataStoreResult;
      try
      {
        dataStoreResult = await Save();
      }
      catch
      {
        throw;
      }
      return dataStoreResult;
    }

    public async Task<DataStoreResult> Save(bool applyDateUpdated = true)
    {
      //if (IsOpening || _isSaving)
      //  return DataStoreResult.Success;
      try
      {
                _dataSet.CompleteAsync();
                return DataStoreResult.Success;
        //await PerpareDataSetBeforeSaveAsync();
        //if (!Commit)
        //  return DataStoreResult.Success;
        //DataStoreResult isSaved = DataStoreResult.Failed;
        //if (_isSaved)
        //{
        //  isSaved = DataStoreResult.Success;
        //}
        //else
        //{
        //  _isSaving = true;
        //  if (!string.IsNullOrEmpty(_fullname))
        //  {
        //    if (File.Exists(_fullname))
        //    {
        //      using (ZipArchive zipArchive = ZipFile.Open(_fullname, ZipArchiveMode.Update))
        //      {
        //        zipArchive.Clear();
        //        isSaved = AddzipArchive(zipArchive, _dataSet);
        //      }
        //    }
        //    else
        //    {
        //      if (!Directory.Exists(ApplicationDataFolderPath))
        //        Directory.CreateDirectory(ApplicationDataFolderPath);
        //      using (ZipArchive zipArchive = ZipFile.Open(_fullname, ZipArchiveMode.Create))
        //        isSaved = AddzipArchive(zipArchive, _dataSet);
        //    }
        //    if (isSaved == DataStoreResult.Success)
        //      isSaved = await CheckSaved(applyDateUpdated);
        //    IsNewDataStore = false;
        //  }
        //  else
        //  {
        //    Tuple<bool, string> tuple = await Service.SendAsync(Service.Name, Service.Email, Service.Name + " Save Error - Could not save data file.", new Exception("Filename is missing.").ToString());
        //  }
        //  _isSaving = false;
        //}
        //return isSaved;
      }
      catch (UniqueConstraintException ex1)
      {
        UniqueConstraintException ex = ex1;
        throw;
      }
      catch (InvalidFieldsException ex2)
      {
        InvalidFieldsException ex = ex2;
        throw;
      }
      catch (IOException ex)
      {
        //_isSaving = false;
        //if (ex.Message.IndexOf("because it is being used by another process") == -1)
        //{
        //  Tuple<bool, string> tuple = await Service.SendAsync(Service.Name, Service.Email, Service.Name + " Save Error - Could not save data file.", ex.ToString());
        //}
      }
      catch (Exception ex)
      {
        //_isSaving = false;
        //Tuple<bool, string> tuple = await Service.SendAsync(Service.Name, Service.Email, Service.Name + " Save Error - Could not save data file.", ex.ToString());
      }
      return DataStoreResult.Failed;
    }

    //private static DataStoreResult AddzipArchive(ZipArchive zipArchive, DataSet dataSet)
    //{
    //  if (zipArchive == null)
    //    throw new ArgumentNullException(nameof (zipArchive), "ZipArchive cannot be null");
    //  if (dataSet == null)
    //    return DataStoreResult.Success;
    //  try
    //  {
    //    return AddXMLtoZipArchive(DataSetToXML(dataSet), zipArchive);
    //  }
    //  catch
    //  {
    //    throw;
    //  }
    //}

    //private static string DataSetToXML(DataSet dataSet)
    //{
    //  if (dataSet == null)
    //    return "";
    //  try
    //  {
    //    string xml = "";
    //    using (StringWriter output = new StringWriter())
    //    {
    //      XmlWriterSettings settings = new XmlWriterSettings()
    //      {
    //        NewLineHandling = NewLineHandling.Entitize
    //      };
    //      using (XmlWriter xmlWriter = XmlWriter.Create((TextWriter) output, settings))
    //      {
    //        new XmlSerializer(typeof (DataSet)).Serialize(xmlWriter, (object) _dataSet);
    //        xml = output.ToString();
    //      }
    //    }
    //    return xml;
    //  }
    //  catch
    //  {
    //    throw;
    //  }
    //}

    //private static DataStoreResult AddXMLtoZipArchive(string xml, ZipArchive zipArchive)
    //{
    //  if (string.IsNullOrWhiteSpace(xml))
    //    return DataStoreResult.Success;
    //  if (zipArchive == null)
    //    throw new ArgumentNullException(nameof (zipArchive), "ZipArchive cannot be null");
    //  try
    //  {
    //    using (Stream stream = zipArchive.CreateEntry(_xmlFilename).Open())
    //    {
    //      using (StreamWriter streamWriter = new StreamWriter(stream))
    //        streamWriter.Write(xml);
    //    }
    //    return DataStoreResult.Success;
    //  }
    //  catch
    //  {
    //    throw;
    //  }
    //}

    //private static async Task<DataStoreResult> CheckSaved(bool applyDateUpdated)
    //{
    //  DataStoreResult isSaved = DataStoreResult.Failed;
    //  ++_saveAttemptCount;
    //  if (_saveAttemptCount == _totalSaveCount)
    //    return isSaved;
    //  try
    //  {
    //    DataSet dataSet = Open(_fullname);
    //    isSaved = DataStoreResult.Success;
    //    BackUpDataFileAsync();
    //    _saveAttemptCount = 0;
    //    dataSet = (DataSet) null;
    //  }
    //  catch (Exception ex)
    //  {
    //    string name = Service.Name;
    //    string email = Service.Email;
    //            //DefaultInterpolatedStringHandler interpolatedStringHandler = new DefaultInterpolatedStringHandler(76, 2);
    //            //interpolatedStringHandler.AppendFormatted(Service.Name);
    //            //interpolatedStringHandler.AppendLiteral(" Check Saved ERROR - Could not Load Data File.data after saving. Save Count ");
    //            //interpolatedStringHandler.AppendFormatted<int>(_saveAttemptCount);
    //            //string stringAndClear = interpolatedStringHandler.ToStringAndClear();
    //            StringBuilder interpolatedStringHandler = new StringBuilder();
    //            interpolatedStringHandler.Append(Service.Name);
    //            interpolatedStringHandler.Append(" Check Saved ERROR - Could not Load Data File.data after saving. Save Count ");
    //            interpolatedStringHandler.Append(_saveAttemptCount);
    //            string stringAndClear = interpolatedStringHandler.ToString();
    //            interpolatedStringHandler.Clear();
    //            string body = ex.ToString();
    //    Tuple<bool, string> tuple1 = await Service.SendAsync(name, email, stringAndClear, body);
    //    isSaved = await Save(applyDateUpdated);
    //    if (isSaved == DataStoreResult.Success)
    //    {
    //      Tuple<bool, string> tuple2 = await Service.SendAsync(Service.Name, Service.Email, Service.Name + " Check Saved. Saved SUCCESSFULLY", ex.ToString());
    //    }
    //  }
    //  return isSaved;
    //}

    //private static void BackUpDataFileAsync()
    //{
    //  try
    //  {
    //    if (_backgroundWorkerCopyFile == null)
    //      _backgroundWorkerCopyFile = new BackgroundWorker();
    //    _backgroundWorkerCopyFile.DoWork -= new DoWorkEventHandler(BackgroundWorkerCopyFile_DoWork);
    //    _backgroundWorkerCopyFile.DoWork += new DoWorkEventHandler(BackgroundWorkerCopyFile_DoWork);
    //    _backgroundWorkerCopyFile.RunWorkerAsync();
    //  }
    //  catch (Exception ex)
    //  {
    //  }
    //}

    //private static void BackgroundWorkerCopyFile_DoWork(object sender, DoWorkEventArgs e)
    //{
    //  try
    //  {
    //    File.Copy(_fullname, _fullnameBackup, true);
    //  }
    //  catch
    //  {
    //  }
    //}

    //private static async Task PerpareDataSetBeforeSaveAsync()
    //{
    //  _isSaved = true;
    //  foreach (SilkFlo.Data.Core.Domain.Log core in (List<SilkFlo.Data.Core.Domain.Log>) _dataSet.Logs)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.Logs.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.Logs.IsRemoved = false;
    //  foreach (SilkFlo.Data.Core.Domain.Role core in (List<SilkFlo.Data.Core.Domain.Role>) _dataSet.Roles)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.Roles.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.Roles.IsRemoved = false;
    //  foreach (WebHookLog core in (List<WebHookLog>) _dataSet.WebHookLogs)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.WebHookLogs.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.WebHookLogs.IsRemoved = false;
    //  foreach (HotSpot core in (List<HotSpot>) _dataSet.ApplicationHotSpots)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.ApplicationHotSpots.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.ApplicationHotSpots.IsRemoved = false;
    //  foreach (Page core in (List<Page>) _dataSet.ApplicationPages)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.ApplicationPages.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.ApplicationPages.IsRemoved = false;
    //  foreach (Setting core in (List<Setting>) _dataSet.ApplicationSettings)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.ApplicationSettings.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.ApplicationSettings.IsRemoved = false;
    //  foreach (CompanySize core in (List<CompanySize>) _dataSet.CRMCompanySizes)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.CRMCompanySizes.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.CRMCompanySizes.IsRemoved = false;
    //  foreach (JobLevel core in (List<JobLevel>) _dataSet.CRMJobLevels)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.CRMJobLevels.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.CRMJobLevels.IsRemoved = false;
    //  foreach (Achievement core in (List<Achievement>) _dataSet.SharedAchievements)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedAchievements.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedAchievements.IsRemoved = false;
    //  foreach (ApplicationStability core in (List<ApplicationStability>) _dataSet.SharedApplicationStabilities)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedApplicationStabilities.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedApplicationStabilities.IsRemoved = false;
    //  foreach (AutomationGoal core in (List<AutomationGoal>) _dataSet.SharedAutomationGoals)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedAutomationGoals.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedAutomationGoals.IsRemoved = false;
    //  foreach (AutomationType core in (List<AutomationType>) _dataSet.SharedAutomationTypes)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedAutomationTypes.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedAutomationTypes.IsRemoved = false;
    //  foreach (AverageNumberOfStep core in (List<AverageNumberOfStep>) _dataSet.SharedAverageNumberOfSteps)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedAverageNumberOfSteps.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedAverageNumberOfSteps.IsRemoved = false;
    //  foreach (Badge core in (List<Badge>) _dataSet.SharedBadges)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedBadges.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedBadges.IsRemoved = false;
    //  foreach (ClientType core in (List<ClientType>) _dataSet.SharedClientTypes)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedClientTypes.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedClientTypes.IsRemoved = false;
    //  foreach (CostType core in (List<CostType>) _dataSet.SharedCostTypes)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedCostTypes.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedCostTypes.IsRemoved = false;
    //  foreach (Country core in (List<Country>) _dataSet.SharedCountries)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedCountries.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedCountries.IsRemoved = false;
    //  foreach (DataInputPercentOfStructured core in (List<DataInputPercentOfStructured>) _dataSet.SharedDataInputPercentOfStructureds)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedDataInputPercentOfStructureds.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedDataInputPercentOfStructureds.IsRemoved = false;
    //  foreach (DecisionCount core in (List<DecisionCount>) _dataSet.SharedDecisionCounts)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedDecisionCounts.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedDecisionCounts.IsRemoved = false;
    //  foreach (DecisionDifficulty core in (List<DecisionDifficulty>) _dataSet.SharedDecisionDifficulties)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedDecisionDifficulties.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedDecisionDifficulties.IsRemoved = false;
    //  foreach (DocumentationPresent core in (List<DocumentationPresent>) _dataSet.SharedDocumentationPresents)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedDocumentationPresents.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedDocumentationPresents.IsRemoved = false;
    //  foreach (IdeaAuthorisation core in (List<IdeaAuthorisation>) _dataSet.SharedIdeaAuthorisations)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedIdeaAuthorisations.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedIdeaAuthorisations.IsRemoved = false;
    //  foreach (Industry core in (List<Industry>) _dataSet.SharedIndustries)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedIndustries.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedIndustries.IsRemoved = false;
    //  foreach (Input core in (List<Input>) _dataSet.SharedInputs)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedInputs.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedInputs.IsRemoved = false;
    //  foreach (InputDataStructure core in (List<InputDataStructure>) _dataSet.SharedInputDataStructures)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedInputDataStructures.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedInputDataStructures.IsRemoved = false;
    //  foreach (Language core in (List<Language>) _dataSet.SharedLanguages)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedLanguages.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedLanguages.IsRemoved = false;
    //  foreach (NumberOfWaysToCompleteProcess core in (List<NumberOfWaysToCompleteProcess>) _dataSet.SharedNumberOfWaysToCompleteProcesses)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedNumberOfWaysToCompleteProcesses.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedNumberOfWaysToCompleteProcesses.IsRemoved = false;
    //  foreach (Period core in (List<Period>) _dataSet.SharedPeriods)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedPeriods.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedPeriods.IsRemoved = false;
    //  foreach (ProcessPeak core in (List<ProcessPeak>) _dataSet.SharedProcessPeaks)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedProcessPeaks.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedProcessPeaks.IsRemoved = false;
    //  foreach (ProcessStability core in (List<ProcessStability>) _dataSet.SharedProcessStabilities)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedProcessStabilities.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedProcessStabilities.IsRemoved = false;
    //  foreach (Rule core in (List<Rule>) _dataSet.SharedRules)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedRules.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedRules.IsRemoved = false;
    //  foreach (StageGroup core in (List<StageGroup>) _dataSet.SharedStageGroups)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedStageGroups.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedStageGroups.IsRemoved = false;
    //  foreach (SubmissionPath core in (List<SubmissionPath>) _dataSet.SharedSubmissionPaths)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedSubmissionPaths.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedSubmissionPaths.IsRemoved = false;
    //  foreach (TaskFrequency core in (List<TaskFrequency>) _dataSet.SharedTaskFrequencies)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedTaskFrequencies.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedTaskFrequencies.IsRemoved = false;
    //  foreach (Coupon core in (List<Coupon>) _dataSet.ShopCoupons)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.ShopCoupons.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.ShopCoupons.IsRemoved = false;
    //  foreach (Currency core in (List<Currency>) _dataSet.ShopCurrencies)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.ShopCurrencies.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.ShopCurrencies.IsRemoved = false;
    //  foreach (Discount core in (List<Discount>) _dataSet.ShopDiscounts)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.ShopDiscounts.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.ShopDiscounts.IsRemoved = false;
    //  foreach (Product core in (List<Product>) _dataSet.ShopProducts)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.ShopProducts.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.ShopProducts.IsRemoved = false;
    //  foreach (Client core in (List<Client>) _dataSet.BusinessClients)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessClients.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessClients.IsRemoved = false;
    //  foreach (Prospect core in (List<Prospect>) _dataSet.CRMProspects)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.CRMProspects.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.CRMProspects.IsRemoved = false;
    //  foreach (Stage core in (List<Stage>) _dataSet.SharedStages)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedStages.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedStages.IsRemoved = false;
    //  foreach (Price core in (List<Price>) _dataSet.ShopPrices)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.ShopPrices.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.ShopPrices.IsRemoved = false;
    //  foreach (SilkFlo.Data.Core.Domain.Business.Application core in (List<SilkFlo.Data.Core.Domain.Business.Application>) _dataSet.BusinessApplications)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessApplications.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessApplications.IsRemoved = false;
    //  foreach (Department core in (List<Department>) _dataSet.BusinessDepartments)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessDepartments.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessDepartments.IsRemoved = false;
    //  foreach (Location core in (List<Location>) _dataSet.BusinessLocations)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessLocations.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessLocations.IsRemoved = false;
    //  foreach (OtherRunningCost core in (List<OtherRunningCost>) _dataSet.BusinessOtherRunningCosts)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessOtherRunningCosts.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessOtherRunningCosts.IsRemoved = false;
    //  foreach (SilkFlo.Data.Core.Domain.Business.Role core in (List<SilkFlo.Data.Core.Domain.Business.Role>) _dataSet.BusinessRoles)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessRoles.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessRoles.IsRemoved = false;
    //  foreach (SoftwareVender core in (List<SoftwareVender>) _dataSet.BusinessSoftwareVenders)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessSoftwareVenders.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessSoftwareVenders.IsRemoved = false;
    //  foreach (IdeaStatus core in (List<IdeaStatus>) _dataSet.SharedIdeaStatuses)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.SharedIdeaStatuses.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.SharedIdeaStatuses.IsRemoved = false;
    //  foreach (Subscription core in (List<Subscription>) _dataSet.ShopSubscriptions)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.ShopSubscriptions.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.ShopSubscriptions.IsRemoved = false;
    //  foreach (User core in (List<User>) _dataSet.Users)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.Users.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.Users.IsRemoved = false;
    //  foreach (RoleCost core in (List<RoleCost>) _dataSet.BusinessRoleCosts)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessRoleCosts.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessRoleCosts.IsRemoved = false;
    //  foreach (RoleIdeaAuthorisation core in (List<RoleIdeaAuthorisation>) _dataSet.BusinessRoleIdeaAuthorisations)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessRoleIdeaAuthorisations.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessRoleIdeaAuthorisations.IsRemoved = false;
    //  foreach (RunningCost core in (List<RunningCost>) _dataSet.BusinessRunningCosts)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessRunningCosts.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessRunningCosts.IsRemoved = false;
    //  foreach (Team core in (List<Team>) _dataSet.BusinessTeams)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessTeams.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessTeams.IsRemoved = false;
    //  foreach (SilkFlo.Data.Core.Domain.Business.Version core in (List<SilkFlo.Data.Core.Domain.Business.Version>) _dataSet.BusinessVersions)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessVersions.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessVersions.IsRemoved = false;
    //  foreach (Analytic core in (List<Analytic>) _dataSet.Analytics)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.Analytics.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.Analytics.IsRemoved = false;
    //  foreach (Message core in (List<Message>) _dataSet.Messages)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.Messages.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.Messages.IsRemoved = false;
    //  foreach (UserAchievement core in (List<UserAchievement>) _dataSet.UserAchievements)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.UserAchievements.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.UserAchievements.IsRemoved = false;
    //  foreach (UserBadge core in (List<UserBadge>) _dataSet.UserBadges)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.UserBadges.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.UserBadges.IsRemoved = false;
    //  foreach (UserRole core in (List<UserRole>) _dataSet.UserRoles)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.UserRoles.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.UserRoles.IsRemoved = false;
    //  foreach (ManageTenant core in (List<ManageTenant>) _dataSet.AgencyManageTenants)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.AgencyManageTenants.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.AgencyManageTenants.IsRemoved = false;
    //  foreach (Process core in (List<Process>) _dataSet.BusinessProcesses)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessProcesses.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessProcesses.IsRemoved = false;
    //  foreach (Idea core in (List<Idea>) _dataSet.BusinessIdeas)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessIdeas.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessIdeas.IsRemoved = false;
    //  foreach (Collaborator core in (List<Collaborator>) _dataSet.BusinessCollaborators)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessCollaborators.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessCollaborators.IsRemoved = false;
    //  foreach (Comment core in (List<Comment>) _dataSet.BusinessComments)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessComments.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessComments.IsRemoved = false;
    //  foreach (Document core in (List<Document>) _dataSet.BusinessDocuments)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessDocuments.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessDocuments.IsRemoved = false;
    //  foreach (Follow core in (List<Follow>) _dataSet.BusinessFollows)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessFollows.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessFollows.IsRemoved = false;
    //  foreach (IdeaApplicationVersion core in (List<IdeaApplicationVersion>) _dataSet.BusinessIdeaApplicationVersions)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessIdeaApplicationVersions.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessIdeaApplicationVersions.IsRemoved = false;
    //  foreach (IdeaOtherRunningCost core in (List<IdeaOtherRunningCost>) _dataSet.BusinessIdeaOtherRunningCosts)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessIdeaOtherRunningCosts.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessIdeaOtherRunningCosts.IsRemoved = false;
    //  foreach (IdeaRunningCost core in (List<IdeaRunningCost>) _dataSet.BusinessIdeaRunningCosts)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessIdeaRunningCosts.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessIdeaRunningCosts.IsRemoved = false;
    //  foreach (IdeaStage core in (List<IdeaStage>) _dataSet.BusinessIdeaStages)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessIdeaStages.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessIdeaStages.IsRemoved = false;
    //  foreach (Vote core in (List<Vote>) _dataSet.BusinessVotes)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessVotes.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessVotes.IsRemoved = false;
    //  foreach (CollaboratorRole core in (List<CollaboratorRole>) _dataSet.BusinessCollaboratorRoles)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessCollaboratorRoles.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessCollaboratorRoles.IsRemoved = false;
    //  foreach (IdeaStageStatus core in (List<IdeaStageStatus>) _dataSet.BusinessIdeaStageStatuses)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessIdeaStageStatuses.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessIdeaStageStatuses.IsRemoved = false;
    //  foreach (ImplementationCost core in (List<ImplementationCost>) _dataSet.BusinessImplementationCosts)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessImplementationCosts.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessImplementationCosts.IsRemoved = false;
    //  foreach (Recipient core in (List<Recipient>) _dataSet.BusinessRecipients)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessRecipients.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessRecipients.IsRemoved = false;
    //  foreach (UserAuthorisation core in (List<UserAuthorisation>) _dataSet.BusinessUserAuthorisations)
    //  {
    //    if (!core.IsSaved)
    //    {
    //      string messageValidate = await ValidateAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageValidate))
    //        throw new InvalidFieldsException(messageValidate);
    //      string messageIsUnique = await IsUniqueAsync(core);
    //      if (!string.IsNullOrWhiteSpace(messageIsUnique))
    //        throw new UniqueConstraintException(messageIsUnique);
    //      _isSaved = false;
    //      if (!core.IsNew)
    //      {
    //        core.UpdatedDate = new DateTime?(DateTime.Now);
    //        core.UpdatedById = _userId;
    //      }
    //      messageValidate = (string) null;
    //      messageIsUnique = (string) null;
    //    }
    //    core.IsSaved = true;
    //  }
    //  if (_dataSet.BusinessUserAuthorisations.IsRemoved)
    //    _isSaved = false;
    //  _dataSet.BusinessUserAuthorisations.IsRemoved = false;
    //}

    public void InsertRoles(IUnitOfWork unitOfWork) => InsertRolesAsync(unitOfWork).GetAwaiter();

    public async Task InsertRolesAsync(IUnitOfWork unitOfWork)
    {
      IUnitOfWork unitOfWork1 = unitOfWork;
      int num = -2023;
      string roleId1 = num.ToString();
      SilkFlo.Data.Core.Domain.Role role1 = await InsertRoleAsync(unitOfWork1, roleId1, "Can Backup DataSet", "", -2);
      IUnitOfWork unitOfWork2 = unitOfWork;
      num = -2022;
      string roleId2 = num.ToString();
      SilkFlo.Data.Core.Domain.Role role2 = await InsertRoleAsync(unitOfWork2, roleId2, "UAT Tester", "", -1);
      IUnitOfWork unitOfWork3 = unitOfWork;
      num = -2021;
      string roleId3 = num.ToString();
      SilkFlo.Data.Core.Domain.Role role3 = await InsertRoleAsync(unitOfWork3, roleId3, "Administrator", "<p>A user with this role has complete access to the solutions and it's data.</p>", 0);
    }

    public async Task<SilkFlo.Data.Core.Domain.Role> InsertRoleAsync(
      IUnitOfWork unitOfWork, string roleId, string name, string description, int sort)
    {
      SilkFlo.Data.Core.Domain.Role role = await Roles.GetAsync(roleId);
      if (role == null)
      {
        role = new SilkFlo.Data.Core.Domain.Role()
        {
          Name = name,
          Description = description,
          Sort = sort
        };
        await AddAsync(role);
        role.Id = roleId;
      }
      SilkFlo.Data.Core.Domain.Role role1 = role;
      role = (SilkFlo.Data.Core.Domain.Role) null;
      return role1;
    }

    internal void Delete(Transaction transaction)
    {
      try
      {
        if (transaction == null)
          return;
        foreach (TransactionItem transactionItem in (IEnumerable<TransactionItem>) transaction.Items)
        {
          if (transactionItem.Action == Action.Delete)
          {
            Type type = transactionItem.Entity.GetType();
            if (type == typeof (Analytic))
              this.Analytics.RemoveAsync((Analytic) transactionItem.Entity);
            if (type == typeof (SilkFlo.Data.Core.Domain.Log))
              this.Logs.RemoveAsync((SilkFlo.Data.Core.Domain.Log) transactionItem.Entity);
            if (type == typeof (Message))
              this.Messages.RemoveAsync((Message) transactionItem.Entity);
            if (type == typeof (SilkFlo.Data.Core.Domain.Role))
              this.Roles.RemoveAsync((SilkFlo.Data.Core.Domain.Role) transactionItem.Entity);
            if (type == typeof (User))
              this.Users.RemoveAsync((User) transactionItem.Entity);
            if (type == typeof (UserAchievement))
              this.UserAchievements.RemoveAsync((UserAchievement) transactionItem.Entity);
            if (type == typeof (UserBadge))
              this.UserBadges.RemoveAsync((UserBadge) transactionItem.Entity);
            if (type == typeof (UserRole))
              this.UserRoles.RemoveAsync((UserRole) transactionItem.Entity);
            if (type == typeof (WebHookLog))
              this.WebHookLogs.RemoveAsync((WebHookLog) transactionItem.Entity);
            if (type == typeof (ManageTenant))
              this.AgencyManageTenants.RemoveAsync((ManageTenant) transactionItem.Entity);
            if (type == typeof (HotSpot))
              this.ApplicationHotSpots.RemoveAsync((HotSpot) transactionItem.Entity);
            if (type == typeof (Page))
              this.ApplicationPages.RemoveAsync((Page) transactionItem.Entity);
            if (type == typeof (Setting))
              this.ApplicationSettings.RemoveAsync((Setting) transactionItem.Entity);
            if (type == typeof (SilkFlo.Data.Core.Domain.Business.Application))
              this.BusinessApplications.RemoveAsync((SilkFlo.Data.Core.Domain.Business.Application) transactionItem.Entity);
            if (type == typeof (Client))
              this.BusinessClients.RemoveAsync((Client) transactionItem.Entity);
            if (type == typeof (Collaborator))
              this.BusinessCollaborators.RemoveAsync((Collaborator) transactionItem.Entity);
            if (type == typeof (CollaboratorRole))
              this.BusinessCollaboratorRoles.RemoveAsync((CollaboratorRole) transactionItem.Entity);
            if (type == typeof (Comment))
              this.BusinessComments.RemoveAsync((Comment) transactionItem.Entity);
            if (type == typeof (Department))
              this.BusinessDepartments.RemoveAsync((Department) transactionItem.Entity);
            if (type == typeof (Document))
              this.BusinessDocuments.RemoveAsync((Document) transactionItem.Entity);
            if (type == typeof (Follow))
              this.BusinessFollows.RemoveAsync((Follow) transactionItem.Entity);
            if (type == typeof (Idea))
              this.BusinessIdeas.RemoveAsync((Idea) transactionItem.Entity);
            if (type == typeof (IdeaApplicationVersion))
              this.BusinessIdeaApplicationVersions.RemoveAsync((IdeaApplicationVersion) transactionItem.Entity);
            if (type == typeof (IdeaOtherRunningCost))
              this.BusinessIdeaOtherRunningCosts.RemoveAsync((IdeaOtherRunningCost) transactionItem.Entity);
            if (type == typeof (IdeaRunningCost))
              this.BusinessIdeaRunningCosts.RemoveAsync((IdeaRunningCost) transactionItem.Entity);
            if (type == typeof (IdeaStage))
              this.BusinessIdeaStages.RemoveAsync((IdeaStage) transactionItem.Entity);
            if (type == typeof (IdeaStageStatus))
              this.BusinessIdeaStageStatuses.RemoveAsync((IdeaStageStatus) transactionItem.Entity);
            if (type == typeof (ImplementationCost))
              this.BusinessImplementationCosts.RemoveAsync((ImplementationCost) transactionItem.Entity);
            if (type == typeof (Location))
              this.BusinessLocations.RemoveAsync((Location) transactionItem.Entity);
            if (type == typeof (OtherRunningCost))
              this.BusinessOtherRunningCosts.RemoveAsync((OtherRunningCost) transactionItem.Entity);
            if (type == typeof (Process))
              this.BusinessProcesses.RemoveAsync((Process) transactionItem.Entity);
            if (type == typeof (Recipient))
              this.BusinessRecipients.RemoveAsync((Recipient) transactionItem.Entity);
            if (type == typeof (SilkFlo.Data.Core.Domain.Business.BusinessRole))
              this.BusinessRoles.RemoveAsync((SilkFlo.Data.Core.Domain.Business.BusinessRole) transactionItem.Entity);
            if (type == typeof (RoleCost))
              this.BusinessRoleCosts.RemoveAsync((RoleCost) transactionItem.Entity);
            if (type == typeof (RoleIdeaAuthorisation))
              this.BusinessRoleIdeaAuthorisations.RemoveAsync((RoleIdeaAuthorisation) transactionItem.Entity);
            if (type == typeof (RunningCost))
              this.BusinessRunningCosts.RemoveAsync((RunningCost) transactionItem.Entity);
            if (type == typeof (SoftwareVender))
              this.BusinessSoftwareVenders.RemoveAsync((SoftwareVender) transactionItem.Entity);
            if (type == typeof (Team))
              this.BusinessTeams.RemoveAsync((Team) transactionItem.Entity);
            if (type == typeof (UserAuthorisation))
              this.BusinessUserAuthorisations.RemoveAsync((UserAuthorisation) transactionItem.Entity);
            if (type == typeof (SilkFlo.Data.Core.Domain.Business.Version))
              this.BusinessVersions.RemoveAsync((SilkFlo.Data.Core.Domain.Business.Version) transactionItem.Entity);
            if (type == typeof (Vote))
              this.BusinessVotes.RemoveAsync((Vote) transactionItem.Entity);
            if (type == typeof (CompanySize))
              this.CRMCompanySizes.RemoveAsync((CompanySize) transactionItem.Entity);
            if (type == typeof (JobLevel))
              this.CRMJobLevels.RemoveAsync((JobLevel) transactionItem.Entity);
            if (type == typeof (Prospect))
              this.CRMProspects.RemoveAsync((Prospect) transactionItem.Entity);
            if (type == typeof (Achievement))
              this.SharedAchievements.RemoveAsync((Achievement) transactionItem.Entity);
            if (type == typeof (ApplicationStability))
              this.SharedApplicationStabilities.RemoveAsync((ApplicationStability) transactionItem.Entity);
            if (type == typeof (AutomationGoal))
              this.SharedAutomationGoals.RemoveAsync((AutomationGoal) transactionItem.Entity);
            if (type == typeof (AutomationType))
              this.SharedAutomationTypes.RemoveAsync((AutomationType) transactionItem.Entity);
            if (type == typeof (AverageNumberOfStep))
              this.SharedAverageNumberOfSteps.RemoveAsync((AverageNumberOfStep) transactionItem.Entity);
            if (type == typeof (Badge))
              this.SharedBadges.RemoveAsync((Badge) transactionItem.Entity);
            if (type == typeof (ClientType))
              this.SharedClientTypes.RemoveAsync((ClientType) transactionItem.Entity);
            if (type == typeof (CostType))
              this.SharedCostTypes.RemoveAsync((CostType) transactionItem.Entity);
            if (type == typeof (Country))
              this.SharedCountries.RemoveAsync((Country) transactionItem.Entity);
            if (type == typeof (DataInputPercentOfStructured))
              this.SharedDataInputPercentOfStructureds.RemoveAsync((DataInputPercentOfStructured) transactionItem.Entity);
            if (type == typeof (DecisionCount))
              this.SharedDecisionCounts.RemoveAsync((DecisionCount) transactionItem.Entity);
            if (type == typeof (DecisionDifficulty))
              this.SharedDecisionDifficulties.RemoveAsync((DecisionDifficulty) transactionItem.Entity);
            if (type == typeof (DocumentationPresent))
              this.SharedDocumentationPresents.RemoveAsync((DocumentationPresent) transactionItem.Entity);
            if (type == typeof (IdeaAuthorisation))
              this.SharedIdeaAuthorisations.RemoveAsync((IdeaAuthorisation) transactionItem.Entity);
            if (type == typeof (IdeaStatus))
              this.SharedIdeaStatuses.RemoveAsync((IdeaStatus) transactionItem.Entity);
            if (type == typeof (Industry))
              this.SharedIndustries.RemoveAsync((Industry) transactionItem.Entity);
            if (type == typeof (Input))
              this.SharedInputs.RemoveAsync((Input) transactionItem.Entity);
            if (type == typeof (InputDataStructure))
              this.SharedInputDataStructures.RemoveAsync((InputDataStructure) transactionItem.Entity);
            if (type == typeof (Language))
              this.SharedLanguages.RemoveAsync((Language) transactionItem.Entity);
            if (type == typeof (NumberOfWaysToCompleteProcess))
              this.SharedNumberOfWaysToCompleteProcesses.RemoveAsync((NumberOfWaysToCompleteProcess) transactionItem.Entity);
            if (type == typeof (Period))
              this.SharedPeriods.RemoveAsync((Period) transactionItem.Entity);
            if (type == typeof (ProcessPeak))
              this.SharedProcessPeaks.RemoveAsync((ProcessPeak) transactionItem.Entity);
            if (type == typeof (ProcessStability))
              this.SharedProcessStabilities.RemoveAsync((ProcessStability) transactionItem.Entity);
            if (type == typeof (Rule))
              this.SharedRules.RemoveAsync((Rule) transactionItem.Entity);
            if (type == typeof (Stage))
              this.SharedStages.RemoveAsync((Stage) transactionItem.Entity);
            if (type == typeof (StageGroup))
              this.SharedStageGroups.RemoveAsync((StageGroup) transactionItem.Entity);
            if (type == typeof (SubmissionPath))
              this.SharedSubmissionPaths.RemoveAsync((SubmissionPath) transactionItem.Entity);
            if (type == typeof (TaskFrequency))
              this.SharedTaskFrequencies.RemoveAsync((TaskFrequency) transactionItem.Entity);
            if (type == typeof (Coupon))
              this.ShopCoupons.RemoveAsync((Coupon) transactionItem.Entity);
            if (type == typeof (Currency))
              this.ShopCurrencies.RemoveAsync((Currency) transactionItem.Entity);
            if (type == typeof (Discount))
              this.ShopDiscounts.RemoveAsync((Discount) transactionItem.Entity);
            if (type == typeof (Price))
              this.ShopPrices.RemoveAsync((Price) transactionItem.Entity);
            if (type == typeof (Product))
              this.ShopProducts.RemoveAsync((Product) transactionItem.Entity);
            if (type == typeof (Subscription))
              this.ShopSubscriptions.RemoveAsync((Subscription) transactionItem.Entity);
          }
        }
      }
      catch
      {
        throw;
      }
    }

        //public (ZipArchive ZipArchive, MemoryStream MemoryStream) Backup()
        //{
        //  string applicationDataFolderPath = ApplicationDataFolderPath;
        //  if (!Directory.Exists(applicationDataFolderPath))
        //    return ((ZipArchive) null, (MemoryStream) null);
        //  MemoryStream memoryStream = new MemoryStream();
        //  ZipArchive zipArchive = new ZipArchive((Stream) memoryStream, ZipArchiveMode.Create, true);
        //  return !this.BackupFolder(new DirectoryInfo(applicationDataFolderPath), zipArchive) ? ((ZipArchive) null, (MemoryStream) null) : (zipArchive, memoryStream);
        //}

        //private bool BackupFolder(DirectoryInfo folder, ZipArchive zipArchive)
        //{
        //  foreach (DirectoryInfo directory in folder.GetDirectories())
        //  {
        //    if (!this.BackupFolder(directory, zipArchive))
        //      return false;
        //  }
        //  foreach (FileInfo file in folder.GetFiles())
        //  {
        //    if (!this.BackupFile(file, zipArchive))
        //      return false;
        //  }
        //  return true;
        //}

        //private bool BackupFile(FileInfo file, ZipArchive zipArchive)
        //{
        //  string fullName = file.FullName;
        //  string fullname_Target = fullName.Replace(AppDomain.CurrentDomain.BaseDirectory, "");
        //  try
        //  {
        //    CopyTo(zipArchive, fullName, fullname_Target);
        //    return true;
        //  }
        //  catch
        //  {
        //  }
        //  return false;
        //}

        //    //public static void CopyTo(
        //    //  ZipArchive zipArchive,
        //    //  string fullname_Source,
        //    //  string fullname_Target)
        //    //{
        //    //  if (!File.Exists(fullname_Source))
        //    //    return;
        //    //  try
        //    //  {
        //    //    zipArchive.CreateEntryFromFile(fullname_Source, fullname_Target);
        //    //  }
        //    //  catch (Exception ex)
        //    //  {
        //    //    throw ex;
        //    //  }
        //    //}
        //    public static void CopyTo(ZipArchive zipArchive, string fullname_Source, string fullname_Target)
        //    {
        //        if (!File.Exists(fullname_Source))
        //            return;

        //        try
        //        {
        //            // Open the source file using a FileStream
        //            using (FileStream sourceStream = new FileStream(fullname_Source, FileMode.Open))
        //            {
        //                // Create a new entry in the zip archive
        //                ZipArchiveEntry entry = zipArchive.CreateEntry(fullname_Target);

        //                // Open the entry's stream and copy the data from the source file
        //                using (Stream entryStream = entry.Open())
        //                {
        //                    sourceStream.CopyTo(entryStream);
        //                }
        //            }
        //        }
        //        catch (Exception ex)
        //        {
        //            throw ex;
        //        }
        //    }


        //    private string GetMethodFullname(string methodName, string sourceFile)
        //{
        //  if (string.IsNullOrWhiteSpace(methodName))
        //    return "";
        //  if (string.IsNullOrWhiteSpace(sourceFile))
        //    return methodName;
        //  int startIndex = sourceFile.IndexOf("\\SilkFlo\\", StringComparison.OrdinalIgnoreCase) + "\\SilkFlo\\".Length;
        //  return sourceFile.Substring(startIndex) + "." + methodName;
        //}

        #region Logs-IO
        public void Log(
      Exception exception,
      Severity severity = Severity.Critical,
      [CallerMemberName] string methodName = null,
      [CallerFilePath] string sourceFile = null,
      [CallerLineNumber] int lineNumber = 0,
      string userId = "")
    {
      if (exception == null)
        throw new ArgumentException("The exception cannot be null", nameof (exception));
      SilkFlo.Data.Core.Domain.Log log = new SilkFlo.Data.Core.Domain.Log();
      //log.FunctionName = this.GetMethodFullname(methodName, sourceFile);
      log.InnerException = exception.InnerException?.ToString();
      log.Message = exception.Message;
            //DefaultInterpolatedStringHandler interpolatedStringHandler = new DefaultInterpolatedStringHandler(12, 3);
            //interpolatedStringHandler.AppendLiteral("Line: ");
            //interpolatedStringHandler.AppendFormatted<int>(lineNumber);
            //interpolatedStringHandler.AppendLiteral(" - ");
            //interpolatedStringHandler.AppendFormatted(methodName);
            //interpolatedStringHandler.AppendLiteral(" - ");
            //interpolatedStringHandler.AppendFormatted(sourceFile);
            //log.Source = interpolatedStringHandler.ToStringAndClear();
            StringBuilder interpolatedStringHandler = new StringBuilder();
            interpolatedStringHandler.Append("Line: ");
            interpolatedStringHandler.Append(lineNumber);
            interpolatedStringHandler.Append(" - ");
            interpolatedStringHandler.Append(methodName);
            interpolatedStringHandler.Append(" - ");
            interpolatedStringHandler.Append(sourceFile);
            log.Source = interpolatedStringHandler.ToString();
            interpolatedStringHandler.Clear();
            log.StackTrace = exception.StackTrace;
      log.TargetSite = exception.TargetSite?.ToString();
      log.CreatedDate = new DateTime?(DateTime.Now);
      log.Severity = (int) severity;
      SilkFlo.Data.Core.Domain.Log entity = log;
      this.Logs.AddAsync(entity);
      if (string.IsNullOrWhiteSpace(userId))
        return;
      entity.CreatedById = userId;
    }

    public void Log(
      Exception exception,
      string text,
      Severity severity = Severity.Critical,
      [CallerMemberName] string methodName = null,
      [CallerFilePath] string sourceFile = null,
      [CallerLineNumber] int lineNumber = 0,
      string userId = "")
    {
      if (exception == null)
        throw new ArgumentException("The exception cannot be null", nameof (exception));
      if (string.IsNullOrWhiteSpace(text))
        throw new ArgumentException("The text cannot be empty", nameof (text));
      SilkFlo.Data.Core.Domain.Log log = new SilkFlo.Data.Core.Domain.Log();
      //log.FunctionName = this.GetMethodFullname(methodName, sourceFile);
      log.InnerException = exception.InnerException?.ToString();
      log.Message = exception.Message;
            //DefaultInterpolatedStringHandler interpolatedStringHandler = new DefaultInterpolatedStringHandler(12, 3);
            //interpolatedStringHandler.AppendLiteral("Line: ");
            //interpolatedStringHandler.AppendFormatted<int>(lineNumber);
            //interpolatedStringHandler.AppendLiteral(" - ");
            //interpolatedStringHandler.AppendFormatted(methodName);
            //interpolatedStringHandler.AppendLiteral(" - ");
            //interpolatedStringHandler.AppendFormatted(sourceFile);
            //log.Source = interpolatedStringHandler.ToStringAndClear();
            string logSource = $"Line: {lineNumber} - {methodName} - {sourceFile}";
            log.Source = logSource;
            log.StackTrace = exception.StackTrace;
      log.TargetSite = exception.TargetSite?.ToString();
      log.CreatedDate = new DateTime?(DateTime.Now);
      log.Text = text;
      log.Severity = (int) severity;
      SilkFlo.Data.Core.Domain.Log entity = log;
      this.Logs.AddAsync(entity);
      if (string.IsNullOrWhiteSpace(userId))
        return;
      entity.CreatedById = userId;
    }

    public void AddLog(
      Exception exception,
      string text,
      Severity severity = Severity.Critical,
      [CallerMemberName] string methodName = null,
      [CallerFilePath] string sourceFile = null,
      [CallerLineNumber] int lineNumber = 0,
      string userId = "")
    {
      //new UnitOfWork().
                Log(exception, text, severity, methodName, sourceFile, lineNumber, userId);
    }

    public void Log(
      string text,
      Severity severity = Severity.Critical,
      [CallerMemberName] string methodName = null,
      [CallerFilePath] string sourceFile = null,
      [CallerLineNumber] int lineNumber = 0,
      string userId = "")
    {
      if (string.IsNullOrWhiteSpace(text))
        throw new ArgumentException("The text cannot be empty", nameof (text));
      SilkFlo.Data.Core.Domain.Log log = new SilkFlo.Data.Core.Domain.Log();
      //log.FunctionName = this.GetMethodFullname(methodName, sourceFile);
      log.Text = text;
      log.CreatedDate = new DateTime?(DateTime.Now);
      log.Severity = (int) severity;
            //DefaultInterpolatedStringHandler interpolatedStringHandler = new DefaultInterpolatedStringHandler(12, 3);
            //interpolatedStringHandler.AppendLiteral("Line: ");
            //interpolatedStringHandler.AppendFormatted<int>(lineNumber);
            //interpolatedStringHandler.AppendLiteral(" - ");
            //interpolatedStringHandler.AppendFormatted(methodName);
            //interpolatedStringHandler.AppendLiteral(" - ");
            //interpolatedStringHandler.AppendFormatted(sourceFile);
            //log.Source = interpolatedStringHandler.ToStringAndClear();
            StringBuilder interpolatedStringHandler = new StringBuilder();
            interpolatedStringHandler.Append("Line: ");
            interpolatedStringHandler.Append(lineNumber);
            interpolatedStringHandler.Append(" - ");
            interpolatedStringHandler.Append(methodName);
            interpolatedStringHandler.Append(" - ");
            interpolatedStringHandler.Append(sourceFile);
            log.Source = interpolatedStringHandler.ToString();
            interpolatedStringHandler.Clear();
            SilkFlo.Data.Core.Domain.Log entity = log;
      this.Logs.AddAsync(entity);
      if (string.IsNullOrWhiteSpace(userId))
        return;
      entity.CreatedById = userId;
    }

    public void AddLog(
      string text,
      Severity severity = Severity.Critical,
      [CallerMemberName] string methodName = null,
      [CallerFilePath] string sourceFile = null,
      [CallerLineNumber] int lineNumber = 0,
      string userId = "")
    {
      //new UnitOfWork().
                Log(text, severity, methodName, sourceFile, lineNumber, userId);
    }

        #endregion

        private DataStoreResult DeleteCreatedBy(Transaction transaction, User owner)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        DataStoreResult dataStoreResult2 = DataStoreResult.Success;
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.Users.Count<User>() - 1; index >= 0; --index)
          {
            User user = _dataSet.Users.ToList()[index];
            if (user.CreatedById == owner.Id && user.Id != owner.Id)
              dataStoreResult2 = this.Delete(user, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.Analytics.Count<Analytic>() - 1; index >= 0; --index)
          {
            Analytic analytic = _dataSet.Analytics.ToList()[index];
            if (analytic.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(analytic, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.Logs.Count<SilkFlo.Data.Core.Domain.Log>() - 1; index >= 0; --index)
          {
            SilkFlo.Data.Core.Domain.Log log = _dataSet.Logs.ToList()[index];
            if (log.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(log, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.Messages.Count<Message>() - 1; index >= 0; --index)
          {
            Message message = _dataSet.Messages.ToList()[index];
            if (message.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(message, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.Roles.Count<SilkFlo.Data.Core.Domain.Role>() - 1; index >= 0; --index)
          {
            SilkFlo.Data.Core.Domain.Role role = _dataSet.Roles.ToList()[index];
            if (role.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(role, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.UserAchievements.Count<UserAchievement>() - 1; index >= 0; --index)
          {
            UserAchievement userAchievement = _dataSet.UserAchievements.ToList()[index];
            if (userAchievement.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(userAchievement, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.UserBadges.Count<UserBadge>() - 1; index >= 0; --index)
          {
            UserBadge userBadge = _dataSet.UserBadges.ToList()[index];
            if (userBadge.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(userBadge, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.UserRoles.Count<UserRole>() - 1; index >= 0; --index)
          {
            UserRole userRole = _dataSet.UserRoles.ToList()[index];
            if (userRole.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(userRole, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.WebHookLogs.Count<WebHookLog>() - 1; index >= 0; --index)
          {
            WebHookLog webHookLog = _dataSet.WebHookLogs.ToList()[index];
            if (webHookLog.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(webHookLog, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.AgencyManageTenants.Count<ManageTenant>() - 1; index >= 0; --index)
          {
            ManageTenant agencyManageTenant = _dataSet.AgencyManageTenants.ToList()[index];
            if (agencyManageTenant.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(agencyManageTenant, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.ApplicationHotSpots.Count<HotSpot>() - 1; index >= 0; --index)
          {
            HotSpot applicationHotSpot = _dataSet.ApplicationHotSpots.ToList()[index];
            if (applicationHotSpot.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(applicationHotSpot, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.ApplicationPages.Count<Page>() - 1; index >= 0; --index)
          {
            Page applicationPage = _dataSet.ApplicationPages.ToList()[index];
            if (applicationPage.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(applicationPage, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.ApplicationSettings.Count<Setting>() - 1; index >= 0; --index)
          {
            Setting applicationSetting = _dataSet.ApplicationSettings.ToList()[index];
            if (applicationSetting.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(applicationSetting, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessApplications.Count<SilkFlo.Data.Core.Domain.Business.Application>() - 1; index >= 0; --index)
          {
            SilkFlo.Data.Core.Domain.Business.Application businessApplication = _dataSet.BusinessApplications.ToList()[index];
            if (businessApplication.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(businessApplication, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessClients.Count<Client>() - 1; index >= 0; --index)
          {
            Client businessClient = _dataSet.BusinessClients.ToList()[index];
            if (businessClient.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(businessClient, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessCollaborators.Count<Collaborator>() - 1; index >= 0; --index)
          {
            Collaborator businessCollaborator = _dataSet.BusinessCollaborators.ToList()[index];
            if (businessCollaborator.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(businessCollaborator, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessCollaboratorRoles.Count<CollaboratorRole>() - 1; index >= 0; --index)
          {
            CollaboratorRole collaboratorRole = _dataSet.BusinessCollaboratorRoles.ToList()[index];
            if (collaboratorRole.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(collaboratorRole, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessComments.Count<Comment>() - 1; index >= 0; --index)
          {
            Comment businessComment = _dataSet.BusinessComments.ToList()[index];
            if (businessComment.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(businessComment, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessDepartments.Count<Department>() - 1; index >= 0; --index)
          {
            Department businessDepartment = _dataSet.BusinessDepartments.ToList()[index];
            if (businessDepartment.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(businessDepartment, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessDocuments.Count<Document>() - 1; index >= 0; --index)
          {
            Document businessDocument = _dataSet.BusinessDocuments.ToList()[index];
            if (businessDocument.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(businessDocument, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessFollows.Count<Follow>() - 1; index >= 0; --index)
          {
            Follow businessFollow = _dataSet.BusinessFollows.ToList()[index];
            if (businessFollow.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(businessFollow, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessIdeas.Count<Idea>() - 1; index >= 0; --index)
          {
            Idea businessIdea = _dataSet.BusinessIdeas.ToList()[index];
            if (businessIdea.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(businessIdea, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessIdeaApplicationVersions.Count<IdeaApplicationVersion>() - 1; index >= 0; --index)
          {
            IdeaApplicationVersion applicationVersion = _dataSet.BusinessIdeaApplicationVersions.ToList()[index];
            if (applicationVersion.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(applicationVersion, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessIdeaOtherRunningCosts.Count<IdeaOtherRunningCost>() - 1; index >= 0; --index)
          {
            IdeaOtherRunningCost otherRunningCost = _dataSet.BusinessIdeaOtherRunningCosts.ToList()[index];
            if (otherRunningCost.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(otherRunningCost, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessIdeaRunningCosts.Count<IdeaRunningCost>() - 1; index >= 0; --index)
          {
            IdeaRunningCost businessIdeaRunningCost = _dataSet.BusinessIdeaRunningCosts.ToList()[index];
            if (businessIdeaRunningCost.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(businessIdeaRunningCost, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessIdeaStages.Count<IdeaStage>() - 1; index >= 0; --index)
          {
            IdeaStage businessIdeaStage = _dataSet.BusinessIdeaStages.ToList()[index];
            if (businessIdeaStage.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(businessIdeaStage, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessIdeaStageStatuses.Count<IdeaStageStatus>() - 1; index >= 0; --index)
          {
            IdeaStageStatus ideaStageStatuse = _dataSet.BusinessIdeaStageStatuses.ToList()[index];
            if (ideaStageStatuse.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(ideaStageStatuse, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessImplementationCosts.Count<ImplementationCost>() - 1; index >= 0; --index)
          {
            ImplementationCost implementationCost = _dataSet.BusinessImplementationCosts.ToList()[index];
            if (implementationCost.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(implementationCost, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessLocations.Count<Location>() - 1; index >= 0; --index)
          {
            Location businessLocation = _dataSet.BusinessLocations.ToList()[index];
            if (businessLocation.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(businessLocation, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessOtherRunningCosts.Count<OtherRunningCost>() - 1; index >= 0; --index)
          {
            OtherRunningCost otherRunningCost = _dataSet.BusinessOtherRunningCosts.ToList()[index];
            if (otherRunningCost.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(otherRunningCost, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessProcesses.Count<Process>() - 1; index >= 0; --index)
          {
            Process businessProcess = _dataSet.BusinessProcesses.ToList()[index];
            if (businessProcess.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(businessProcess, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessRecipients.Count<Recipient>() - 1; index >= 0; --index)
          {
            Recipient businessRecipient = _dataSet.BusinessRecipients.ToList()[index];
            if (businessRecipient.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(businessRecipient, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessRoles.Count<SilkFlo.Data.Core.Domain.Business.BusinessRole>() - 1; index >= 0; --index)
          {
            SilkFlo.Data.Core.Domain.Business.BusinessRole businessRole = _dataSet.BusinessRoles.ToList()[index];
            if (businessRole.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(businessRole, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessRoleCosts.Count<RoleCost>() - 1; index >= 0; --index)
          {
            RoleCost businessRoleCost = _dataSet.BusinessRoleCosts.ToList()[index];
            if (businessRoleCost.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(businessRoleCost, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessRoleIdeaAuthorisations.Count<RoleIdeaAuthorisation>() - 1; index >= 0; --index)
          {
            RoleIdeaAuthorisation ideaAuthorisation = _dataSet.BusinessRoleIdeaAuthorisations.ToList()[index];
            if (ideaAuthorisation.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(ideaAuthorisation, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessRunningCosts.Count<RunningCost>() - 1; index >= 0; --index)
          {
            RunningCost businessRunningCost = _dataSet.BusinessRunningCosts.ToList()[index];
            if (businessRunningCost.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(businessRunningCost, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessSoftwareVenders.Count<SoftwareVender>() - 1; index >= 0; --index)
          {
            SoftwareVender businessSoftwareVender = _dataSet.BusinessSoftwareVenders.ToList()[index];
            if (businessSoftwareVender.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(businessSoftwareVender, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessTeams.Count<Team>() - 1; index >= 0; --index)
          {
            Team businessTeam = _dataSet.BusinessTeams.ToList()[index];
            if (businessTeam.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(businessTeam, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessUserAuthorisations.Count<UserAuthorisation>() - 1; index >= 0; --index)
          {
            UserAuthorisation userAuthorisation = _dataSet.BusinessUserAuthorisations.ToList()[index];
            if (userAuthorisation.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(userAuthorisation, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessVersions.Count<SilkFlo.Data.Core.Domain.Business.Version>() - 1; index >= 0; --index)
          {
            SilkFlo.Data.Core.Domain.Business.Version businessVersion = _dataSet.BusinessVersions.ToList()[index];
            if (businessVersion.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(businessVersion, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.BusinessVotes.Count<Vote>() - 1; index >= 0; --index)
          {
            Vote businessVote = _dataSet.BusinessVotes.ToList()[index];
            if (businessVote.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(businessVote, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.CRMCompanySizes.Count<CompanySize>() - 1; index >= 0; --index)
          {
            CompanySize crmCompanySiz = _dataSet.CRMCompanySizes.ToList()[index];
            if (crmCompanySiz.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(crmCompanySiz, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.CRMJobLevels.Count<JobLevel>() - 1; index >= 0; --index)
          {
            JobLevel crmJobLevel = _dataSet.CRMJobLevels.ToList()[index];
            if (crmJobLevel.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(crmJobLevel, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.CRMProspects.Count<Prospect>() - 1; index >= 0; --index)
          {
            Prospect crmProspect = _dataSet.CRMProspects.ToList()[index];
            if (crmProspect.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(crmProspect, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedAchievements.Count<Achievement>() - 1; index >= 0; --index)
          {
            Achievement sharedAchievement = _dataSet.SharedAchievements.ToList()[index];
            if (sharedAchievement.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(sharedAchievement, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedApplicationStabilities.Count<ApplicationStability>() - 1; index >= 0; --index)
          {
            ApplicationStability applicationStability = _dataSet.SharedApplicationStabilities.ToList()[index];
            if (applicationStability.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(applicationStability, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedAutomationGoals.Count<AutomationGoal>() - 1; index >= 0; --index)
          {
            AutomationGoal sharedAutomationGoal = _dataSet.SharedAutomationGoals.ToList()[index];
            if (sharedAutomationGoal.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(sharedAutomationGoal, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedAutomationTypes.Count<AutomationType>() - 1; index >= 0; --index)
          {
            AutomationType sharedAutomationType = _dataSet.SharedAutomationTypes.ToList()[index];
            if (sharedAutomationType.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(sharedAutomationType, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedAverageNumberOfSteps.Count<AverageNumberOfStep>() - 1; index >= 0; --index)
          {
            AverageNumberOfStep averageNumberOfStep = _dataSet.SharedAverageNumberOfSteps.ToList()[index];
            if (averageNumberOfStep.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(averageNumberOfStep, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedBadges.Count<Badge>() - 1; index >= 0; --index)
          {
            Badge sharedBadge = _dataSet.SharedBadges.ToList()[index];
            if (sharedBadge.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(sharedBadge, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedClientTypes.Count<ClientType>() - 1; index >= 0; --index)
          {
            ClientType sharedClientType = _dataSet.SharedClientTypes.ToList()[index];
            if (sharedClientType.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(sharedClientType, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedCostTypes.Count<CostType>() - 1; index >= 0; --index)
          {
            CostType sharedCostType = _dataSet.SharedCostTypes.ToList()[index];
            if (sharedCostType.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(sharedCostType, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedCountries.Count<Country>() - 1; index >= 0; --index)
          {
            Country sharedCountry = _dataSet.SharedCountries.ToList()[index];
            if (sharedCountry.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(sharedCountry, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedDataInputPercentOfStructureds.Count<DataInputPercentOfStructured>() - 1; index >= 0; --index)
          {
            DataInputPercentOfStructured percentOfStructured = _dataSet.SharedDataInputPercentOfStructureds.ToList()[index];
            if (percentOfStructured.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(percentOfStructured, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedDecisionCounts.Count<DecisionCount>() - 1; index >= 0; --index)
          {
            DecisionCount sharedDecisionCount = _dataSet.SharedDecisionCounts.ToList()[index];
            if (sharedDecisionCount.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(sharedDecisionCount, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedDecisionDifficulties.Count<DecisionDifficulty>() - 1; index >= 0; --index)
          {
            DecisionDifficulty decisionDifficulty = _dataSet.SharedDecisionDifficulties.ToList()[index];
            if (decisionDifficulty.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(decisionDifficulty, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedDocumentationPresents.Count<DocumentationPresent>() - 1; index >= 0; --index)
          {
            DocumentationPresent documentationPresent = _dataSet.SharedDocumentationPresents.ToList()[index];
            if (documentationPresent.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(documentationPresent, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedIdeaAuthorisations.Count<IdeaAuthorisation>() - 1; index >= 0; --index)
          {
            IdeaAuthorisation ideaAuthorisation = _dataSet.SharedIdeaAuthorisations.ToList()[index];
            if (ideaAuthorisation.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(ideaAuthorisation, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedIdeaStatuses.Count<IdeaStatus>() - 1; index >= 0; --index)
          {
            IdeaStatus sharedIdeaStatuse = _dataSet.SharedIdeaStatuses.ToList()[index];
            if (sharedIdeaStatuse.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(sharedIdeaStatuse, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedIndustries.Count<Industry>() - 1; index >= 0; --index)
          {
            Industry sharedIndustry = _dataSet.SharedIndustries.ToList()[index];
            if (sharedIndustry.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(sharedIndustry, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedInputs.Count<Input>() - 1; index >= 0; --index)
          {
            Input sharedInput = _dataSet.SharedInputs.ToList()[index];
            if (sharedInput.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(sharedInput, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedInputDataStructures.Count<InputDataStructure>() - 1; index >= 0; --index)
          {
            InputDataStructure inputDataStructure = _dataSet.SharedInputDataStructures.ToList()[index];
            if (inputDataStructure.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(inputDataStructure, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedLanguages.Count<Language>() - 1; index >= 0; --index)
          {
            Language sharedLanguage = _dataSet.SharedLanguages.ToList()[index];
            if (sharedLanguage.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(sharedLanguage, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedNumberOfWaysToCompleteProcesses.Count<NumberOfWaysToCompleteProcess>() - 1; index >= 0; --index)
          {
            NumberOfWaysToCompleteProcess toCompleteProcess = _dataSet.SharedNumberOfWaysToCompleteProcesses.ToList()[index];
            if (toCompleteProcess.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(toCompleteProcess, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedPeriods.Count<Period>() - 1; index >= 0; --index)
          {
            Period sharedPeriod = _dataSet.SharedPeriods.ToList()[index];
            if (sharedPeriod.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(sharedPeriod, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedProcessPeaks.Count<ProcessPeak>() - 1; index >= 0; --index)
          {
            ProcessPeak sharedProcessPeak = _dataSet.SharedProcessPeaks.ToList()[index];
            if (sharedProcessPeak.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(sharedProcessPeak, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedProcessStabilities.Count<ProcessStability>() - 1; index >= 0; --index)
          {
            ProcessStability processStability = _dataSet.SharedProcessStabilities.ToList()[index];
            if (processStability.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(processStability, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedRules.Count<Rule>() - 1; index >= 0; --index)
          {
            Rule sharedRule = _dataSet.SharedRules.ToList()[index];
            if (sharedRule.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(sharedRule, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedStages.Count<Stage>() - 1; index >= 0; --index)
          {
            Stage sharedStage = _dataSet.SharedStages.ToList()[index];
            if (sharedStage.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(sharedStage, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedStageGroups.Count<StageGroup>() - 1; index >= 0; --index)
          {
            StageGroup sharedStageGroup = _dataSet.SharedStageGroups.ToList()[index];
            if (sharedStageGroup.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(sharedStageGroup, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedSubmissionPaths.Count<SubmissionPath>() - 1; index >= 0; --index)
          {
            SubmissionPath sharedSubmissionPath = _dataSet.SharedSubmissionPaths.ToList()[index];
            if (sharedSubmissionPath.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(sharedSubmissionPath, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.SharedTaskFrequencies.Count<TaskFrequency>() - 1; index >= 0; --index)
          {
            TaskFrequency sharedTaskFrequency = _dataSet.SharedTaskFrequencies.ToList()[index];
            if (sharedTaskFrequency.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(sharedTaskFrequency, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.ShopCoupons.Count<Coupon>() - 1; index >= 0; --index)
          {
            Coupon shopCoupon = _dataSet.ShopCoupons.ToList()[index];
            if (shopCoupon.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(shopCoupon, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.ShopCurrencies.Count<Currency>() - 1; index >= 0; --index)
          {
            Currency shopCurrency = _dataSet.ShopCurrencies.ToList()[index];
            if (shopCurrency.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(shopCurrency, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.ShopDiscounts.Count<Discount>() - 1; index >= 0; --index)
          {
            Discount shopDiscount = _dataSet.ShopDiscounts.ToList()[index];
            if (shopDiscount.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(shopDiscount, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.ShopPrices.Count<Price>() - 1; index >= 0; --index)
          {
            Price shopPrice = _dataSet.ShopPrices.ToList()[index];
            if (shopPrice.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(shopPrice, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.ShopProducts.Count<Product>() - 1; index >= 0; --index)
          {
            Product shopProduct = _dataSet.ShopProducts.ToList()[index];
            if (shopProduct.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(shopProduct, transaction);
          }
        }
        if (dataStoreResult2 == DataStoreResult.Success)
        {
          for (int index = _dataSet.ShopSubscriptions.Count<Subscription>() - 1; index >= 0; --index)
          {
            Subscription shopSubscription = _dataSet.ShopSubscriptions.ToList()[index];
            if (shopSubscription.CreatedById == owner.Id)
              dataStoreResult2 = this.Delete(shopSubscription, transaction);
          }
        }
        dataStoreResult1 = dataStoreResult2;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    private async Task<DataStoreResult> DeleteCreatedByAsync(Transaction transaction, User owner)
    {
      DataStoreResult dataStoreResult1;
      try
      {
        DataStoreResult dataStoreResult = DataStoreResult.Success;
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.Users.Count<User>() - 1; i >= 0; --i)
          {
            User user = _dataSet.Users.ToList()[i];
            if (user.CreatedById == owner.Id && user.Id != owner.Id)
              dataStoreResult = await this.DeleteAsync(user, transaction);
            user = (User) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.Analytics.Count<Analytic>() - 1; i >= 0; --i)
          {
            Analytic analytic = _dataSet.Analytics.ToList()[i];
            if (analytic.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(analytic, transaction);
            analytic = (Analytic) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.Logs.Count<SilkFlo.Data.Core.Domain.Log>() - 1; i >= 0; --i)
          {
            SilkFlo.Data.Core.Domain.Log log = _dataSet.Logs.ToList()[i];
            if (log.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(log, transaction);
            log = (SilkFlo.Data.Core.Domain.Log) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.Messages.Count<Message>() - 1; i >= 0; --i)
          {
            Message message = _dataSet.Messages.ToList()[i];
            if (message.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(message, transaction);
            message = (Message) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.Roles.Count<SilkFlo.Data.Core.Domain.Role>() - 1; i >= 0; --i)
          {
            SilkFlo.Data.Core.Domain.Role role = _dataSet.Roles.ToList()[i];
            if (role.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(role, transaction);
            role = (SilkFlo.Data.Core.Domain.Role) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.UserAchievements.Count<UserAchievement>() - 1; i >= 0; --i)
          {
            UserAchievement userAchievement = _dataSet.UserAchievements.ToList()[i];
            if (userAchievement.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(userAchievement, transaction);
            userAchievement = (UserAchievement) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.UserBadges.Count<UserBadge>() - 1; i >= 0; --i)
          {
            UserBadge userBadge = _dataSet.UserBadges.ToList()[i];
            if (userBadge.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(userBadge, transaction);
            userBadge = (UserBadge) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.UserRoles.Count<UserRole>() - 1; i >= 0; --i)
          {
            UserRole userRole = _dataSet.UserRoles.ToList()[i];
            if (userRole.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(userRole, transaction);
            userRole = (UserRole) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.WebHookLogs.Count<WebHookLog>() - 1; i >= 0; --i)
          {
            WebHookLog webHookLog = _dataSet.WebHookLogs.ToList()[i];
            if (webHookLog.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(webHookLog, transaction);
            webHookLog = (WebHookLog) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.AgencyManageTenants.Count<ManageTenant>() - 1; i >= 0; --i)
          {
            ManageTenant manageTenant = _dataSet.AgencyManageTenants.ToList()[i];
            if (manageTenant.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(manageTenant, transaction);
            manageTenant = (ManageTenant) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.ApplicationHotSpots.Count<HotSpot>() - 1; i >= 0; --i)
          {
            HotSpot hotSpot = _dataSet.ApplicationHotSpots.ToList()[i];
            if (hotSpot.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(hotSpot, transaction);
            hotSpot = (HotSpot) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.ApplicationPages.Count<Page>() - 1; i >= 0; --i)
          {
            Page page = _dataSet.ApplicationPages.ToList()[i];
            if (page.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(page, transaction);
            page = (Page) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.ApplicationSettings.Count<Setting>() - 1; i >= 0; --i)
          {
            Setting setting = _dataSet.ApplicationSettings.ToList()[i];
            if (setting.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(setting, transaction);
            setting = (Setting) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessApplications.Count<SilkFlo.Data.Core.Domain.Business.Application>() - 1; i >= 0; --i)
          {
            SilkFlo.Data.Core.Domain.Business.Application application = _dataSet.BusinessApplications.ToList()[i];
            if (application.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(application, transaction);
            application = (SilkFlo.Data.Core.Domain.Business.Application) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessClients.Count<Client>() - 1; i >= 0; --i)
          {
            Client client = _dataSet.BusinessClients.ToList()[i];
            if (client.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(client, transaction);
            client = (Client) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessCollaborators.Count<Collaborator>() - 1; i >= 0; --i)
          {
            Collaborator collaborator = _dataSet.BusinessCollaborators.ToList()[i];
            if (collaborator.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(collaborator, transaction);
            collaborator = (Collaborator) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessCollaboratorRoles.Count<CollaboratorRole>() - 1; i >= 0; --i)
          {
            CollaboratorRole collaboratorRole = _dataSet.BusinessCollaboratorRoles.ToList()[i];
            if (collaboratorRole.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(collaboratorRole, transaction);
            collaboratorRole = (CollaboratorRole) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessComments.Count<Comment>() - 1; i >= 0; --i)
          {
            Comment comment = _dataSet.BusinessComments.ToList()[i];
            if (comment.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(comment, transaction);
            comment = (Comment) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessDepartments.Count<Department>() - 1; i >= 0; --i)
          {
            Department department = _dataSet.BusinessDepartments.ToList()[i];
            if (department.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(department, transaction);
            department = (Department) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessDocuments.Count<Document>() - 1; i >= 0; --i)
          {
            Document document = _dataSet.BusinessDocuments.ToList()[i];
            if (document.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(document, transaction);
            document = (Document) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessFollows.Count<Follow>() - 1; i >= 0; --i)
          {
            Follow follow = _dataSet.BusinessFollows.ToList()[i];
            if (follow.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(follow, transaction);
            follow = (Follow) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessIdeas.Count<Idea>() - 1; i >= 0; --i)
          {
            Idea idea = _dataSet.BusinessIdeas.ToList()[i];
            if (idea.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(idea, transaction);
            idea = (Idea) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessIdeaApplicationVersions.Count<IdeaApplicationVersion>() - 1; i >= 0; --i)
          {
            IdeaApplicationVersion ideaApplicationVersion = _dataSet.BusinessIdeaApplicationVersions.ToList()[i];
            if (ideaApplicationVersion.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(ideaApplicationVersion, transaction);
            ideaApplicationVersion = (IdeaApplicationVersion) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessIdeaOtherRunningCosts.Count<IdeaOtherRunningCost>() - 1; i >= 0; --i)
          {
            IdeaOtherRunningCost ideaOtherRunningCost = _dataSet.BusinessIdeaOtherRunningCosts.ToList()[i];
            if (ideaOtherRunningCost.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(ideaOtherRunningCost, transaction);
            ideaOtherRunningCost = (IdeaOtherRunningCost) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessIdeaRunningCosts.Count<IdeaRunningCost>() - 1; i >= 0; --i)
          {
            IdeaRunningCost ideaRunningCost = _dataSet.BusinessIdeaRunningCosts.ToList()[i];
            if (ideaRunningCost.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(ideaRunningCost, transaction);
            ideaRunningCost = (IdeaRunningCost) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessIdeaStages.Count<IdeaStage>() - 1; i >= 0; --i)
          {
            IdeaStage ideaStage = _dataSet.BusinessIdeaStages.ToList()[i];
            if (ideaStage.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(ideaStage, transaction);
            ideaStage = (IdeaStage) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessIdeaStageStatuses.Count<IdeaStageStatus>() - 1; i >= 0; --i)
          {
            IdeaStageStatus ideaStageStatus = _dataSet.BusinessIdeaStageStatuses.ToList()[i];
            if (ideaStageStatus.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(ideaStageStatus, transaction);
            ideaStageStatus = (IdeaStageStatus) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessImplementationCosts.Count<ImplementationCost>() - 1; i >= 0; --i)
          {
            ImplementationCost implementationCost = _dataSet.BusinessImplementationCosts.ToList()[i];
            if (implementationCost.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(implementationCost, transaction);
            implementationCost = (ImplementationCost) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessLocations.Count<Location>() - 1; i >= 0; --i)
          {
            Location location = _dataSet.BusinessLocations.ToList()[i];
            if (location.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(location, transaction);
            location = (Location) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessOtherRunningCosts.Count<OtherRunningCost>() - 1; i >= 0; --i)
          {
            OtherRunningCost otherRunningCost = _dataSet.BusinessOtherRunningCosts.ToList()[i];
            if (otherRunningCost.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(otherRunningCost, transaction);
            otherRunningCost = (OtherRunningCost) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessProcesses.Count<Process>() - 1; i >= 0; --i)
          {
            Process process = _dataSet.BusinessProcesses.ToList()[i];
            if (process.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(process, transaction);
            process = (Process) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessRecipients.Count<Recipient>() - 1; i >= 0; --i)
          {
            Recipient recipient = _dataSet.BusinessRecipients.ToList()[i];
            if (recipient.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(recipient, transaction);
            recipient = (Recipient) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessRoles.Count<SilkFlo.Data.Core.Domain.Business.BusinessRole>() - 1; i >= 0; --i)
          {
            SilkFlo.Data.Core.Domain.Business.BusinessRole role = _dataSet.BusinessRoles.ToList()[i];
            if (role.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(role, transaction);
            role = (SilkFlo.Data.Core.Domain.Business.BusinessRole) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessRoleCosts.Count<RoleCost>() - 1; i >= 0; --i)
          {
            RoleCost roleCost = _dataSet.BusinessRoleCosts.ToList()[i];
            if (roleCost.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(roleCost, transaction);
            roleCost = (RoleCost) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessRoleIdeaAuthorisations.Count<RoleIdeaAuthorisation>() - 1; i >= 0; --i)
          {
            RoleIdeaAuthorisation roleIdeaAuthorisation = _dataSet.BusinessRoleIdeaAuthorisations.ToList()[i];
            if (roleIdeaAuthorisation.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(roleIdeaAuthorisation, transaction);
            roleIdeaAuthorisation = (RoleIdeaAuthorisation) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessRunningCosts.Count<RunningCost>() - 1; i >= 0; --i)
          {
            RunningCost runningCost = _dataSet.BusinessRunningCosts.ToList()[i];
            if (runningCost.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(runningCost, transaction);
            runningCost = (RunningCost) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessSoftwareVenders.Count<SoftwareVender>() - 1; i >= 0; --i)
          {
            SoftwareVender softwareVender = _dataSet.BusinessSoftwareVenders.ToList()[i];
            if (softwareVender.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(softwareVender, transaction);
            softwareVender = (SoftwareVender) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessTeams.Count<Team>() - 1; i >= 0; --i)
          {
            Team team = _dataSet.BusinessTeams.ToList()[i];
            if (team.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(team, transaction);
            team = (Team) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessUserAuthorisations.Count<UserAuthorisation>() - 1; i >= 0; --i)
          {
            UserAuthorisation userAuthorisation = _dataSet.BusinessUserAuthorisations.ToList()[i];
            if (userAuthorisation.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(userAuthorisation, transaction);
            userAuthorisation = (UserAuthorisation) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessVersions.Count<SilkFlo.Data.Core.Domain.Business.Version>() - 1; i >= 0; --i)
          {
            SilkFlo.Data.Core.Domain.Business.Version version = _dataSet.BusinessVersions.ToList()[i];
            if (version.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(version, transaction);
            version = (SilkFlo.Data.Core.Domain.Business.Version) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.BusinessVotes.Count<Vote>() - 1; i >= 0; --i)
          {
            Vote vote = _dataSet.BusinessVotes.ToList()[i];
            if (vote.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(vote, transaction);
            vote = (Vote) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.CRMCompanySizes.Count<CompanySize>() - 1; i >= 0; --i)
          {
            CompanySize companySize = _dataSet.CRMCompanySizes.ToList()[i];
            if (companySize.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(companySize, transaction);
            companySize = (CompanySize) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.CRMJobLevels.Count<JobLevel>() - 1; i >= 0; --i)
          {
            JobLevel jobLevel = _dataSet.CRMJobLevels.ToList()[i];
            if (jobLevel.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(jobLevel, transaction);
            jobLevel = (JobLevel) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.CRMProspects.Count<Prospect>() - 1; i >= 0; --i)
          {
            Prospect prospect = _dataSet.CRMProspects.ToList()[i];
            if (prospect.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(prospect, transaction);
            prospect = (Prospect) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedAchievements.Count<Achievement>() - 1; i >= 0; --i)
          {
            Achievement achievement = _dataSet.SharedAchievements.ToList()[i];
            if (achievement.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(achievement, transaction);
            achievement = (Achievement) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedApplicationStabilities.Count<ApplicationStability>() - 1; i >= 0; --i)
          {
            ApplicationStability applicationStability = _dataSet.SharedApplicationStabilities.ToList()[i];
            if (applicationStability.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(applicationStability, transaction);
            applicationStability = (ApplicationStability) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedAutomationGoals.Count<AutomationGoal>() - 1; i >= 0; --i)
          {
            AutomationGoal automationGoal = _dataSet.SharedAutomationGoals.ToList()[i];
            if (automationGoal.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(automationGoal, transaction);
            automationGoal = (AutomationGoal) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedAutomationTypes.Count<AutomationType>() - 1; i >= 0; --i)
          {
            AutomationType automationType = _dataSet.SharedAutomationTypes.ToList()[i];
            if (automationType.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(automationType, transaction);
            automationType = (AutomationType) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedAverageNumberOfSteps.Count<AverageNumberOfStep>() - 1; i >= 0; --i)
          {
            AverageNumberOfStep averageNumberOfStep = _dataSet.SharedAverageNumberOfSteps.ToList()[i];
            if (averageNumberOfStep.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(averageNumberOfStep, transaction);
            averageNumberOfStep = (AverageNumberOfStep) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedBadges.Count<Badge>() - 1; i >= 0; --i)
          {
            Badge badge = _dataSet.SharedBadges.ToList()[i];
            if (badge.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(badge, transaction);
            badge = (Badge) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedClientTypes.Count<ClientType>() - 1; i >= 0; --i)
          {
            ClientType clientType = _dataSet.SharedClientTypes.ToList()[i];
            if (clientType.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(clientType, transaction);
            clientType = (ClientType) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedCostTypes.Count<CostType>() - 1; i >= 0; --i)
          {
            CostType costType = _dataSet.SharedCostTypes.ToList()[i];
            if (costType.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(costType, transaction);
            costType = (CostType) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedCountries.Count<Country>() - 1; i >= 0; --i)
          {
            Country country = _dataSet.SharedCountries.ToList()[i];
            if (country.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(country, transaction);
            country = (Country) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedDataInputPercentOfStructureds.Count<DataInputPercentOfStructured>() - 1; i >= 0; --i)
          {
            DataInputPercentOfStructured dataInputPercentOfStructured = _dataSet.SharedDataInputPercentOfStructureds.ToList()[i];
            if (dataInputPercentOfStructured.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(dataInputPercentOfStructured, transaction);
            dataInputPercentOfStructured = (DataInputPercentOfStructured) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedDecisionCounts.Count<DecisionCount>() - 1; i >= 0; --i)
          {
            DecisionCount decisionCount = _dataSet.SharedDecisionCounts.ToList()[i];
            if (decisionCount.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(decisionCount, transaction);
            decisionCount = (DecisionCount) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedDecisionDifficulties.Count<DecisionDifficulty>() - 1; i >= 0; --i)
          {
            DecisionDifficulty decisionDifficulty = _dataSet.SharedDecisionDifficulties.ToList()[i];
            if (decisionDifficulty.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(decisionDifficulty, transaction);
            decisionDifficulty = (DecisionDifficulty) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedDocumentationPresents.Count<DocumentationPresent>() - 1; i >= 0; --i)
          {
            DocumentationPresent documentationPresent = _dataSet.SharedDocumentationPresents.ToList()[i];
            if (documentationPresent.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(documentationPresent, transaction);
            documentationPresent = (DocumentationPresent) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedIdeaAuthorisations.Count<IdeaAuthorisation>() - 1; i >= 0; --i)
          {
            IdeaAuthorisation ideaAuthorisation = _dataSet.SharedIdeaAuthorisations.ToList()[i];
            if (ideaAuthorisation.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(ideaAuthorisation, transaction);
            ideaAuthorisation = (IdeaAuthorisation) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedIdeaStatuses.Count<IdeaStatus>() - 1; i >= 0; --i)
          {
            IdeaStatus ideaStatus = _dataSet.SharedIdeaStatuses.ToList()[i];
            if (ideaStatus.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(ideaStatus, transaction);
            ideaStatus = (IdeaStatus) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedIndustries.Count<Industry>() - 1; i >= 0; --i)
          {
            Industry industry = _dataSet.SharedIndustries.ToList()[i];
            if (industry.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(industry, transaction);
            industry = (Industry) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedInputs.Count<Input>() - 1; i >= 0; --i)
          {
            Input input = _dataSet.SharedInputs.ToList()[i];
            if (input.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(input, transaction);
            input = (Input) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedInputDataStructures.Count<InputDataStructure>() - 1; i >= 0; --i)
          {
            InputDataStructure inputDataStructure = _dataSet.SharedInputDataStructures.ToList()[i];
            if (inputDataStructure.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(inputDataStructure, transaction);
            inputDataStructure = (InputDataStructure) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedLanguages.Count<Language>() - 1; i >= 0; --i)
          {
            Language language = _dataSet.SharedLanguages.ToList()[i];
            if (language.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(language, transaction);
            language = (Language) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedNumberOfWaysToCompleteProcesses.Count<NumberOfWaysToCompleteProcess>() - 1; i >= 0; --i)
          {
            NumberOfWaysToCompleteProcess numberOfWaysToCompleteProcess = _dataSet.SharedNumberOfWaysToCompleteProcesses.ToList()[i];
            if (numberOfWaysToCompleteProcess.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(numberOfWaysToCompleteProcess, transaction);
            numberOfWaysToCompleteProcess = (NumberOfWaysToCompleteProcess) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedPeriods.Count<Period>() - 1; i >= 0; --i)
          {
            Period period = _dataSet.SharedPeriods.ToList()[i];
            if (period.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(period, transaction);
            period = (Period) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedProcessPeaks.Count<ProcessPeak>() - 1; i >= 0; --i)
          {
            ProcessPeak processPeak = _dataSet.SharedProcessPeaks.ToList()[i];
            if (processPeak.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(processPeak, transaction);
            processPeak = (ProcessPeak) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedProcessStabilities.Count<ProcessStability>() - 1; i >= 0; --i)
          {
            ProcessStability processStability = _dataSet.SharedProcessStabilities.ToList()[i];
            if (processStability.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(processStability, transaction);
            processStability = (ProcessStability) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedRules.Count<Rule>() - 1; i >= 0; --i)
          {
            Rule rule = _dataSet.SharedRules.ToList()[i];
            if (rule.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(rule, transaction);
            rule = (Rule) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedStages.Count<Stage>() - 1; i >= 0; --i)
          {
            Stage stage = _dataSet.SharedStages.ToList()[i];
            if (stage.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(stage, transaction);
            stage = (Stage) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedStageGroups.Count<StageGroup>() - 1; i >= 0; --i)
          {
            StageGroup stageGroup = _dataSet.SharedStageGroups.ToList()[i];
            if (stageGroup.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(stageGroup, transaction);
            stageGroup = (StageGroup) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedSubmissionPaths.Count<SubmissionPath>() - 1; i >= 0; --i)
          {
            SubmissionPath submissionPath = _dataSet.SharedSubmissionPaths.ToList()[i];
            if (submissionPath.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(submissionPath, transaction);
            submissionPath = (SubmissionPath) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.SharedTaskFrequencies.Count<TaskFrequency>() - 1; i >= 0; --i)
          {
            TaskFrequency taskFrequency = _dataSet.SharedTaskFrequencies.ToList()[i];
            if (taskFrequency.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(taskFrequency, transaction);
            taskFrequency = (TaskFrequency) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.ShopCoupons.Count<Coupon>() - 1; i >= 0; --i)
          {
            Coupon coupon = _dataSet.ShopCoupons.ToList()[i];
            if (coupon.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(coupon, transaction);
            coupon = (Coupon) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.ShopCurrencies.Count<Currency>() - 1; i >= 0; --i)
          {
            Currency currency = _dataSet.ShopCurrencies.ToList()[i];
            if (currency.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(currency, transaction);
            currency = (Currency) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.ShopDiscounts.Count<Discount>() - 1; i >= 0; --i)
          {
            Discount discount = _dataSet.ShopDiscounts.ToList()[i];
            if (discount.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(discount, transaction);
            discount = (Discount) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.ShopPrices.Count<Price>() - 1; i >= 0; --i)
          {
            Price price = _dataSet.ShopPrices.ToList()[i];
            if (price.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(price, transaction);
            price = (Price) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.ShopProducts.Count<Product>() - 1; i >= 0; --i)
          {
            Product product = _dataSet.ShopProducts.ToList()[i];
            if (product.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(product, transaction);
            product = (Product) null;
          }
        }
        if (dataStoreResult == DataStoreResult.Success)
        {
          for (int i = _dataSet.ShopSubscriptions.Count<Subscription>() - 1; i >= 0; --i)
          {
            Subscription subscription = _dataSet.ShopSubscriptions.ToList()[i];
            if (subscription.CreatedById == owner.Id)
              dataStoreResult = await this.DeleteAsync(subscription, transaction);
            subscription = (Subscription) null;
          }
        }
        dataStoreResult1 = dataStoreResult;
      }
      catch
      {
        throw;
      }
      return dataStoreResult1;
    }

    public void Dispose()
    {
           // _dataSet.Dispose();
    }
  }
}
